{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNonCryptographicHashBasedIdentifier = void 0;\n/**\n * This function hashes its input with a NON cryptographic.\n *\n * This function is useful for creating unique identifiers based on some\n * input. You can be confident that there won't be any collision, as long\n * as the input is not generated by an attacker.\n *\n * The exact algorithm being used shouldn't matter.\n */\nfunction createNonCryptographicHashBasedIdentifier(input) {\n  const {\n    createHash\n  } = require(\"crypto\");\n  return createHash(\"md5\").update(input).digest();\n}\nexports.createNonCryptographicHashBasedIdentifier = createNonCryptographicHashBasedIdentifier;","map":{"version":3,"names":["createNonCryptographicHashBasedIdentifier","input","createHash","require","update","digest","exports"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\util\\hash.ts"],"sourcesContent":["/**\n * This function hashes its input with a NON cryptographic.\n *\n * This function is useful for creating unique identifiers based on some\n * input. You can be confident that there won't be any collision, as long\n * as the input is not generated by an attacker.\n *\n * The exact algorithm being used shouldn't matter.\n */\nexport function createNonCryptographicHashBasedIdentifier(\n  input: Buffer\n): Buffer {\n  const { createHash } = require(\"crypto\");\n\n  return createHash(\"md5\").update(input).digest();\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;AASA,SAAgBA,yCAAyCA,CACvDC,KAAa;EAEb,MAAM;IAAEC;EAAU,CAAE,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAExC,OAAOD,UAAU,CAAC,KAAK,CAAC,CAACE,MAAM,CAACH,KAAK,CAAC,CAACI,MAAM,EAAE;AACjD;AANAC,OAAA,CAAAN,yCAAA,GAAAA,yCAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}