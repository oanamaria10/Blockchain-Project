{"ast":null,"code":"\"use strict\";\n\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.createBase58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64urlnopad = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;\n// Utilities\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction assertNumber(n) {\n  if (!Number.isSafeInteger(n)) throw new Error(`Wrong integer: ${n}`);\n}\nexports.assertNumber = assertNumber;\nfunction isBytes(a) {\n  return a instanceof Uint8Array || a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array';\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain(...args) {\n  const id = a => a;\n  // Wrap call in closure so JIT can inline calls\n  const wrap = (a, b) => c => a(b(c));\n  // Construct chain of args[-1].encode(args[-2].encode([...]))\n  const encode = args.map(x => x.encode).reduceRight(wrap, id);\n  // Construct chain of args[0].decode(args[1].decode(...))\n  const decode = args.map(x => x.decode).reduce(wrap, id);\n  return {\n    encode,\n    decode\n  };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(alphabet) {\n  return {\n    encode: digits => {\n      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('alphabet.encode input should be an array of numbers');\n      return digits.map(i => {\n        assertNumber(i);\n        if (i < 0 || i >= alphabet.length) throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n        return alphabet[i];\n      });\n    },\n    decode: input => {\n      if (!Array.isArray(input) || input.length && typeof input[0] !== 'string') throw new Error('alphabet.decode input should be array of strings');\n      return input.map(letter => {\n        if (typeof letter !== 'string') throw new Error(`alphabet.decode: not string element=${letter}`);\n        const index = alphabet.indexOf(letter);\n        if (index === -1) throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n        return index;\n      });\n    }\n  };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = '') {\n  if (typeof separator !== 'string') throw new Error('join separator should be string');\n  return {\n    encode: from => {\n      if (!Array.isArray(from) || from.length && typeof from[0] !== 'string') throw new Error('join.encode input should be array of strings');\n      for (let i of from) if (typeof i !== 'string') throw new Error(`join.encode: non-string input=${i}`);\n      return from.join(separator);\n    },\n    decode: to => {\n      if (typeof to !== 'string') throw new Error('join.decode input should be string');\n      return to.split(separator);\n    }\n  };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits, chr = '=') {\n  assertNumber(bits);\n  if (typeof chr !== 'string') throw new Error('padding chr should be string');\n  return {\n    encode(data) {\n      if (!Array.isArray(data) || data.length && typeof data[0] !== 'string') throw new Error('padding.encode input should be array of strings');\n      for (let i of data) if (typeof i !== 'string') throw new Error(`padding.encode: non-string input=${i}`);\n      while (data.length * bits % 8) data.push(chr);\n      return data;\n    },\n    decode(input) {\n      if (!Array.isArray(input) || input.length && typeof input[0] !== 'string') throw new Error('padding.encode input should be array of strings');\n      for (let i of input) if (typeof i !== 'string') throw new Error(`padding.decode: non-string input=${i}`);\n      let end = input.length;\n      if (end * bits % 8) throw new Error('Invalid padding: string should have whole number of bytes');\n      for (; end > 0 && input[end - 1] === chr; end--) {\n        if (!((end - 1) * bits % 8)) throw new Error('Invalid padding: string has too much padding');\n      }\n      return input.slice(0, end);\n    }\n  };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize(fn) {\n  if (typeof fn !== 'function') throw new Error('normalize fn should be function');\n  return {\n    encode: from => from,\n    decode: to => fn(to)\n  };\n}\n/**\n * Slow: O(n^2) time complexity\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix(data, from, to) {\n  // base 1 is impossible\n  if (from < 2) throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n  if (to < 2) throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n  if (!Array.isArray(data)) throw new Error('convertRadix: data should be array');\n  if (!data.length) return [];\n  let pos = 0;\n  const res = [];\n  const digits = Array.from(data);\n  digits.forEach(d => {\n    assertNumber(d);\n    if (d < 0 || d >= from) throw new Error(`Wrong integer: ${d}`);\n  });\n  while (true) {\n    let carry = 0;\n    let done = true;\n    for (let i = pos; i < digits.length; i++) {\n      const digit = digits[i];\n      const digitBase = from * carry + digit;\n      if (!Number.isSafeInteger(digitBase) || from * carry / from !== carry || digitBase - digit !== from * carry) {\n        throw new Error('convertRadix: carry overflow');\n      }\n      carry = digitBase % to;\n      const rounded = Math.floor(digitBase / to);\n      digits[i] = rounded;\n      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase) throw new Error('convertRadix: carry overflow');\n      if (!done) continue;else if (!rounded) pos = i;else done = false;\n    }\n    res.push(carry);\n    if (done) break;\n  }\n  for (let i = 0; i < data.length - 1 && data[i] === 0; i++) res.push(0);\n  return res.reverse();\n}\nconst gcd = /* @__NO_SIDE_EFFECTS__ */(a, b) => !b ? a : gcd(b, a % b);\nconst radix2carry = /*@__NO_SIDE_EFFECTS__ */(from, to) => from + (to - gcd(from, to));\n/**\n * Implemented with numbers, because BigInt is 5x slower\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix2(data, from, to, padding) {\n  if (!Array.isArray(data)) throw new Error('convertRadix2: data should be array');\n  if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);\n  if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);\n  if (radix2carry(from, to) > 32) {\n    throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n  }\n  let carry = 0;\n  let pos = 0; // bitwise position in current element\n  const mask = 2 ** to - 1;\n  const res = [];\n  for (const n of data) {\n    assertNumber(n);\n    if (n >= 2 ** from) throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n    carry = carry << from | n;\n    if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n    pos += from;\n    for (; pos >= to; pos -= to) res.push((carry >> pos - to & mask) >>> 0);\n    carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow\n  }\n  carry = carry << to - pos & mask;\n  if (!padding && pos >= from) throw new Error('Excess padding');\n  if (!padding && carry) throw new Error(`Non-zero padding: ${carry}`);\n  if (padding && pos > 0) res.push(carry >>> 0);\n  return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n  assertNumber(num);\n  return {\n    encode: bytes => {\n      if (!isBytes(bytes)) throw new Error('radix.encode input should be Uint8Array');\n      return convertRadix(Array.from(bytes), 2 ** 8, num);\n    },\n    decode: digits => {\n      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('radix.decode input should be array of numbers');\n      return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n    }\n  };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits, revPadding = false) {\n  assertNumber(bits);\n  if (bits <= 0 || bits > 32) throw new Error('radix2: bits should be in (0..32]');\n  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32) throw new Error('radix2: carry overflow');\n  return {\n    encode: bytes => {\n      if (!isBytes(bytes)) throw new Error('radix2.encode input should be Uint8Array');\n      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n    },\n    decode: digits => {\n      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('radix2.decode input should be array of numbers');\n      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n    }\n  };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction unsafeWrapper(fn) {\n  if (typeof fn !== 'function') throw new Error('unsafeWrapper fn should be function');\n  return function (...args) {\n    try {\n      return fn.apply(null, args);\n    } catch (e) {}\n  };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction checksum(len, fn) {\n  assertNumber(len);\n  if (typeof fn !== 'function') throw new Error('checksum fn should be function');\n  return {\n    encode(data) {\n      if (!isBytes(data)) throw new Error('checksum.encode: input should be Uint8Array');\n      const checksum = fn(data).slice(0, len);\n      const res = new Uint8Array(data.length + len);\n      res.set(data);\n      res.set(checksum, data.length);\n      return res;\n    },\n    decode(data) {\n      if (!isBytes(data)) throw new Error('checksum.decode: input should be Uint8Array');\n      const payload = data.slice(0, -len);\n      const newChecksum = fn(payload).slice(0, len);\n      const oldChecksum = data.slice(-len);\n      for (let i = 0; i < len; i++) if (newChecksum[i] !== oldChecksum[i]) throw new Error('Invalid checksum');\n      return payload;\n    }\n  };\n}\n// prettier-ignore\nexports.utils = {\n  alphabet,\n  chain,\n  checksum,\n  convertRadix,\n  convertRadix2,\n  radix,\n  radix2,\n  join,\n  padding\n};\n// RFC 4648 aka RFC 3548\n// ---------------------\nexports.base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexports.base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexports.base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexports.base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize(s => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexports.base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexports.base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nexports.base64urlnopad = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\n// base58 code\n// -----------\nconst genBase58 = abc => chain(radix(58), alphabet(abc), join(''));\nexports.base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexports.base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexports.base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\n// xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n// Block encoding significantly reduces quadratic complexity of base58.\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexports.base58xmr = {\n  encode(data) {\n    let res = '';\n    for (let i = 0; i < data.length; i += 8) {\n      const block = data.subarray(i, i + 8);\n      res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n    }\n    return res;\n  },\n  decode(str) {\n    let res = [];\n    for (let i = 0; i < str.length; i += 11) {\n      const slice = str.slice(i, i + 11);\n      const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n      const block = exports.base58.decode(slice);\n      for (let j = 0; j < block.length - blockLen; j++) {\n        if (block[j] !== 0) throw new Error('base58xmr: wrong padding');\n      }\n      res = res.concat(Array.from(block.slice(block.length - blockLen)));\n    }\n    return Uint8Array.from(res);\n  }\n};\nconst createBase58check = sha256 => chain(checksum(4, data => sha256(sha256(data))), exports.base58);\nexports.createBase58check = createBase58check;\n// legacy export, bad name\nexports.base58check = exports.createBase58check;\nconst BECH_ALPHABET = /* @__PURE__ */chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bech32Polymod(pre) {\n  const b = pre >> 25;\n  let chk = (pre & 0x1ffffff) << 5;\n  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n    if ((b >> i & 1) === 1) chk ^= POLYMOD_GENERATORS[i];\n  }\n  return chk;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n  const len = prefix.length;\n  let chk = 1;\n  for (let i = 0; i < len; i++) {\n    const c = prefix.charCodeAt(i);\n    if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);\n    chk = bech32Polymod(chk) ^ c >> 5;\n  }\n  chk = bech32Polymod(chk);\n  for (let i = 0; i < len; i++) chk = bech32Polymod(chk) ^ prefix.charCodeAt(i) & 0x1f;\n  for (let v of words) chk = bech32Polymod(chk) ^ v;\n  for (let i = 0; i < 6; i++) chk = bech32Polymod(chk);\n  chk ^= encodingConst;\n  return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n  const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n  const _words = radix2(5);\n  const fromWords = _words.decode;\n  const toWords = _words.encode;\n  const fromWordsUnsafe = unsafeWrapper(fromWords);\n  function encode(prefix, words, limit = 90) {\n    if (typeof prefix !== 'string') throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n    if (!Array.isArray(words) || words.length && typeof words[0] !== 'number') throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n    const actualLength = prefix.length + 7 + words.length;\n    if (limit !== false && actualLength > limit) throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n    const lowered = prefix.toLowerCase();\n    const sum = bechChecksum(lowered, words, ENCODING_CONST);\n    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\n  }\n  function decode(str, limit = 90) {\n    if (typeof str !== 'string') throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n    if (str.length < 8 || limit !== false && str.length > limit) throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n    // don't allow mixed case\n    const lowered = str.toLowerCase();\n    if (str !== lowered && str !== str.toUpperCase()) throw new Error(`String must be lowercase or uppercase`);\n    str = lowered;\n    const sepIndex = str.lastIndexOf('1');\n    if (sepIndex === 0 || sepIndex === -1) throw new Error(`Letter \"1\" must be present between prefix and data only`);\n    const prefix = str.slice(0, sepIndex);\n    const _words = str.slice(sepIndex + 1);\n    if (_words.length < 6) throw new Error('Data must be at least 6 characters long');\n    const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n    const sum = bechChecksum(prefix, words, ENCODING_CONST);\n    if (!_words.endsWith(sum)) throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n    return {\n      prefix,\n      words\n    };\n  }\n  const decodeUnsafe = unsafeWrapper(decode);\n  function decodeToBytes(str) {\n    const {\n      prefix,\n      words\n    } = decode(str, false);\n    return {\n      prefix,\n      words,\n      bytes: fromWords(words)\n    };\n  }\n  return {\n    encode,\n    decode,\n    decodeToBytes,\n    decodeUnsafe,\n    fromWords,\n    fromWordsUnsafe,\n    toWords\n  };\n}\nexports.bech32 = genBech32('bech32');\nexports.bech32m = genBech32('bech32m');\nexports.utf8 = {\n  encode: data => new TextDecoder().decode(data),\n  decode: str => new TextEncoder().encode(str)\n};\nexports.hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize(s => {\n  if (typeof s !== 'string' || s.length % 2) throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n  return s.toLowerCase();\n}));\n// prettier-ignore\nconst CODERS = {\n  utf8: exports.utf8,\n  hex: exports.hex,\n  base16: exports.base16,\n  base32: exports.base32,\n  base64: exports.base64,\n  base64url: exports.base64url,\n  base58: exports.base58,\n  base58xmr: exports.base58xmr\n};\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\nconst bytesToString = (type, bytes) => {\n  if (typeof type !== 'string' || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (!isBytes(bytes)) throw new TypeError('bytesToString() expects Uint8Array');\n  return CODERS[type].encode(bytes);\n};\nexports.bytesToString = bytesToString;\nexports.str = exports.bytesToString; // as in python, but for bytes only\nconst stringToBytes = (type, str) => {\n  if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (typeof str !== 'string') throw new TypeError('stringToBytes() expects string');\n  return CODERS[type].decode(str);\n};\nexports.stringToBytes = stringToBytes;\nexports.bytes = exports.stringToBytes;","map":{"version":3,"names":["Object","defineProperty","exports","value","bytes","stringToBytes","str","bytesToString","hex","utf8","bech32m","bech32","base58check","createBase58check","base58xmr","base58xrp","base58flickr","base58","base64urlnopad","base64url","base64","base32crockford","base32hex","base32","base16","utils","assertNumber","n","Number","isSafeInteger","Error","isBytes","a","Uint8Array","constructor","name","chain","args","id","wrap","b","c","encode","map","x","reduceRight","decode","reduce","alphabet","digits","Array","isArray","length","i","input","letter","index","indexOf","join","separator","from","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","rounded","Math","floor","reverse","gcd","radix2carry","convertRadix2","mask","radix","num","radix2","revPadding","unsafeWrapper","apply","e","checksum","len","set","payload","newChecksum","oldChecksum","s","toUpperCase","replace","genBase58","abc","XMR_BLOCK_LEN","block","subarray","padStart","blockLen","j","concat","sha256","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","charCodeAt","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","lowered","toLowerCase","sum","sepIndex","lastIndexOf","endsWith","decodeUnsafe","decodeToBytes","TextDecoder","TextEncoder","CODERS","coderTypeError","type","hasOwnProperty"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/@scure/base/lib/index.js"],"sourcesContent":["\"use strict\";\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.createBase58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64urlnopad = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;\n// Utilities\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nexports.assertNumber = assertNumber;\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain(...args) {\n    const id = (a) => a;\n    // Wrap call in closure so JIT can inline calls\n    const wrap = (a, b) => (c) => a(b(c));\n    // Construct chain of args[-1].encode(args[-2].encode([...]))\n    const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n    // Construct chain of args[0].decode(args[1].decode(...))\n    const decode = args.map((x) => x.decode).reduce(wrap, id);\n    return { encode, decode };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\n/**\n * Slow: O(n^2) time complexity\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix(data, from, to) {\n    // base 1 is impossible\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            const rounded = Math.floor(digitBase / to);\n            digits[i] = rounded;\n            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!rounded)\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));\n/**\n * Implemented with numbers, because BigInt is 5x slower\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0; // bitwise position in current element\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\n// prettier-ignore\nexports.utils = {\n    alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n// RFC 4648 aka RFC 3548\n// ---------------------\nexports.base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexports.base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexports.base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexports.base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexports.base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexports.base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nexports.base64urlnopad = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\n// base58 code\n// -----------\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexports.base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexports.base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexports.base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\n// xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n// Block encoding significantly reduces quadratic complexity of base58.\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexports.base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = exports.base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nconst createBase58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), exports.base58);\nexports.createBase58check = createBase58check;\n// legacy export, bad name\nexports.base58check = exports.createBase58check;\nconst BECH_ALPHABET = /* @__PURE__ */ chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        const lowered = prefix.toLowerCase();\n        const sum = bechChecksum(lowered, words, ENCODING_CONST);\n        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexports.bech32 = genBech32('bech32');\nexports.bech32m = genBech32('bech32m');\nexports.utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexports.hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\n// prettier-ignore\nconst CODERS = {\n    utf8: exports.utf8, hex: exports.hex, base16: exports.base16, base32: exports.base32, base64: exports.base64, base64url: exports.base64url, base58: exports.base58, base58xmr: exports.base58xmr\n};\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\nconst bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!isBytes(bytes))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexports.bytesToString = bytesToString;\nexports.str = exports.bytesToString; // as in python, but for bytes only\nconst stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexports.stringToBytes = stringToBytes;\nexports.bytes = exports.stringToBytes;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}