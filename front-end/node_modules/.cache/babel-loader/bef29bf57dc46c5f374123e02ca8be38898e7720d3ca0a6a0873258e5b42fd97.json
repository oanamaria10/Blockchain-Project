{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\nconst path = require('path');\nconst mkdirpSync = require('../mkdirs').mkdirsSync;\nconst utimesSync = require('../util/utimes.js').utimesMillisSync;\nconst notExist = Symbol('notExist');\nfunction copySync(src, dest, opts) {\n  if (typeof opts === 'function') {\n    opts = {\n      filter: opts\n    };\n  }\n  opts = opts || {};\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true; // default to true for now\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber; // overwrite falls back to clobber\n\n  // Warn about using preserveTimestamps on 32-bit node\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269`);\n  }\n  const destStat = checkPaths(src, dest);\n  if (opts.filter && !opts.filter(src, dest)) return;\n  const destParent = path.dirname(dest);\n  if (!fs.existsSync(destParent)) mkdirpSync(destParent);\n  return startCopy(destStat, src, dest, opts);\n}\nfunction startCopy(destStat, src, dest, opts) {\n  if (opts.filter && !opts.filter(src, dest)) return;\n  return getStats(destStat, src, dest, opts);\n}\nfunction getStats(destStat, src, dest, opts) {\n  const statSync = opts.dereference ? fs.statSync : fs.lstatSync;\n  const srcStat = statSync(src);\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts);else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts);else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts);\n}\nfunction onFile(srcStat, destStat, src, dest, opts) {\n  if (destStat === notExist) return copyFile(srcStat, src, dest, opts);\n  return mayCopyFile(srcStat, src, dest, opts);\n}\nfunction mayCopyFile(srcStat, src, dest, opts) {\n  if (opts.overwrite) {\n    fs.unlinkSync(dest);\n    return copyFile(srcStat, src, dest, opts);\n  } else if (opts.errorOnExist) {\n    throw new Error(`'${dest}' already exists`);\n  }\n}\nfunction copyFile(srcStat, src, dest, opts) {\n  if (typeof fs.copyFileSync === 'function') {\n    fs.copyFileSync(src, dest);\n    fs.chmodSync(dest, srcStat.mode);\n    if (opts.preserveTimestamps) {\n      return utimesSync(dest, srcStat.atime, srcStat.mtime);\n    }\n    return;\n  }\n  return copyFileFallback(srcStat, src, dest, opts);\n}\nfunction copyFileFallback(srcStat, src, dest, opts) {\n  const BUF_LENGTH = 64 * 1024;\n  const _buff = require('../util/buffer')(BUF_LENGTH);\n  const fdr = fs.openSync(src, 'r');\n  const fdw = fs.openSync(dest, 'w', srcStat.mode);\n  let pos = 0;\n  while (pos < srcStat.size) {\n    const bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos);\n    fs.writeSync(fdw, _buff, 0, bytesRead);\n    pos += bytesRead;\n  }\n  if (opts.preserveTimestamps) fs.futimesSync(fdw, srcStat.atime, srcStat.mtime);\n  fs.closeSync(fdr);\n  fs.closeSync(fdw);\n}\nfunction onDir(srcStat, destStat, src, dest, opts) {\n  if (destStat === notExist) return mkDirAndCopy(srcStat, src, dest, opts);\n  if (destStat && !destStat.isDirectory()) {\n    throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);\n  }\n  return copyDir(src, dest, opts);\n}\nfunction mkDirAndCopy(srcStat, src, dest, opts) {\n  fs.mkdirSync(dest);\n  copyDir(src, dest, opts);\n  return fs.chmodSync(dest, srcStat.mode);\n}\nfunction copyDir(src, dest, opts) {\n  fs.readdirSync(src).forEach(item => copyDirItem(item, src, dest, opts));\n}\nfunction copyDirItem(item, src, dest, opts) {\n  const srcItem = path.join(src, item);\n  const destItem = path.join(dest, item);\n  const destStat = checkPaths(srcItem, destItem);\n  return startCopy(destStat, srcItem, destItem, opts);\n}\nfunction onLink(destStat, src, dest, opts) {\n  let resolvedSrc = fs.readlinkSync(src);\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc);\n  }\n  if (destStat === notExist) {\n    return fs.symlinkSync(resolvedSrc, dest);\n  } else {\n    let resolvedDest;\n    try {\n      resolvedDest = fs.readlinkSync(dest);\n    } catch (err) {\n      // dest exists and is a regular file or directory,\n      // Windows may throw UNKNOWN error. If dest already exists,\n      // fs throws error anyway, so no need to guard against it here.\n      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlinkSync(resolvedSrc, dest);\n      throw err;\n    }\n    if (opts.dereference) {\n      resolvedDest = path.resolve(process.cwd(), resolvedDest);\n    }\n    if (isSrcSubdir(resolvedSrc, resolvedDest)) {\n      throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);\n    }\n\n    // prevent copy if src is a subdir of dest since unlinking\n    // dest in this case would result in removing src contents\n    // and therefore a broken symlink would be created.\n    if (fs.statSync(dest).isDirectory() && isSrcSubdir(resolvedDest, resolvedSrc)) {\n      throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);\n    }\n    return copyLink(resolvedSrc, dest);\n  }\n}\nfunction copyLink(resolvedSrc, dest) {\n  fs.unlinkSync(dest);\n  return fs.symlinkSync(resolvedSrc, dest);\n}\n\n// return true if dest is a subdir of src, otherwise false.\nfunction isSrcSubdir(src, dest) {\n  const srcArray = path.resolve(src).split(path.sep);\n  const destArray = path.resolve(dest).split(path.sep);\n  return srcArray.reduce((acc, current, i) => acc && destArray[i] === current, true);\n}\nfunction checkStats(src, dest) {\n  const srcStat = fs.statSync(src);\n  let destStat;\n  try {\n    destStat = fs.statSync(dest);\n  } catch (err) {\n    if (err.code === 'ENOENT') return {\n      srcStat,\n      destStat: notExist\n    };\n    throw err;\n  }\n  return {\n    srcStat,\n    destStat\n  };\n}\nfunction checkPaths(src, dest) {\n  const {\n    srcStat,\n    destStat\n  } = checkStats(src, dest);\n  if (destStat.ino && destStat.ino === srcStat.ino) {\n    throw new Error('Source and destination must not be the same.');\n  }\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(`Cannot copy '${src}' to a subdirectory of itself, '${dest}'.`);\n  }\n  return destStat;\n}\nmodule.exports = copySync;","map":{"version":3,"names":["fs","require","path","mkdirpSync","mkdirsSync","utimesSync","utimesMillisSync","notExist","Symbol","copySync","src","dest","opts","filter","clobber","overwrite","preserveTimestamps","process","arch","console","warn","destStat","checkPaths","destParent","dirname","existsSync","startCopy","getStats","statSync","dereference","lstatSync","srcStat","isDirectory","onDir","isFile","isCharacterDevice","isBlockDevice","onFile","isSymbolicLink","onLink","copyFile","mayCopyFile","unlinkSync","errorOnExist","Error","copyFileSync","chmodSync","mode","atime","mtime","copyFileFallback","BUF_LENGTH","_buff","fdr","openSync","fdw","pos","size","bytesRead","readSync","writeSync","futimesSync","closeSync","mkDirAndCopy","copyDir","mkdirSync","readdirSync","forEach","item","copyDirItem","srcItem","join","destItem","resolvedSrc","readlinkSync","resolve","cwd","symlinkSync","resolvedDest","err","code","isSrcSubdir","copyLink","srcArray","split","sep","destArray","reduce","acc","current","i","checkStats","ino","module","exports"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/fs-extra/lib/copy-sync/copy-sync.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst mkdirpSync = require('../mkdirs').mkdirsSync\nconst utimesSync = require('../util/utimes.js').utimesMillisSync\n\nconst notExist = Symbol('notExist')\n\nfunction copySync (src, dest, opts) {\n  if (typeof opts === 'function') {\n    opts = {filter: opts}\n  }\n\n  opts = opts || {}\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber\n\n  // Warn about using preserveTimestamps on 32-bit node\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269`)\n  }\n\n  const destStat = checkPaths(src, dest)\n\n  if (opts.filter && !opts.filter(src, dest)) return\n\n  const destParent = path.dirname(dest)\n  if (!fs.existsSync(destParent)) mkdirpSync(destParent)\n  return startCopy(destStat, src, dest, opts)\n}\n\nfunction startCopy (destStat, src, dest, opts) {\n  if (opts.filter && !opts.filter(src, dest)) return\n  return getStats(destStat, src, dest, opts)\n}\n\nfunction getStats (destStat, src, dest, opts) {\n  const statSync = opts.dereference ? fs.statSync : fs.lstatSync\n  const srcStat = statSync(src)\n\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts)\n  else if (srcStat.isFile() ||\n           srcStat.isCharacterDevice() ||\n           srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts)\n  else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts)\n}\n\nfunction onFile (srcStat, destStat, src, dest, opts) {\n  if (destStat === notExist) return copyFile(srcStat, src, dest, opts)\n  return mayCopyFile(srcStat, src, dest, opts)\n}\n\nfunction mayCopyFile (srcStat, src, dest, opts) {\n  if (opts.overwrite) {\n    fs.unlinkSync(dest)\n    return copyFile(srcStat, src, dest, opts)\n  } else if (opts.errorOnExist) {\n    throw new Error(`'${dest}' already exists`)\n  }\n}\n\nfunction copyFile (srcStat, src, dest, opts) {\n  if (typeof fs.copyFileSync === 'function') {\n    fs.copyFileSync(src, dest)\n    fs.chmodSync(dest, srcStat.mode)\n    if (opts.preserveTimestamps) {\n      return utimesSync(dest, srcStat.atime, srcStat.mtime)\n    }\n    return\n  }\n  return copyFileFallback(srcStat, src, dest, opts)\n}\n\nfunction copyFileFallback (srcStat, src, dest, opts) {\n  const BUF_LENGTH = 64 * 1024\n  const _buff = require('../util/buffer')(BUF_LENGTH)\n\n  const fdr = fs.openSync(src, 'r')\n  const fdw = fs.openSync(dest, 'w', srcStat.mode)\n  let pos = 0\n\n  while (pos < srcStat.size) {\n    const bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos)\n    fs.writeSync(fdw, _buff, 0, bytesRead)\n    pos += bytesRead\n  }\n\n  if (opts.preserveTimestamps) fs.futimesSync(fdw, srcStat.atime, srcStat.mtime)\n\n  fs.closeSync(fdr)\n  fs.closeSync(fdw)\n}\n\nfunction onDir (srcStat, destStat, src, dest, opts) {\n  if (destStat === notExist) return mkDirAndCopy(srcStat, src, dest, opts)\n  if (destStat && !destStat.isDirectory()) {\n    throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)\n  }\n  return copyDir(src, dest, opts)\n}\n\nfunction mkDirAndCopy (srcStat, src, dest, opts) {\n  fs.mkdirSync(dest)\n  copyDir(src, dest, opts)\n  return fs.chmodSync(dest, srcStat.mode)\n}\n\nfunction copyDir (src, dest, opts) {\n  fs.readdirSync(src).forEach(item => copyDirItem(item, src, dest, opts))\n}\n\nfunction copyDirItem (item, src, dest, opts) {\n  const srcItem = path.join(src, item)\n  const destItem = path.join(dest, item)\n  const destStat = checkPaths(srcItem, destItem)\n  return startCopy(destStat, srcItem, destItem, opts)\n}\n\nfunction onLink (destStat, src, dest, opts) {\n  let resolvedSrc = fs.readlinkSync(src)\n\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc)\n  }\n\n  if (destStat === notExist) {\n    return fs.symlinkSync(resolvedSrc, dest)\n  } else {\n    let resolvedDest\n    try {\n      resolvedDest = fs.readlinkSync(dest)\n    } catch (err) {\n      // dest exists and is a regular file or directory,\n      // Windows may throw UNKNOWN error. If dest already exists,\n      // fs throws error anyway, so no need to guard against it here.\n      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlinkSync(resolvedSrc, dest)\n      throw err\n    }\n    if (opts.dereference) {\n      resolvedDest = path.resolve(process.cwd(), resolvedDest)\n    }\n    if (isSrcSubdir(resolvedSrc, resolvedDest)) {\n      throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)\n    }\n\n    // prevent copy if src is a subdir of dest since unlinking\n    // dest in this case would result in removing src contents\n    // and therefore a broken symlink would be created.\n    if (fs.statSync(dest).isDirectory() && isSrcSubdir(resolvedDest, resolvedSrc)) {\n      throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)\n    }\n    return copyLink(resolvedSrc, dest)\n  }\n}\n\nfunction copyLink (resolvedSrc, dest) {\n  fs.unlinkSync(dest)\n  return fs.symlinkSync(resolvedSrc, dest)\n}\n\n// return true if dest is a subdir of src, otherwise false.\nfunction isSrcSubdir (src, dest) {\n  const srcArray = path.resolve(src).split(path.sep)\n  const destArray = path.resolve(dest).split(path.sep)\n  return srcArray.reduce((acc, current, i) => acc && destArray[i] === current, true)\n}\n\nfunction checkStats (src, dest) {\n  const srcStat = fs.statSync(src)\n  let destStat\n  try {\n    destStat = fs.statSync(dest)\n  } catch (err) {\n    if (err.code === 'ENOENT') return {srcStat, destStat: notExist}\n    throw err\n  }\n  return {srcStat, destStat}\n}\n\nfunction checkPaths (src, dest) {\n  const {srcStat, destStat} = checkStats(src, dest)\n  if (destStat.ino && destStat.ino === srcStat.ino) {\n    throw new Error('Source and destination must not be the same.')\n  }\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(`Cannot copy '${src}' to a subdirectory of itself, '${dest}'.`)\n  }\n  return destStat\n}\n\nmodule.exports = copySync\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}