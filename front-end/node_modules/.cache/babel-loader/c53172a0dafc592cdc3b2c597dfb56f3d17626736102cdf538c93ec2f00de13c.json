{"ast":null,"code":"/* globals AbortController */\n\n'use strict';\n\nconst {\n  extractBody,\n  mixinBody,\n  cloneBody\n} = require('./body');\nconst {\n  Headers,\n  fill: fillHeaders,\n  HeadersList\n} = require('./headers');\nconst {\n  FinalizationRegistry\n} = require('../compat/dispatcher-weakref')();\nconst util = require('../core/util');\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  normalizeMethod,\n  makePolicyContainer,\n  normalizeMethodRecord\n} = require('./util');\nconst {\n  forbiddenMethodsSet,\n  corsSafeListedMethodsSet,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  requestDuplex\n} = require('./constants');\nconst {\n  kEnumerableProperty\n} = util;\nconst {\n  kHeaders,\n  kSignal,\n  kState,\n  kGuard,\n  kRealm\n} = require('./symbols');\nconst {\n  webidl\n} = require('./webidl');\nconst {\n  getGlobalOrigin\n} = require('./global');\nconst {\n  URLSerializer\n} = require('./dataURL');\nconst {\n  kHeadersList,\n  kConstruct\n} = require('../core/symbols');\nconst assert = require('assert');\nconst {\n  getMaxListeners,\n  setMaxListeners,\n  getEventListeners,\n  defaultMaxListeners\n} = require('events');\nlet TransformStream = globalThis.TransformStream;\nconst kAbortController = Symbol('abortController');\nconst requestFinalizer = new FinalizationRegistry(({\n  signal,\n  abort\n}) => {\n  signal.removeEventListener('abort', abort);\n});\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor(input, init = {}) {\n    if (input === kConstruct) {\n      return;\n    }\n    webidl.argumentLengthCheck(arguments, 1, {\n      header: 'Request constructor'\n    });\n    input = webidl.converters.RequestInfo(input);\n    init = webidl.converters.RequestInit(init);\n\n    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object\n    this[kRealm] = {\n      settingsObject: {\n        baseUrl: getGlobalOrigin(),\n        get origin() {\n          return this.baseUrl?.origin;\n        },\n        policyContainer: makePolicyContainer()\n      }\n    };\n\n    // 1. Let request be null.\n    let request = null;\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null;\n\n    // 3. Let baseURL be this’s relevant settings object’s API base URL.\n    const baseUrl = this[kRealm].settingsObject.baseUrl;\n\n    // 4. Let signal be null.\n    let signal = null;\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL;\n      try {\n        parsedURL = new URL(input, baseUrl);\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, {\n          cause: err\n        });\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError('Request cannot be constructed from a URL that includes credentials: ' + input);\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({\n        urlList: [parsedURL]\n      });\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors';\n    } else {\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request);\n\n      // 8. Set request to input’s request.\n      request = input[kState];\n\n      // 9. Set signal to input’s signal.\n      signal = input[kSignal];\n    }\n\n    // 7. Let origin be this’s relevant settings object’s origin.\n    const origin = this[kRealm].settingsObject.origin;\n\n    // 8. Let window be \"client\".\n    let window = 'client';\n\n    // 9. If request’s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request’s window.\n    if (request.window?.constructor?.name === 'EnvironmentSettingsObject' && sameOrigin(request.window, origin)) {\n      window = request.window;\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`);\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if ('window' in init) {\n      window = 'no-window';\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request’s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request’s method.\n      method: request.method,\n      // header list A copy of request’s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This’s relevant settings object.\n      client: this[kRealm].settingsObject,\n      // window window.\n      window,\n      // priority request’s priority.\n      priority: request.priority,\n      // origin request’s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request’s referrer.\n      referrer: request.referrer,\n      // referrer policy request’s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request’s mode.\n      mode: request.mode,\n      // credentials mode request’s credentials mode.\n      credentials: request.credentials,\n      // cache mode request’s cache mode.\n      cache: request.cache,\n      // redirect mode request’s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request’s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request’s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request’s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request’s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request’s URL list.\n      urlList: [...request.urlList]\n    });\n    const initHasKey = Object.keys(init).length !== 0;\n\n    // 13. If init is not empty, then:\n    if (initHasKey) {\n      // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin';\n      }\n\n      // 2. Unset request’s reload-navigation flag.\n      request.reloadNavigation = false;\n\n      // 3. Unset request’s history-navigation flag.\n      request.historyNavigation = false;\n\n      // 4. Set request’s origin to \"client\".\n      request.origin = 'client';\n\n      // 5. Set request’s referrer to \"client\"\n      request.referrer = 'client';\n\n      // 6. Set request’s referrer policy to the empty string.\n      request.referrerPolicy = '';\n\n      // 7. Set request’s URL to request’s current URL.\n      request.url = request.urlList[request.urlList.length - 1];\n\n      // 8. Set request’s URL list to « request’s URL ».\n      request.urlList = [request.url];\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer;\n\n      // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer';\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer;\n        try {\n          parsedReferrer = new URL(referrer, baseUrl);\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, {\n            cause: err\n          });\n        }\n\n        // 3. If one of the following is true\n        // - parsedReferrer’s scheme is \"about\" and path is the string \"client\"\n        // - parsedReferrer’s origin is not same origin with origin\n        // then set request’s referrer to \"client\".\n        if (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client' || origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl)) {\n          request.referrer = 'client';\n        } else {\n          // 4. Otherwise, set request’s referrer to parsedReferrer.\n          request.referrer = parsedReferrer;\n        }\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy;\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode;\n    if (init.mode !== undefined) {\n      mode = init.mode;\n    } else {\n      mode = fallbackMode;\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      throw webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      });\n    }\n\n    // 18. If mode is non-null, set request’s mode to mode.\n    if (mode != null) {\n      request.mode = mode;\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials;\n    }\n\n    // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache;\n    }\n\n    // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\"'only-if-cached' can be set only with 'same-origin' mode\");\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect;\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n    if (init.integrity != null) {\n      request.integrity = String(init.integrity);\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive);\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method;\n\n      // 2. If method is not a method or method is a forbidden method, then\n      // throw a TypeError.\n      if (!isValidHTTPToken(method)) {\n        throw new TypeError(`'${method}' is not a valid HTTP method.`);\n      }\n      if (forbiddenMethodsSet.has(method.toUpperCase())) {\n        throw new TypeError(`'${method}' HTTP method is unsupported.`);\n      }\n\n      // 3. Normalize method.\n      method = normalizeMethodRecord[method] ?? normalizeMethod(method);\n\n      // 4. Set request’s method to method.\n      request.method = method;\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal;\n    }\n\n    // 27. Set this’s request to request.\n    this[kState] = request;\n\n    // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n    // Realm.\n    // TODO: could this be simplified with AbortSignal.any\n    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)\n    const ac = new AbortController();\n    this[kSignal] = ac.signal;\n    this[kSignal][kRealm] = this[kRealm];\n\n    // 29. If signal is not null, then make this’s signal follow signal.\n    if (signal != null) {\n      if (!signal || typeof signal.aborted !== 'boolean' || typeof signal.addEventListener !== 'function') {\n        throw new TypeError(\"Failed to construct 'Request': member signal is not of type AbortSignal.\");\n      }\n      if (signal.aborted) {\n        ac.abort(signal.reason);\n      } else {\n        // Keep a strong ref to ac while request object\n        // is alive. This is needed to prevent AbortController\n        // from being prematurely garbage collected.\n        // See, https://github.com/nodejs/undici/issues/1926.\n        this[kAbortController] = ac;\n        const acRef = new WeakRef(ac);\n        const abort = function () {\n          const ac = acRef.deref();\n          if (ac !== undefined) {\n            ac.abort(this.reason);\n          }\n        };\n\n        // Third-party AbortControllers may not work with these.\n        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.\n        try {\n          // If the max amount of listeners is equal to the default, increase it\n          // This is only available in node >= v19.9.0\n          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {\n            setMaxListeners(100, signal);\n          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {\n            setMaxListeners(100, signal);\n          }\n        } catch {}\n        util.addAbortListener(signal, abort);\n        requestFinalizer.register(ac, {\n          signal,\n          abort\n        });\n      }\n    }\n\n    // 30. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is request’s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers(kConstruct);\n    this[kHeaders][kHeadersList] = request.headersList;\n    this[kHeaders][kGuard] = 'request';\n    this[kHeaders][kRealm] = this[kRealm];\n\n    // 31. If this’s request’s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this’s request’s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethodsSet.has(request.method)) {\n        throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);\n      }\n\n      // 2. Set this’s headers’s guard to \"request-no-cors\".\n      this[kHeaders][kGuard] = 'request-no-cors';\n    }\n\n    // 32. If init is not empty, then:\n    if (initHasKey) {\n      /** @type {HeadersList} */\n      const headersList = this[kHeaders][kHeadersList];\n      // 1. Let headers be a copy of this’s headers and its associated header\n      // list.\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList);\n\n      // 3. Empty this’s headers’s header list.\n      headersList.clear();\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header’s name/header’s value to this’s headers.\n      if (headers instanceof HeadersList) {\n        for (const [key, val] of headers) {\n          headersList.append(key, val);\n        }\n        // Note: Copy the `set-cookie` meta-data.\n        headersList.cookies = headers.cookies;\n      } else {\n        // 5. Otherwise, fill this’s headers with headers.\n        fillHeaders(this[kHeaders], headers);\n      }\n    }\n\n    // 33. Let inputBody be input’s request’s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null;\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request’s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if ((init.body != null || inputBody != null) && (request.method === 'GET' || request.method === 'HEAD')) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.');\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null;\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request’s keepalive.\n      const [extractedBody, contentType] = extractBody(init.body, request.keepalive);\n      initBody = extractedBody;\n\n      // 3, If Content-Type is non-null and this’s headers’s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this’s headers.\n      if (contentType && !this[kHeaders][kHeadersList].contains('content-type')) {\n        this[kHeaders].append('content-type', contentType);\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody;\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n      //    then throw a TypeError.\n      if (initBody != null && init.duplex == null) {\n        throw new TypeError('RequestInit: duplex option is required when sending a body.');\n      }\n\n      // 2. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError('If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"');\n      }\n\n      // 3. Set this’s request’s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true;\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody;\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n        throw new TypeError('Cannot construct a Request with a Request object that has already been used.');\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      if (!TransformStream) {\n        TransformStream = require('stream/web').TransformStream;\n      }\n\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream();\n      inputBody.stream.pipeThrough(identityTransform);\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      };\n    }\n\n    // 41. Set this’s request’s body to finalBody.\n    this[kState].body = finalBody;\n  }\n\n  // Returns request’s HTTP method, which is \"GET\" by default.\n  get method() {\n    webidl.brandCheck(this, Request);\n\n    // The method getter steps are to return this’s request’s method.\n    return this[kState].method;\n  }\n\n  // Returns the URL of request as a string.\n  get url() {\n    webidl.brandCheck(this, Request);\n\n    // The url getter steps are to return this’s request’s URL, serialized.\n    return URLSerializer(this[kState].url);\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers() {\n    webidl.brandCheck(this, Request);\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders];\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination() {\n    webidl.brandCheck(this, Request);\n\n    // The destination getter are to return this’s request’s destination.\n    return this[kState].destination;\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global’s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer() {\n    webidl.brandCheck(this, Request);\n\n    // 1. If this’s request’s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return '';\n    }\n\n    // 2. If this’s request’s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client';\n    }\n\n    // Return this’s request’s referrer, serialized.\n    return this[kState].referrer.toString();\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request’s\n  // referrer.\n  get referrerPolicy() {\n    webidl.brandCheck(this, Request);\n\n    // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n    return this[kState].referrerPolicy;\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode() {\n    webidl.brandCheck(this, Request);\n\n    // The mode getter steps are to return this’s request’s mode.\n    return this[kState].mode;\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials() {\n    // The credentials getter steps are to return this’s request’s credentials mode.\n    return this[kState].credentials;\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser’s cache when fetching.\n  get cache() {\n    webidl.brandCheck(this, Request);\n\n    // The cache getter steps are to return this’s request’s cache mode.\n    return this[kState].cache;\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect() {\n    webidl.brandCheck(this, Request);\n\n    // The redirect getter steps are to return this’s request’s redirect mode.\n    return this[kState].redirect;\n  }\n\n  // Returns request’s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity() {\n    webidl.brandCheck(this, Request);\n\n    // The integrity getter steps are to return this’s request’s integrity\n    // metadata.\n    return this[kState].integrity;\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive() {\n    webidl.brandCheck(this, Request);\n\n    // The keepalive getter steps are to return this’s request’s keepalive.\n    return this[kState].keepalive;\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation() {\n    webidl.brandCheck(this, Request);\n\n    // The isReloadNavigation getter steps are to return true if this’s\n    // request’s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation;\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-foward navigation).\n  get isHistoryNavigation() {\n    webidl.brandCheck(this, Request);\n\n    // The isHistoryNavigation getter steps are to return true if this’s request’s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation;\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal() {\n    webidl.brandCheck(this, Request);\n\n    // The signal getter steps are to return this’s signal.\n    return this[kSignal];\n  }\n  get body() {\n    webidl.brandCheck(this, Request);\n    return this[kState].body ? this[kState].body.stream : null;\n  }\n  get bodyUsed() {\n    webidl.brandCheck(this, Request);\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream);\n  }\n  get duplex() {\n    webidl.brandCheck(this, Request);\n    return 'half';\n  }\n\n  // Returns a clone of request.\n  clone() {\n    webidl.brandCheck(this, Request);\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || this.body?.locked) {\n      throw new TypeError('unusable');\n    }\n\n    // 2. Let clonedRequest be the result of cloning this’s request.\n    const clonedRequest = cloneRequest(this[kState]);\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n    const clonedRequestObject = new Request(kConstruct);\n    clonedRequestObject[kState] = clonedRequest;\n    clonedRequestObject[kRealm] = this[kRealm];\n    clonedRequestObject[kHeaders] = new Headers(kConstruct);\n    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;\n    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];\n    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];\n\n    // 4. Make clonedRequestObject’s signal follow this’s signal.\n    const ac = new AbortController();\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason);\n    } else {\n      util.addAbortListener(this.signal, () => {\n        ac.abort(this.signal.reason);\n      });\n    }\n    clonedRequestObject[kSignal] = ac.signal;\n\n    // 4. Return clonedRequestObject.\n    return clonedRequestObject;\n  }\n}\nmixinBody(Request);\nfunction makeRequest(init) {\n  // https://fetch.spec.whatwg.org/#requests\n  const request = {\n    method: 'GET',\n    localURLsOnly: false,\n    unsafeRequest: false,\n    body: null,\n    client: null,\n    reservedClient: null,\n    replacesClientId: '',\n    window: 'client',\n    keepalive: false,\n    serviceWorkers: 'all',\n    initiator: '',\n    destination: '',\n    priority: null,\n    origin: 'client',\n    policyContainer: 'client',\n    referrer: 'client',\n    referrerPolicy: '',\n    mode: 'no-cors',\n    useCORSPreflightFlag: false,\n    credentials: 'same-origin',\n    useCredentials: false,\n    cache: 'default',\n    redirect: 'follow',\n    integrity: '',\n    cryptoGraphicsNonceMetadata: '',\n    parserMetadata: '',\n    reloadNavigation: false,\n    historyNavigation: false,\n    userActivation: false,\n    taintedOrigin: false,\n    redirectCount: 0,\n    responseTainting: 'basic',\n    preventNoCacheCacheControlHeaderModification: false,\n    done: false,\n    timingAllowFailed: false,\n    ...init,\n    headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()\n  };\n  request.url = request.urlList[0];\n  return request;\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest(request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({\n    ...request,\n    body: null\n  });\n\n  // 2. If request’s body is non-null, set newRequest’s body to the\n  // result of cloning request’s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(request.body);\n  }\n\n  // 3. Return newRequest.\n  return newRequest;\n}\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty,\n  duplex: kEnumerableProperty,\n  destination: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  isHistoryNavigation: kEnumerableProperty,\n  isReloadNavigation: kEnumerableProperty,\n  keepalive: kEnumerableProperty,\n  integrity: kEnumerableProperty,\n  cache: kEnumerableProperty,\n  credentials: kEnumerableProperty,\n  attribute: kEnumerableProperty,\n  referrerPolicy: kEnumerableProperty,\n  referrer: kEnumerableProperty,\n  mode: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Request',\n    configurable: true\n  }\n});\nwebidl.converters.Request = webidl.interfaceConverter(Request);\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V);\n  }\n  if (V instanceof Request) {\n    return webidl.converters.Request(V);\n  }\n  return webidl.converters.USVString(V);\n};\nwebidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal);\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([{\n  key: 'method',\n  converter: webidl.converters.ByteString\n}, {\n  key: 'headers',\n  converter: webidl.converters.HeadersInit\n}, {\n  key: 'body',\n  converter: webidl.nullableConverter(webidl.converters.BodyInit)\n}, {\n  key: 'referrer',\n  converter: webidl.converters.USVString\n}, {\n  key: 'referrerPolicy',\n  converter: webidl.converters.DOMString,\n  // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n  allowedValues: referrerPolicy\n}, {\n  key: 'mode',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#concept-request-mode\n  allowedValues: requestMode\n}, {\n  key: 'credentials',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestcredentials\n  allowedValues: requestCredentials\n}, {\n  key: 'cache',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestcache\n  allowedValues: requestCache\n}, {\n  key: 'redirect',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestredirect\n  allowedValues: requestRedirect\n}, {\n  key: 'integrity',\n  converter: webidl.converters.DOMString\n}, {\n  key: 'keepalive',\n  converter: webidl.converters.boolean\n}, {\n  key: 'signal',\n  converter: webidl.nullableConverter(signal => webidl.converters.AbortSignal(signal, {\n    strict: false\n  }))\n}, {\n  key: 'window',\n  converter: webidl.converters.any\n}, {\n  key: 'duplex',\n  converter: webidl.converters.DOMString,\n  allowedValues: requestDuplex\n}]);\nmodule.exports = {\n  Request,\n  makeRequest\n};","map":{"version":3,"names":["extractBody","mixinBody","cloneBody","require","Headers","fill","fillHeaders","HeadersList","FinalizationRegistry","util","isValidHTTPToken","sameOrigin","normalizeMethod","makePolicyContainer","normalizeMethodRecord","forbiddenMethodsSet","corsSafeListedMethodsSet","referrerPolicy","requestRedirect","requestMode","requestCredentials","requestCache","requestDuplex","kEnumerableProperty","kHeaders","kSignal","kState","kGuard","kRealm","webidl","getGlobalOrigin","URLSerializer","kHeadersList","kConstruct","assert","getMaxListeners","setMaxListeners","getEventListeners","defaultMaxListeners","TransformStream","globalThis","kAbortController","Symbol","requestFinalizer","signal","abort","removeEventListener","Request","constructor","input","init","argumentLengthCheck","arguments","header","converters","RequestInfo","RequestInit","settingsObject","baseUrl","origin","policyContainer","request","fallbackMode","parsedURL","URL","err","TypeError","cause","username","password","makeRequest","urlList","window","name","method","headersList","unsafeRequest","client","priority","referrer","mode","credentials","cache","redirect","integrity","keepalive","reloadNavigation","historyNavigation","initHasKey","Object","keys","length","url","undefined","parsedReferrer","protocol","hostname","errors","exception","message","String","Boolean","has","toUpperCase","ac","AbortController","aborted","addEventListener","reason","acRef","WeakRef","deref","addAbortListener","register","headers","clear","key","val","append","cookies","inputBody","body","initBody","extractedBody","contentType","contains","inputOrInitBody","source","duplex","useCORSPreflightFlag","finalBody","isDisturbed","stream","locked","identityTransform","pipeThrough","readable","brandCheck","destination","toString","isReloadNavigation","isHistoryNavigation","bodyUsed","clone","clonedRequest","cloneRequest","clonedRequestObject","localURLsOnly","reservedClient","replacesClientId","serviceWorkers","initiator","useCredentials","cryptoGraphicsNonceMetadata","parserMetadata","userActivation","taintedOrigin","redirectCount","responseTainting","preventNoCacheCacheControlHeaderModification","done","timingAllowFailed","newRequest","defineProperties","prototype","attribute","toStringTag","value","configurable","interfaceConverter","V","USVString","AbortSignal","dictionaryConverter","converter","ByteString","HeadersInit","nullableConverter","BodyInit","DOMString","allowedValues","boolean","strict","any","module","exports"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/undici/lib/fetch/request.js"],"sourcesContent":["/* globals AbortController */\n\n'use strict'\n\nconst { extractBody, mixinBody, cloneBody } = require('./body')\nconst { Headers, fill: fillHeaders, HeadersList } = require('./headers')\nconst { FinalizationRegistry } = require('../compat/dispatcher-weakref')()\nconst util = require('../core/util')\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  normalizeMethod,\n  makePolicyContainer,\n  normalizeMethodRecord\n} = require('./util')\nconst {\n  forbiddenMethodsSet,\n  corsSafeListedMethodsSet,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  requestDuplex\n} = require('./constants')\nconst { kEnumerableProperty } = util\nconst { kHeaders, kSignal, kState, kGuard, kRealm } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { getGlobalOrigin } = require('./global')\nconst { URLSerializer } = require('./dataURL')\nconst { kHeadersList, kConstruct } = require('../core/symbols')\nconst assert = require('assert')\nconst { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = require('events')\n\nlet TransformStream = globalThis.TransformStream\n\nconst kAbortController = Symbol('abortController')\n\nconst requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {\n  signal.removeEventListener('abort', abort)\n})\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor (input, init = {}) {\n    if (input === kConstruct) {\n      return\n    }\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Request constructor' })\n\n    input = webidl.converters.RequestInfo(input)\n    init = webidl.converters.RequestInit(init)\n\n    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object\n    this[kRealm] = {\n      settingsObject: {\n        baseUrl: getGlobalOrigin(),\n        get origin () {\n          return this.baseUrl?.origin\n        },\n        policyContainer: makePolicyContainer()\n      }\n    }\n\n    // 1. Let request be null.\n    let request = null\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null\n\n    // 3. Let baseURL be this’s relevant settings object’s API base URL.\n    const baseUrl = this[kRealm].settingsObject.baseUrl\n\n    // 4. Let signal be null.\n    let signal = null\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL\n      try {\n        parsedURL = new URL(input, baseUrl)\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, { cause: err })\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError(\n          'Request cannot be constructed from a URL that includes credentials: ' +\n            input\n        )\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({ urlList: [parsedURL] })\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors'\n    } else {\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request)\n\n      // 8. Set request to input’s request.\n      request = input[kState]\n\n      // 9. Set signal to input’s signal.\n      signal = input[kSignal]\n    }\n\n    // 7. Let origin be this’s relevant settings object’s origin.\n    const origin = this[kRealm].settingsObject.origin\n\n    // 8. Let window be \"client\".\n    let window = 'client'\n\n    // 9. If request’s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request’s window.\n    if (\n      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&\n      sameOrigin(request.window, origin)\n    ) {\n      window = request.window\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`)\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if ('window' in init) {\n      window = 'no-window'\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request’s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request’s method.\n      method: request.method,\n      // header list A copy of request’s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This’s relevant settings object.\n      client: this[kRealm].settingsObject,\n      // window window.\n      window,\n      // priority request’s priority.\n      priority: request.priority,\n      // origin request’s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request’s referrer.\n      referrer: request.referrer,\n      // referrer policy request’s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request’s mode.\n      mode: request.mode,\n      // credentials mode request’s credentials mode.\n      credentials: request.credentials,\n      // cache mode request’s cache mode.\n      cache: request.cache,\n      // redirect mode request’s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request’s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request’s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request’s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request’s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request’s URL list.\n      urlList: [...request.urlList]\n    })\n\n    const initHasKey = Object.keys(init).length !== 0\n\n    // 13. If init is not empty, then:\n    if (initHasKey) {\n      // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin'\n      }\n\n      // 2. Unset request’s reload-navigation flag.\n      request.reloadNavigation = false\n\n      // 3. Unset request’s history-navigation flag.\n      request.historyNavigation = false\n\n      // 4. Set request’s origin to \"client\".\n      request.origin = 'client'\n\n      // 5. Set request’s referrer to \"client\"\n      request.referrer = 'client'\n\n      // 6. Set request’s referrer policy to the empty string.\n      request.referrerPolicy = ''\n\n      // 7. Set request’s URL to request’s current URL.\n      request.url = request.urlList[request.urlList.length - 1]\n\n      // 8. Set request’s URL list to « request’s URL ».\n      request.urlList = [request.url]\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer\n\n      // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer'\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer\n        try {\n          parsedReferrer = new URL(referrer, baseUrl)\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, { cause: err })\n        }\n\n        // 3. If one of the following is true\n        // - parsedReferrer’s scheme is \"about\" and path is the string \"client\"\n        // - parsedReferrer’s origin is not same origin with origin\n        // then set request’s referrer to \"client\".\n        if (\n          (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client') ||\n          (origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl))\n        ) {\n          request.referrer = 'client'\n        } else {\n          // 4. Otherwise, set request’s referrer to parsedReferrer.\n          request.referrer = parsedReferrer\n        }\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode\n    if (init.mode !== undefined) {\n      mode = init.mode\n    } else {\n      mode = fallbackMode\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      throw webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      })\n    }\n\n    // 18. If mode is non-null, set request’s mode to mode.\n    if (mode != null) {\n      request.mode = mode\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials\n    }\n\n    // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache\n    }\n\n    // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\n        \"'only-if-cached' can be set only with 'same-origin' mode\"\n      )\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n    if (init.integrity != null) {\n      request.integrity = String(init.integrity)\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive)\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method\n\n      // 2. If method is not a method or method is a forbidden method, then\n      // throw a TypeError.\n      if (!isValidHTTPToken(method)) {\n        throw new TypeError(`'${method}' is not a valid HTTP method.`)\n      }\n\n      if (forbiddenMethodsSet.has(method.toUpperCase())) {\n        throw new TypeError(`'${method}' HTTP method is unsupported.`)\n      }\n\n      // 3. Normalize method.\n      method = normalizeMethodRecord[method] ?? normalizeMethod(method)\n\n      // 4. Set request’s method to method.\n      request.method = method\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal\n    }\n\n    // 27. Set this’s request to request.\n    this[kState] = request\n\n    // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n    // Realm.\n    // TODO: could this be simplified with AbortSignal.any\n    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)\n    const ac = new AbortController()\n    this[kSignal] = ac.signal\n    this[kSignal][kRealm] = this[kRealm]\n\n    // 29. If signal is not null, then make this’s signal follow signal.\n    if (signal != null) {\n      if (\n        !signal ||\n        typeof signal.aborted !== 'boolean' ||\n        typeof signal.addEventListener !== 'function'\n      ) {\n        throw new TypeError(\n          \"Failed to construct 'Request': member signal is not of type AbortSignal.\"\n        )\n      }\n\n      if (signal.aborted) {\n        ac.abort(signal.reason)\n      } else {\n        // Keep a strong ref to ac while request object\n        // is alive. This is needed to prevent AbortController\n        // from being prematurely garbage collected.\n        // See, https://github.com/nodejs/undici/issues/1926.\n        this[kAbortController] = ac\n\n        const acRef = new WeakRef(ac)\n        const abort = function () {\n          const ac = acRef.deref()\n          if (ac !== undefined) {\n            ac.abort(this.reason)\n          }\n        }\n\n        // Third-party AbortControllers may not work with these.\n        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.\n        try {\n          // If the max amount of listeners is equal to the default, increase it\n          // This is only available in node >= v19.9.0\n          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {\n            setMaxListeners(100, signal)\n          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {\n            setMaxListeners(100, signal)\n          }\n        } catch {}\n\n        util.addAbortListener(signal, abort)\n        requestFinalizer.register(ac, { signal, abort })\n      }\n    }\n\n    // 30. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is request’s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers(kConstruct)\n    this[kHeaders][kHeadersList] = request.headersList\n    this[kHeaders][kGuard] = 'request'\n    this[kHeaders][kRealm] = this[kRealm]\n\n    // 31. If this’s request’s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this’s request’s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethodsSet.has(request.method)) {\n        throw new TypeError(\n          `'${request.method} is unsupported in no-cors mode.`\n        )\n      }\n\n      // 2. Set this’s headers’s guard to \"request-no-cors\".\n      this[kHeaders][kGuard] = 'request-no-cors'\n    }\n\n    // 32. If init is not empty, then:\n    if (initHasKey) {\n      /** @type {HeadersList} */\n      const headersList = this[kHeaders][kHeadersList]\n      // 1. Let headers be a copy of this’s headers and its associated header\n      // list.\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList)\n\n      // 3. Empty this’s headers’s header list.\n      headersList.clear()\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header’s name/header’s value to this’s headers.\n      if (headers instanceof HeadersList) {\n        for (const [key, val] of headers) {\n          headersList.append(key, val)\n        }\n        // Note: Copy the `set-cookie` meta-data.\n        headersList.cookies = headers.cookies\n      } else {\n        // 5. Otherwise, fill this’s headers with headers.\n        fillHeaders(this[kHeaders], headers)\n      }\n    }\n\n    // 33. Let inputBody be input’s request’s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request’s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if (\n      (init.body != null || inputBody != null) &&\n      (request.method === 'GET' || request.method === 'HEAD')\n    ) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.')\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request’s keepalive.\n      const [extractedBody, contentType] = extractBody(\n        init.body,\n        request.keepalive\n      )\n      initBody = extractedBody\n\n      // 3, If Content-Type is non-null and this’s headers’s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this’s headers.\n      if (contentType && !this[kHeaders][kHeadersList].contains('content-type')) {\n        this[kHeaders].append('content-type', contentType)\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n      //    then throw a TypeError.\n      if (initBody != null && init.duplex == null) {\n        throw new TypeError('RequestInit: duplex option is required when sending a body.')\n      }\n\n      // 2. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError(\n          'If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"'\n        )\n      }\n\n      // 3. Set this’s request’s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n        throw new TypeError(\n          'Cannot construct a Request with a Request object that has already been used.'\n        )\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      if (!TransformStream) {\n        TransformStream = require('stream/web').TransformStream\n      }\n\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream()\n      inputBody.stream.pipeThrough(identityTransform)\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      }\n    }\n\n    // 41. Set this’s request’s body to finalBody.\n    this[kState].body = finalBody\n  }\n\n  // Returns request’s HTTP method, which is \"GET\" by default.\n  get method () {\n    webidl.brandCheck(this, Request)\n\n    // The method getter steps are to return this’s request’s method.\n    return this[kState].method\n  }\n\n  // Returns the URL of request as a string.\n  get url () {\n    webidl.brandCheck(this, Request)\n\n    // The url getter steps are to return this’s request’s URL, serialized.\n    return URLSerializer(this[kState].url)\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers () {\n    webidl.brandCheck(this, Request)\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders]\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination () {\n    webidl.brandCheck(this, Request)\n\n    // The destination getter are to return this’s request’s destination.\n    return this[kState].destination\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global’s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this’s request’s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return ''\n    }\n\n    // 2. If this’s request’s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client'\n    }\n\n    // Return this’s request’s referrer, serialized.\n    return this[kState].referrer.toString()\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request’s\n  // referrer.\n  get referrerPolicy () {\n    webidl.brandCheck(this, Request)\n\n    // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n    return this[kState].referrerPolicy\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode () {\n    webidl.brandCheck(this, Request)\n\n    // The mode getter steps are to return this’s request’s mode.\n    return this[kState].mode\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials () {\n    // The credentials getter steps are to return this’s request’s credentials mode.\n    return this[kState].credentials\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser’s cache when fetching.\n  get cache () {\n    webidl.brandCheck(this, Request)\n\n    // The cache getter steps are to return this’s request’s cache mode.\n    return this[kState].cache\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect () {\n    webidl.brandCheck(this, Request)\n\n    // The redirect getter steps are to return this’s request’s redirect mode.\n    return this[kState].redirect\n  }\n\n  // Returns request’s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity () {\n    webidl.brandCheck(this, Request)\n\n    // The integrity getter steps are to return this’s request’s integrity\n    // metadata.\n    return this[kState].integrity\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive () {\n    webidl.brandCheck(this, Request)\n\n    // The keepalive getter steps are to return this’s request’s keepalive.\n    return this[kState].keepalive\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isReloadNavigation getter steps are to return true if this’s\n    // request’s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-foward navigation).\n  get isHistoryNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isHistoryNavigation getter steps are to return true if this’s request’s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal () {\n    webidl.brandCheck(this, Request)\n\n    // The signal getter steps are to return this’s signal.\n    return this[kSignal]\n  }\n\n  get body () {\n    webidl.brandCheck(this, Request)\n\n    return this[kState].body ? this[kState].body.stream : null\n  }\n\n  get bodyUsed () {\n    webidl.brandCheck(this, Request)\n\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)\n  }\n\n  get duplex () {\n    webidl.brandCheck(this, Request)\n\n    return 'half'\n  }\n\n  // Returns a clone of request.\n  clone () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || this.body?.locked) {\n      throw new TypeError('unusable')\n    }\n\n    // 2. Let clonedRequest be the result of cloning this’s request.\n    const clonedRequest = cloneRequest(this[kState])\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n    const clonedRequestObject = new Request(kConstruct)\n    clonedRequestObject[kState] = clonedRequest\n    clonedRequestObject[kRealm] = this[kRealm]\n    clonedRequestObject[kHeaders] = new Headers(kConstruct)\n    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList\n    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard]\n    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]\n\n    // 4. Make clonedRequestObject’s signal follow this’s signal.\n    const ac = new AbortController()\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason)\n    } else {\n      util.addAbortListener(\n        this.signal,\n        () => {\n          ac.abort(this.signal.reason)\n        }\n      )\n    }\n    clonedRequestObject[kSignal] = ac.signal\n\n    // 4. Return clonedRequestObject.\n    return clonedRequestObject\n  }\n}\n\nmixinBody(Request)\n\nfunction makeRequest (init) {\n  // https://fetch.spec.whatwg.org/#requests\n  const request = {\n    method: 'GET',\n    localURLsOnly: false,\n    unsafeRequest: false,\n    body: null,\n    client: null,\n    reservedClient: null,\n    replacesClientId: '',\n    window: 'client',\n    keepalive: false,\n    serviceWorkers: 'all',\n    initiator: '',\n    destination: '',\n    priority: null,\n    origin: 'client',\n    policyContainer: 'client',\n    referrer: 'client',\n    referrerPolicy: '',\n    mode: 'no-cors',\n    useCORSPreflightFlag: false,\n    credentials: 'same-origin',\n    useCredentials: false,\n    cache: 'default',\n    redirect: 'follow',\n    integrity: '',\n    cryptoGraphicsNonceMetadata: '',\n    parserMetadata: '',\n    reloadNavigation: false,\n    historyNavigation: false,\n    userActivation: false,\n    taintedOrigin: false,\n    redirectCount: 0,\n    responseTainting: 'basic',\n    preventNoCacheCacheControlHeaderModification: false,\n    done: false,\n    timingAllowFailed: false,\n    ...init,\n    headersList: init.headersList\n      ? new HeadersList(init.headersList)\n      : new HeadersList()\n  }\n  request.url = request.urlList[0]\n  return request\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest (request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({ ...request, body: null })\n\n  // 2. If request’s body is non-null, set newRequest’s body to the\n  // result of cloning request’s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(request.body)\n  }\n\n  // 3. Return newRequest.\n  return newRequest\n}\n\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty,\n  duplex: kEnumerableProperty,\n  destination: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  isHistoryNavigation: kEnumerableProperty,\n  isReloadNavigation: kEnumerableProperty,\n  keepalive: kEnumerableProperty,\n  integrity: kEnumerableProperty,\n  cache: kEnumerableProperty,\n  credentials: kEnumerableProperty,\n  attribute: kEnumerableProperty,\n  referrerPolicy: kEnumerableProperty,\n  referrer: kEnumerableProperty,\n  mode: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Request',\n    configurable: true\n  }\n})\n\nwebidl.converters.Request = webidl.interfaceConverter(\n  Request\n)\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V)\n  }\n\n  if (V instanceof Request) {\n    return webidl.converters.Request(V)\n  }\n\n  return webidl.converters.USVString(V)\n}\n\nwebidl.converters.AbortSignal = webidl.interfaceConverter(\n  AbortSignal\n)\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([\n  {\n    key: 'method',\n    converter: webidl.converters.ByteString\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  },\n  {\n    key: 'body',\n    converter: webidl.nullableConverter(\n      webidl.converters.BodyInit\n    )\n  },\n  {\n    key: 'referrer',\n    converter: webidl.converters.USVString\n  },\n  {\n    key: 'referrerPolicy',\n    converter: webidl.converters.DOMString,\n    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n    allowedValues: referrerPolicy\n  },\n  {\n    key: 'mode',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#concept-request-mode\n    allowedValues: requestMode\n  },\n  {\n    key: 'credentials',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcredentials\n    allowedValues: requestCredentials\n  },\n  {\n    key: 'cache',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcache\n    allowedValues: requestCache\n  },\n  {\n    key: 'redirect',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestredirect\n    allowedValues: requestRedirect\n  },\n  {\n    key: 'integrity',\n    converter: webidl.converters.DOMString\n  },\n  {\n    key: 'keepalive',\n    converter: webidl.converters.boolean\n  },\n  {\n    key: 'signal',\n    converter: webidl.nullableConverter(\n      (signal) => webidl.converters.AbortSignal(\n        signal,\n        { strict: false }\n      )\n    )\n  },\n  {\n    key: 'window',\n    converter: webidl.converters.any\n  },\n  {\n    key: 'duplex',\n    converter: webidl.converters.DOMString,\n    allowedValues: requestDuplex\n  }\n])\n\nmodule.exports = { Request, makeRequest }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}