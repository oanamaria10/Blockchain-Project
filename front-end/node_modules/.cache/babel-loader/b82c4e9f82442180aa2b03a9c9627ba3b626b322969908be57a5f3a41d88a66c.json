{"ast":null,"code":"import * as API from \"./api.js\";\n// @ts-expect-error - has no types\nimport murmur from \"murmurhash3js-revisited\";\nconst utf8 = new TextEncoder();\n\n/**\n * @typedef {(bytes:Uint8Array) => API.Uint32} Hasher\n * @type {Hasher}\n */\nexport const hash32 = murmur.x64.hash126;\n\n/**\n * @param {Partial<API.Options<API.Uint32>>} options\n * @returns {API.Path<API.Uint32>}\n */\n/* c8 ignore next 45 */\nexport const configure = ({\n  bitWidth = 5,\n  hash = hash32\n}) => {\n  const hashSize = 4;\n  if (bitWidth > hashSize * 8) {\n    throw new RangeError(`Can not use bitWidth ${bitWidth} which exceeds the hashSize ${hashSize}`);\n  }\n  if (hashSize * 8 > 32) {\n    throw new RangeError(`Can not use hashSize ${hashSize} as it can not be encoded in Uint32`);\n  }\n\n  // Mask for reading `bitWidth` number of bits from the end.\n  const mask = 0xffffffff >>> 32 - bitWidth;\n\n  /**\n   * Determines bit position for the path entry at the given `depth`.\n   * ```js\n   * const key = hash(\"result\") // 0b00011010010110010101111100110010\n   * // Which is following path (in reverse as we read from the right)\n   * // 10010/11001/10111/10010/00101/01101/00000 -> [ 18, 25, 23, 18, 5, 13, 0 ]\n   * at(key, 0) // 0b10010 -> 18\n   * at(key, 1) // 0b11001 -> 25\n   * at(key, 2) // 0b10111 -> 23\n   * at(key, 3) // 0b10010 -> 18\n   * at(key, 4) // 0b00101 -> 5\n   * at(key, 5) // 0b01101 -> 13\n   * at(key, 6) // 0b00000 -> 0\n   * ```\n   *\n   * @param {API.Uint32} path\n   * @param {number} depth\n   */\n  const at = (path, depth) => path >>> depth * bitWidth & mask;\n\n  /**\n   * @param {string} key\n   * @returns {API.Uint32}\n   */\n  const from = key => hash(utf8.encode(key));\n  return {\n    at,\n    from,\n    size: Math.ceil(hashSize * 8 / bitWidth)\n  };\n};","map":{"version":3,"names":["API","murmur","utf8","TextEncoder","hash32","x64","hash126","configure","bitWidth","hash","hashSize","RangeError","mask","at","path","depth","from","key","encode","size","Math","ceil"],"sources":["C:/FACULTATE/Proiect/node_modules/@perma/map/src/path/Uint32.js"],"sourcesContent":["import * as API from \"./api.js\"\n// @ts-expect-error - has no types\nimport murmur from \"murmurhash3js-revisited\"\n\nconst utf8 = new TextEncoder()\n\n/**\n * @typedef {(bytes:Uint8Array) => API.Uint32} Hasher\n * @type {Hasher}\n */\nexport const hash32 = murmur.x64.hash126\n\n/**\n * @param {Partial<API.Options<API.Uint32>>} options\n * @returns {API.Path<API.Uint32>}\n */\n/* c8 ignore next 45 */\nexport const configure = ({ bitWidth = 5, hash = hash32 }) => {\n  const hashSize = 4\n  if (bitWidth > hashSize * 8) {\n    throw new RangeError(\n      `Can not use bitWidth ${bitWidth} which exceeds the hashSize ${hashSize}`\n    )\n  }\n\n  if (hashSize * 8 > 32) {\n    throw new RangeError(\n      `Can not use hashSize ${hashSize} as it can not be encoded in Uint32`\n    )\n  }\n\n  // Mask for reading `bitWidth` number of bits from the end.\n  const mask = 0xffffffff >>> (32 - bitWidth)\n\n  /**\n   * Determines bit position for the path entry at the given `depth`.\n   * ```js\n   * const key = hash(\"result\") // 0b00011010010110010101111100110010\n   * // Which is following path (in reverse as we read from the right)\n   * // 10010/11001/10111/10010/00101/01101/00000 -> [ 18, 25, 23, 18, 5, 13, 0 ]\n   * at(key, 0) // 0b10010 -> 18\n   * at(key, 1) // 0b11001 -> 25\n   * at(key, 2) // 0b10111 -> 23\n   * at(key, 3) // 0b10010 -> 18\n   * at(key, 4) // 0b00101 -> 5\n   * at(key, 5) // 0b01101 -> 13\n   * at(key, 6) // 0b00000 -> 0\n   * ```\n   *\n   * @param {API.Uint32} path\n   * @param {number} depth\n   */\n  const at = (path, depth) => (path >>> (depth * bitWidth)) & mask\n\n  /**\n   * @param {string} key\n   * @returns {API.Uint32}\n   */\n  const from = key => hash(utf8.encode(key))\n\n  return { at, from, size: Math.ceil((hashSize * 8) / bitWidth) }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,UAAU;AAC/B;AACA,OAAOC,MAAM,MAAM,yBAAyB;AAE5C,MAAMC,IAAI,GAAG,IAAIC,WAAW,CAAC,CAAC;;AAE9B;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGH,MAAM,CAACI,GAAG,CAACC,OAAO;;AAExC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGA,CAAC;EAAEC,QAAQ,GAAG,CAAC;EAAEC,IAAI,GAAGL;AAAO,CAAC,KAAK;EAC5D,MAAMM,QAAQ,GAAG,CAAC;EAClB,IAAIF,QAAQ,GAAGE,QAAQ,GAAG,CAAC,EAAE;IAC3B,MAAM,IAAIC,UAAU,CACjB,wBAAuBH,QAAS,+BAA8BE,QAAS,EAC1E,CAAC;EACH;EAEA,IAAIA,QAAQ,GAAG,CAAC,GAAG,EAAE,EAAE;IACrB,MAAM,IAAIC,UAAU,CACjB,wBAAuBD,QAAS,qCACnC,CAAC;EACH;;EAEA;EACA,MAAME,IAAI,GAAG,UAAU,KAAM,EAAE,GAAGJ,QAAS;;EAE3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMK,EAAE,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAMD,IAAI,KAAMC,KAAK,GAAGP,QAAS,GAAII,IAAI;;EAEhE;AACF;AACA;AACA;EACE,MAAMI,IAAI,GAAGC,GAAG,IAAIR,IAAI,CAACP,IAAI,CAACgB,MAAM,CAACD,GAAG,CAAC,CAAC;EAE1C,OAAO;IAAEJ,EAAE;IAAEG,IAAI;IAAEG,IAAI,EAAEC,IAAI,CAACC,IAAI,CAAEX,QAAQ,GAAG,CAAC,GAAIF,QAAQ;EAAE,CAAC;AACjE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}