{"ast":null,"code":"/**\n * HTTP Capabilities.\n *\n * These can be imported directly with:\n * ```js\n * import * as HTTP from '@web3-storage/capabilities/http'\n * ```\n *\n * @module\n */\nimport { capability, Schema, ok } from '@ucanto/validator';\nimport { content } from './blob.js';\nimport { equal, equalBody, equalWith, SpaceDID, Await, and } from './utils.js';\n\n/**\n * `http/put` capability invocation MAY be performed by any authorized agent on behalf of the subject\n * as long as they have referenced `body` content to do so.\n */\nexport const put = capability({\n  can: 'http/put',\n  /**\n   * DID of the (memory) space where Blob is intended to\n   * be stored.\n   */\n  with: SpaceDID,\n  nb: Schema.struct({\n    /**\n     * Description of body to send (digest/size).\n     */\n    body: content,\n    /**\n     * HTTP(S) location that can receive blob content via HTTP PUT request.\n     */\n    url: Schema.string().or(Await),\n    /**\n     * HTTP headers.\n     */\n    headers: Schema.dictionary({\n      value: Schema.string()\n    }).or(Await)\n  }),\n  derives: (claim, from) => {\n    return and(equalWith(claim, from)) || and(equalBody(claim, from)) || and(equal(claim.nb.url, from.nb, 'url')) || and(equal(claim.nb.headers, from.nb, 'headers')) || ok({});\n  }\n});","map":{"version":3,"names":["capability","Schema","ok","content","equal","equalBody","equalWith","SpaceDID","Await","and","put","can","with","nb","struct","body","url","string","or","headers","dictionary","value","derives","claim","from"],"sources":["C:/FACULTATE/Proiect/node_modules/@web3-storage/capabilities/src/http.js"],"sourcesContent":["/**\n * HTTP Capabilities.\n *\n * These can be imported directly with:\n * ```js\n * import * as HTTP from '@web3-storage/capabilities/http'\n * ```\n *\n * @module\n */\nimport { capability, Schema, ok } from '@ucanto/validator'\nimport { content } from './blob.js'\nimport { equal, equalBody, equalWith, SpaceDID, Await, and } from './utils.js'\n\n/**\n * `http/put` capability invocation MAY be performed by any authorized agent on behalf of the subject\n * as long as they have referenced `body` content to do so.\n */\nexport const put = capability({\n  can: 'http/put',\n  /**\n   * DID of the (memory) space where Blob is intended to\n   * be stored.\n   */\n  with: SpaceDID,\n  nb: Schema.struct({\n    /**\n     * Description of body to send (digest/size).\n     */\n    body: content,\n    /**\n     * HTTP(S) location that can receive blob content via HTTP PUT request.\n     */\n    url: Schema.string().or(Await),\n    /**\n     * HTTP headers.\n     */\n    headers: Schema.dictionary({ value: Schema.string() }).or(Await),\n  }),\n  derives: (claim, from) => {\n    return (\n      and(equalWith(claim, from)) ||\n      and(equalBody(claim, from)) ||\n      and(equal(claim.nb.url, from.nb, 'url')) ||\n      and(equal(claim.nb.headers, from.nb, 'headers')) ||\n      ok({})\n    )\n  },\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAU,EAAEC,MAAM,EAAEC,EAAE,QAAQ,mBAAmB;AAC1D,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,GAAG,QAAQ,YAAY;;AAE9E;AACA;AACA;AACA;AACA,OAAO,MAAMC,GAAG,GAAGV,UAAU,CAAC;EAC5BW,GAAG,EAAE,UAAU;EACf;AACF;AACA;AACA;EACEC,IAAI,EAAEL,QAAQ;EACdM,EAAE,EAAEZ,MAAM,CAACa,MAAM,CAAC;IAChB;AACJ;AACA;IACIC,IAAI,EAAEZ,OAAO;IACb;AACJ;AACA;IACIa,GAAG,EAAEf,MAAM,CAACgB,MAAM,CAAC,CAAC,CAACC,EAAE,CAACV,KAAK,CAAC;IAC9B;AACJ;AACA;IACIW,OAAO,EAAElB,MAAM,CAACmB,UAAU,CAAC;MAAEC,KAAK,EAAEpB,MAAM,CAACgB,MAAM,CAAC;IAAE,CAAC,CAAC,CAACC,EAAE,CAACV,KAAK;EACjE,CAAC,CAAC;EACFc,OAAO,EAAEA,CAACC,KAAK,EAAEC,IAAI,KAAK;IACxB,OACEf,GAAG,CAACH,SAAS,CAACiB,KAAK,EAAEC,IAAI,CAAC,CAAC,IAC3Bf,GAAG,CAACJ,SAAS,CAACkB,KAAK,EAAEC,IAAI,CAAC,CAAC,IAC3Bf,GAAG,CAACL,KAAK,CAACmB,KAAK,CAACV,EAAE,CAACG,GAAG,EAAEQ,IAAI,CAACX,EAAE,EAAE,KAAK,CAAC,CAAC,IACxCJ,GAAG,CAACL,KAAK,CAACmB,KAAK,CAACV,EAAE,CAACM,OAAO,EAAEK,IAAI,CAACX,EAAE,EAAE,SAAS,CAAC,CAAC,IAChDX,EAAE,CAAC,CAAC,CAAC,CAAC;EAEV;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}