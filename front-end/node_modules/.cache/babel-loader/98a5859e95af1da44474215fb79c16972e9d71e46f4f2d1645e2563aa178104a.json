{"ast":null,"code":"'use strict';\n\nconst pLimit = require('p-limit');\nclass EndError extends Error {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n}\n\n// the input can also be a promise, so we `Promise.all()` them both\nconst finder = el => Promise.all(el).then(val => val[1] === true && Promise.reject(new EndError(val[0])));\nmodule.exports = (iterable, tester, opts) => {\n  opts = Object.assign({\n    concurrency: Infinity,\n    preserveOrder: true\n  }, opts);\n  const limit = pLimit(opts.concurrency);\n\n  // start all the promises concurrently with optional limit\n  const items = Array.from(iterable).map(el => [el, limit(() => Promise.resolve(el).then(tester))]);\n\n  // check the promises either serially or concurrently\n  const checkLimit = pLimit(opts.preserveOrder ? 1 : Infinity);\n  return Promise.all(items.map(el => checkLimit(() => finder(el)))).then(() => {}).catch(err => err instanceof EndError ? err.value : Promise.reject(err));\n};","map":{"version":3,"names":["pLimit","require","EndError","Error","constructor","value","finder","el","Promise","all","then","val","reject","module","exports","iterable","tester","opts","Object","assign","concurrency","Infinity","preserveOrder","limit","items","Array","from","map","resolve","checkLimit","catch","err"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/p-locate/index.js"],"sourcesContent":["'use strict';\nconst pLimit = require('p-limit');\n\nclass EndError extends Error {\n\tconstructor(value) {\n\t\tsuper();\n\t\tthis.value = value;\n\t}\n}\n\n// the input can also be a promise, so we `Promise.all()` them both\nconst finder = el => Promise.all(el).then(val => val[1] === true && Promise.reject(new EndError(val[0])));\n\nmodule.exports = (iterable, tester, opts) => {\n\topts = Object.assign({\n\t\tconcurrency: Infinity,\n\t\tpreserveOrder: true\n\t}, opts);\n\n\tconst limit = pLimit(opts.concurrency);\n\n\t// start all the promises concurrently with optional limit\n\tconst items = Array.from(iterable).map(el => [el, limit(() => Promise.resolve(el).then(tester))]);\n\n\t// check the promises either serially or concurrently\n\tconst checkLimit = pLimit(opts.preserveOrder ? 1 : Infinity);\n\n\treturn Promise.all(items.map(el => checkLimit(() => finder(el))))\n\t\t.then(() => {})\n\t\t.catch(err => err instanceof EndError ? err.value : Promise.reject(err));\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AAEjC,MAAMC,QAAQ,SAASC,KAAK,CAAC;EAC5BC,WAAWA,CAACC,KAAK,EAAE;IAClB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,KAAK,GAAGA,KAAK;EACnB;AACD;;AAEA;AACA,MAAMC,MAAM,GAAGC,EAAE,IAAIC,OAAO,CAACC,GAAG,CAACF,EAAE,CAAC,CAACG,IAAI,CAACC,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIH,OAAO,CAACI,MAAM,CAAC,IAAIV,QAAQ,CAACS,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAEzGE,MAAM,CAACC,OAAO,GAAG,CAACC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,KAAK;EAC5CA,IAAI,GAAGC,MAAM,CAACC,MAAM,CAAC;IACpBC,WAAW,EAAEC,QAAQ;IACrBC,aAAa,EAAE;EAChB,CAAC,EAAEL,IAAI,CAAC;EAER,MAAMM,KAAK,GAAGvB,MAAM,CAACiB,IAAI,CAACG,WAAW,CAAC;;EAEtC;EACA,MAAMI,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACX,QAAQ,CAAC,CAACY,GAAG,CAACpB,EAAE,IAAI,CAACA,EAAE,EAAEgB,KAAK,CAAC,MAAMf,OAAO,CAACoB,OAAO,CAACrB,EAAE,CAAC,CAACG,IAAI,CAACM,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEjG;EACA,MAAMa,UAAU,GAAG7B,MAAM,CAACiB,IAAI,CAACK,aAAa,GAAG,CAAC,GAAGD,QAAQ,CAAC;EAE5D,OAAOb,OAAO,CAACC,GAAG,CAACe,KAAK,CAACG,GAAG,CAACpB,EAAE,IAAIsB,UAAU,CAAC,MAAMvB,MAAM,CAACC,EAAE,CAAC,CAAC,CAAC,CAAC,CAC/DG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CACdoB,KAAK,CAACC,GAAG,IAAIA,GAAG,YAAY7B,QAAQ,GAAG6B,GAAG,CAAC1B,KAAK,GAAGG,OAAO,CAACI,MAAM,CAACmB,GAAG,CAAC,CAAC;AAC1E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}