{"ast":null,"code":"var _jsxFileName = \"C:\\\\FACULTATE\\\\Proiect\\\\front-end\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport campaignAbi from './Campaign.json';\nimport Login from './Login'; // Import the Login component\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CampaignInteraction() {\n  _s();\n  console.log(\"Campaign ABI: \", campaignAbi);\n  const [accountAddress, setAccountAddress] = useState('');\n  const [accountBalance, setAccountBalance] = useState('');\n  const [donationAmount, setDonationAmount] = useState('');\n  const [targetAmount, setTargetAmount] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [totalDonations, setTotalDonations] = useState(0);\n  const [provider] = useState(new ethers.providers.JsonRpcProvider(\"http://localhost:8545\"));\n  const [signerIndex, setSignerIndex] = useState(null);\n  const [campaignContract, setCampaignContract] = useState(null); // State for Campaign contract\n  const [accountData, setAccountData] = useState([]); // Initialize as empty array\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    async function fetchAccountData() {\n      try {\n        const accounts = await provider.listAccounts();\n        setAccountData(accounts || []); // Ensure it's always an array\n      } catch (error) {\n        console.error('Error fetching account data:', error);\n      }\n    }\n    fetchAccountData();\n  }, [provider]);\n  useEffect(() => {\n    // Ensure signerIndex is set before initializing contract\n    if (signerIndex !== null && provider) {\n      const signer = provider.getSigner(signerIndex);\n\n      // Initialize Campaign Contract if it's not initialized yet\n      if (!campaignContract) {\n        const campaignAddress = \"0x2546BcD3c84621e976D8185a91A922aE77ECEc30\"; // Replace with actual contract address\n        const campaign = new ethers.Contract(campaignAddress, campaignAbi.abi, signer);\n        setCampaignContract(campaign);\n      }\n    }\n  }, [signerIndex, provider, campaignContract]); // Ensure this runs only when signerIndex or provider changes\n\n  // Function to handle login\n  async function handleLogin(address) {\n    try {\n      setIsLoggedIn(true);\n      setAccountAddress(address);\n      const balance = await provider.getBalance(address);\n      setAccountBalance(ethers.utils.formatEther(balance));\n\n      // Make sure accountData contains the address you're logging in with\n      const index = accountData.indexOf(address);\n      if (index === -1) {\n        // If address isn't in accountData, handle the error or add it\n        console.log(\"Address not found in accountData.\");\n      } else {\n        setSignerIndex(index); // Set the signer index after successful login\n      }\n    } catch (error) {\n      console.error('Error during login:', error);\n    }\n  }\n\n  // Function to donate\n  async function donate() {\n    try {\n      if (campaignContract && donationAmount && parseFloat(donationAmount) > 0) {\n        const donationValue = ethers.utils.parseEther(donationAmount);\n\n        // Ensure the sender has enough balance\n        const balance = await provider.getBalance(accountAddress);\n        if (balance.lt(donationValue)) {\n          alert(\"Insufficient balance for the donation.\");\n          return;\n        }\n        const donationTx = await campaignContract.donate(1, \"Donation Purpose\", {\n          value: donationValue\n        });\n        await donationTx.wait();\n\n        // Update total donations and account balance\n        const updatedBalance = await provider.getBalance(accountAddress);\n        setAccountBalance(ethers.utils.formatEther(updatedBalance));\n        const currentTotalDonations = await campaignContract.totalDonations();\n        const currentTargetAmount = await campaignContract.targetAmount();\n        setTotalDonations(ethers.utils.formatEther(currentTotalDonations));\n        setTargetAmount(ethers.utils.formatEther(currentTargetAmount));\n        const currentProgress = parseFloat(currentTotalDonations) * 100 / parseFloat(currentTargetAmount);\n        setProgress(currentProgress);\n        console.log(\"Donation successful!\");\n      } else {\n        alert(\"Please enter a valid donation amount.\");\n      }\n    } catch (error) {\n      console.error('Error making donation:', error);\n    }\n  }\n\n  // Function to set the campaign target amount (only by owner)\n  async function setCampaignTarget() {\n    try {\n      if (campaignContract && parseFloat(targetAmount) > 0) {\n        const targetValue = ethers.utils.parseEther(targetAmount);\n\n        // Ensure the target value is higher than the total donations\n        const currentTotalDonations = await campaignContract.totalDonations();\n        if (targetValue.lte(currentTotalDonations)) {\n          alert(\"Target amount must be greater than total donations.\");\n          return;\n        }\n        const setTargetTx = await campaignContract.setTargetAmount(targetValue);\n        await setTargetTx.wait();\n        console.log(\"Target amount set successfully!\");\n      } else {\n        alert(\"Please enter a valid target amount.\");\n      }\n    } catch (error) {\n      console.error('Error setting target amount:', error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isLoggedIn ? /*#__PURE__*/_jsxDEV(Login, {\n      accountData: accountData,\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Campaign Interaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Connected Account Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Address: \", accountAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Balance: \", accountBalance, \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Campaign Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Donations: \", totalDonations, \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Target Amount: \", targetAmount, \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Progress: \", progress.toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Donate to the Campaign\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Donation Amount (ETH):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: donationAmount,\n        onChange: e => setDonationAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 119\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: donate,\n        children: \"Donate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Set Campaign Target (Owner only)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Target Amount (ETH):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: targetAmount,\n        onChange: e => setTargetAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 115\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setCampaignTarget,\n        children: \"Set Target\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n_s(CampaignInteraction, \"xzuGNIGkG/L7T/vTmsM7HE0obPU=\");\n_c = CampaignInteraction;\nexport default CampaignInteraction;\nvar _c;\n$RefreshReg$(_c, \"CampaignInteraction\");","map":{"version":3,"names":["React","useEffect","useState","ethers","campaignAbi","Login","jsxDEV","_jsxDEV","CampaignInteraction","_s","console","log","accountAddress","setAccountAddress","accountBalance","setAccountBalance","donationAmount","setDonationAmount","targetAmount","setTargetAmount","progress","setProgress","totalDonations","setTotalDonations","provider","providers","JsonRpcProvider","signerIndex","setSignerIndex","campaignContract","setCampaignContract","accountData","setAccountData","isLoggedIn","setIsLoggedIn","fetchAccountData","accounts","listAccounts","error","signer","getSigner","campaignAddress","campaign","Contract","abi","handleLogin","address","balance","getBalance","utils","formatEther","index","indexOf","donate","parseFloat","donationValue","parseEther","lt","alert","donationTx","value","wait","updatedBalance","currentTotalDonations","currentTargetAmount","currentProgress","setCampaignTarget","targetValue","lte","setTargetTx","children","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","type","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/FACULTATE/Proiect/front-end/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport campaignAbi from './Campaign.json';\r\nimport Login from './Login'; // Import the Login component\r\nimport './App.css';\r\n\r\nfunction CampaignInteraction() {\r\n    console.log(\"Campaign ABI: \", campaignAbi);\r\n    const [accountAddress, setAccountAddress] = useState('');\r\n    const [accountBalance, setAccountBalance] = useState('');\r\n    const [donationAmount, setDonationAmount] = useState('');\r\n    const [targetAmount, setTargetAmount] = useState('');\r\n    const [progress, setProgress] = useState(0);\r\n    const [totalDonations, setTotalDonations] = useState(0);\r\n    const [provider] = useState(new ethers.providers.JsonRpcProvider(\"http://localhost:8545\"));\r\n    const [signerIndex, setSignerIndex] = useState(null);\r\n\r\n    const [campaignContract, setCampaignContract] = useState(null); // State for Campaign contract\r\n    const [accountData, setAccountData] = useState([]); // Initialize as empty array\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function fetchAccountData() {\r\n            try {\r\n                const accounts = await provider.listAccounts();\r\n                setAccountData(accounts || []); // Ensure it's always an array\r\n            } catch (error) {\r\n                console.error('Error fetching account data:', error);\r\n            }\r\n        }\r\n\r\n        fetchAccountData();\r\n    }, [provider]);\r\n\r\n    useEffect(() => {\r\n        // Ensure signerIndex is set before initializing contract\r\n        if (signerIndex !== null && provider) {\r\n            const signer = provider.getSigner(signerIndex);\r\n            \r\n            // Initialize Campaign Contract if it's not initialized yet\r\n            if (!campaignContract) {\r\n                const campaignAddress = \"0x2546BcD3c84621e976D8185a91A922aE77ECEc30\"; // Replace with actual contract address\r\n                const campaign = new ethers.Contract(campaignAddress, campaignAbi.abi, signer);\r\n                setCampaignContract(campaign);\r\n            }\r\n        }\r\n    }, [signerIndex, provider, campaignContract]); // Ensure this runs only when signerIndex or provider changes\r\n    \r\n    // Function to handle login\r\n    async function handleLogin(address) {\r\n        try {\r\n            setIsLoggedIn(true);\r\n            setAccountAddress(address);\r\n            const balance = await provider.getBalance(address);\r\n            setAccountBalance(ethers.utils.formatEther(balance));\r\n    \r\n            // Make sure accountData contains the address you're logging in with\r\n            const index = accountData.indexOf(address);\r\n            if (index === -1) {\r\n                // If address isn't in accountData, handle the error or add it\r\n                console.log(\"Address not found in accountData.\");\r\n            } else {\r\n                setSignerIndex(index);  // Set the signer index after successful login\r\n            }\r\n        } catch (error) {\r\n            console.error('Error during login:', error);\r\n        }\r\n    }\r\n    \r\n\r\n    // Function to donate\r\n    async function donate() {\r\n        try {\r\n            if (campaignContract && donationAmount && parseFloat(donationAmount) > 0) {\r\n                const donationValue = ethers.utils.parseEther(donationAmount);\r\n\r\n                // Ensure the sender has enough balance\r\n                const balance = await provider.getBalance(accountAddress);\r\n                if (balance.lt(donationValue)) {\r\n                    alert(\"Insufficient balance for the donation.\");\r\n                    return;\r\n                }\r\n\r\n                const donationTx = await campaignContract.donate(1, \"Donation Purpose\", { value: donationValue });\r\n                await donationTx.wait();\r\n\r\n                // Update total donations and account balance\r\n                const updatedBalance = await provider.getBalance(accountAddress);\r\n                setAccountBalance(ethers.utils.formatEther(updatedBalance));\r\n\r\n                const currentTotalDonations = await campaignContract.totalDonations();\r\n                const currentTargetAmount = await campaignContract.targetAmount();\r\n\r\n                setTotalDonations(ethers.utils.formatEther(currentTotalDonations));\r\n                setTargetAmount(ethers.utils.formatEther(currentTargetAmount));\r\n\r\n                const currentProgress = (parseFloat(currentTotalDonations) * 100) / parseFloat(currentTargetAmount);\r\n                setProgress(currentProgress);\r\n\r\n                console.log(\"Donation successful!\");\r\n            } else {\r\n                alert(\"Please enter a valid donation amount.\");\r\n            }\r\n        } catch (error) {\r\n            console.error('Error making donation:', error);\r\n        }\r\n    }\r\n\r\n    // Function to set the campaign target amount (only by owner)\r\n    async function setCampaignTarget() {\r\n        try {\r\n            if (campaignContract && parseFloat(targetAmount) > 0) {\r\n                const targetValue = ethers.utils.parseEther(targetAmount);\r\n\r\n                // Ensure the target value is higher than the total donations\r\n                const currentTotalDonations = await campaignContract.totalDonations();\r\n                if (targetValue.lte(currentTotalDonations)) {\r\n                    alert(\"Target amount must be greater than total donations.\");\r\n                    return;\r\n                }\r\n\r\n                const setTargetTx = await campaignContract.setTargetAmount(targetValue);\r\n                await setTargetTx.wait();\r\n\r\n                console.log(\"Target amount set successfully!\");\r\n            } else {\r\n                alert(\"Please enter a valid target amount.\");\r\n            }\r\n        } catch (error) {\r\n            console.error('Error setting target amount:', error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!isLoggedIn ? (\r\n                <Login accountData={accountData} onLogin={handleLogin} />\r\n            ) : (\r\n                <div>\r\n                    <h1>Campaign Interaction</h1>\r\n\r\n                    <div>\r\n                        <h2>Connected Account Information</h2>\r\n                        <p>Address: {accountAddress}</p>\r\n                        <p>Balance: {accountBalance} ETH</p>\r\n                    </div>\r\n\r\n                    <h2>Campaign Progress</h2>\r\n                    <p>Total Donations: {totalDonations} ETH</p>\r\n                    <p>Target Amount: {targetAmount} ETH</p>\r\n                    <p>Progress: {progress.toFixed(2)}%</p>\r\n\r\n                    <hr />\r\n\r\n                    <h2>Donate to the Campaign</h2>\r\n                    <label>Donation Amount (ETH):</label>\r\n                    <input type=\"number\" value={donationAmount} onChange={(e) => setDonationAmount(e.target.value)} /><br />\r\n                    <button onClick={donate}>Donate</button>\r\n\r\n                    <hr />\r\n\r\n                    <h2>Set Campaign Target (Owner only)</h2>\r\n                    <label>Target Amount (ETH):</label>\r\n                    <input type=\"number\" value={targetAmount} onChange={(e) => setTargetAmount(e.target.value)} /><br />\r\n                    <button onClick={setCampaignTarget}>Set Target</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CampaignInteraction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}