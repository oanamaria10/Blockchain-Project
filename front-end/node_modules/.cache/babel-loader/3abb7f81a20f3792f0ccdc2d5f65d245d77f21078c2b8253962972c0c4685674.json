{"ast":null,"code":"var _jsxFileName = \"C:\\\\FACULTATE\\\\Proiect\\\\front-end\\\\src\\\\uploadFile.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { create } from 'ipfs-http-client';\n\n// Access the Infura keys from environment variables\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projectId = process.env.REACT_APP_INFURA_PROJECT_ID;\nconst projectSecret = process.env.REACT_APP_INFURA_PROJECT_SECRET;\n\n// Create the authentication header (Base64 encoding of Project ID and Secret)\nconst auth = 'Basic ' + Buffer.from(`${projectId}:${projectSecret}`).toString('base64');\n\n// Create an IPFS client instance with Infura's endpoint\nconst ipfsClient = create({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  headers: {\n    authorization: auth\n  }\n});\nconst UploadFile = ({\n  onFileUploaded\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [image, setImage] = useState(null);\n  const [link, setLink] = useState('');\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleImageChange = event => {\n    setImage(event.target.files[0]);\n  };\n  const handleLinkChange = event => {\n    setLink(event.target.value);\n  };\n  const uploadToIPFS = async () => {\n    try {\n      // Check if all fields are filled\n      if (!file || !image || !link) {\n        alert('Please fill in all fields!');\n        return;\n      }\n\n      // Upload the image to IPFS\n      const imageResponse = await ipfsClient.add(image);\n      console.log('Image uploaded to IPFS with CID:', imageResponse.path);\n\n      // Upload the file to IPFS\n      const fileResponse = await ipfsClient.add(file);\n      console.log('File uploaded to IPFS with CID:', fileResponse.path);\n\n      // Pass the CIDs and link to the parent component\n      onFileUploaded(imageResponse.path, fileResponse.path, link);\n    } catch (err) {\n      console.error('Error uploading to IPFS:', err);\n      alert('An error occurred during the upload. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Campaign Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleImageChange,\n      accept: \"image/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Campaign link\",\n      value: link,\n      onChange: handleLinkChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadToIPFS,\n      children: \"Upload to IPFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadFile, \"+rFBF2o0Wu4woQ7PUOa74OOXkzo=\");\n_c = UploadFile;\nexport default UploadFile;\nvar _c;\n$RefreshReg$(_c, \"UploadFile\");","map":{"version":3,"names":["React","useState","create","jsxDEV","_jsxDEV","projectId","process","env","REACT_APP_INFURA_PROJECT_ID","projectSecret","REACT_APP_INFURA_PROJECT_SECRET","auth","Buffer","from","toString","ipfsClient","host","port","protocol","headers","authorization","UploadFile","onFileUploaded","_s","file","setFile","image","setImage","link","setLink","handleFileChange","event","target","files","handleImageChange","handleLinkChange","value","uploadToIPFS","alert","imageResponse","add","console","log","path","fileResponse","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/FACULTATE/Proiect/front-end/src/uploadFile.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { create } from 'ipfs-http-client';\r\n\r\n// Access the Infura keys from environment variables\r\nconst projectId = process.env.REACT_APP_INFURA_PROJECT_ID;\r\nconst projectSecret = process.env.REACT_APP_INFURA_PROJECT_SECRET;\r\n\r\n// Create the authentication header (Base64 encoding of Project ID and Secret)\r\nconst auth = 'Basic ' + Buffer.from(`${projectId}:${projectSecret}`).toString('base64');\r\n\r\n// Create an IPFS client instance with Infura's endpoint\r\nconst ipfsClient = create({\r\n  host: 'ipfs.infura.io',\r\n  port: 5001,\r\n  protocol: 'https',\r\n  headers: {\r\n    authorization: auth,\r\n  },\r\n});\r\n\r\nconst UploadFile = ({ onFileUploaded }) => {\r\n  const [file, setFile] = useState(null);\r\n  const [image, setImage] = useState(null);\r\n  const [link, setLink] = useState('');\r\n\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleImageChange = (event) => {\r\n    setImage(event.target.files[0]);\r\n  };\r\n\r\n  const handleLinkChange = (event) => {\r\n    setLink(event.target.value);\r\n  };\r\n\r\n  const uploadToIPFS = async () => {\r\n    try {\r\n      // Check if all fields are filled\r\n      if (!file || !image || !link) {\r\n        alert('Please fill in all fields!');\r\n        return;\r\n      }\r\n\r\n      // Upload the image to IPFS\r\n      const imageResponse = await ipfsClient.add(image);\r\n      console.log('Image uploaded to IPFS with CID:', imageResponse.path);\r\n\r\n      // Upload the file to IPFS\r\n      const fileResponse = await ipfsClient.add(file);\r\n      console.log('File uploaded to IPFS with CID:', fileResponse.path);\r\n\r\n      // Pass the CIDs and link to the parent component\r\n      onFileUploaded(imageResponse.path, fileResponse.path, link);\r\n    } catch (err) {\r\n      console.error('Error uploading to IPFS:', err);\r\n      alert('An error occurred during the upload. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Upload Campaign Files</h2>\r\n      {/* Input for image */}\r\n      <input type=\"file\" onChange={handleImageChange} accept=\"image/*\" />\r\n      {/* Input for file */}\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      {/* Input for campaign link */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Campaign link\"\r\n        value={link}\r\n        onChange={handleLinkChange}\r\n      />\r\n      {/* Button to upload files to IPFS */}\r\n      <button onClick={uploadToIPFS}>Upload to IPFS</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadFile;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,kBAAkB;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,2BAA2B;AACzD,MAAMC,aAAa,GAAGH,OAAO,CAACC,GAAG,CAACG,+BAA+B;;AAEjE;AACA,MAAMC,IAAI,GAAG,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAAE,GAAER,SAAU,IAAGI,aAAc,EAAC,CAAC,CAACK,QAAQ,CAAC,QAAQ,CAAC;;AAEvF;AACA,MAAMC,UAAU,GAAGb,MAAM,CAAC;EACxBc,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,IAAI;EACVC,QAAQ,EAAE,OAAO;EACjBC,OAAO,EAAE;IACPC,aAAa,EAAET;EACjB;AACF,CAAC,CAAC;AAEF,MAAMU,UAAU,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC2B,IAAI,EAAEC,OAAO,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAM6B,gBAAgB,GAAIC,KAAK,IAAK;IAClCN,OAAO,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,MAAMC,iBAAiB,GAAIH,KAAK,IAAK;IACnCJ,QAAQ,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACjC,CAAC;EAED,MAAME,gBAAgB,GAAIJ,KAAK,IAAK;IAClCF,OAAO,CAACE,KAAK,CAACC,MAAM,CAACI,KAAK,CAAC;EAC7B,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF;MACA,IAAI,CAACb,IAAI,IAAI,CAACE,KAAK,IAAI,CAACE,IAAI,EAAE;QAC5BU,KAAK,CAAC,4BAA4B,CAAC;QACnC;MACF;;MAEA;MACA,MAAMC,aAAa,GAAG,MAAMxB,UAAU,CAACyB,GAAG,CAACd,KAAK,CAAC;MACjDe,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEH,aAAa,CAACI,IAAI,CAAC;;MAEnE;MACA,MAAMC,YAAY,GAAG,MAAM7B,UAAU,CAACyB,GAAG,CAAChB,IAAI,CAAC;MAC/CiB,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEE,YAAY,CAACD,IAAI,CAAC;;MAEjE;MACArB,cAAc,CAACiB,aAAa,CAACI,IAAI,EAAEC,YAAY,CAACD,IAAI,EAAEf,IAAI,CAAC;IAC7D,CAAC,CAAC,OAAOiB,GAAG,EAAE;MACZJ,OAAO,CAACK,KAAK,CAAC,0BAA0B,EAAED,GAAG,CAAC;MAC9CP,KAAK,CAAC,wDAAwD,CAAC;IACjE;EACF,CAAC;EAED,oBACElC,OAAA;IAAA2C,QAAA,gBACE3C,OAAA;MAAA2C,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE9B/C,OAAA;MAAOgD,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEnB,iBAAkB;MAACoB,MAAM,EAAC;IAAS;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEnE/C,OAAA;MAAOgD,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEvB;IAAiB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEjD/C,OAAA;MACEgD,IAAI,EAAC,MAAM;MACXG,WAAW,EAAC,eAAe;MAC3BnB,KAAK,EAAER,IAAK;MACZyB,QAAQ,EAAElB;IAAiB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eAEF/C,OAAA;MAAQoD,OAAO,EAAEnB,YAAa;MAAAU,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA3DIF,UAAU;AAAAoC,EAAA,GAAVpC,UAAU;AA6DhB,eAAeA,UAAU;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}