{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isHaltResult = exports.isRevertResult = exports.isSuccessResult = exports.isCreateOutput = exports.isCallOutput = exports.isEvmStep = exports.isDecodedCallTrace = exports.isCallTrace = exports.isDecodedCreateTrace = exports.isCreateTrace = exports.isPrecompileTrace = void 0;\nfunction isPrecompileTrace(trace) {\n  return \"precompile\" in trace;\n}\nexports.isPrecompileTrace = isPrecompileTrace;\nfunction isCreateTrace(trace) {\n  return \"code\" in trace && !isCallTrace(trace);\n}\nexports.isCreateTrace = isCreateTrace;\nfunction isDecodedCreateTrace(trace) {\n  return isCreateTrace(trace) && trace.bytecode !== undefined;\n}\nexports.isDecodedCreateTrace = isDecodedCreateTrace;\nfunction isCallTrace(trace) {\n  return \"code\" in trace && \"calldata\" in trace;\n}\nexports.isCallTrace = isCallTrace;\nfunction isDecodedCallTrace(trace) {\n  return isCallTrace(trace) && trace.bytecode !== undefined;\n}\nexports.isDecodedCallTrace = isDecodedCallTrace;\nfunction isEvmStep(step) {\n  return \"pc\" in step && step.pc !== undefined;\n}\nexports.isEvmStep = isEvmStep;\nfunction isCallOutput(output) {\n  return !isCreateOutput(output);\n}\nexports.isCallOutput = isCallOutput;\nfunction isCreateOutput(output) {\n  return \"address\" in output;\n}\nexports.isCreateOutput = isCreateOutput;\nfunction isSuccessResult(result) {\n  // Only need to check for one unique field\n  return \"gasRefunded\" in result;\n}\nexports.isSuccessResult = isSuccessResult;\nfunction isRevertResult(result) {\n  return !(\"reason\" in result);\n}\nexports.isRevertResult = isRevertResult;\nfunction isHaltResult(result) {\n  return !(\"output\" in result);\n}\nexports.isHaltResult = isHaltResult;","map":{"version":3,"names":["isPrecompileTrace","trace","exports","isCreateTrace","isCallTrace","isDecodedCreateTrace","bytecode","undefined","isDecodedCallTrace","isEvmStep","step","pc","isCallOutput","output","isCreateOutput","isSuccessResult","result","isRevertResult","isHaltResult"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\hardhat-network\\stack-traces\\message-trace.ts"],"sourcesContent":["import type { Bytecode } from \"./model\";\nimport type { Exit } from \"../provider/vm/exit\";\nimport type {\n  CallOutput,\n  CreateOutput,\n  HaltResult,\n  RevertResult,\n  SuccessResult,\n} from \"@nomicfoundation/edr\";\n\nexport type MessageTrace =\n  | CreateMessageTrace\n  | CallMessageTrace\n  | PrecompileMessageTrace;\n\nexport type EvmMessageTrace = CreateMessageTrace | CallMessageTrace;\n\nexport type DecodedEvmMessageTrace =\n  | DecodedCreateMessageTrace\n  | DecodedCallMessageTrace;\n\nexport interface BaseMessageTrace {\n  value: bigint;\n  returnData: Uint8Array;\n  exit: Exit;\n  gasUsed: bigint;\n  depth: number;\n}\n\nexport interface PrecompileMessageTrace extends BaseMessageTrace {\n  precompile: number;\n  calldata: Uint8Array;\n}\n\nexport interface BaseEvmMessageTrace extends BaseMessageTrace {\n  code: Uint8Array;\n  value: bigint;\n  returnData: Uint8Array;\n  steps: MessageTraceStep[];\n  bytecode?: Bytecode;\n  // The following is just an optimization: When processing this traces it's useful to know ahead of\n  // time how many subtraces there are.\n  numberOfSubtraces: number;\n}\n\nexport interface CreateMessageTrace extends BaseEvmMessageTrace {\n  deployedContract: Uint8Array | undefined;\n}\n\nexport interface CallMessageTrace extends BaseEvmMessageTrace {\n  calldata: Uint8Array;\n  address: Uint8Array;\n  codeAddress: Uint8Array;\n}\n\nexport interface DecodedCreateMessageTrace extends CreateMessageTrace {\n  bytecode: Bytecode;\n}\n\nexport interface DecodedCallMessageTrace extends CallMessageTrace {\n  bytecode: Bytecode;\n}\n\nexport function isPrecompileTrace(\n  trace: MessageTrace\n): trace is PrecompileMessageTrace {\n  return \"precompile\" in trace;\n}\n\nexport function isCreateTrace(\n  trace: MessageTrace\n): trace is CreateMessageTrace {\n  return \"code\" in trace && !isCallTrace(trace);\n}\n\nexport function isDecodedCreateTrace(\n  trace: MessageTrace\n): trace is DecodedCreateMessageTrace {\n  return isCreateTrace(trace) && trace.bytecode !== undefined;\n}\n\nexport function isCallTrace(trace: MessageTrace): trace is CallMessageTrace {\n  return \"code\" in trace && \"calldata\" in trace;\n}\n\nexport function isDecodedCallTrace(\n  trace: MessageTrace\n): trace is DecodedCallMessageTrace {\n  return isCallTrace(trace) && trace.bytecode !== undefined;\n}\n\nexport function isEvmStep(step: MessageTraceStep): step is EvmStep {\n  return \"pc\" in step && step.pc !== undefined;\n}\n\nexport type MessageTraceStep = MessageTrace | EvmStep;\n\nexport interface EvmStep {\n  pc: number;\n}\n\nexport function isCallOutput(\n  output: CallOutput | CreateOutput\n): output is CallOutput {\n  return !isCreateOutput(output);\n}\n\nexport function isCreateOutput(\n  output: CallOutput | CreateOutput\n): output is CreateOutput {\n  return \"address\" in output;\n}\n\nexport function isSuccessResult(\n  result: SuccessResult | RevertResult | HaltResult\n): result is SuccessResult {\n  // Only need to check for one unique field\n  return \"gasRefunded\" in result;\n}\n\nexport function isRevertResult(\n  result: SuccessResult | RevertResult | HaltResult\n): result is RevertResult {\n  return !(\"reason\" in result);\n}\n\nexport function isHaltResult(\n  result: SuccessResult | RevertResult | HaltResult\n): result is HaltResult {\n  return !(\"output\" in result);\n}\n"],"mappings":";;;;;;AA+DA,SAAgBA,iBAAiBA,CAC/BC,KAAmB;EAEnB,OAAO,YAAY,IAAIA,KAAK;AAC9B;AAJAC,OAAA,CAAAF,iBAAA,GAAAA,iBAAA;AAMA,SAAgBG,aAAaA,CAC3BF,KAAmB;EAEnB,OAAO,MAAM,IAAIA,KAAK,IAAI,CAACG,WAAW,CAACH,KAAK,CAAC;AAC/C;AAJAC,OAAA,CAAAC,aAAA,GAAAA,aAAA;AAMA,SAAgBE,oBAAoBA,CAClCJ,KAAmB;EAEnB,OAAOE,aAAa,CAACF,KAAK,CAAC,IAAIA,KAAK,CAACK,QAAQ,KAAKC,SAAS;AAC7D;AAJAL,OAAA,CAAAG,oBAAA,GAAAA,oBAAA;AAMA,SAAgBD,WAAWA,CAACH,KAAmB;EAC7C,OAAO,MAAM,IAAIA,KAAK,IAAI,UAAU,IAAIA,KAAK;AAC/C;AAFAC,OAAA,CAAAE,WAAA,GAAAA,WAAA;AAIA,SAAgBI,kBAAkBA,CAChCP,KAAmB;EAEnB,OAAOG,WAAW,CAACH,KAAK,CAAC,IAAIA,KAAK,CAACK,QAAQ,KAAKC,SAAS;AAC3D;AAJAL,OAAA,CAAAM,kBAAA,GAAAA,kBAAA;AAMA,SAAgBC,SAASA,CAACC,IAAsB;EAC9C,OAAO,IAAI,IAAIA,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,SAAS;AAC9C;AAFAL,OAAA,CAAAO,SAAA,GAAAA,SAAA;AAUA,SAAgBG,YAAYA,CAC1BC,MAAiC;EAEjC,OAAO,CAACC,cAAc,CAACD,MAAM,CAAC;AAChC;AAJAX,OAAA,CAAAU,YAAA,GAAAA,YAAA;AAMA,SAAgBE,cAAcA,CAC5BD,MAAiC;EAEjC,OAAO,SAAS,IAAIA,MAAM;AAC5B;AAJAX,OAAA,CAAAY,cAAA,GAAAA,cAAA;AAMA,SAAgBC,eAAeA,CAC7BC,MAAiD;EAEjD;EACA,OAAO,aAAa,IAAIA,MAAM;AAChC;AALAd,OAAA,CAAAa,eAAA,GAAAA,eAAA;AAOA,SAAgBE,cAAcA,CAC5BD,MAAiD;EAEjD,OAAO,EAAE,QAAQ,IAAIA,MAAM,CAAC;AAC9B;AAJAd,OAAA,CAAAe,cAAA,GAAAA,cAAA;AAMA,SAAgBC,YAAYA,CAC1BF,MAAiD;EAEjD,OAAO,EAAE,QAAQ,IAAIA,MAAM,CAAC;AAC9B;AAJAd,OAAA,CAAAgB,YAAA,GAAAA,YAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}