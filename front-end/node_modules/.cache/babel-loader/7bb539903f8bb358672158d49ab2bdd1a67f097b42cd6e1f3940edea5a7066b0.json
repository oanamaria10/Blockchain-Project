{"ast":null,"code":"import { addInstrumentationHandler, logger } from '@sentry/utils';\nimport { SpanStatus } from './spanstatus';\nimport { getActiveTransaction } from './utils';\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation() {\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'error'\n  });\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'unhandledrejection'\n  });\n}\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback() {\n  var activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    logger.log(\"[Tracing] Transaction: \" + SpanStatus.InternalError + \" -> Global error occured\");\n    activeTransaction.setStatus(SpanStatus.InternalError);\n  }\n}","map":{"version":3,"names":["addInstrumentationHandler","logger","SpanStatus","getActiveTransaction","registerErrorInstrumentation","callback","errorCallback","type","activeTransaction","log","InternalError","setStatus"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\tracing\\src\\errors.ts"],"sourcesContent":["import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { SpanStatus } from './spanstatus';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'error',\n  });\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'unhandledrejection',\n  });\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    logger.log(`[Tracing] Transaction: ${SpanStatus.InternalError} -> Global error occured`);\n    activeTransaction.setStatus(SpanStatus.InternalError);\n  }\n}\n"],"mappings":"AAAA,SAASA,yBAAyB,EAAEC,MAAM,QAAQ,eAAe;AAEjE,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,oBAAoB,QAAQ,SAAS;AAE9C;;;AAGA,OAAM,SAAUC,4BAA4BA,CAAA;EAC1CJ,yBAAyB,CAAC;IACxBK,QAAQ,EAAEC,aAAa;IACvBC,IAAI,EAAE;GACP,CAAC;EACFP,yBAAyB,CAAC;IACxBK,QAAQ,EAAEC,aAAa;IACvBC,IAAI,EAAE;GACP,CAAC;AACJ;AAEA;;;AAGA,SAASD,aAAaA,CAAA;EACpB,IAAME,iBAAiB,GAAGL,oBAAoB,EAAE;EAChD,IAAIK,iBAAiB,EAAE;IACrBP,MAAM,CAACQ,GAAG,CAAC,4BAA0BP,UAAU,CAACQ,aAAa,6BAA0B,CAAC;IACxFF,iBAAiB,CAACG,SAAS,CAACT,UAAU,CAACQ,aAAa,CAAC;;AAEzD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}