{"ast":null,"code":"import { intToHex, isHexPrefixed, stripHexPrefix } from '@nomicfoundation/ethereumjs-util';\nimport { Hardfork } from './enums.js';\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce) {\n  if (!nonce || nonce === '0x0') {\n    return '0x0000000000000000';\n  }\n  if (isHexPrefixed(nonce)) {\n    return '0x' + stripHexPrefix(nonce).padStart(16, '0');\n  }\n  return '0x' + nonce.padStart(16, '0');\n}\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\nfunction parseGethParams(json, mergeForkIdPostMerge = true) {\n  const {\n    name,\n    config,\n    difficulty,\n    mixHash,\n    gasLimit,\n    coinbase,\n    baseFeePerGas,\n    excessBlobGas\n  } = json;\n  let {\n    extraData,\n    timestamp,\n    nonce\n  } = json;\n  const genesisTimestamp = Number(timestamp);\n  const {\n    chainId\n  } = config;\n  // geth is not strictly putting empty fields with a 0x prefix\n  if (extraData === '') {\n    extraData = '0x';\n  }\n  // geth may use number for timestamp\n  if (!isHexPrefixed(timestamp)) {\n    timestamp = intToHex(parseInt(timestamp));\n  }\n  // geth may not give us a nonce strictly formatted to an 8 byte hex string\n  if (nonce.length !== 18) {\n    nonce = formatNonce(nonce);\n  }\n  // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n  // but have different configuration parameters in geth genesis parameters\n  if (config.eip155Block !== config.eip158Block) {\n    throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');\n  }\n  const params = {\n    name,\n    chainId,\n    networkId: chainId,\n    genesis: {\n      timestamp,\n      gasLimit,\n      difficulty,\n      nonce,\n      extraData,\n      mixHash,\n      coinbase,\n      baseFeePerGas,\n      excessBlobGas\n    },\n    hardfork: undefined,\n    hardforks: [],\n    bootstrapNodes: [],\n    consensus: config.clique !== undefined ? {\n      type: 'poa',\n      algorithm: 'clique',\n      clique: {\n        // The recent geth genesis seems to be using blockperiodseconds\n        // and epochlength for clique specification\n        // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n        period: config.clique.period ?? config.clique.blockperiodseconds,\n        epoch: config.clique.epoch ?? config.clique.epochlength\n      }\n    } : {\n      type: 'pow',\n      algorithm: 'ethash',\n      ethash: {}\n    }\n  };\n  const forkMap = {\n    [Hardfork.Homestead]: {\n      name: 'homesteadBlock'\n    },\n    [Hardfork.Dao]: {\n      name: 'daoForkBlock'\n    },\n    [Hardfork.TangerineWhistle]: {\n      name: 'eip150Block'\n    },\n    [Hardfork.SpuriousDragon]: {\n      name: 'eip155Block'\n    },\n    [Hardfork.Byzantium]: {\n      name: 'byzantiumBlock'\n    },\n    [Hardfork.Constantinople]: {\n      name: 'constantinopleBlock'\n    },\n    [Hardfork.Petersburg]: {\n      name: 'petersburgBlock'\n    },\n    [Hardfork.Istanbul]: {\n      name: 'istanbulBlock'\n    },\n    [Hardfork.MuirGlacier]: {\n      name: 'muirGlacierBlock'\n    },\n    [Hardfork.Berlin]: {\n      name: 'berlinBlock'\n    },\n    [Hardfork.London]: {\n      name: 'londonBlock'\n    },\n    [Hardfork.MergeForkIdTransition]: {\n      name: 'mergeForkBlock',\n      postMerge: mergeForkIdPostMerge\n    },\n    [Hardfork.Shanghai]: {\n      name: 'shanghaiTime',\n      postMerge: true,\n      isTimestamp: true\n    },\n    [Hardfork.Cancun]: {\n      name: 'cancunTime',\n      postMerge: true,\n      isTimestamp: true\n    },\n    [Hardfork.Prague]: {\n      name: 'pragueTime',\n      postMerge: true,\n      isTimestamp: true\n    }\n  };\n  // forkMapRev is the map from config field name to Hardfork\n  const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {\n    acc[forkMap[elem].name] = elem;\n    return acc;\n  }, {});\n  const configHardforkNames = Object.keys(config).filter(key => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);\n  params.hardforks = configHardforkNames.map(nameBlock => ({\n    name: forkMapRev[nameBlock],\n    block: forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== 'number' ? null : config[nameBlock],\n    timestamp: forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === 'number' ? config[nameBlock] : undefined\n  })).filter(fork => fork.block !== null || fork.timestamp !== undefined);\n  params.hardforks.sort(function (a, b) {\n    return (a.block ?? Infinity) - (b.block ?? Infinity);\n  });\n  params.hardforks.sort(function (a, b) {\n    // non timestamp forks come before any timestamp forks\n    return (a.timestamp ?? 0) - (b.timestamp ?? 0);\n  });\n  // only set the genesis timestamp forks to zero post the above sort has happended\n  // to get the correct sorting\n  for (const hf of params.hardforks) {\n    if (hf.timestamp === genesisTimestamp) {\n      hf.timestamp = 0;\n    }\n  }\n  if (config.terminalTotalDifficulty !== undefined) {\n    // Following points need to be considered for placement of merge hf\n    // - Merge hardfork can't be placed at genesis\n    // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n    // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n    //   necessary for e.g. withdrawals\n    const mergeConfig = {\n      name: Hardfork.Paris,\n      ttd: config.terminalTotalDifficulty,\n      block: null\n    };\n    // Merge hardfork has to be placed before first hardfork that is dependent on merge\n    const postMergeIndex = params.hardforks.findIndex(hf => forkMap[hf.name]?.postMerge === true);\n    if (postMergeIndex !== -1) {\n      params.hardforks.splice(postMergeIndex, 0, mergeConfig);\n    } else {\n      params.hardforks.push(mergeConfig);\n    }\n  }\n  const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n  params.hardfork = latestHardfork?.name;\n  params.hardforks.unshift({\n    name: Hardfork.Chainstart,\n    block: 0\n  });\n  return params;\n}\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\nexport function parseGethGenesis(json, name, mergeForkIdPostMerge) {\n  try {\n    const required = ['config', 'difficulty', 'gasLimit', 'nonce', 'alloc'];\n    if (required.some(field => !(field in json))) {\n      const missingField = required.filter(field => !(field in json));\n      throw new Error(`Invalid format, expected geth genesis field \"${missingField}\" missing`);\n    }\n    if (name !== undefined) {\n      json.name = name;\n    }\n    return parseGethParams(json, mergeForkIdPostMerge);\n  } catch (e) {\n    throw new Error(`Error parsing parameters file: ${e.message}`);\n  }\n}","map":{"version":3,"names":["intToHex","isHexPrefixed","stripHexPrefix","Hardfork","formatNonce","nonce","padStart","parseGethParams","json","mergeForkIdPostMerge","name","config","difficulty","mixHash","gasLimit","coinbase","baseFeePerGas","excessBlobGas","extraData","timestamp","genesisTimestamp","Number","chainId","parseInt","length","eip155Block","eip158Block","Error","params","networkId","genesis","hardfork","undefined","hardforks","bootstrapNodes","consensus","clique","type","algorithm","period","blockperiodseconds","epoch","epochlength","ethash","forkMap","Homestead","Dao","TangerineWhistle","SpuriousDragon","Byzantium","Constantinople","Petersburg","Istanbul","MuirGlacier","Berlin","London","MergeForkIdTransition","postMerge","Shanghai","isTimestamp","Cancun","Prague","forkMapRev","Object","keys","reduce","acc","elem","configHardforkNames","filter","key","map","nameBlock","block","fork","sort","a","b","Infinity","hf","terminalTotalDifficulty","mergeConfig","Paris","ttd","postMergeIndex","findIndex","splice","push","latestHardfork","slice","unshift","Chainstart","parseGethGenesis","required","some","field","missingField","e","message"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@nomicfoundation\\ethereumjs-common\\src\\utils.ts"],"sourcesContent":["import { intToHex, isHexPrefixed, stripHexPrefix } from '@nomicfoundation/ethereumjs-util'\n\nimport { Hardfork } from './enums.js'\n\ntype ConfigHardfork =\n  | { name: string; block: null; timestamp: number }\n  | { name: string; block: number; timestamp?: number }\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce: string): string {\n  if (!nonce || nonce === '0x0') {\n    return '0x0000000000000000'\n  }\n  if (isHexPrefixed(nonce)) {\n    return '0x' + stripHexPrefix(nonce).padStart(16, '0')\n  }\n  return '0x' + nonce.padStart(16, '0')\n}\n\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\nfunction parseGethParams(json: any, mergeForkIdPostMerge: boolean = true) {\n  const {\n    name,\n    config,\n    difficulty,\n    mixHash,\n    gasLimit,\n    coinbase,\n    baseFeePerGas,\n    excessBlobGas,\n  }: {\n    name: string\n    config: any\n    difficulty: string\n    mixHash: string\n    gasLimit: string\n    coinbase: string\n    baseFeePerGas: string\n    excessBlobGas: string\n  } = json\n  let { extraData, timestamp, nonce }: { extraData: string; timestamp: string; nonce: string } =\n    json\n  const genesisTimestamp = Number(timestamp)\n  const { chainId }: { chainId: number } = config\n\n  // geth is not strictly putting empty fields with a 0x prefix\n  if (extraData === '') {\n    extraData = '0x'\n  }\n  // geth may use number for timestamp\n  if (!isHexPrefixed(timestamp)) {\n    timestamp = intToHex(parseInt(timestamp))\n  }\n  // geth may not give us a nonce strictly formatted to an 8 byte hex string\n  if (nonce.length !== 18) {\n    nonce = formatNonce(nonce)\n  }\n\n  // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n  // but have different configuration parameters in geth genesis parameters\n  if (config.eip155Block !== config.eip158Block) {\n    throw new Error(\n      'EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork'\n    )\n  }\n\n  const params = {\n    name,\n    chainId,\n    networkId: chainId,\n    genesis: {\n      timestamp,\n      gasLimit,\n      difficulty,\n      nonce,\n      extraData,\n      mixHash,\n      coinbase,\n      baseFeePerGas,\n      excessBlobGas,\n    },\n    hardfork: undefined as string | undefined,\n    hardforks: [] as ConfigHardfork[],\n    bootstrapNodes: [],\n    consensus:\n      config.clique !== undefined\n        ? {\n            type: 'poa',\n            algorithm: 'clique',\n            clique: {\n              // The recent geth genesis seems to be using blockperiodseconds\n              // and epochlength for clique specification\n              // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n              period: config.clique.period ?? config.clique.blockperiodseconds,\n              epoch: config.clique.epoch ?? config.clique.epochlength,\n            },\n          }\n        : {\n            type: 'pow',\n            algorithm: 'ethash',\n            ethash: {},\n          },\n  }\n\n  const forkMap: { [key: string]: { name: string; postMerge?: boolean; isTimestamp?: boolean } } = {\n    [Hardfork.Homestead]: { name: 'homesteadBlock' },\n    [Hardfork.Dao]: { name: 'daoForkBlock' },\n    [Hardfork.TangerineWhistle]: { name: 'eip150Block' },\n    [Hardfork.SpuriousDragon]: { name: 'eip155Block' },\n    [Hardfork.Byzantium]: { name: 'byzantiumBlock' },\n    [Hardfork.Constantinople]: { name: 'constantinopleBlock' },\n    [Hardfork.Petersburg]: { name: 'petersburgBlock' },\n    [Hardfork.Istanbul]: { name: 'istanbulBlock' },\n    [Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },\n    [Hardfork.Berlin]: { name: 'berlinBlock' },\n    [Hardfork.London]: { name: 'londonBlock' },\n    [Hardfork.MergeForkIdTransition]: { name: 'mergeForkBlock', postMerge: mergeForkIdPostMerge },\n    [Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },\n    [Hardfork.Cancun]: { name: 'cancunTime', postMerge: true, isTimestamp: true },\n    [Hardfork.Prague]: { name: 'pragueTime', postMerge: true, isTimestamp: true },\n  }\n\n  // forkMapRev is the map from config field name to Hardfork\n  const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {\n    acc[forkMap[elem].name] = elem\n    return acc\n  }, {} as { [key: string]: string })\n  const configHardforkNames = Object.keys(config).filter(\n    (key) => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null\n  )\n\n  params.hardforks = configHardforkNames\n    .map((nameBlock) => ({\n      name: forkMapRev[nameBlock],\n      block:\n        forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== 'number'\n          ? null\n          : config[nameBlock],\n      timestamp:\n        forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === 'number'\n          ? config[nameBlock]\n          : undefined,\n    }))\n    .filter((fork) => fork.block !== null || fork.timestamp !== undefined) as ConfigHardfork[]\n\n  params.hardforks.sort(function (a: ConfigHardfork, b: ConfigHardfork) {\n    return (a.block ?? Infinity) - (b.block ?? Infinity)\n  })\n\n  params.hardforks.sort(function (a: ConfigHardfork, b: ConfigHardfork) {\n    // non timestamp forks come before any timestamp forks\n    return (a.timestamp ?? 0) - (b.timestamp ?? 0)\n  })\n\n  // only set the genesis timestamp forks to zero post the above sort has happended\n  // to get the correct sorting\n  for (const hf of params.hardforks) {\n    if (hf.timestamp === genesisTimestamp) {\n      hf.timestamp = 0\n    }\n  }\n\n  if (config.terminalTotalDifficulty !== undefined) {\n    // Following points need to be considered for placement of merge hf\n    // - Merge hardfork can't be placed at genesis\n    // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n    // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n    //   necessary for e.g. withdrawals\n    const mergeConfig = {\n      name: Hardfork.Paris,\n      ttd: config.terminalTotalDifficulty,\n      block: null,\n    }\n\n    // Merge hardfork has to be placed before first hardfork that is dependent on merge\n    const postMergeIndex = params.hardforks.findIndex(\n      (hf: any) => forkMap[hf.name]?.postMerge === true\n    )\n    if (postMergeIndex !== -1) {\n      params.hardforks.splice(postMergeIndex, 0, mergeConfig as unknown as ConfigHardfork)\n    } else {\n      params.hardforks.push(mergeConfig as unknown as ConfigHardfork)\n    }\n  }\n\n  const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined\n  params.hardfork = latestHardfork?.name\n  params.hardforks.unshift({ name: Hardfork.Chainstart, block: 0 })\n\n  return params\n}\n\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\nexport function parseGethGenesis(json: any, name?: string, mergeForkIdPostMerge?: boolean) {\n  try {\n    const required = ['config', 'difficulty', 'gasLimit', 'nonce', 'alloc']\n    if (required.some((field) => !(field in json))) {\n      const missingField = required.filter((field) => !(field in json))\n      throw new Error(`Invalid format, expected geth genesis field \"${missingField}\" missing`)\n    }\n    if (name !== undefined) {\n      json.name = name\n    }\n    return parseGethParams(json, mergeForkIdPostMerge)\n  } catch (e: any) {\n    throw new Error(`Error parsing parameters file: ${e.message}`)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}