{"ast":null,"code":"import { capability, DID, struct, ok } from '@ucanto/validator';\nimport { equalWith, and, equal, SpaceDID } from './utils.js';\n\n// e.g. did:web:web3.storage or did:web:staging.web3.storage\nexport const ProviderDID = DID.match({\n  method: 'web'\n});\n\n/**\n * Capability can be invoked by a provider to check if it has given space as\n * a consumer.\n */\nexport const has = capability({\n  can: 'consumer/has',\n  with: ProviderDID,\n  nb: struct({\n    consumer: SpaceDID\n  }),\n  derives: (child, parent) => {\n    return and(equalWith(child, parent)) || and(equal(child.nb.consumer, parent.nb.consumer, 'consumer')) || ok({});\n  }\n});\n\n/**\n * Capability can be invoked by a provider to get information about a consumer.\n */\nexport const get = capability({\n  can: 'consumer/get',\n  with: ProviderDID,\n  nb: struct({\n    consumer: SpaceDID\n  }),\n  derives: (child, parent) => {\n    return and(equalWith(child, parent)) || and(equal(child.nb.consumer, parent.nb.consumer, 'consumer')) || ok({});\n  }\n});","map":{"version":3,"names":["capability","DID","struct","ok","equalWith","and","equal","SpaceDID","ProviderDID","match","method","has","can","with","nb","consumer","derives","child","parent","get"],"sources":["C:/FACULTATE/Proiect/node_modules/@web3-storage/capabilities/src/consumer.js"],"sourcesContent":["import { capability, DID, struct, ok } from '@ucanto/validator'\nimport { equalWith, and, equal, SpaceDID } from './utils.js'\n\n// e.g. did:web:web3.storage or did:web:staging.web3.storage\nexport const ProviderDID = DID.match({ method: 'web' })\n\n/**\n * Capability can be invoked by a provider to check if it has given space as\n * a consumer.\n */\nexport const has = capability({\n  can: 'consumer/has',\n  with: ProviderDID,\n  nb: struct({\n    consumer: SpaceDID,\n  }),\n  derives: (child, parent) => {\n    return (\n      and(equalWith(child, parent)) ||\n      and(equal(child.nb.consumer, parent.nb.consumer, 'consumer')) ||\n      ok({})\n    )\n  },\n})\n\n/**\n * Capability can be invoked by a provider to get information about a consumer.\n */\nexport const get = capability({\n  can: 'consumer/get',\n  with: ProviderDID,\n  nb: struct({\n    consumer: SpaceDID,\n  }),\n  derives: (child, parent) => {\n    return (\n      and(equalWith(child, parent)) ||\n      and(equal(child.nb.consumer, parent.nb.consumer, 'consumer')) ||\n      ok({})\n    )\n  },\n})\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,GAAG,EAAEC,MAAM,EAAEC,EAAE,QAAQ,mBAAmB;AAC/D,SAASC,SAAS,EAAEC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,YAAY;;AAE5D;AACA,OAAO,MAAMC,WAAW,GAAGP,GAAG,CAACQ,KAAK,CAAC;EAAEC,MAAM,EAAE;AAAM,CAAC,CAAC;;AAEvD;AACA;AACA;AACA;AACA,OAAO,MAAMC,GAAG,GAAGX,UAAU,CAAC;EAC5BY,GAAG,EAAE,cAAc;EACnBC,IAAI,EAAEL,WAAW;EACjBM,EAAE,EAAEZ,MAAM,CAAC;IACTa,QAAQ,EAAER;EACZ,CAAC,CAAC;EACFS,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;IAC1B,OACEb,GAAG,CAACD,SAAS,CAACa,KAAK,EAAEC,MAAM,CAAC,CAAC,IAC7Bb,GAAG,CAACC,KAAK,CAACW,KAAK,CAACH,EAAE,CAACC,QAAQ,EAAEG,MAAM,CAACJ,EAAE,CAACC,QAAQ,EAAE,UAAU,CAAC,CAAC,IAC7DZ,EAAE,CAAC,CAAC,CAAC,CAAC;EAEV;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA,OAAO,MAAMgB,GAAG,GAAGnB,UAAU,CAAC;EAC5BY,GAAG,EAAE,cAAc;EACnBC,IAAI,EAAEL,WAAW;EACjBM,EAAE,EAAEZ,MAAM,CAAC;IACTa,QAAQ,EAAER;EACZ,CAAC,CAAC;EACFS,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;IAC1B,OACEb,GAAG,CAACD,SAAS,CAACa,KAAK,EAAEC,MAAM,CAAC,CAAC,IAC7Bb,GAAG,CAACC,KAAK,CAACW,KAAK,CAACH,EAAE,CAACC,QAAQ,EAAEG,MAAM,CAACJ,EAAE,CAACC,QAAQ,EAAE,UAAU,CAAC,CAAC,IAC7DZ,EAAE,CAAC,CAAC,CAAC,CAAC;EAEV;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}