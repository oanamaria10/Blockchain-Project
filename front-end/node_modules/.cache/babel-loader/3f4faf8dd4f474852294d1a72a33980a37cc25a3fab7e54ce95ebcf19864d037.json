{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateParams = void 0;\nconst PathReporter_1 = require(\"io-ts/lib/PathReporter\");\nconst errors_1 = require(\"../../../providers/errors\");\n/* eslint-disable @nomicfoundation/hardhat-internal-rules/only-hardhat-error */\n/**\n * This function validates a list of params, throwing InvalidArgumentsError\n * if the validation fails, and returning their already-parsed types if\n * the validation succeeds.\n *\n * TODO: The type can probably be improved, removing the anys\n */\nfunction validateParams(params, ...types) {\n  if (types === undefined && params.length > 0) {\n    throw new errors_1.InvalidArgumentsError(`No argument was expected and got ${params.length}`);\n  }\n  let optionalParams = 0;\n  for (let i = types.length - 1; i >= 0; i--) {\n    if (types[i].is(undefined)) {\n      optionalParams += 1;\n    } else {\n      break;\n    }\n  }\n  if (optionalParams === 0) {\n    if (params.length !== types.length) {\n      throw new errors_1.InvalidArgumentsError(`Expected exactly ${types.length} arguments and got ${params.length}`);\n    }\n  } else {\n    if (params.length > types.length || params.length < types.length - optionalParams) {\n      throw new errors_1.InvalidArgumentsError(`Expected between ${types.length - optionalParams} and ${types.length} arguments and got ${params.length}`);\n    }\n  }\n  const decoded = [];\n  for (let i = 0; i < types.length; i++) {\n    const result = types[i].decode(params[i]);\n    if (result.isLeft()) {\n      throw new errors_1.InvalidArgumentsError(`Errors encountered in param ${i}: ${PathReporter_1.PathReporter.report(result).join(\", \")}`);\n    }\n    decoded.push(result.value);\n  }\n  return decoded;\n}\nexports.validateParams = validateParams;","map":{"version":3,"names":["PathReporter_1","require","errors_1","validateParams","params","types","undefined","length","InvalidArgumentsError","optionalParams","i","is","decoded","result","decode","isLeft","PathReporter","report","join","push","value","exports"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\core\\jsonrpc\\types\\input\\validation.ts"],"sourcesContent":["import * as t from \"io-ts\";\nimport { PathReporter } from \"io-ts/lib/PathReporter\";\n\nimport { InvalidArgumentsError } from \"../../../providers/errors\";\n\n/* eslint-disable @nomicfoundation/hardhat-internal-rules/only-hardhat-error */\n\n/**\n * This function validates a list of params, throwing InvalidArgumentsError\n * if the validation fails, and returning their already-parsed types if\n * the validation succeeds.\n *\n * TODO: The type can probably be improved, removing the anys\n */\nexport function validateParams<\n  TypesT extends ReadonlyArray<t.Type<any, any, any>>\n>(\n  params: any[],\n  ...types: TypesT\n): {\n  [i in keyof TypesT]: TypesT[i] extends t.Type<infer TypeT, any, any>\n    ? TypeT\n    : never;\n} {\n  if (types === undefined && params.length > 0) {\n    throw new InvalidArgumentsError(\n      `No argument was expected and got ${params.length}`\n    );\n  }\n\n  let optionalParams = 0;\n  for (let i = types.length - 1; i >= 0; i--) {\n    if (types[i].is(undefined)) {\n      optionalParams += 1;\n    } else {\n      break;\n    }\n  }\n\n  if (optionalParams === 0) {\n    if (params.length !== types.length) {\n      throw new InvalidArgumentsError(\n        `Expected exactly ${types.length} arguments and got ${params.length}`\n      );\n    }\n  } else {\n    if (\n      params.length > types.length ||\n      params.length < types.length - optionalParams\n    ) {\n      throw new InvalidArgumentsError(\n        `Expected between ${types.length - optionalParams} and ${\n          types.length\n        } arguments and got ${params.length}`\n      );\n    }\n  }\n\n  const decoded: any[] = [];\n  for (let i = 0; i < types.length; i++) {\n    const result = types[i].decode(params[i]);\n\n    if (result.isLeft()) {\n      throw new InvalidArgumentsError(\n        `Errors encountered in param ${i}: ${PathReporter.report(result).join(\n          \", \"\n        )}`\n      );\n    }\n\n    decoded.push(result.value);\n  }\n\n  return decoded as any;\n}\n"],"mappings":";;;;;;AACA,MAAAA,cAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AAEA;AAEA;;;;;;;AAOA,SAAgBE,cAAcA,CAG5BC,MAAa,EACb,GAAGC,KAAa;EAMhB,IAAIA,KAAK,KAAKC,SAAS,IAAIF,MAAM,CAACG,MAAM,GAAG,CAAC,EAAE;IAC5C,MAAM,IAAIL,QAAA,CAAAM,qBAAqB,CAC7B,oCAAoCJ,MAAM,CAACG,MAAM,EAAE,CACpD;;EAGH,IAAIE,cAAc,GAAG,CAAC;EACtB,KAAK,IAAIC,CAAC,GAAGL,KAAK,CAACE,MAAM,GAAG,CAAC,EAAEG,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1C,IAAIL,KAAK,CAACK,CAAC,CAAC,CAACC,EAAE,CAACL,SAAS,CAAC,EAAE;MAC1BG,cAAc,IAAI,CAAC;KACpB,MAAM;MACL;;;EAIJ,IAAIA,cAAc,KAAK,CAAC,EAAE;IACxB,IAAIL,MAAM,CAACG,MAAM,KAAKF,KAAK,CAACE,MAAM,EAAE;MAClC,MAAM,IAAIL,QAAA,CAAAM,qBAAqB,CAC7B,oBAAoBH,KAAK,CAACE,MAAM,sBAAsBH,MAAM,CAACG,MAAM,EAAE,CACtE;;GAEJ,MAAM;IACL,IACEH,MAAM,CAACG,MAAM,GAAGF,KAAK,CAACE,MAAM,IAC5BH,MAAM,CAACG,MAAM,GAAGF,KAAK,CAACE,MAAM,GAAGE,cAAc,EAC7C;MACA,MAAM,IAAIP,QAAA,CAAAM,qBAAqB,CAC7B,oBAAoBH,KAAK,CAACE,MAAM,GAAGE,cAAc,QAC/CJ,KAAK,CAACE,MACR,sBAAsBH,MAAM,CAACG,MAAM,EAAE,CACtC;;;EAIL,MAAMK,OAAO,GAAU,EAAE;EACzB,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACE,MAAM,EAAEG,CAAC,EAAE,EAAE;IACrC,MAAMG,MAAM,GAAGR,KAAK,CAACK,CAAC,CAAC,CAACI,MAAM,CAACV,MAAM,CAACM,CAAC,CAAC,CAAC;IAEzC,IAAIG,MAAM,CAACE,MAAM,EAAE,EAAE;MACnB,MAAM,IAAIb,QAAA,CAAAM,qBAAqB,CAC7B,+BAA+BE,CAAC,KAAKV,cAAA,CAAAgB,YAAY,CAACC,MAAM,CAACJ,MAAM,CAAC,CAACK,IAAI,CACnE,IAAI,CACL,EAAE,CACJ;;IAGHN,OAAO,CAACO,IAAI,CAACN,MAAM,CAACO,KAAK,CAAC;;EAG5B,OAAOR,OAAc;AACvB;AA5DAS,OAAA,CAAAlB,cAAA,GAAAA,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}