{"ast":null,"code":"'use strict';\n\nconst util = require('../core/util');\nconst {\n  kBodyUsed\n} = require('../core/symbols');\nconst assert = require('assert');\nconst {\n  InvalidArgumentError\n} = require('../core/errors');\nconst EE = require('events');\nconst redirectableStatusCodes = [300, 301, 302, 303, 307, 308];\nconst kBody = Symbol('body');\nclass BodyAsyncIterable {\n  constructor(body) {\n    this[kBody] = body;\n    this[kBodyUsed] = false;\n  }\n  async *[Symbol.asyncIterator]() {\n    assert(!this[kBodyUsed], 'disturbed');\n    this[kBodyUsed] = true;\n    yield* this[kBody];\n  }\n}\nclass RedirectHandler {\n  constructor(dispatch, maxRedirections, opts, handler) {\n    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number');\n    }\n    util.validateHandler(handler, opts.method, opts.upgrade);\n    this.dispatch = dispatch;\n    this.location = null;\n    this.abort = null;\n    this.opts = {\n      ...opts,\n      maxRedirections: 0\n    }; // opts must be a copy\n    this.maxRedirections = maxRedirections;\n    this.handler = handler;\n    this.history = [];\n    if (util.isStream(this.opts.body)) {\n      // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp\n      // so that it can be dispatched again?\n      // TODO (fix): Do we need 100-expect support to provide a way to do this properly?\n      if (util.bodyLength(this.opts.body) === 0) {\n        this.opts.body.on('data', function () {\n          assert(false);\n        });\n      }\n      if (typeof this.opts.body.readableDidRead !== 'boolean') {\n        this.opts.body[kBodyUsed] = false;\n        EE.prototype.on.call(this.opts.body, 'data', function () {\n          this[kBodyUsed] = true;\n        });\n      }\n    } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {\n      // TODO (fix): We can't access ReadableStream internal state\n      // to determine whether or not it has been disturbed. This is just\n      // a workaround.\n      this.opts.body = new BodyAsyncIterable(this.opts.body);\n    } else if (this.opts.body && typeof this.opts.body !== 'string' && !ArrayBuffer.isView(this.opts.body) && util.isIterable(this.opts.body)) {\n      // TODO: Should we allow re-using iterable if !this.opts.idempotent\n      // or through some other flag?\n      this.opts.body = new BodyAsyncIterable(this.opts.body);\n    }\n  }\n  onConnect(abort) {\n    this.abort = abort;\n    this.handler.onConnect(abort, {\n      history: this.history\n    });\n  }\n  onUpgrade(statusCode, headers, socket) {\n    this.handler.onUpgrade(statusCode, headers, socket);\n  }\n  onError(error) {\n    this.handler.onError(error);\n  }\n  onHeaders(statusCode, headers, resume, statusText) {\n    this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);\n    if (this.opts.origin) {\n      this.history.push(new URL(this.opts.path, this.opts.origin));\n    }\n    if (!this.location) {\n      return this.handler.onHeaders(statusCode, headers, resume, statusText);\n    }\n    const {\n      origin,\n      pathname,\n      search\n    } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));\n    const path = search ? `${pathname}${search}` : pathname;\n\n    // Remove headers referring to the original URL.\n    // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.\n    // https://tools.ietf.org/html/rfc7231#section-6.4\n    this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);\n    this.opts.path = path;\n    this.opts.origin = origin;\n    this.opts.maxRedirections = 0;\n    this.opts.query = null;\n\n    // https://tools.ietf.org/html/rfc7231#section-6.4.4\n    // In case of HTTP 303, always replace method to be either HEAD or GET\n    if (statusCode === 303 && this.opts.method !== 'HEAD') {\n      this.opts.method = 'GET';\n      this.opts.body = null;\n    }\n  }\n  onData(chunk) {\n    if (this.location) {\n      /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n         TLDR: undici always ignores 3xx response bodies.\n         Redirection is used to serve the requested resource from another URL, so it is assumes that\n        no body is generated (and thus can be ignored). Even though generating a body is not prohibited.\n         For status 301, 302, 303, 307 and 308 (the latter from RFC 7238), the specs mention that the body usually\n        (which means it's optional and not mandated) contain just an hyperlink to the value of\n        the Location response header, so the body can be ignored safely.\n         For status 300, which is \"Multiple Choices\", the spec mentions both generating a Location\n        response header AND a response body with the other possible location to follow.\n        Since the spec explicitily chooses not to specify a format for such body and leave it to\n        servers and browsers implementors, we ignore the body as there is no specified way to eventually parse it.\n      */\n    } else {\n      return this.handler.onData(chunk);\n    }\n  }\n  onComplete(trailers) {\n    if (this.location) {\n      /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n         TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections\n        and neither are useful if present.\n         See comment on onData method above for more detailed informations.\n      */\n\n      this.location = null;\n      this.abort = null;\n      this.dispatch(this.opts, this);\n    } else {\n      this.handler.onComplete(trailers);\n    }\n  }\n  onBodySent(chunk) {\n    if (this.handler.onBodySent) {\n      this.handler.onBodySent(chunk);\n    }\n  }\n}\nfunction parseLocation(statusCode, headers) {\n  if (redirectableStatusCodes.indexOf(statusCode) === -1) {\n    return null;\n  }\n  for (let i = 0; i < headers.length; i += 2) {\n    if (headers[i].toString().toLowerCase() === 'location') {\n      return headers[i + 1];\n    }\n  }\n}\n\n// https://tools.ietf.org/html/rfc7231#section-6.4.4\nfunction shouldRemoveHeader(header, removeContent, unknownOrigin) {\n  return header.length === 4 && header.toString().toLowerCase() === 'host' || removeContent && header.toString().toLowerCase().indexOf('content-') === 0 || unknownOrigin && header.length === 13 && header.toString().toLowerCase() === 'authorization' || unknownOrigin && header.length === 6 && header.toString().toLowerCase() === 'cookie';\n}\n\n// https://tools.ietf.org/html/rfc7231#section-6.4\nfunction cleanRequestHeaders(headers, removeContent, unknownOrigin) {\n  const ret = [];\n  if (Array.isArray(headers)) {\n    for (let i = 0; i < headers.length; i += 2) {\n      if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {\n        ret.push(headers[i], headers[i + 1]);\n      }\n    }\n  } else if (headers && typeof headers === 'object') {\n    for (const key of Object.keys(headers)) {\n      if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {\n        ret.push(key, headers[key]);\n      }\n    }\n  } else {\n    assert(headers == null, 'headers must be an object or an array');\n  }\n  return ret;\n}\nmodule.exports = RedirectHandler;","map":{"version":3,"names":["util","require","kBodyUsed","assert","InvalidArgumentError","EE","redirectableStatusCodes","kBody","Symbol","BodyAsyncIterable","constructor","body","asyncIterator","RedirectHandler","dispatch","maxRedirections","opts","handler","Number","isInteger","validateHandler","method","upgrade","location","abort","history","isStream","bodyLength","on","readableDidRead","prototype","call","pipeTo","ArrayBuffer","isView","isIterable","onConnect","onUpgrade","statusCode","headers","socket","onError","error","onHeaders","resume","statusText","length","isDisturbed","parseLocation","origin","push","URL","path","pathname","search","parseURL","cleanRequestHeaders","query","onData","chunk","onComplete","trailers","onBodySent","indexOf","i","toString","toLowerCase","shouldRemoveHeader","header","removeContent","unknownOrigin","ret","Array","isArray","key","Object","keys","module","exports"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/undici/lib/handler/RedirectHandler.js"],"sourcesContent":["'use strict'\n\nconst util = require('../core/util')\nconst { kBodyUsed } = require('../core/symbols')\nconst assert = require('assert')\nconst { InvalidArgumentError } = require('../core/errors')\nconst EE = require('events')\n\nconst redirectableStatusCodes = [300, 301, 302, 303, 307, 308]\n\nconst kBody = Symbol('body')\n\nclass BodyAsyncIterable {\n  constructor (body) {\n    this[kBody] = body\n    this[kBodyUsed] = false\n  }\n\n  async * [Symbol.asyncIterator] () {\n    assert(!this[kBodyUsed], 'disturbed')\n    this[kBodyUsed] = true\n    yield * this[kBody]\n  }\n}\n\nclass RedirectHandler {\n  constructor (dispatch, maxRedirections, opts, handler) {\n    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number')\n    }\n\n    util.validateHandler(handler, opts.method, opts.upgrade)\n\n    this.dispatch = dispatch\n    this.location = null\n    this.abort = null\n    this.opts = { ...opts, maxRedirections: 0 } // opts must be a copy\n    this.maxRedirections = maxRedirections\n    this.handler = handler\n    this.history = []\n\n    if (util.isStream(this.opts.body)) {\n      // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp\n      // so that it can be dispatched again?\n      // TODO (fix): Do we need 100-expect support to provide a way to do this properly?\n      if (util.bodyLength(this.opts.body) === 0) {\n        this.opts.body\n          .on('data', function () {\n            assert(false)\n          })\n      }\n\n      if (typeof this.opts.body.readableDidRead !== 'boolean') {\n        this.opts.body[kBodyUsed] = false\n        EE.prototype.on.call(this.opts.body, 'data', function () {\n          this[kBodyUsed] = true\n        })\n      }\n    } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {\n      // TODO (fix): We can't access ReadableStream internal state\n      // to determine whether or not it has been disturbed. This is just\n      // a workaround.\n      this.opts.body = new BodyAsyncIterable(this.opts.body)\n    } else if (\n      this.opts.body &&\n      typeof this.opts.body !== 'string' &&\n      !ArrayBuffer.isView(this.opts.body) &&\n      util.isIterable(this.opts.body)\n    ) {\n      // TODO: Should we allow re-using iterable if !this.opts.idempotent\n      // or through some other flag?\n      this.opts.body = new BodyAsyncIterable(this.opts.body)\n    }\n  }\n\n  onConnect (abort) {\n    this.abort = abort\n    this.handler.onConnect(abort, { history: this.history })\n  }\n\n  onUpgrade (statusCode, headers, socket) {\n    this.handler.onUpgrade(statusCode, headers, socket)\n  }\n\n  onError (error) {\n    this.handler.onError(error)\n  }\n\n  onHeaders (statusCode, headers, resume, statusText) {\n    this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body)\n      ? null\n      : parseLocation(statusCode, headers)\n\n    if (this.opts.origin) {\n      this.history.push(new URL(this.opts.path, this.opts.origin))\n    }\n\n    if (!this.location) {\n      return this.handler.onHeaders(statusCode, headers, resume, statusText)\n    }\n\n    const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)))\n    const path = search ? `${pathname}${search}` : pathname\n\n    // Remove headers referring to the original URL.\n    // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.\n    // https://tools.ietf.org/html/rfc7231#section-6.4\n    this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin)\n    this.opts.path = path\n    this.opts.origin = origin\n    this.opts.maxRedirections = 0\n    this.opts.query = null\n\n    // https://tools.ietf.org/html/rfc7231#section-6.4.4\n    // In case of HTTP 303, always replace method to be either HEAD or GET\n    if (statusCode === 303 && this.opts.method !== 'HEAD') {\n      this.opts.method = 'GET'\n      this.opts.body = null\n    }\n  }\n\n  onData (chunk) {\n    if (this.location) {\n      /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n\n        TLDR: undici always ignores 3xx response bodies.\n\n        Redirection is used to serve the requested resource from another URL, so it is assumes that\n        no body is generated (and thus can be ignored). Even though generating a body is not prohibited.\n\n        For status 301, 302, 303, 307 and 308 (the latter from RFC 7238), the specs mention that the body usually\n        (which means it's optional and not mandated) contain just an hyperlink to the value of\n        the Location response header, so the body can be ignored safely.\n\n        For status 300, which is \"Multiple Choices\", the spec mentions both generating a Location\n        response header AND a response body with the other possible location to follow.\n        Since the spec explicitily chooses not to specify a format for such body and leave it to\n        servers and browsers implementors, we ignore the body as there is no specified way to eventually parse it.\n      */\n    } else {\n      return this.handler.onData(chunk)\n    }\n  }\n\n  onComplete (trailers) {\n    if (this.location) {\n      /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n\n        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections\n        and neither are useful if present.\n\n        See comment on onData method above for more detailed informations.\n      */\n\n      this.location = null\n      this.abort = null\n\n      this.dispatch(this.opts, this)\n    } else {\n      this.handler.onComplete(trailers)\n    }\n  }\n\n  onBodySent (chunk) {\n    if (this.handler.onBodySent) {\n      this.handler.onBodySent(chunk)\n    }\n  }\n}\n\nfunction parseLocation (statusCode, headers) {\n  if (redirectableStatusCodes.indexOf(statusCode) === -1) {\n    return null\n  }\n\n  for (let i = 0; i < headers.length; i += 2) {\n    if (headers[i].toString().toLowerCase() === 'location') {\n      return headers[i + 1]\n    }\n  }\n}\n\n// https://tools.ietf.org/html/rfc7231#section-6.4.4\nfunction shouldRemoveHeader (header, removeContent, unknownOrigin) {\n  return (\n    (header.length === 4 && header.toString().toLowerCase() === 'host') ||\n    (removeContent && header.toString().toLowerCase().indexOf('content-') === 0) ||\n    (unknownOrigin && header.length === 13 && header.toString().toLowerCase() === 'authorization') ||\n    (unknownOrigin && header.length === 6 && header.toString().toLowerCase() === 'cookie')\n  )\n}\n\n// https://tools.ietf.org/html/rfc7231#section-6.4\nfunction cleanRequestHeaders (headers, removeContent, unknownOrigin) {\n  const ret = []\n  if (Array.isArray(headers)) {\n    for (let i = 0; i < headers.length; i += 2) {\n      if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {\n        ret.push(headers[i], headers[i + 1])\n      }\n    }\n  } else if (headers && typeof headers === 'object') {\n    for (const key of Object.keys(headers)) {\n      if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {\n        ret.push(key, headers[key])\n      }\n    }\n  } else {\n    assert(headers == null, 'headers must be an object or an array')\n  }\n  return ret\n}\n\nmodule.exports = RedirectHandler\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}