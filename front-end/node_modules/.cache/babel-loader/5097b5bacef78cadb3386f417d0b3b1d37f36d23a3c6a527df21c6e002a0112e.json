{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.edrTracingMessageToMinimalMessage = exports.edrTracingMessageResultToMinimalEVMResult = exports.edrTracingStepToMinimalInterpreterStep = exports.edrRpcDebugTraceToHardhat = exports.ethereumjsMempoolOrderToEdrMineOrdering = exports.ethereumjsIntervalMiningConfigToEdr = exports.edrSpecIdToEthereumHardfork = exports.ethereumsjsHardforkToEdrSpecId = void 0;\nconst ethereumjs_util_1 = require(\"@nomicfoundation/ethereumjs-util\");\nconst hardforks_1 = require(\"../../../util/hardforks\");\n/* eslint-disable @nomicfoundation/hardhat-internal-rules/only-hardhat-error */\nfunction ethereumsjsHardforkToEdrSpecId(hardfork) {\n  switch (hardfork) {\n    case hardforks_1.HardforkName.FRONTIER:\n      return 0 /* SpecId.Frontier */;\n    case hardforks_1.HardforkName.HOMESTEAD:\n      return 2 /* SpecId.Homestead */;\n    case hardforks_1.HardforkName.DAO:\n      return 3 /* SpecId.DaoFork */;\n    case hardforks_1.HardforkName.TANGERINE_WHISTLE:\n      return 4 /* SpecId.Tangerine */;\n    case hardforks_1.HardforkName.SPURIOUS_DRAGON:\n      return 5 /* SpecId.SpuriousDragon */;\n    case hardforks_1.HardforkName.BYZANTIUM:\n      return 6 /* SpecId.Byzantium */;\n    case hardforks_1.HardforkName.CONSTANTINOPLE:\n      return 7 /* SpecId.Constantinople */;\n    case hardforks_1.HardforkName.PETERSBURG:\n      return 8 /* SpecId.Petersburg */;\n    case hardforks_1.HardforkName.ISTANBUL:\n      return 9 /* SpecId.Istanbul */;\n    case hardforks_1.HardforkName.MUIR_GLACIER:\n      return 10 /* SpecId.MuirGlacier */;\n    case hardforks_1.HardforkName.BERLIN:\n      return 11 /* SpecId.Berlin */;\n    case hardforks_1.HardforkName.LONDON:\n      return 12 /* SpecId.London */;\n    case hardforks_1.HardforkName.ARROW_GLACIER:\n      return 13 /* SpecId.ArrowGlacier */;\n    case hardforks_1.HardforkName.GRAY_GLACIER:\n      return 14 /* SpecId.GrayGlacier */;\n    case hardforks_1.HardforkName.MERGE:\n      return 15 /* SpecId.Merge */;\n    case hardforks_1.HardforkName.SHANGHAI:\n      return 16 /* SpecId.Shanghai */;\n    case hardforks_1.HardforkName.CANCUN:\n      return 17 /* SpecId.Cancun */;\n    default:\n      const _exhaustiveCheck = hardfork;\n      throw new Error(`Unknown hardfork name '${hardfork}', this shouldn't happen`);\n  }\n}\nexports.ethereumsjsHardforkToEdrSpecId = ethereumsjsHardforkToEdrSpecId;\nfunction edrSpecIdToEthereumHardfork(specId) {\n  switch (specId) {\n    case 0 /* SpecId.Frontier */:\n      return hardforks_1.HardforkName.FRONTIER;\n    case 2 /* SpecId.Homestead */:\n      return hardforks_1.HardforkName.HOMESTEAD;\n    case 3 /* SpecId.DaoFork */:\n      return hardforks_1.HardforkName.DAO;\n    case 4 /* SpecId.Tangerine */:\n      return hardforks_1.HardforkName.TANGERINE_WHISTLE;\n    case 5 /* SpecId.SpuriousDragon */:\n      return hardforks_1.HardforkName.SPURIOUS_DRAGON;\n    case 6 /* SpecId.Byzantium */:\n      return hardforks_1.HardforkName.BYZANTIUM;\n    case 7 /* SpecId.Constantinople */:\n      return hardforks_1.HardforkName.CONSTANTINOPLE;\n    case 8 /* SpecId.Petersburg */:\n      return hardforks_1.HardforkName.PETERSBURG;\n    case 9 /* SpecId.Istanbul */:\n      return hardforks_1.HardforkName.ISTANBUL;\n    case 10 /* SpecId.MuirGlacier */:\n      return hardforks_1.HardforkName.MUIR_GLACIER;\n    case 11 /* SpecId.Berlin */:\n      return hardforks_1.HardforkName.BERLIN;\n    case 12 /* SpecId.London */:\n      return hardforks_1.HardforkName.LONDON;\n    case 13 /* SpecId.ArrowGlacier */:\n      return hardforks_1.HardforkName.ARROW_GLACIER;\n    case 14 /* SpecId.GrayGlacier */:\n      return hardforks_1.HardforkName.GRAY_GLACIER;\n    case 15 /* SpecId.Merge */:\n      return hardforks_1.HardforkName.MERGE;\n    case 16 /* SpecId.Shanghai */:\n      return hardforks_1.HardforkName.SHANGHAI;\n    // HACK: EthereumJS doesn't support Cancun, so report Shanghai\n    case 17 /* SpecId.Cancun */:\n      return hardforks_1.HardforkName.SHANGHAI;\n    default:\n      throw new Error(`Unknown spec id '${specId}', this shouldn't happen`);\n  }\n}\nexports.edrSpecIdToEthereumHardfork = edrSpecIdToEthereumHardfork;\nfunction ethereumjsIntervalMiningConfigToEdr(config) {\n  if (typeof config === \"number\") {\n    // Is interval mining disabled?\n    if (config === 0) {\n      return undefined;\n    } else {\n      return BigInt(config);\n    }\n  } else {\n    return {\n      min: BigInt(config[0]),\n      max: BigInt(config[1])\n    };\n  }\n}\nexports.ethereumjsIntervalMiningConfigToEdr = ethereumjsIntervalMiningConfigToEdr;\nfunction ethereumjsMempoolOrderToEdrMineOrdering(mempoolOrder) {\n  switch (mempoolOrder) {\n    case \"fifo\":\n      return \"Fifo\" /* MineOrdering.Fifo */;\n    case \"priority\":\n      return \"Priority\" /* MineOrdering.Priority */;\n  }\n}\nexports.ethereumjsMempoolOrderToEdrMineOrdering = ethereumjsMempoolOrderToEdrMineOrdering;\nfunction edrRpcDebugTraceToHardhat(rpcDebugTrace) {\n  const structLogs = rpcDebugTrace.structLogs.map(log => {\n    const result = {\n      depth: Number(log.depth),\n      gas: Number(log.gas),\n      gasCost: Number(log.gasCost),\n      op: log.opName,\n      pc: Number(log.pc)\n    };\n    if (log.memory !== undefined) {\n      result.memory = log.memory;\n    }\n    if (log.stack !== undefined) {\n      // Remove 0x prefix which is required by EIP-3155, but not expected by Hardhat.\n      result.stack = log.stack?.map(item => item.slice(2));\n    }\n    if (log.storage !== undefined) {\n      result.storage = Object.fromEntries(Object.entries(log.storage).map(([key, value]) => {\n        return [key.slice(2), value.slice(2)];\n      }));\n    }\n    if (log.error !== undefined) {\n      result.error = {\n        message: log.error\n      };\n    }\n    return result;\n  });\n  // REVM trace adds initial STOP that Hardhat doesn't expect\n  if (structLogs.length > 0 && structLogs[0].op === \"STOP\") {\n    structLogs.shift();\n  }\n  let returnValue = rpcDebugTrace.output?.toString(\"hex\") ?? \"\";\n  if (returnValue === \"0x\") {\n    returnValue = \"\";\n  }\n  return {\n    failed: !rpcDebugTrace.pass,\n    gas: Number(rpcDebugTrace.gasUsed),\n    returnValue,\n    structLogs\n  };\n}\nexports.edrRpcDebugTraceToHardhat = edrRpcDebugTraceToHardhat;\nfunction edrTracingStepToMinimalInterpreterStep(step) {\n  return {\n    pc: Number(step.pc),\n    depth: step.depth,\n    opcode: {\n      name: step.opcode\n    },\n    stack: step.stackTop !== undefined ? [step.stackTop] : []\n  };\n}\nexports.edrTracingStepToMinimalInterpreterStep = edrTracingStepToMinimalInterpreterStep;\nfunction edrTracingMessageResultToMinimalEVMResult(tracingMessageResult) {\n  return {\n    execResult: {\n      executionGasUsed: tracingMessageResult.executionResult.result.gasUsed\n    }\n  };\n}\nexports.edrTracingMessageResultToMinimalEVMResult = edrTracingMessageResultToMinimalEVMResult;\nfunction edrTracingMessageToMinimalMessage(message) {\n  return {\n    to: message.to !== undefined ? new ethereumjs_util_1.Address(message.to) : undefined,\n    codeAddress: message.codeAddress !== undefined ? new ethereumjs_util_1.Address(message.codeAddress) : undefined,\n    data: message.data,\n    value: message.value,\n    caller: new ethereumjs_util_1.Address(message.caller),\n    gasLimit: message.gasLimit\n  };\n}\nexports.edrTracingMessageToMinimalMessage = edrTracingMessageToMinimalMessage;","map":{"version":3,"names":["ethereumjs_util_1","require","hardforks_1","ethereumsjsHardforkToEdrSpecId","hardfork","HardforkName","FRONTIER","HOMESTEAD","DAO","TANGERINE_WHISTLE","SPURIOUS_DRAGON","BYZANTIUM","CONSTANTINOPLE","PETERSBURG","ISTANBUL","MUIR_GLACIER","BERLIN","LONDON","ARROW_GLACIER","GRAY_GLACIER","MERGE","SHANGHAI","CANCUN","_exhaustiveCheck","Error","exports","edrSpecIdToEthereumHardfork","specId","ethereumjsIntervalMiningConfigToEdr","config","undefined","BigInt","min","max","ethereumjsMempoolOrderToEdrMineOrdering","mempoolOrder","edrRpcDebugTraceToHardhat","rpcDebugTrace","structLogs","map","log","result","depth","Number","gas","gasCost","op","opName","pc","memory","stack","item","slice","storage","Object","fromEntries","entries","key","value","error","message","length","shift","returnValue","output","toString","failed","pass","gasUsed","edrTracingStepToMinimalInterpreterStep","step","opcode","name","stackTop","edrTracingMessageResultToMinimalEVMResult","tracingMessageResult","execResult","executionGasUsed","executionResult","edrTracingMessageToMinimalMessage","to","Address","codeAddress","data","caller","gasLimit"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\hardhat-network\\provider\\utils\\convertToEdr.ts"],"sourcesContent":["import {\n  SpecId,\n  MineOrdering,\n  IntervalRange,\n  DebugTraceResult,\n  TracingMessage,\n  TracingMessageResult,\n  TracingStep,\n} from \"@nomicfoundation/edr\";\nimport { Address } from \"@nomicfoundation/ethereumjs-util\";\n\nimport { HardforkName } from \"../../../util/hardforks\";\nimport { IntervalMiningConfig, MempoolOrder } from \"../node-types\";\nimport { RpcDebugTraceOutput, RpcStructLog } from \"../output\";\nimport {\n  MinimalEVMResult,\n  MinimalInterpreterStep,\n  MinimalMessage,\n} from \"../vm/types\";\n\n/* eslint-disable @nomicfoundation/hardhat-internal-rules/only-hardhat-error */\n\nexport function ethereumsjsHardforkToEdrSpecId(hardfork: HardforkName): SpecId {\n  switch (hardfork) {\n    case HardforkName.FRONTIER:\n      return SpecId.Frontier;\n    case HardforkName.HOMESTEAD:\n      return SpecId.Homestead;\n    case HardforkName.DAO:\n      return SpecId.DaoFork;\n    case HardforkName.TANGERINE_WHISTLE:\n      return SpecId.Tangerine;\n    case HardforkName.SPURIOUS_DRAGON:\n      return SpecId.SpuriousDragon;\n    case HardforkName.BYZANTIUM:\n      return SpecId.Byzantium;\n    case HardforkName.CONSTANTINOPLE:\n      return SpecId.Constantinople;\n    case HardforkName.PETERSBURG:\n      return SpecId.Petersburg;\n    case HardforkName.ISTANBUL:\n      return SpecId.Istanbul;\n    case HardforkName.MUIR_GLACIER:\n      return SpecId.MuirGlacier;\n    case HardforkName.BERLIN:\n      return SpecId.Berlin;\n    case HardforkName.LONDON:\n      return SpecId.London;\n    case HardforkName.ARROW_GLACIER:\n      return SpecId.ArrowGlacier;\n    case HardforkName.GRAY_GLACIER:\n      return SpecId.GrayGlacier;\n    case HardforkName.MERGE:\n      return SpecId.Merge;\n    case HardforkName.SHANGHAI:\n      return SpecId.Shanghai;\n    case HardforkName.CANCUN:\n      return SpecId.Cancun;\n    default:\n      const _exhaustiveCheck: never = hardfork;\n      throw new Error(\n        `Unknown hardfork name '${hardfork as string}', this shouldn't happen`\n      );\n  }\n}\n\nexport function edrSpecIdToEthereumHardfork(specId: SpecId): HardforkName {\n  switch (specId) {\n    case SpecId.Frontier:\n      return HardforkName.FRONTIER;\n    case SpecId.Homestead:\n      return HardforkName.HOMESTEAD;\n    case SpecId.DaoFork:\n      return HardforkName.DAO;\n    case SpecId.Tangerine:\n      return HardforkName.TANGERINE_WHISTLE;\n    case SpecId.SpuriousDragon:\n      return HardforkName.SPURIOUS_DRAGON;\n    case SpecId.Byzantium:\n      return HardforkName.BYZANTIUM;\n    case SpecId.Constantinople:\n      return HardforkName.CONSTANTINOPLE;\n    case SpecId.Petersburg:\n      return HardforkName.PETERSBURG;\n    case SpecId.Istanbul:\n      return HardforkName.ISTANBUL;\n    case SpecId.MuirGlacier:\n      return HardforkName.MUIR_GLACIER;\n    case SpecId.Berlin:\n      return HardforkName.BERLIN;\n    case SpecId.London:\n      return HardforkName.LONDON;\n    case SpecId.ArrowGlacier:\n      return HardforkName.ARROW_GLACIER;\n    case SpecId.GrayGlacier:\n      return HardforkName.GRAY_GLACIER;\n    case SpecId.Merge:\n      return HardforkName.MERGE;\n    case SpecId.Shanghai:\n      return HardforkName.SHANGHAI;\n    // HACK: EthereumJS doesn't support Cancun, so report Shanghai\n    case SpecId.Cancun:\n      return HardforkName.SHANGHAI;\n\n    default:\n      throw new Error(`Unknown spec id '${specId}', this shouldn't happen`);\n  }\n}\n\nexport function ethereumjsIntervalMiningConfigToEdr(\n  config: IntervalMiningConfig\n): bigint | IntervalRange | undefined {\n  if (typeof config === \"number\") {\n    // Is interval mining disabled?\n    if (config === 0) {\n      return undefined;\n    } else {\n      return BigInt(config);\n    }\n  } else {\n    return {\n      min: BigInt(config[0]),\n      max: BigInt(config[1]),\n    };\n  }\n}\n\nexport function ethereumjsMempoolOrderToEdrMineOrdering(\n  mempoolOrder: MempoolOrder\n): MineOrdering {\n  switch (mempoolOrder) {\n    case \"fifo\":\n      return MineOrdering.Fifo;\n    case \"priority\":\n      return MineOrdering.Priority;\n  }\n}\n\nexport function edrRpcDebugTraceToHardhat(\n  rpcDebugTrace: DebugTraceResult\n): RpcDebugTraceOutput {\n  const structLogs = rpcDebugTrace.structLogs.map((log) => {\n    const result: RpcStructLog = {\n      depth: Number(log.depth),\n      gas: Number(log.gas),\n      gasCost: Number(log.gasCost),\n      op: log.opName,\n      pc: Number(log.pc),\n    };\n\n    if (log.memory !== undefined) {\n      result.memory = log.memory;\n    }\n\n    if (log.stack !== undefined) {\n      // Remove 0x prefix which is required by EIP-3155, but not expected by Hardhat.\n      result.stack = log.stack?.map((item) => item.slice(2));\n    }\n\n    if (log.storage !== undefined) {\n      result.storage = Object.fromEntries(\n        Object.entries(log.storage).map(([key, value]) => {\n          return [key.slice(2), value.slice(2)];\n        })\n      );\n    }\n\n    if (log.error !== undefined) {\n      result.error = {\n        message: log.error,\n      };\n    }\n\n    return result;\n  });\n\n  // REVM trace adds initial STOP that Hardhat doesn't expect\n  if (structLogs.length > 0 && structLogs[0].op === \"STOP\") {\n    structLogs.shift();\n  }\n\n  let returnValue = rpcDebugTrace.output?.toString(\"hex\") ?? \"\";\n  if (returnValue === \"0x\") {\n    returnValue = \"\";\n  }\n\n  return {\n    failed: !rpcDebugTrace.pass,\n    gas: Number(rpcDebugTrace.gasUsed),\n    returnValue,\n    structLogs,\n  };\n}\n\nexport function edrTracingStepToMinimalInterpreterStep(\n  step: TracingStep\n): MinimalInterpreterStep {\n  return {\n    pc: Number(step.pc),\n    depth: step.depth,\n    opcode: {\n      name: step.opcode,\n    },\n    stack: step.stackTop !== undefined ? [step.stackTop] : [],\n  };\n}\n\nexport function edrTracingMessageResultToMinimalEVMResult(\n  tracingMessageResult: TracingMessageResult\n): MinimalEVMResult {\n  return {\n    execResult: {\n      executionGasUsed: tracingMessageResult.executionResult.result.gasUsed,\n    },\n  };\n}\n\nexport function edrTracingMessageToMinimalMessage(\n  message: TracingMessage\n): MinimalMessage {\n  return {\n    to: message.to !== undefined ? new Address(message.to) : undefined,\n    codeAddress:\n      message.codeAddress !== undefined\n        ? new Address(message.codeAddress)\n        : undefined,\n    data: message.data,\n    value: message.value,\n    caller: new Address(message.caller),\n    gasLimit: message.gasLimit,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}