{"ast":null,"code":"'use strict';\n\n/**\n * @module TAP\n */\n/**\n * Module dependencies.\n */\nvar util = require('util');\nvar Base = require('./base');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar EVENT_TEST_END = constants.EVENT_TEST_END;\nvar inherits = require('../utils').inherits;\nvar sprintf = util.format;\n\n/**\n * Expose `TAP`.\n */\n\nexports = module.exports = TAP;\n\n/**\n * Constructs a new `TAP` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction TAP(runner, options) {\n  Base.call(this, runner, options);\n  var self = this;\n  var n = 1;\n  var tapVersion = '12';\n  if (options && options.reporterOptions) {\n    if (options.reporterOptions.tapVersion) {\n      tapVersion = options.reporterOptions.tapVersion.toString();\n    }\n  }\n  this._producer = createProducer(tapVersion);\n  runner.once(EVENT_RUN_BEGIN, function () {\n    self._producer.writeVersion();\n  });\n  runner.on(EVENT_TEST_END, function () {\n    ++n;\n  });\n  runner.on(EVENT_TEST_PENDING, function (test) {\n    self._producer.writePending(n, test);\n  });\n  runner.on(EVENT_TEST_PASS, function (test) {\n    self._producer.writePass(n, test);\n  });\n  runner.on(EVENT_TEST_FAIL, function (test, err) {\n    self._producer.writeFail(n, test, err);\n  });\n  runner.once(EVENT_RUN_END, function () {\n    self._producer.writeEpilogue(runner.stats);\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(TAP, Base);\n\n/**\n * Returns a TAP-safe title of `test`.\n *\n * @private\n * @param {Test} test - Test instance.\n * @return {String} title with any hash character removed\n */\nfunction title(test) {\n  return test.fullTitle().replace(/#/g, '');\n}\n\n/**\n * Writes newline-terminated formatted string to reporter output stream.\n *\n * @private\n * @param {string} format - `printf`-like format string\n * @param {...*} [varArgs] - Format string arguments\n */\nfunction println(format, varArgs) {\n  var vargs = Array.from(arguments);\n  vargs[0] += '\\n';\n  process.stdout.write(sprintf.apply(null, vargs));\n}\n\n/**\n * Returns a `tapVersion`-appropriate TAP producer instance, if possible.\n *\n * @private\n * @param {string} tapVersion - Version of TAP specification to produce.\n * @returns {TAPProducer} specification-appropriate instance\n * @throws {Error} if specification version has no associated producer.\n */\nfunction createProducer(tapVersion) {\n  var producers = {\n    12: new TAP12Producer(),\n    13: new TAP13Producer()\n  };\n  var producer = producers[tapVersion];\n  if (!producer) {\n    throw new Error('invalid or unsupported TAP version: ' + JSON.stringify(tapVersion));\n  }\n  return producer;\n}\n\n/**\n * @summary\n * Constructs a new TAPProducer.\n *\n * @description\n * <em>Only</em> to be used as an abstract base class.\n *\n * @private\n * @constructor\n */\nfunction TAPProducer() {}\n\n/**\n * Writes the TAP version to reporter output stream.\n *\n * @abstract\n */\nTAPProducer.prototype.writeVersion = function () {};\n\n/**\n * Writes the plan to reporter output stream.\n *\n * @abstract\n * @param {number} ntests - Number of tests that are planned to run.\n */\nTAPProducer.prototype.writePlan = function (ntests) {\n  println('%d..%d', 1, ntests);\n};\n\n/**\n * Writes that test passed to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that passed.\n * @param {Test} test - Instance containing test information.\n */\nTAPProducer.prototype.writePass = function (n, test) {\n  println('ok %d %s', n, title(test));\n};\n\n/**\n * Writes that test was skipped to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that was skipped.\n * @param {Test} test - Instance containing test information.\n */\nTAPProducer.prototype.writePending = function (n, test) {\n  println('ok %d %s # SKIP -', n, title(test));\n};\n\n/**\n * Writes that test failed to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that failed.\n * @param {Test} test - Instance containing test information.\n * @param {Error} err - Reason the test failed.\n */\nTAPProducer.prototype.writeFail = function (n, test, err) {\n  println('not ok %d %s', n, title(test));\n};\n\n/**\n * Writes the summary epilogue to reporter output stream.\n *\n * @abstract\n * @param {Object} stats - Object containing run statistics.\n */\nTAPProducer.prototype.writeEpilogue = function (stats) {\n  // :TBD: Why is this not counting pending tests?\n  println('# tests ' + (stats.passes + stats.failures));\n  println('# pass ' + stats.passes);\n  // :TBD: Why are we not showing pending results?\n  println('# fail ' + stats.failures);\n  this.writePlan(stats.passes + stats.failures + stats.pending);\n};\n\n/**\n * @summary\n * Constructs a new TAP12Producer.\n *\n * @description\n * Produces output conforming to the TAP12 specification.\n *\n * @private\n * @constructor\n * @extends TAPProducer\n * @see {@link https://testanything.org/tap-specification.html|Specification}\n */\nfunction TAP12Producer() {\n  /**\n   * Writes that test failed to reporter output stream, with error formatting.\n   * @override\n   */\n  this.writeFail = function (n, test, err) {\n    TAPProducer.prototype.writeFail.call(this, n, test, err);\n    if (err.message) {\n      println(err.message.replace(/^/gm, '  '));\n    }\n    if (err.stack) {\n      println(err.stack.replace(/^/gm, '  '));\n    }\n  };\n}\n\n/**\n * Inherit from `TAPProducer.prototype`.\n */\ninherits(TAP12Producer, TAPProducer);\n\n/**\n * @summary\n * Constructs a new TAP13Producer.\n *\n * @description\n * Produces output conforming to the TAP13 specification.\n *\n * @private\n * @constructor\n * @extends TAPProducer\n * @see {@link https://testanything.org/tap-version-13-specification.html|Specification}\n */\nfunction TAP13Producer() {\n  /**\n   * Writes the TAP version to reporter output stream.\n   * @override\n   */\n  this.writeVersion = function () {\n    println('TAP version 13');\n  };\n\n  /**\n   * Writes that test failed to reporter output stream, with error formatting.\n   * @override\n   */\n  this.writeFail = function (n, test, err) {\n    TAPProducer.prototype.writeFail.call(this, n, test, err);\n    var emitYamlBlock = err.message != null || err.stack != null;\n    if (emitYamlBlock) {\n      println(indent(1) + '---');\n      if (err.message) {\n        println(indent(2) + 'message: |-');\n        println(err.message.replace(/^/gm, indent(3)));\n      }\n      if (err.stack) {\n        println(indent(2) + 'stack: |-');\n        println(err.stack.replace(/^/gm, indent(3)));\n      }\n      println(indent(1) + '...');\n    }\n  };\n  function indent(level) {\n    return Array(level + 1).join('  ');\n  }\n}\n\n/**\n * Inherit from `TAPProducer.prototype`.\n */\ninherits(TAP13Producer, TAPProducer);\nTAP.description = 'TAP-compatible output';","map":{"version":3,"names":["util","require","Base","constants","EVENT_TEST_PASS","EVENT_TEST_FAIL","EVENT_RUN_BEGIN","EVENT_RUN_END","EVENT_TEST_PENDING","EVENT_TEST_END","inherits","sprintf","format","exports","module","TAP","runner","options","call","self","n","tapVersion","reporterOptions","toString","_producer","createProducer","once","writeVersion","on","test","writePending","writePass","err","writeFail","writeEpilogue","stats","title","fullTitle","replace","println","varArgs","vargs","Array","from","arguments","process","stdout","write","apply","producers","TAP12Producer","TAP13Producer","producer","Error","JSON","stringify","TAPProducer","prototype","writePlan","ntests","passes","failures","pending","message","stack","emitYamlBlock","indent","level","join","description"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/mocha/lib/reporters/tap.js"],"sourcesContent":["'use strict';\n/**\n * @module TAP\n */\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar Base = require('./base');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar EVENT_TEST_END = constants.EVENT_TEST_END;\nvar inherits = require('../utils').inherits;\nvar sprintf = util.format;\n\n/**\n * Expose `TAP`.\n */\n\nexports = module.exports = TAP;\n\n/**\n * Constructs a new `TAP` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction TAP(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var n = 1;\n\n  var tapVersion = '12';\n  if (options && options.reporterOptions) {\n    if (options.reporterOptions.tapVersion) {\n      tapVersion = options.reporterOptions.tapVersion.toString();\n    }\n  }\n\n  this._producer = createProducer(tapVersion);\n\n  runner.once(EVENT_RUN_BEGIN, function () {\n    self._producer.writeVersion();\n  });\n\n  runner.on(EVENT_TEST_END, function () {\n    ++n;\n  });\n\n  runner.on(EVENT_TEST_PENDING, function (test) {\n    self._producer.writePending(n, test);\n  });\n\n  runner.on(EVENT_TEST_PASS, function (test) {\n    self._producer.writePass(n, test);\n  });\n\n  runner.on(EVENT_TEST_FAIL, function (test, err) {\n    self._producer.writeFail(n, test, err);\n  });\n\n  runner.once(EVENT_RUN_END, function () {\n    self._producer.writeEpilogue(runner.stats);\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(TAP, Base);\n\n/**\n * Returns a TAP-safe title of `test`.\n *\n * @private\n * @param {Test} test - Test instance.\n * @return {String} title with any hash character removed\n */\nfunction title(test) {\n  return test.fullTitle().replace(/#/g, '');\n}\n\n/**\n * Writes newline-terminated formatted string to reporter output stream.\n *\n * @private\n * @param {string} format - `printf`-like format string\n * @param {...*} [varArgs] - Format string arguments\n */\nfunction println(format, varArgs) {\n  var vargs = Array.from(arguments);\n  vargs[0] += '\\n';\n  process.stdout.write(sprintf.apply(null, vargs));\n}\n\n/**\n * Returns a `tapVersion`-appropriate TAP producer instance, if possible.\n *\n * @private\n * @param {string} tapVersion - Version of TAP specification to produce.\n * @returns {TAPProducer} specification-appropriate instance\n * @throws {Error} if specification version has no associated producer.\n */\nfunction createProducer(tapVersion) {\n  var producers = {\n    12: new TAP12Producer(),\n    13: new TAP13Producer()\n  };\n  var producer = producers[tapVersion];\n\n  if (!producer) {\n    throw new Error(\n      'invalid or unsupported TAP version: ' + JSON.stringify(tapVersion)\n    );\n  }\n\n  return producer;\n}\n\n/**\n * @summary\n * Constructs a new TAPProducer.\n *\n * @description\n * <em>Only</em> to be used as an abstract base class.\n *\n * @private\n * @constructor\n */\nfunction TAPProducer() {}\n\n/**\n * Writes the TAP version to reporter output stream.\n *\n * @abstract\n */\nTAPProducer.prototype.writeVersion = function () {};\n\n/**\n * Writes the plan to reporter output stream.\n *\n * @abstract\n * @param {number} ntests - Number of tests that are planned to run.\n */\nTAPProducer.prototype.writePlan = function (ntests) {\n  println('%d..%d', 1, ntests);\n};\n\n/**\n * Writes that test passed to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that passed.\n * @param {Test} test - Instance containing test information.\n */\nTAPProducer.prototype.writePass = function (n, test) {\n  println('ok %d %s', n, title(test));\n};\n\n/**\n * Writes that test was skipped to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that was skipped.\n * @param {Test} test - Instance containing test information.\n */\nTAPProducer.prototype.writePending = function (n, test) {\n  println('ok %d %s # SKIP -', n, title(test));\n};\n\n/**\n * Writes that test failed to reporter output stream.\n *\n * @abstract\n * @param {number} n - Index of test that failed.\n * @param {Test} test - Instance containing test information.\n * @param {Error} err - Reason the test failed.\n */\nTAPProducer.prototype.writeFail = function (n, test, err) {\n  println('not ok %d %s', n, title(test));\n};\n\n/**\n * Writes the summary epilogue to reporter output stream.\n *\n * @abstract\n * @param {Object} stats - Object containing run statistics.\n */\nTAPProducer.prototype.writeEpilogue = function (stats) {\n  // :TBD: Why is this not counting pending tests?\n  println('# tests ' + (stats.passes + stats.failures));\n  println('# pass ' + stats.passes);\n  // :TBD: Why are we not showing pending results?\n  println('# fail ' + stats.failures);\n  this.writePlan(stats.passes + stats.failures + stats.pending);\n};\n\n/**\n * @summary\n * Constructs a new TAP12Producer.\n *\n * @description\n * Produces output conforming to the TAP12 specification.\n *\n * @private\n * @constructor\n * @extends TAPProducer\n * @see {@link https://testanything.org/tap-specification.html|Specification}\n */\nfunction TAP12Producer() {\n  /**\n   * Writes that test failed to reporter output stream, with error formatting.\n   * @override\n   */\n  this.writeFail = function (n, test, err) {\n    TAPProducer.prototype.writeFail.call(this, n, test, err);\n    if (err.message) {\n      println(err.message.replace(/^/gm, '  '));\n    }\n    if (err.stack) {\n      println(err.stack.replace(/^/gm, '  '));\n    }\n  };\n}\n\n/**\n * Inherit from `TAPProducer.prototype`.\n */\ninherits(TAP12Producer, TAPProducer);\n\n/**\n * @summary\n * Constructs a new TAP13Producer.\n *\n * @description\n * Produces output conforming to the TAP13 specification.\n *\n * @private\n * @constructor\n * @extends TAPProducer\n * @see {@link https://testanything.org/tap-version-13-specification.html|Specification}\n */\nfunction TAP13Producer() {\n  /**\n   * Writes the TAP version to reporter output stream.\n   * @override\n   */\n  this.writeVersion = function () {\n    println('TAP version 13');\n  };\n\n  /**\n   * Writes that test failed to reporter output stream, with error formatting.\n   * @override\n   */\n  this.writeFail = function (n, test, err) {\n    TAPProducer.prototype.writeFail.call(this, n, test, err);\n    var emitYamlBlock = err.message != null || err.stack != null;\n    if (emitYamlBlock) {\n      println(indent(1) + '---');\n      if (err.message) {\n        println(indent(2) + 'message: |-');\n        println(err.message.replace(/^/gm, indent(3)));\n      }\n      if (err.stack) {\n        println(indent(2) + 'stack: |-');\n        println(err.stack.replace(/^/gm, indent(3)));\n      }\n      println(indent(1) + '...');\n    }\n  };\n\n  function indent(level) {\n    return Array(level + 1).join('  ');\n  }\n}\n\n/**\n * Inherit from `TAPProducer.prototype`.\n */\ninherits(TAP13Producer, TAPProducer);\n\nTAP.description = 'TAP-compatible output';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}