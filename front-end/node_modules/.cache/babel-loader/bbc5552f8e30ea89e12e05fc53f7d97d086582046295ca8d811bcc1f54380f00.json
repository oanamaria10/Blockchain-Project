{"ast":null,"code":"import * as API from './types.js';\nimport * as Access from './capability/access.js';\nimport * as Plan from './capability/plan.js';\nimport * as Subscription from './capability/subscription.js';\nimport { Delegation, importAuthorization } from '@web3-storage/access/agent';\nimport { add as provision, AccountDID } from '@web3-storage/access/provider';\nimport { fromEmail, toEmail } from '@web3-storage/did-mailto';\nexport { fromEmail };\n/**\n * @typedef {import('@web3-storage/did-mailto').EmailAddress} EmailAddress\n */\n/**\n * List all accounts that agent has stored access to. Returns a dictionary\n * of accounts keyed by their `did:mailto` identifier.\n *\n * @param {{agent: API.Agent}} client\n * @param {object} query\n * @param {API.DID<'mailto'>} [query.account]\n */\nexport const list = ({\n  agent\n}, {\n  account\n} = {}) => {\n  const query = /** @type {API.CapabilityQuery} */{\n    with: account ?? /did:mailto:.*/,\n    can: '*'\n  };\n  const proofs = agent.proofs([query]);\n  /** @type {Record<API.DidMailto, Account>} */\n  const accounts = {};\n  /** @type {Record<string, API.Delegation>} */\n  const attestations = {};\n  for (const proof of proofs) {\n    const access = Delegation.allows(proof);\n    for (const [resource, abilities] of Object.entries(access)) {\n      if (AccountDID.is(resource) && abilities['*']) {\n        const id = /** @type {API.DidMailto} */resource;\n        const account = accounts[id] || (accounts[id] = new Account({\n          id,\n          agent,\n          proofs: []\n        }));\n        account.addProof(proof);\n      }\n      for (const settings of ( /** @type {{proof?:API.Link}[]} */abilities['ucan/attest'] || [])) {\n        const id = settings.proof;\n        if (id) {\n          attestations[`${id}`] = proof;\n        }\n      }\n    }\n  }\n  for (const account of Object.values(accounts)) {\n    for (const proof of account.proofs) {\n      const attestation = attestations[`${proof.cid}`];\n      if (attestation) {\n        account.addProof(attestation);\n      }\n    }\n  }\n  return accounts;\n};\n/**\n * Attempts to obtains an account access by performing an authentication with\n * the did:mailto account corresponding to given email. Process involves out\n * of bound email verification, so this function returns a promise that will\n * resolve to an account only after access has been granted by the email owner\n * by clicking on the link in the email. If the link is not clicked within the\n * authorization session time bounds (currently 15 minutes), the promise will\n * resolve to an error.\n *\n * @param {{agent: API.Agent}} client\n * @param {EmailAddress} email\n * @param {object} [options]\n * @param {AbortSignal} [options.signal]\n * @returns {Promise<API.Result<Account, Error>>}\n */\nexport const login = async ({\n  agent\n}, email, options = {}) => {\n  const account = fromEmail(email);\n  // If we already have a session for this account we\n  // skip the authentication process, otherwise we will\n  // end up adding more UCAN proofs and attestations to\n  // the store which we then will be sending when using\n  // this account.\n  // Note: This is not a robust solution as there may be\n  // reasons to re-authenticate e.g. previous session is\n  // no longer valid because it was revoked. But dropping\n  // revoked UCANs from store is something we should do\n  // anyway.\n  const session = list({\n    agent\n  }, {\n    account\n  })[account];\n  if (session) {\n    return {\n      ok: session\n    };\n  }\n  const result = await Access.request({\n    agent\n  }, {\n    account,\n    access: Access.accountAccess\n  });\n  const {\n    ok: access,\n    error\n  } = result;\n  /* c8 ignore next 2 - don't know how to test this */\n  if (error) {\n    return {\n      error\n    };\n  } else {\n    const {\n      ok,\n      error\n    } = await access.claim({\n      signal: options.signal\n    });\n    /* c8 ignore next 2 - don't know how to test this */\n    if (error) {\n      return {\n        error\n      };\n    } else {\n      return {\n        ok: new Account({\n          id: account,\n          proofs: ok.proofs,\n          agent\n        })\n      };\n    }\n  }\n};\n/**\n * @typedef {object} Model\n * @property {API.DidMailto} id\n * @property {API.Agent} agent\n * @property {API.Delegation[]} proofs\n */\nexport class Account {\n  /**\n   * @param {Model} model\n   */\n  constructor(model) {\n    this.model = model;\n    this.plan = new AccountPlan(model);\n  }\n  get agent() {\n    return this.model.agent;\n  }\n  get proofs() {\n    return this.model.proofs;\n  }\n  did() {\n    return this.model.id;\n  }\n  toEmail() {\n    return toEmail(this.did());\n  }\n  /**\n   * @param {API.Delegation} proof\n   */\n  addProof(proof) {\n    this.proofs.push(proof);\n  }\n  toJSON() {\n    return {\n      id: this.did(),\n      proofs: this.proofs\n      // we sort proofs to get a deterministic JSON representation.\n      .sort((a, b) => a.cid.toString().localeCompare(b.cid.toString())).map(proof => proof.toJSON())\n    };\n  }\n  /**\n   * Provisions given `space` with this account.\n   *\n   * @param {API.SpaceDID} space\n   * @param {object} input\n   * @param {API.ProviderDID} [input.provider]\n   * @param {API.Agent} [input.agent]\n   */\n  provision(space, input = {}) {\n    return provision(this.agent, {\n      ...input,\n      account: this.did(),\n      consumer: space,\n      proofs: this.proofs\n    });\n  }\n  /**\n   * Saves account in the agent store so it can be accessed across sessions.\n   *\n   * @param {object} input\n   * @param {API.Agent} [input.agent]\n   */\n  async save({\n    agent = this.agent\n  } = {}) {\n    return await importAuthorization(agent, this);\n  }\n}\nexport class AccountPlan {\n  /**\n   * @param {Model} model\n   */\n  constructor(model) {\n    this.model = model;\n  }\n  /**\n   * Gets information about the plan associated with this account.\n   *\n   * @param {object} [options]\n   * @param {string} [options.nonce]\n   */\n  async get(options) {\n    return await Plan.get(this.model, {\n      ...options,\n      account: this.model.id,\n      proofs: this.model.proofs\n    });\n  }\n  /**\n   * Sets the plan associated with this account.\n   *\n   * @param {import('@ucanto/interface').DID} productDID\n   * @param {object} [options]\n   * @param {string} [options.nonce]\n   */\n  async set(productDID, options) {\n    return await Plan.set(this.model, {\n      ...options,\n      account: this.model.id,\n      product: productDID,\n      proofs: this.model.proofs\n    });\n  }\n  /**\n   * Waits for a payment plan to be selected.\n   * This method continuously checks the account's payment plan status\n   * at a specified interval until a valid plan is selected, or when the timeout is reached,\n   * or when the abort signal is aborted.\n   *\n   * @param {object} [options]\n   * @param {number} [options.interval] - The polling interval in milliseconds (default is 1000ms).\n   * @param {number} [options.timeout] - The maximum time to wait in milliseconds before throwing a timeout error (default is 15 minutes).\n   * @param {AbortSignal} [options.signal] - An optional AbortSignal to cancel the waiting process.\n   * @returns {Promise<import('@web3-storage/access').PlanGetSuccess>} - Resolves once a payment plan is selected within the timeout.\n   * @throws {Error} - Throws an error if there is an issue retrieving the payment plan or if the timeout is exceeded.\n   */\n  async wait(options) {\n    const startTime = Date.now();\n    const interval = options?.interval || 1000; // 1 second\n    const timeout = options?.timeout || 60 * 15 * 1000; // 15 minutes\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const res = await this.get();\n      if (res.ok) return res.ok;\n      if (res.error) {\n        throw new Error(`Error retrieving payment plan: ${res.error}`);\n      }\n      if (Date.now() - startTime > timeout) {\n        throw new Error('Timeout: Payment plan selection took too long.');\n      }\n      if (options?.signal?.aborted) {\n        throw new Error('Aborted: Payment plan selection was aborted.');\n      }\n      console.log('Waiting for payment plan to be selected...');\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n  }\n  /**\n   *\n   * @param {import('@web3-storage/access').AccountDID} accountDID\n   * @param {string} returnURL\n   * @param {object} [options]\n   * @param {string} [options.nonce]\n   */\n  async createAdminSession(accountDID, returnURL, options) {\n    return await Plan.createAdminSession(this.model, {\n      ...options,\n      account: accountDID,\n      returnURL\n    });\n  }\n  /**\n   *\n   * @param {object} [options]\n   * @param {string} [options.nonce]\n   */\n  async subscriptions(options) {\n    return await Subscription.list(this.model, {\n      ...options,\n      account: this.model.id,\n      proofs: this.model.proofs\n    });\n  }\n}","map":{"version":3,"names":["API","Access","Plan","Subscription","Delegation","importAuthorization","add","provision","AccountDID","fromEmail","toEmail","list","agent","account","query","with","can","proofs","accounts","attestations","proof","access","allows","resource","abilities","Object","entries","is","id","Account","addProof","settings","values","attestation","cid","login","email","options","session","ok","result","request","accountAccess","error","claim","signal","constructor","model","plan","AccountPlan","did","push","toJSON","sort","a","b","toString","localeCompare","map","space","input","consumer","save","get","set","productDID","product","wait","startTime","Date","now","interval","timeout","res","Error","aborted","console","log","Promise","resolve","setTimeout","createAdminSession","accountDID","returnURL","subscriptions"],"sources":["../../src/account.js"],"sourcesContent":[null],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,YAAY;AACjC,OAAO,KAAKC,MAAM,MAAM,wBAAwB;AAChD,OAAO,KAAKC,IAAI,MAAM,sBAAsB;AAC5C,OAAO,KAAKC,YAAY,MAAM,8BAA8B;AAC5D,SAASC,UAAU,EAAEC,mBAAmB,QAAQ,4BAA4B;AAC5E,SAASC,GAAG,IAAIC,SAAS,EAAEC,UAAU,QAAQ,+BAA+B;AAC5E,SAASC,SAAS,EAAEC,OAAO,QAAQ,0BAA0B;AAE7D,SAASD,SAAS;AAElB;;;AAIA;;;;;;;;AAQA,OAAO,MAAME,IAAI,GAAGA,CAAC;EAAEC;AAAK,CAAE,EAAE;EAAEC;AAAO,CAAE,GAAG,EAAE,KAAI;EAClD,MAAMC,KAAK,GAAG,kCAAoC;IAChDC,IAAI,EAAEF,OAAO,IAAI,eAAe;IAChCG,GAAG,EAAE;GACL;EAEF,MAAMC,MAAM,GAAGL,KAAK,CAACK,MAAM,CAAC,CAACH,KAAK,CAAC,CAAC;EACpC;EACA,MAAMI,QAAQ,GAAG,EAAE;EACnB;EACA,MAAMC,YAAY,GAAG,EAAE;EACvB,KAAK,MAAMC,KAAK,IAAIH,MAAM,EAAE;IAC1B,MAAMI,MAAM,GAAGjB,UAAU,CAACkB,MAAM,CAACF,KAAK,CAAC;IACvC,KAAK,MAAM,CAACG,QAAQ,EAAEC,SAAS,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,MAAM,CAAC,EAAE;MAC1D,IAAIb,UAAU,CAACmB,EAAE,CAACJ,QAAQ,CAAC,IAAIC,SAAS,CAAC,GAAG,CAAC,EAAE;QAC7C,MAAMI,EAAE,GAAG,4BAA8BL,QAAS;QAElD,MAAMV,OAAO,GACXK,QAAQ,CAACU,EAAE,CAAC,KACXV,QAAQ,CAACU,EAAE,CAAC,GAAG,IAAIC,OAAO,CAAC;UAAED,EAAE;UAAEhB,KAAK;UAAEK,MAAM,EAAE;QAAE,CAAE,CAAC,CAAC;QACzDJ,OAAO,CAACiB,QAAQ,CAACV,KAAK,CAAC;;MAGzB,KAAK,MAAMW,QAAQ,MAAI,kCACrBP,SAAS,CAAC,aAAa,CAAC,IAAI,EAAE,GAC7B;QACD,MAAMI,EAAE,GAAGG,QAAQ,CAACX,KAAK;QACzB,IAAIQ,EAAE,EAAE;UACNT,YAAY,CAAC,GAAGS,EAAE,EAAE,CAAC,GAAGR,KAAK;;;;;EAMrC,KAAK,MAAMP,OAAO,IAAIY,MAAM,CAACO,MAAM,CAACd,QAAQ,CAAC,EAAE;IAC7C,KAAK,MAAME,KAAK,IAAIP,OAAO,CAACI,MAAM,EAAE;MAClC,MAAMgB,WAAW,GAAGd,YAAY,CAAC,GAAGC,KAAK,CAACc,GAAG,EAAE,CAAC;MAChD,IAAID,WAAW,EAAE;QACfpB,OAAO,CAACiB,QAAQ,CAACG,WAAW,CAAC;;;;EAKnC,OAAOf,QAAQ;AACjB,CAAC;AAED;;;;;;;;;;;;;;;AAeA,OAAO,MAAMiB,KAAK,GAAG,MAAAA,CAAO;EAAEvB;AAAK,CAAE,EAAEwB,KAAK,EAAEC,OAAO,GAAG,EAAE,KAAI;EAC5D,MAAMxB,OAAO,GAAGJ,SAAS,CAAC2B,KAAK,CAAC;EAEhC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAME,OAAO,GAAG3B,IAAI,CAAC;IAAEC;EAAK,CAAE,EAAE;IAAEC;EAAO,CAAE,CAAC,CAACA,OAAO,CAAC;EACrD,IAAIyB,OAAO,EAAE;IACX,OAAO;MAAEC,EAAE,EAAED;IAAO,CAAE;;EAGxB,MAAME,MAAM,GAAG,MAAMvC,MAAM,CAACwC,OAAO,CACjC;IAAE7B;EAAK,CAAE,EACT;IACEC,OAAO;IACPQ,MAAM,EAAEpB,MAAM,CAACyC;GAChB,CACF;EAED,MAAM;IAAEH,EAAE,EAAElB,MAAM;IAAEsB;EAAK,CAAE,GAAGH,MAAM;EACpC;EACA,IAAIG,KAAK,EAAE;IACT,OAAO;MAAEA;IAAK,CAAE;GACjB,MAAM;IACL,MAAM;MAAEJ,EAAE;MAAEI;IAAK,CAAE,GAAG,MAAMtB,MAAM,CAACuB,KAAK,CAAC;MAAEC,MAAM,EAAER,OAAO,CAACQ;IAAM,CAAE,CAAC;IACpE;IACA,IAAIF,KAAK,EAAE;MACT,OAAO;QAAEA;MAAK,CAAE;KACjB,MAAM;MACL,OAAO;QAAEJ,EAAE,EAAE,IAAIV,OAAO,CAAC;UAAED,EAAE,EAAEf,OAAO;UAAEI,MAAM,EAAEsB,EAAE,CAACtB,MAAM;UAAEL;QAAK,CAAE;MAAC,CAAE;;;AAG3E,CAAC;AAED;;;;;;AAOA,OAAM,MAAOiB,OAAO;EAClB;;;EAGAiB,YAAYC,KAAK;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,IAAI,GAAG,IAAIC,WAAW,CAACF,KAAK,CAAC;EACpC;EACA,IAAInC,KAAKA,CAAA;IACP,OAAO,IAAI,CAACmC,KAAK,CAACnC,KAAK;EACzB;EACA,IAAIK,MAAMA,CAAA;IACR,OAAO,IAAI,CAAC8B,KAAK,CAAC9B,MAAM;EAC1B;EAEAiC,GAAGA,CAAA;IACD,OAAO,IAAI,CAACH,KAAK,CAACnB,EAAE;EACtB;EAEAlB,OAAOA,CAAA;IACL,OAAOA,OAAO,CAAC,IAAI,CAACwC,GAAG,EAAE,CAAC;EAC5B;EAEA;;;EAGApB,QAAQA,CAACV,KAAK;IACZ,IAAI,CAACH,MAAM,CAACkC,IAAI,CAAC/B,KAAK,CAAC;EACzB;EAEAgC,MAAMA,CAAA;IACJ,OAAO;MACLxB,EAAE,EAAE,IAAI,CAACsB,GAAG,EAAE;MACdjC,MAAM,EAAE,IAAI,CAACA;MACX;MAAA,CACCoC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACpB,GAAG,CAACsB,QAAQ,EAAE,CAACC,aAAa,CAACF,CAAC,CAACrB,GAAG,CAACsB,QAAQ,EAAE,CAAC,CAAC,CAChEE,GAAG,CAAEtC,KAAK,IAAKA,KAAK,CAACgC,MAAM,EAAE;KACjC;EACH;EAEA;;;;;;;;EAQA7C,SAASA,CAACoD,KAAK,EAAEC,KAAK,GAAG,EAAE;IACzB,OAAOrD,SAAS,CAAC,IAAI,CAACK,KAAK,EAAE;MAC3B,GAAGgD,KAAK;MACR/C,OAAO,EAAE,IAAI,CAACqC,GAAG,EAAE;MACnBW,QAAQ,EAAEF,KAAK;MACf1C,MAAM,EAAE,IAAI,CAACA;KACd,CAAC;EACJ;EAEA;;;;;;EAMA,MAAM6C,IAAIA,CAAC;IAAElD,KAAK,GAAG,IAAI,CAACA;EAAK,CAAE,GAAG,EAAE;IACpC,OAAO,MAAMP,mBAAmB,CAACO,KAAK,EAAE,IAAI,CAAC;EAC/C;;AAGF,OAAM,MAAOqC,WAAW;EACtB;;;EAGAH,YAAYC,KAAK;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEA;;;;;;EAMA,MAAMgB,GAAGA,CAAC1B,OAAO;IACf,OAAO,MAAMnC,IAAI,CAAC6D,GAAG,CAAC,IAAI,CAAChB,KAAK,EAAE;MAChC,GAAGV,OAAO;MACVxB,OAAO,EAAE,IAAI,CAACkC,KAAK,CAACnB,EAAE;MACtBX,MAAM,EAAE,IAAI,CAAC8B,KAAK,CAAC9B;KACpB,CAAC;EACJ;EAEA;;;;;;;EAOA,MAAM+C,GAAGA,CAACC,UAAU,EAAE5B,OAAO;IAC3B,OAAO,MAAMnC,IAAI,CAAC8D,GAAG,CAAC,IAAI,CAACjB,KAAK,EAAE;MAChC,GAAGV,OAAO;MACVxB,OAAO,EAAE,IAAI,CAACkC,KAAK,CAACnB,EAAE;MACtBsC,OAAO,EAAED,UAAU;MACnBhD,MAAM,EAAE,IAAI,CAAC8B,KAAK,CAAC9B;KACpB,CAAC;EACJ;EAEA;;;;;;;;;;;;;EAaA,MAAMkD,IAAIA,CAAC9B,OAAO;IAChB,MAAM+B,SAAS,GAAGC,IAAI,CAACC,GAAG,EAAE;IAC5B,MAAMC,QAAQ,GAAGlC,OAAO,EAAEkC,QAAQ,IAAI,IAAI,EAAC;IAC3C,MAAMC,OAAO,GAAGnC,OAAO,EAAEmC,OAAO,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI,EAAC;IAEnD;IACA,OAAO,IAAI,EAAE;MACX,MAAMC,GAAG,GAAG,MAAM,IAAI,CAACV,GAAG,EAAE;MAC5B,IAAIU,GAAG,CAAClC,EAAE,EAAE,OAAOkC,GAAG,CAAClC,EAAE;MAEzB,IAAIkC,GAAG,CAAC9B,KAAK,EAAE;QACb,MAAM,IAAI+B,KAAK,CAAC,kCAAkCD,GAAG,CAAC9B,KAAK,EAAE,CAAC;;MAGhE,IAAI0B,IAAI,CAACC,GAAG,EAAE,GAAGF,SAAS,GAAGI,OAAO,EAAE;QACpC,MAAM,IAAIE,KAAK,CAAC,gDAAgD,CAAC;;MAGnE,IAAIrC,OAAO,EAAEQ,MAAM,EAAE8B,OAAO,EAAE;QAC5B,MAAM,IAAID,KAAK,CAAC,8CAA8C,CAAC;;MAGjEE,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;MACzD,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAER,QAAQ,CAAC,CAAC;;EAEjE;EAEA;;;;;;;EAOA,MAAMU,kBAAkBA,CAACC,UAAU,EAAEC,SAAS,EAAE9C,OAAO;IACrD,OAAO,MAAMnC,IAAI,CAAC+E,kBAAkB,CAAC,IAAI,CAAClC,KAAK,EAAE;MAC/C,GAAGV,OAAO;MACVxB,OAAO,EAAEqE,UAAU;MACnBC;KACD,CAAC;EACJ;EAEA;;;;;EAKA,MAAMC,aAAaA,CAAC/C,OAAO;IACzB,OAAO,MAAMlC,YAAY,CAACQ,IAAI,CAAC,IAAI,CAACoC,KAAK,EAAE;MACzC,GAAGV,OAAO;MACVxB,OAAO,EAAE,IAAI,CAACkC,KAAK,CAACnB,EAAE;MACtBX,MAAM,EAAE,IAAI,CAAC8B,KAAK,CAAC9B;KACpB,CAAC;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}