{"ast":null,"code":"import { getAddress } from \"../address/index.js\";\nimport { assertArgument, isHexString } from \"../utils/index.js\";\nfunction accessSetify(addr, storageKeys) {\n  return {\n    address: getAddress(addr),\n    storageKeys: storageKeys.map((storageKey, index) => {\n      assertArgument(isHexString(storageKey, 32), \"invalid slot\", `storageKeys[${index}]`, storageKey);\n      return storageKey.toLowerCase();\n    })\n  };\n}\n/**\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\n */\nexport function accessListify(value) {\n  if (Array.isArray(value)) {\n    return value.map((set, index) => {\n      if (Array.isArray(set)) {\n        assertArgument(set.length === 2, \"invalid slot set\", `value[${index}]`, set);\n        return accessSetify(set[0], set[1]);\n      }\n      assertArgument(set != null && typeof set === \"object\", \"invalid address-slot set\", \"value\", value);\n      return accessSetify(set.address, set.storageKeys);\n    });\n  }\n  assertArgument(value != null && typeof value === \"object\", \"invalid access list\", \"value\", value);\n  const result = Object.keys(value).map(addr => {\n    const storageKeys = value[addr].reduce((accum, storageKey) => {\n      accum[storageKey] = true;\n      return accum;\n    }, {});\n    return accessSetify(addr, Object.keys(storageKeys).sort());\n  });\n  result.sort((a, b) => a.address.localeCompare(b.address));\n  return result;\n}","map":{"version":3,"names":["getAddress","assertArgument","isHexString","accessSetify","addr","storageKeys","address","map","storageKey","index","toLowerCase","accessListify","value","Array","isArray","set","length","result","Object","keys","reduce","accum","sort","a","b","localeCompare"],"sources":["C:/Users/Oana/Desktop/Blockchain/Blockchain-Project/node_modules/ethers/lib.esm/transaction/accesslist.js"],"sourcesContent":["import { getAddress } from \"../address/index.js\";\nimport { assertArgument, isHexString } from \"../utils/index.js\";\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: getAddress(addr),\n        storageKeys: storageKeys.map((storageKey, index) => {\n            assertArgument(isHexString(storageKey, 32), \"invalid slot\", `storageKeys[${index}]`, storageKey);\n            return storageKey.toLowerCase();\n        })\n    };\n}\n/**\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\n */\nexport function accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index) => {\n            if (Array.isArray(set)) {\n                assertArgument(set.length === 2, \"invalid slot set\", `value[${index}]`, set);\n                return accessSetify(set[0], set[1]);\n            }\n            assertArgument(set != null && typeof (set) === \"object\", \"invalid address-slot set\", \"value\", value);\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    assertArgument(value != null && typeof (value) === \"object\", \"invalid access list\", \"value\", value);\n    const result = Object.keys(value).map((addr) => {\n        const storageKeys = value[addr].reduce((accum, storageKey) => {\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\n    return result;\n}\n//# sourceMappingURL=accesslist.js.map"],"mappings":"AAAA,SAASA,UAAU,QAAQ,qBAAqB;AAChD,SAASC,cAAc,EAAEC,WAAW,QAAQ,mBAAmB;AAC/D,SAASC,YAAYA,CAACC,IAAI,EAAEC,WAAW,EAAE;EACrC,OAAO;IACHC,OAAO,EAAEN,UAAU,CAACI,IAAI,CAAC;IACzBC,WAAW,EAAEA,WAAW,CAACE,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,KAAK;MAChDR,cAAc,CAACC,WAAW,CAACM,UAAU,EAAE,EAAE,CAAC,EAAE,cAAc,EAAE,eAAeC,KAAK,GAAG,EAAED,UAAU,CAAC;MAChG,OAAOA,UAAU,CAACE,WAAW,CAAC,CAAC;IACnC,CAAC;EACL,CAAC;AACL;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,KAAK,EAAE;EACjC,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;IACtB,OAAOA,KAAK,CAACL,GAAG,CAAC,CAACQ,GAAG,EAAEN,KAAK,KAAK;MAC7B,IAAII,KAAK,CAACC,OAAO,CAACC,GAAG,CAAC,EAAE;QACpBd,cAAc,CAACc,GAAG,CAACC,MAAM,KAAK,CAAC,EAAE,kBAAkB,EAAE,SAASP,KAAK,GAAG,EAAEM,GAAG,CAAC;QAC5E,OAAOZ,YAAY,CAACY,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;MACvC;MACAd,cAAc,CAACc,GAAG,IAAI,IAAI,IAAI,OAAQA,GAAI,KAAK,QAAQ,EAAE,0BAA0B,EAAE,OAAO,EAAEH,KAAK,CAAC;MACpG,OAAOT,YAAY,CAACY,GAAG,CAACT,OAAO,EAAES,GAAG,CAACV,WAAW,CAAC;IACrD,CAAC,CAAC;EACN;EACAJ,cAAc,CAACW,KAAK,IAAI,IAAI,IAAI,OAAQA,KAAM,KAAK,QAAQ,EAAE,qBAAqB,EAAE,OAAO,EAAEA,KAAK,CAAC;EACnG,MAAMK,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACP,KAAK,CAAC,CAACL,GAAG,CAAEH,IAAI,IAAK;IAC5C,MAAMC,WAAW,GAAGO,KAAK,CAACR,IAAI,CAAC,CAACgB,MAAM,CAAC,CAACC,KAAK,EAAEb,UAAU,KAAK;MAC1Da,KAAK,CAACb,UAAU,CAAC,GAAG,IAAI;MACxB,OAAOa,KAAK;IAChB,CAAC,EAAE,CAAC,CAAC,CAAC;IACN,OAAOlB,YAAY,CAACC,IAAI,EAAEc,MAAM,CAACC,IAAI,CAACd,WAAW,CAAC,CAACiB,IAAI,CAAC,CAAC,CAAC;EAC9D,CAAC,CAAC;EACFL,MAAM,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,CAACjB,OAAO,CAACmB,aAAa,CAACD,CAAC,CAAClB,OAAO,CAAE,CAAC;EAC3D,OAAOW,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}