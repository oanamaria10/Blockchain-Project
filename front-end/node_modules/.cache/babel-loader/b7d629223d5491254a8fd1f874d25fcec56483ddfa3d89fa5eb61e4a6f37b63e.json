{"ast":null,"code":"import { capability, Schema, Link, ok } from '@ucanto/validator';\nimport { content } from '../blob.js';\nimport { equalBlob, equalWith, SpaceDID, and, equal, checkLink, Await } from '../utils.js';\n\n/**\n * Service capabilities for Blob protocol\n */\n/**\n * Capability can only be delegated (but not invoked) allowing audience to\n * derived any `web3.storage/blob/` prefixed capability for the (memory) space identified\n * by DID in the `with` field.\n */\nexport const blob = capability({\n  can: 'web3.storage/blob/*',\n  /**\n   * DID of the (memory) space where Blob is intended to\n   * be stored.\n   */\n  with: SpaceDID,\n  derives: equalWith\n});\n\n/**\n * `web3.storage/blob//allocate` capability can be invoked to create a memory\n * address where blob content can be written via HTTP PUT request.\n */\nexport const allocate = capability({\n  can: 'web3.storage/blob/allocate',\n  /**\n   * Provider DID.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * Blob to allocate on the space.\n     */\n    blob: content,\n    /**\n     * The Link for an Add Blob task, that caused an allocation\n     */\n    cause: Link,\n    /**\n     * DID of the user space where allocation takes place\n     */\n    space: SpaceDID\n  }),\n  derives: (claim, from) => {\n    return and(equalWith(claim, from)) || and(equalBlob(claim, from)) || and(checkLink(claim.nb.cause, from.nb.cause, 'cause')) || and(equal(claim.nb.space, from.nb.space, 'space')) || ok({});\n  }\n});\n\n/**\n * `blob/accept` capability invocation should either succeed when content is\n * delivered on allocated address or fail if no content is allocation expires\n * without content being delivered.\n */\nexport const accept = capability({\n  can: 'web3.storage/blob/accept',\n  /**\n   * Provider DID.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * Blob to accept.\n     */\n    blob: content,\n    /**\n     * Content location commitment time to live, which will be encoded as expiry of the issued location claim.\n     */\n    ttl: Schema.integer().optional(),\n    /**\n     * DID of the user space where allocation took place\n     */\n    space: SpaceDID,\n    /**\n     * This task is blocked on `http/put` receipt available\n     */\n    _put: Await\n  }),\n  derives: (claim, from) => {\n    return and(equalWith(claim, from)) || and(equalBlob(claim, from)) || and(equal(claim.nb.ttl, from.nb.ttl, 'ttl')) || and(equal(claim.nb.space, from.nb.space, 'space')) || ok({});\n  }\n});\n\n// ⚠️ We export imports here so they are not omitted in generated typedefs\n// @see https://github.com/microsoft/TypeScript/issues/51548\nexport { Schema, Link };","map":{"version":3,"names":["capability","Schema","Link","ok","content","equalBlob","equalWith","SpaceDID","and","equal","checkLink","Await","blob","can","with","derives","allocate","did","nb","struct","cause","space","claim","from","accept","ttl","integer","optional","_put"],"sources":["C:/FACULTATE/Proiect/node_modules/@web3-storage/capabilities/src/web3.storage/blob.js"],"sourcesContent":["import { capability, Schema, Link, ok } from '@ucanto/validator'\nimport { content } from '../blob.js'\nimport {\n  equalBlob,\n  equalWith,\n  SpaceDID,\n  and,\n  equal,\n  checkLink,\n  Await,\n} from '../utils.js'\n\n/**\n * Service capabilities for Blob protocol\n */\n/**\n * Capability can only be delegated (but not invoked) allowing audience to\n * derived any `web3.storage/blob/` prefixed capability for the (memory) space identified\n * by DID in the `with` field.\n */\nexport const blob = capability({\n  can: 'web3.storage/blob/*',\n  /**\n   * DID of the (memory) space where Blob is intended to\n   * be stored.\n   */\n  with: SpaceDID,\n  derives: equalWith,\n})\n\n/**\n * `web3.storage/blob//allocate` capability can be invoked to create a memory\n * address where blob content can be written via HTTP PUT request.\n */\nexport const allocate = capability({\n  can: 'web3.storage/blob/allocate',\n  /**\n   * Provider DID.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * Blob to allocate on the space.\n     */\n    blob: content,\n    /**\n     * The Link for an Add Blob task, that caused an allocation\n     */\n    cause: Link,\n    /**\n     * DID of the user space where allocation takes place\n     */\n    space: SpaceDID,\n  }),\n  derives: (claim, from) => {\n    return (\n      and(equalWith(claim, from)) ||\n      and(equalBlob(claim, from)) ||\n      and(checkLink(claim.nb.cause, from.nb.cause, 'cause')) ||\n      and(equal(claim.nb.space, from.nb.space, 'space')) ||\n      ok({})\n    )\n  },\n})\n\n/**\n * `blob/accept` capability invocation should either succeed when content is\n * delivered on allocated address or fail if no content is allocation expires\n * without content being delivered.\n */\nexport const accept = capability({\n  can: 'web3.storage/blob/accept',\n  /**\n   * Provider DID.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * Blob to accept.\n     */\n    blob: content,\n    /**\n     * Content location commitment time to live, which will be encoded as expiry of the issued location claim.\n     */\n    ttl: Schema.integer().optional(),\n    /**\n     * DID of the user space where allocation took place\n     */\n    space: SpaceDID,\n    /**\n     * This task is blocked on `http/put` receipt available\n     */\n    _put: Await,\n  }),\n  derives: (claim, from) => {\n    return (\n      and(equalWith(claim, from)) ||\n      and(equalBlob(claim, from)) ||\n      and(equal(claim.nb.ttl, from.nb.ttl, 'ttl')) ||\n      and(equal(claim.nb.space, from.nb.space, 'space')) ||\n      ok({})\n    )\n  },\n})\n\n// ⚠️ We export imports here so they are not omitted in generated typedefs\n// @see https://github.com/microsoft/TypeScript/issues/51548\nexport { Schema, Link }\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,MAAM,EAAEC,IAAI,EAAEC,EAAE,QAAQ,mBAAmB;AAChE,SAASC,OAAO,QAAQ,YAAY;AACpC,SACEC,SAAS,EACTC,SAAS,EACTC,QAAQ,EACRC,GAAG,EACHC,KAAK,EACLC,SAAS,EACTC,KAAK,QACA,aAAa;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAI,GAAGZ,UAAU,CAAC;EAC7Ba,GAAG,EAAE,qBAAqB;EAC1B;AACF;AACA;AACA;EACEC,IAAI,EAAEP,QAAQ;EACdQ,OAAO,EAAET;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMU,QAAQ,GAAGhB,UAAU,CAAC;EACjCa,GAAG,EAAE,4BAA4B;EACjC;AACF;AACA;EACEC,IAAI,EAAEb,MAAM,CAACgB,GAAG,CAAC,CAAC;EAClBC,EAAE,EAAEjB,MAAM,CAACkB,MAAM,CAAC;IAChB;AACJ;AACA;IACIP,IAAI,EAAER,OAAO;IACb;AACJ;AACA;IACIgB,KAAK,EAAElB,IAAI;IACX;AACJ;AACA;IACImB,KAAK,EAAEd;EACT,CAAC,CAAC;EACFQ,OAAO,EAAEA,CAACO,KAAK,EAAEC,IAAI,KAAK;IACxB,OACEf,GAAG,CAACF,SAAS,CAACgB,KAAK,EAAEC,IAAI,CAAC,CAAC,IAC3Bf,GAAG,CAACH,SAAS,CAACiB,KAAK,EAAEC,IAAI,CAAC,CAAC,IAC3Bf,GAAG,CAACE,SAAS,CAACY,KAAK,CAACJ,EAAE,CAACE,KAAK,EAAEG,IAAI,CAACL,EAAE,CAACE,KAAK,EAAE,OAAO,CAAC,CAAC,IACtDZ,GAAG,CAACC,KAAK,CAACa,KAAK,CAACJ,EAAE,CAACG,KAAK,EAAEE,IAAI,CAACL,EAAE,CAACG,KAAK,EAAE,OAAO,CAAC,CAAC,IAClDlB,EAAE,CAAC,CAAC,CAAC,CAAC;EAEV;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMqB,MAAM,GAAGxB,UAAU,CAAC;EAC/Ba,GAAG,EAAE,0BAA0B;EAC/B;AACF;AACA;EACEC,IAAI,EAAEb,MAAM,CAACgB,GAAG,CAAC,CAAC;EAClBC,EAAE,EAAEjB,MAAM,CAACkB,MAAM,CAAC;IAChB;AACJ;AACA;IACIP,IAAI,EAAER,OAAO;IACb;AACJ;AACA;IACIqB,GAAG,EAAExB,MAAM,CAACyB,OAAO,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAChC;AACJ;AACA;IACIN,KAAK,EAAEd,QAAQ;IACf;AACJ;AACA;IACIqB,IAAI,EAAEjB;EACR,CAAC,CAAC;EACFI,OAAO,EAAEA,CAACO,KAAK,EAAEC,IAAI,KAAK;IACxB,OACEf,GAAG,CAACF,SAAS,CAACgB,KAAK,EAAEC,IAAI,CAAC,CAAC,IAC3Bf,GAAG,CAACH,SAAS,CAACiB,KAAK,EAAEC,IAAI,CAAC,CAAC,IAC3Bf,GAAG,CAACC,KAAK,CAACa,KAAK,CAACJ,EAAE,CAACO,GAAG,EAAEF,IAAI,CAACL,EAAE,CAACO,GAAG,EAAE,KAAK,CAAC,CAAC,IAC5CjB,GAAG,CAACC,KAAK,CAACa,KAAK,CAACJ,EAAE,CAACG,KAAK,EAAEE,IAAI,CAACL,EAAE,CAACG,KAAK,EAAE,OAAO,CAAC,CAAC,IAClDlB,EAAE,CAAC,CAAC,CAAC,CAAC;EAEV;AACF,CAAC,CAAC;;AAEF;AACA;AACA,SAASF,MAAM,EAAEC,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}