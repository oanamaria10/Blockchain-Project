{"ast":null,"code":"import * as API from './api.js';\nimport { base58btc } from 'multiformats/bases/base58';\n/** @type {WeakMap<Uint8Array, string>} */\nconst cache = new WeakMap();\n/** @param {API.MultihashDigest} digest */\nconst toBase58String = digest => {\n  let str = cache.get(digest.bytes);\n  if (!str) {\n    str = base58btc.encode(digest.bytes);\n    cache.set(digest.bytes, str);\n  }\n  return str;\n};\n/**\n * @template {API.MultihashDigest} Key\n * @template Value\n * @implements {Map<Key, Value>}\n */\nexport class DigestMap {\n  /** @type {Map<string, [Key, Value]>} */\n  #data;\n  /**\n   * @param {Array<[Key, Value]>} [entries]\n   */\n  constructor(entries) {\n    this.#data = new Map();\n    for (const [k, v] of entries ?? []) {\n      this.set(k, v);\n    }\n  }\n  get [Symbol.toStringTag]() {\n    return 'DigestMap';\n  }\n  clear() {\n    this.#data.clear();\n  }\n  /**\n   * @param {Key} key\n   * @returns {boolean}\n   */\n  delete(key) {\n    const mhstr = toBase58String(key);\n    return this.#data.delete(mhstr);\n  }\n  /**\n   * @param {(value: Value, key: Key, map: Map<Key, Value>) => void} callbackfn\n   * @param {any} [thisArg]\n   */\n  forEach(callbackfn, thisArg) {\n    for (const [k, v] of this.#data.values()) {\n      callbackfn.call(thisArg, v, k, this);\n    }\n  }\n  /**\n   * @param {Key} key\n   * @returns {Value|undefined}\n   */\n  get(key) {\n    const data = this.#data.get(toBase58String(key));\n    if (data) return data[1];\n  }\n  /**\n   * @param {Key} key\n   * @returns {boolean}\n   */\n  has(key) {\n    return this.#data.has(toBase58String(key));\n  }\n  /**\n   * @param {Key} key\n   * @param {Value} value\n   */\n  set(key, value) {\n    this.#data.set(toBase58String(key), [key, value]);\n    return this;\n  }\n  /** @returns {number} */\n  get size() {\n    return this.#data.size;\n  }\n  /** @returns */\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n  /** @returns {IterableIterator<[Key, Value]>} */\n  *entries() {\n    yield* this.#data.values();\n  }\n  /** @returns {IterableIterator<Key>} */\n  *keys() {\n    for (const [k] of this.#data.values()) {\n      yield k;\n    }\n  }\n  /** @returns {IterableIterator<Value>} */\n  *values() {\n    for (const [, v] of this.#data.values()) {\n      yield v;\n    }\n  }\n}","map":{"version":3,"names":["API","base58btc","cache","WeakMap","toBase58String","digest","str","get","bytes","encode","set","DigestMap","data","constructor","entries","Map","k","v","Symbol","toStringTag","clear","delete","key","mhstr","forEach","callbackfn","thisArg","values","call","has","value","size","iterator","keys"],"sources":["C:\\FACULTATE\\Proiect\\node_modules\\@web3-storage\\blob-index\\src\\digest-map.js"],"sourcesContent":["import * as API from './api.js'\nimport { base58btc } from 'multiformats/bases/base58'\n\n/** @type {WeakMap<Uint8Array, string>} */\nconst cache = new WeakMap()\n\n/** @param {API.MultihashDigest} digest */\nconst toBase58String = (digest) => {\n  let str = cache.get(digest.bytes)\n  if (!str) {\n    str = base58btc.encode(digest.bytes)\n    cache.set(digest.bytes, str)\n  }\n  return str\n}\n\n/**\n * @template {API.MultihashDigest} Key\n * @template Value\n * @implements {Map<Key, Value>}\n */\nexport class DigestMap {\n  /** @type {Map<string, [Key, Value]>} */\n  #data\n\n  /**\n   * @param {Array<[Key, Value]>} [entries]\n   */\n  constructor(entries) {\n    this.#data = new Map()\n    for (const [k, v] of entries ?? []) {\n      this.set(k, v)\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'DigestMap'\n  }\n\n  clear() {\n    this.#data.clear()\n  }\n\n  /**\n   * @param {Key} key\n   * @returns {boolean}\n   */\n  delete(key) {\n    const mhstr = toBase58String(key)\n    return this.#data.delete(mhstr)\n  }\n\n  /**\n   * @param {(value: Value, key: Key, map: Map<Key, Value>) => void} callbackfn\n   * @param {any} [thisArg]\n   */\n  forEach(callbackfn, thisArg) {\n    for (const [k, v] of this.#data.values()) {\n      callbackfn.call(thisArg, v, k, this)\n    }\n  }\n\n  /**\n   * @param {Key} key\n   * @returns {Value|undefined}\n   */\n  get(key) {\n    const data = this.#data.get(toBase58String(key))\n    if (data) return data[1]\n  }\n\n  /**\n   * @param {Key} key\n   * @returns {boolean}\n   */\n  has(key) {\n    return this.#data.has(toBase58String(key))\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Value} value\n   */\n  set(key, value) {\n    this.#data.set(toBase58String(key), [key, value])\n    return this\n  }\n\n  /** @returns {number} */\n  get size() {\n    return this.#data.size\n  }\n\n  /** @returns */\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  /** @returns {IterableIterator<[Key, Value]>} */\n  *entries() {\n    yield* this.#data.values()\n  }\n\n  /** @returns {IterableIterator<Key>} */\n  *keys() {\n    for (const [k] of this.#data.values()) {\n      yield k\n    }\n  }\n\n  /** @returns {IterableIterator<Value>} */\n  *values() {\n    for (const [, v] of this.#data.values()) {\n      yield v\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}