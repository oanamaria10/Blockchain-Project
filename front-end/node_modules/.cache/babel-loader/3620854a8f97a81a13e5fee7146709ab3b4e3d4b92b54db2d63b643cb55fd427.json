{"ast":null,"code":"import { DigestMap } from '@web3-storage/blob-index';\nimport { blockEncodingLength, blockHeaderEncodingLength, encode, headerEncodingLength } from './car.js';\n/**\n * @typedef {import('./types.js').FileLike} FileLike\n */\n// https://observablehq.com/@gozala/w3up-shard-size\nconst SHARD_SIZE = 133169152;\n/**\n * Shard a set of blocks into a set of CAR files. By default the last block\n * received is assumed to be the DAG root and becomes the CAR root CID for the\n * last CAR output. Set the `rootCID` option to override.\n *\n * @extends {TransformStream<import('@ipld/unixfs').Block, import('./types.js').IndexedCARFile>}\n */\nexport class ShardingStream extends TransformStream {\n  /**\n   * @param {import('./types.js').ShardingOptions} [options]\n   */\n  constructor(options = {}) {\n    const shardSize = options.shardSize ?? SHARD_SIZE;\n    const maxBlockLength = shardSize - headerEncodingLength();\n    /** @type {import('@ipld/unixfs').Block[]} */\n    let blocks = [];\n    /** @type {import('@ipld/unixfs').Block[] | null} */\n    let readyBlocks = null;\n    /** @type {Map<import('./types.js').SliceDigest, import('./types.js').Position>} */\n    let slices = new DigestMap();\n    /** @type {Map<import('./types.js').SliceDigest, import('./types.js').Position> | null} */\n    let readySlices = null;\n    let currentLength = 0;\n    super({\n      async transform(block, controller) {\n        if (readyBlocks != null && readySlices != null) {\n          controller.enqueue(await encodeCAR(readyBlocks, readySlices));\n          readyBlocks = null;\n          readySlices = null;\n        }\n        const blockHeaderLength = blockHeaderEncodingLength(block);\n        const blockLength = blockHeaderLength + block.bytes.length;\n        if (blockLength > maxBlockLength) {\n          throw new Error(`block will cause CAR to exceed shard size: ${block.cid}`);\n        }\n        if (blocks.length && currentLength + blockLength > maxBlockLength) {\n          readyBlocks = blocks;\n          readySlices = slices;\n          blocks = [];\n          slices = new DigestMap();\n          currentLength = 0;\n        }\n        blocks.push(block);\n        slices.set(block.cid.multihash, [headerEncodingLength() + currentLength + blockHeaderLength, block.bytes.length]);\n        currentLength += blockLength;\n      },\n      async flush(controller) {\n        if (readyBlocks != null && readySlices != null) {\n          controller.enqueue(await encodeCAR(readyBlocks, readySlices));\n        }\n        const rootBlock = blocks.at(-1);\n        if (rootBlock == null) return;\n        const rootCID = options.rootCID ?? rootBlock.cid;\n        const headerLength = headerEncodingLength(rootCID);\n        // if adding CAR root overflows the shard limit we move overflowing\n        // blocks into another CAR.\n        if (headerLength + currentLength > shardSize) {\n          const overage = headerLength + currentLength - shardSize;\n          const overflowBlocks = [];\n          let overflowCurrentLength = 0;\n          while (overflowCurrentLength < overage) {\n            const block = blocks[blocks.length - 1];\n            blocks.pop();\n            slices.delete(block.cid.multihash);\n            overflowBlocks.unshift(block);\n            overflowCurrentLength += blockEncodingLength(block);\n            // need at least 1 block in original shard\n            if (blocks.length < 1) throw new Error(`block will cause CAR to exceed shard size: ${block.cid}`);\n          }\n          controller.enqueue(await encodeCAR(blocks, slices));\n          // Finally, re-calc block positions from blocks we moved out of the\n          // CAR that was too big.\n          overflowCurrentLength = 0;\n          /** @type {Map<import('./types.js').SliceDigest, import('./types.js').Position>} */\n          const overflowSlices = new DigestMap();\n          for (const block of overflowBlocks) {\n            const overflowBlockHeaderLength = blockHeaderEncodingLength(block);\n            overflowSlices.set(block.cid.multihash, [headerLength + overflowCurrentLength + overflowBlockHeaderLength, block.bytes.length]);\n            overflowCurrentLength += overflowBlockHeaderLength + block.bytes.length;\n          }\n          controller.enqueue(await encodeCAR(overflowBlocks, overflowSlices, rootCID));\n        } else {\n          // adjust offsets for longer header in final shard\n          const diff = headerLength - headerEncodingLength();\n          for (const slice of slices.values()) {\n            slice[0] += diff;\n          }\n          controller.enqueue(await encodeCAR(blocks, slices, rootCID));\n        }\n      }\n    });\n  }\n}\n/**\n * Default comparator for FileLikes. Sorts by file name in ascending order.\n *\n * @param {FileLike} a\n * @param {FileLike} b\n * @param {(file: FileLike) => string} getComparedValue - given a file being sorted, return the value by which its order should be determined, if it is different than the file object itself (e.g. file.name)\n */\nexport const defaultFileComparator = (a, b, getComparedValue = file => file.name) => {\n  return ascending(a, b, getComparedValue);\n};\n/**\n * a comparator for sorting in ascending order. Use with Sorted or Array#sort.\n *\n * @template T\n * @param {T} a\n * @param {T} b\n * @param {(i: T) => any} getComparedValue - given an item being sorted, return the value by which it should be sorted, if it is different than the item\n */\nfunction ascending(a, b, getComparedValue) {\n  const ask = getComparedValue(a);\n  const bsk = getComparedValue(b);\n  if (ask === bsk) return 0;else if (ask < bsk) return -1;\n  return 1;\n}\n/**\n * @param {Iterable<import('@ipld/unixfs').Block>} blocks\n * @param {Map<import('./types.js').SliceDigest, import('./types.js').Position>} slices\n * @param {import('./types.js').AnyLink} [root]\n * @returns {Promise<import('./types.js').IndexedCARFile>}\n */\nconst encodeCAR = async (blocks, slices, root) => Object.assign(await encode(blocks, root), {\n  slices\n});","map":{"version":3,"names":["DigestMap","blockEncodingLength","blockHeaderEncodingLength","encode","headerEncodingLength","SHARD_SIZE","ShardingStream","TransformStream","constructor","options","shardSize","maxBlockLength","blocks","readyBlocks","slices","readySlices","currentLength","transform","block","controller","enqueue","encodeCAR","blockHeaderLength","blockLength","bytes","length","Error","cid","push","set","multihash","flush","rootBlock","at","rootCID","headerLength","overage","overflowBlocks","overflowCurrentLength","pop","delete","unshift","overflowSlices","overflowBlockHeaderLength","diff","slice","values","defaultFileComparator","a","b","getComparedValue","file","name","ascending","ask","bsk","root","Object","assign"],"sources":["../../src/sharding.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}