{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUpdatableTargetProxy = void 0;\n/**\n * Returns a read-only proxy that just forwards everything to a target,\n * and a function that can be used to change that underlying target\n */\nfunction createUpdatableTargetProxy(initialTarget) {\n  const targetObject = {\n    target: initialTarget\n  };\n  let isExtensible = Object.isExtensible(initialTarget);\n  const handler = {\n    // these two functions are implemented because of the Required<ProxyHandler> type\n    apply(_, _thisArg, _argArray) {\n      throw new Error(\"cannot be implemented because the target is not a function\");\n    },\n    construct(_, _argArray, _newTarget) {\n      throw new Error(\"cannot be implemented because the target is not a function\");\n    },\n    defineProperty(_, property, _descriptor) {\n      throw new Error(`cannot define property ${String(property)} in read-only proxy`);\n    },\n    deleteProperty(_, property) {\n      throw new Error(`cannot delete property ${String(property)} in read-only proxy`);\n    },\n    get(_, property, receiver) {\n      const result = Reflect.get(targetObject.target, property, receiver);\n      if (result instanceof Function) {\n        return result.bind(targetObject.target);\n      }\n      return result;\n    },\n    getOwnPropertyDescriptor(_, property) {\n      const descriptor = Reflect.getOwnPropertyDescriptor(targetObject.target, property);\n      if (descriptor !== undefined) {\n        Object.defineProperty(targetObject.target, property, descriptor);\n      }\n      return descriptor;\n    },\n    getPrototypeOf(_) {\n      return Reflect.getPrototypeOf(targetObject.target);\n    },\n    has(_, property) {\n      return Reflect.has(targetObject.target, property);\n    },\n    isExtensible(_) {\n      // we need to return the extensibility value of the original target\n      return isExtensible;\n    },\n    ownKeys(_) {\n      return Reflect.ownKeys(targetObject.target);\n    },\n    preventExtensions(_) {\n      isExtensible = false;\n      return Reflect.preventExtensions(targetObject.target);\n    },\n    set(_, property, _value, _receiver) {\n      throw new Error(`cannot set property ${String(property)} in read-only proxy`);\n    },\n    setPrototypeOf(_, _prototype) {\n      throw new Error(\"cannot change the prototype in read-only proxy\");\n    }\n  };\n  const proxy = new Proxy(initialTarget, handler);\n  const setTarget = newTarget => {\n    targetObject.target = newTarget;\n  };\n  return {\n    proxy,\n    setTarget\n  };\n}\nexports.createUpdatableTargetProxy = createUpdatableTargetProxy;","map":{"version":3,"names":["createUpdatableTargetProxy","initialTarget","targetObject","target","isExtensible","Object","handler","apply","_","_thisArg","_argArray","Error","construct","_newTarget","defineProperty","property","_descriptor","String","deleteProperty","get","receiver","result","Reflect","Function","bind","getOwnPropertyDescriptor","descriptor","undefined","getPrototypeOf","has","ownKeys","preventExtensions","set","_value","_receiver","setPrototypeOf","_prototype","proxy","Proxy","setTarget","newTarget","exports"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@nomiclabs\\hardhat-ethers\\src\\internal\\updatable-target-proxy.ts"],"sourcesContent":["/**\n * Returns a read-only proxy that just forwards everything to a target,\n * and a function that can be used to change that underlying target\n */\nexport function createUpdatableTargetProxy<T extends object>(\n  initialTarget: T\n): {\n  proxy: T;\n  setTarget: (target: T) => void;\n} {\n  const targetObject = {\n    target: initialTarget,\n  };\n\n  let isExtensible = Object.isExtensible(initialTarget);\n\n  const handler: Required<ProxyHandler<T>> = {\n    // these two functions are implemented because of the Required<ProxyHandler> type\n    apply(_, _thisArg, _argArray) {\n      throw new Error(\n        \"cannot be implemented because the target is not a function\"\n      );\n    },\n\n    construct(_, _argArray, _newTarget) {\n      throw new Error(\n        \"cannot be implemented because the target is not a function\"\n      );\n    },\n\n    defineProperty(_, property, _descriptor) {\n      throw new Error(\n        `cannot define property ${String(property)} in read-only proxy`\n      );\n    },\n\n    deleteProperty(_, property) {\n      throw new Error(\n        `cannot delete property ${String(property)} in read-only proxy`\n      );\n    },\n\n    get(_, property, receiver) {\n      const result = Reflect.get(targetObject.target, property, receiver);\n\n      if (result instanceof Function) {\n        return result.bind(targetObject.target);\n      }\n\n      return result;\n    },\n\n    getOwnPropertyDescriptor(_, property) {\n      const descriptor = Reflect.getOwnPropertyDescriptor(\n        targetObject.target,\n        property\n      );\n\n      if (descriptor !== undefined) {\n        Object.defineProperty(targetObject.target, property, descriptor);\n      }\n\n      return descriptor;\n    },\n\n    getPrototypeOf(_) {\n      return Reflect.getPrototypeOf(targetObject.target);\n    },\n\n    has(_, property) {\n      return Reflect.has(targetObject.target, property);\n    },\n\n    isExtensible(_) {\n      // we need to return the extensibility value of the original target\n      return isExtensible;\n    },\n\n    ownKeys(_) {\n      return Reflect.ownKeys(targetObject.target);\n    },\n\n    preventExtensions(_) {\n      isExtensible = false;\n      return Reflect.preventExtensions(targetObject.target);\n    },\n\n    set(_, property, _value, _receiver) {\n      throw new Error(\n        `cannot set property ${String(property)} in read-only proxy`\n      );\n    },\n\n    setPrototypeOf(_, _prototype) {\n      throw new Error(\"cannot change the prototype in read-only proxy\");\n    },\n  };\n\n  const proxy: T = new Proxy(initialTarget, handler);\n\n  const setTarget = (newTarget: T) => {\n    targetObject.target = newTarget;\n  };\n\n  return { proxy, setTarget };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}