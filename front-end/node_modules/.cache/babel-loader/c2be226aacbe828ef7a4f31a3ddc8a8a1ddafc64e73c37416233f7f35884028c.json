{"ast":null,"code":"import retry, { AbortError } from 'p-retry';\nimport { CAR } from '@ucanto/transport';\nimport { receiptsEndpoint as defaultReceiptsEndpoint } from './service.js';\nimport { REQUEST_RETRIES } from './constants.js';\nexport class ReceiptNotFound extends Error {\n  /**\n   * @param {import('multiformats').UnknownLink} taskCid\n   */\n  constructor(taskCid) {\n    super();\n    this.taskCid = taskCid;\n  }\n  /* c8 ignore start */\n  get reason() {\n    return `receipt not found for task ${this.taskCid} in the indexed workflow`;\n  }\n  /* c8 ignore end */\n  get name() {\n    return 'ReceiptNotFound';\n  }\n}\nexport class ReceiptMissing extends Error {\n  /**\n   * @param {import('multiformats').UnknownLink} taskCid\n   */\n  constructor(taskCid) {\n    super();\n    this.taskCid = taskCid;\n  }\n  /* c8 ignore start */\n  get reason() {\n    return `receipt missing for task ${this.taskCid}`;\n  }\n  /* c8 ignore end */\n  get name() {\n    return 'ReceiptMissing';\n  }\n}\n/**\n * Polls for a receipt for an executed task by its CID.\n *\n * @param {import('multiformats').UnknownLink} taskCid\n * @param {import('./types.js').RequestOptions} [options]\n * @returns {Promise<import('@ucanto/interface').Receipt>}\n */\nexport async function poll(taskCid, options = {}) {\n  return await retry(async () => {\n    const res = await get(taskCid, options);\n    if (res.error) {\n      // @ts-ignore\n      if (res.error.name === 'ReceiptNotFound') {\n        // throw an error that will cause `p-retry` to retry with\n        throw res.error;\n      } else {\n        throw new AbortError(new Error('failed to fetch blob/accept receipt', {\n          cause: res.error\n        }));\n      }\n    }\n    return res.ok;\n  }, {\n    onFailedAttempt: console.warn,\n    /* c8 ignore next */\n    retries: options.retries ?? REQUEST_RETRIES\n  });\n}\n/**\n * Calculate a receipt endpoint from the URL of a channel, if it has one.\n *\n * @param {import('@ucanto/interface').Channel<Record<string, any>>} channel\n */\nfunction receiptEndpointFromChannel(channel) {\n  if ('url' in channel && channel.url instanceof URL) {\n    const url = channel.url;\n    return new URL('/receipt/', url.toString());\n  } else {\n    return null;\n  }\n}\n/**\n * Get a receipt for an executed task by its CID.\n *\n * @param {import('multiformats').UnknownLink} taskCid\n * @param {import('./types.js').RequestOptions} [options]\n * @returns {Promise<import('@ucanto/client').Result<import('@ucanto/interface').Receipt, Error>>}\n */\nasync function get(taskCid, options = {}) {\n  const channel = options.connection?.channel;\n  const receiptsEndpoint = options.receiptsEndpoint ?? (channel && receiptEndpointFromChannel(channel)) ?? defaultReceiptsEndpoint;\n  // Fetch receipt from endpoint\n  const url = new URL(taskCid.toString(), receiptsEndpoint);\n  const fetchReceipt = options.fetch ?? globalThis.fetch.bind(globalThis);\n  const workflowResponse = await fetchReceipt(url);\n  /* c8 ignore start */\n  if (workflowResponse.status === 404) {\n    return {\n      error: new ReceiptNotFound(taskCid)\n    };\n  }\n  /* c8 ignore stop */\n  // Get receipt from Message Archive\n  const agentMessageBytes = new Uint8Array(await workflowResponse.arrayBuffer());\n  // Decode message\n  const agentMessage = await CAR.request.decode({\n    body: agentMessageBytes,\n    headers: {}\n  });\n  // Get receipt from the potential multiple receipts in the message\n  const receipt = agentMessage.receipts.get(taskCid.toString());\n  if (!receipt) {\n    return {\n      error: new ReceiptMissing(taskCid)\n    };\n  }\n  return {\n    ok: receipt\n  };\n}","map":{"version":3,"names":["retry","AbortError","CAR","receiptsEndpoint","defaultReceiptsEndpoint","REQUEST_RETRIES","ReceiptNotFound","Error","constructor","taskCid","reason","name","ReceiptMissing","poll","options","res","get","error","cause","ok","onFailedAttempt","console","warn","retries","receiptEndpointFromChannel","channel","url","URL","toString","connection","fetchReceipt","fetch","globalThis","bind","workflowResponse","status","agentMessageBytes","Uint8Array","arrayBuffer","agentMessage","request","decode","body","headers","receipt","receipts"],"sources":["../../src/receipts.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}