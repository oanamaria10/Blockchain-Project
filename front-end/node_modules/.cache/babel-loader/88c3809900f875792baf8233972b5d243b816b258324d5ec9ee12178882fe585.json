{"ast":null,"code":"import { Upload } from '@web3-storage/upload-client';\nimport { Upload as UploadCapabilities } from '@web3-storage/capabilities';\nimport { Base } from '../base.js';\n/**\n * Client for interacting with the `upload/*` capabilities.\n */\nexport class UploadClient extends Base {\n  /**\n   * Register an \"upload\" to the resource.\n   *\n   * Required delegated capabilities:\n   * - `upload/add`\n   *\n   * @param {import('../types.js').UnknownLink} root - Root data CID for the DAG that was stored.\n   * @param {import('../types.js').CARLink[]} shards - CIDs of CAR files that contain the DAG.\n   * @param {import('../types.js').RequestOptions} [options]\n   */\n  async add(root, shards, options = {}) {\n    const conf = await this._invocationConfig([UploadCapabilities.add.can]);\n    options.connection = this._serviceConf.upload;\n    return Upload.add(conf, root, shards, options);\n  }\n  /**\n   * Get details of an \"upload\".\n   *\n   * Required delegated capabilities:\n   * - `upload/get`\n   *\n   * @param {import('../types.js').UnknownLink} root - Root data CID for the DAG that was stored.\n   * @param {import('../types.js').RequestOptions} [options]\n   */\n  async get(root, options = {}) {\n    const conf = await this._invocationConfig([UploadCapabilities.get.can]);\n    options.connection = this._serviceConf.upload;\n    return Upload.get(conf, root, options);\n  }\n  /**\n   * List uploads registered to the resource.\n   *\n   * Required delegated capabilities:\n   * - `upload/list`\n   *\n   * @param {import('../types.js').ListRequestOptions} [options]\n   */\n  async list(options = {}) {\n    const conf = await this._invocationConfig([UploadCapabilities.list.can]);\n    options.connection = this._serviceConf.upload;\n    return Upload.list(conf, options);\n  }\n  /**\n   * Remove an upload by root data CID.\n   *\n   * Required delegated capabilities:\n   * - `upload/remove`\n   *\n   * @param {import('../types.js').UnknownLink} root - Root data CID to remove.\n   * @param {import('../types.js').RequestOptions} [options]\n   */\n  async remove(root, options = {}) {\n    const conf = await this._invocationConfig([UploadCapabilities.remove.can]);\n    options.connection = this._serviceConf.upload;\n    return Upload.remove(conf, root, options);\n  }\n}","map":{"version":3,"names":["Upload","UploadCapabilities","Base","UploadClient","add","root","shards","options","conf","_invocationConfig","can","connection","_serviceConf","upload","get","list","remove"],"sources":["../../../src/capability/upload.js"],"sourcesContent":[null],"mappings":"AAAA,SAASA,MAAM,QAAQ,6BAA6B;AACpD,SAASA,MAAM,IAAIC,kBAAkB,QAAQ,4BAA4B;AACzE,SAASC,IAAI,QAAQ,YAAY;AAEjC;;;AAGA,OAAM,MAAOC,YAAa,SAAQD,IAAI;EACpC;;;;;;;;;;EAUA,MAAME,GAAGA,CAACC,IAAI,EAAEC,MAAM,EAAEC,OAAO,GAAG,EAAE;IAClC,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAAC,CAACR,kBAAkB,CAACG,GAAG,CAACM,GAAG,CAAC,CAAC;IACvEH,OAAO,CAACI,UAAU,GAAG,IAAI,CAACC,YAAY,CAACC,MAAM;IAC7C,OAAOb,MAAM,CAACI,GAAG,CAACI,IAAI,EAAEH,IAAI,EAAEC,MAAM,EAAEC,OAAO,CAAC;EAChD;EAEA;;;;;;;;;EASA,MAAMO,GAAGA,CAACT,IAAI,EAAEE,OAAO,GAAG,EAAE;IAC1B,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAAC,CAACR,kBAAkB,CAACa,GAAG,CAACJ,GAAG,CAAC,CAAC;IACvEH,OAAO,CAACI,UAAU,GAAG,IAAI,CAACC,YAAY,CAACC,MAAM;IAC7C,OAAOb,MAAM,CAACc,GAAG,CAACN,IAAI,EAAEH,IAAI,EAAEE,OAAO,CAAC;EACxC;EAEA;;;;;;;;EAQA,MAAMQ,IAAIA,CAACR,OAAO,GAAG,EAAE;IACrB,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAAC,CAACR,kBAAkB,CAACc,IAAI,CAACL,GAAG,CAAC,CAAC;IACxEH,OAAO,CAACI,UAAU,GAAG,IAAI,CAACC,YAAY,CAACC,MAAM;IAC7C,OAAOb,MAAM,CAACe,IAAI,CAACP,IAAI,EAAED,OAAO,CAAC;EACnC;EAEA;;;;;;;;;EASA,MAAMS,MAAMA,CAACX,IAAI,EAAEE,OAAO,GAAG,EAAE;IAC7B,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAAC,CAACR,kBAAkB,CAACe,MAAM,CAACN,GAAG,CAAC,CAAC;IAC1EH,OAAO,CAACI,UAAU,GAAG,IAAI,CAACC,YAAY,CAACC,MAAM;IAC7C,OAAOb,MAAM,CAACgB,MAAM,CAACR,IAAI,EAAEH,IAAI,EAAEE,OAAO,CAAC;EAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}