{"ast":null,"code":"module.exports = function ( /*Buffer*/inbuf) {\n  var zlib = require(\"zlib\");\n  var opts = {\n    chunkSize: (parseInt(inbuf.length / 1024) + 1) * 1024\n  };\n  return {\n    deflate: function () {\n      return zlib.deflateRawSync(inbuf, opts);\n    },\n    deflateAsync: function ( /*Function*/callback) {\n      var tmp = zlib.createDeflateRaw(opts),\n        parts = [],\n        total = 0;\n      tmp.on('data', function (data) {\n        parts.push(data);\n        total += data.length;\n      });\n      tmp.on('end', function () {\n        var buf = Buffer.alloc(total),\n          written = 0;\n        buf.fill(0);\n        for (var i = 0; i < parts.length; i++) {\n          var part = parts[i];\n          part.copy(buf, written);\n          written += part.length;\n        }\n        callback && callback(buf);\n      });\n      tmp.end(inbuf);\n    }\n  };\n};","map":{"version":3,"names":["module","exports","inbuf","zlib","require","opts","chunkSize","parseInt","length","deflate","deflateRawSync","deflateAsync","callback","tmp","createDeflateRaw","parts","total","on","data","push","buf","Buffer","alloc","written","fill","i","part","copy","end"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/adm-zip/methods/deflater.js"],"sourcesContent":["module.exports = function (/*Buffer*/inbuf) {\r\n\r\n  var zlib = require(\"zlib\");\r\n  \r\n  var opts = {chunkSize: (parseInt(inbuf.length / 1024) + 1) * 1024};\r\n  \r\n  return {\r\n    deflate: function () {\r\n      return zlib.deflateRawSync(inbuf, opts);\r\n    },\r\n\r\n    deflateAsync: function (/*Function*/callback) {\r\n      var tmp = zlib.createDeflateRaw(opts), parts = [], total = 0;\r\n      tmp.on('data', function (data) {\r\n        parts.push(data);\r\n        total += data.length;\r\n      });\r\n      tmp.on('end', function () {\r\n        var buf = Buffer.alloc(total), written = 0;\r\n        buf.fill(0);\r\n        for (var i = 0; i < parts.length; i++) {\r\n          var part = parts[i];\r\n          part.copy(buf, written);\r\n          written += part.length;\r\n        }\r\n        callback && callback(buf);\r\n      });\r\n      tmp.end(inbuf);\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAG,WAAU,UAAUC,KAAK,EAAE;EAE1C,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;EAE1B,IAAIC,IAAI,GAAG;IAACC,SAAS,EAAE,CAACC,QAAQ,CAACL,KAAK,CAACM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI;EAAI,CAAC;EAElE,OAAO;IACLC,OAAO,EAAE,SAAAA,CAAA,EAAY;MACnB,OAAON,IAAI,CAACO,cAAc,CAACR,KAAK,EAAEG,IAAI,CAAC;IACzC,CAAC;IAEDM,YAAY,EAAE,SAAAA,CAAA,CAAU,YAAYC,QAAQ,EAAE;MAC5C,IAAIC,GAAG,GAAGV,IAAI,CAACW,gBAAgB,CAACT,IAAI,CAAC;QAAEU,KAAK,GAAG,EAAE;QAAEC,KAAK,GAAG,CAAC;MAC5DH,GAAG,CAACI,EAAE,CAAC,MAAM,EAAE,UAAUC,IAAI,EAAE;QAC7BH,KAAK,CAACI,IAAI,CAACD,IAAI,CAAC;QAChBF,KAAK,IAAIE,IAAI,CAACV,MAAM;MACtB,CAAC,CAAC;MACFK,GAAG,CAACI,EAAE,CAAC,KAAK,EAAE,YAAY;QACxB,IAAIG,GAAG,GAAGC,MAAM,CAACC,KAAK,CAACN,KAAK,CAAC;UAAEO,OAAO,GAAG,CAAC;QAC1CH,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC;QACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,KAAK,CAACP,MAAM,EAAEiB,CAAC,EAAE,EAAE;UACrC,IAAIC,IAAI,GAAGX,KAAK,CAACU,CAAC,CAAC;UACnBC,IAAI,CAACC,IAAI,CAACP,GAAG,EAAEG,OAAO,CAAC;UACvBA,OAAO,IAAIG,IAAI,CAAClB,MAAM;QACxB;QACAI,QAAQ,IAAIA,QAAQ,CAACQ,GAAG,CAAC;MAC3B,CAAC,CAAC;MACFP,GAAG,CAACe,GAAG,CAAC1B,KAAK,CAAC;IAChB;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}