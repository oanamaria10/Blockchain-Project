{"ast":null,"code":"import { CarBlockIterator, CarWriter } from '@ipld/car';\nimport * as dagCBOR from '@ipld/dag-cbor';\nimport varint from 'varint';\n/**\n * @typedef {import('@ipld/unixfs').Block} Block\n */\nexport const code = 0x0202;\n/** Byte length of a CBOR encoded CAR header with zero roots. */\nconst NO_ROOTS_HEADER_LENGTH = 18;\n/** @param {import('./types.js').AnyLink} [root] */\nexport function headerEncodingLength(root) {\n  if (!root) return NO_ROOTS_HEADER_LENGTH;\n  const headerLength = dagCBOR.encode({\n    version: 1,\n    roots: [root]\n  }).length;\n  const varintLength = varint.encodingLength(headerLength);\n  return varintLength + headerLength;\n}\n/** @param {Block} block */\nexport function blockHeaderEncodingLength(block) {\n  const payloadLength = block.cid.bytes.length + block.bytes.length;\n  const varintLength = varint.encodingLength(payloadLength);\n  return varintLength + block.cid.bytes.length;\n}\n/** @param {Block} block */\nexport function blockEncodingLength(block) {\n  return blockHeaderEncodingLength(block) + block.bytes.length;\n}\n/**\n * @param {Iterable<Block> | AsyncIterable<Block>} blocks\n * @param {import('./types.js').AnyLink} [root]\n * @returns {Promise<import('./types.js').CARFile>}\n */\nexport async function encode(blocks, root) {\n  // @ts-expect-error\n  const {\n    writer,\n    out\n  } = CarWriter.create(root);\n  /** @type {Error?} */\n  let error;\n  void (async () => {\n    try {\n      for await (const block of blocks) {\n        await writer.put(block);\n      }\n    } catch ( /** @type {any} */err) {\n      error = err;\n    } finally {\n      await writer.close();\n    }\n  })();\n  const chunks = [];\n  for await (const chunk of out) chunks.push(chunk);\n  // @ts-expect-error\n  if (error != null) throw error;\n  const roots = root != null ? [root] : [];\n  return Object.assign(new Blob(chunks), {\n    version: 1,\n    roots\n  });\n}\n/** @extends {ReadableStream<Block>} */\nexport class BlockStream extends ReadableStream {\n  /** @param {import('./types.js').BlobLike} car */\n  constructor(car) {\n    /** @type {Promise<CarBlockIterator>?} */\n    let blocksPromise = null;\n    const getBlocksIterable = () => {\n      if (blocksPromise) return blocksPromise;\n      blocksPromise = CarBlockIterator.fromIterable(toIterable(car.stream()));\n      return blocksPromise;\n    };\n    /** @type {AsyncIterator<Block>?} */\n    let iterator = null;\n    super({\n      async start() {\n        const blocks = await getBlocksIterable();\n        iterator = /** @type {AsyncIterator<Block>} */blocks[Symbol.asyncIterator]();\n      },\n      async pull(controller) {\n        /* c8 ignore next */\n        if (!iterator) throw new Error('missing blocks iterator');\n        const {\n          value,\n          done\n        } = await iterator.next();\n        if (done) return controller.close();\n        controller.enqueue(value);\n      }\n    });\n    /** @returns {Promise<import('./types.js').AnyLink[]>} */\n    this.getRoots = async () => {\n      const blocks = await getBlocksIterable();\n      return await blocks.getRoots();\n    };\n  }\n}\n/* c8 ignore start */\n/**\n * {@link ReadableStream} is an async iterable in newer environments, but it's\n * not standard yet. This function normalizes a {@link ReadableStream} to a\n * definite async iterable.\n *\n * @template T\n * @param {ReadableStream<T> | AsyncIterable<T>} stream\n * @returns {AsyncIterable<T>} An async iterable of the contents of the\n *                             {@link stream} (possibly {@link stream} itself).\n */\nfunction toIterable(stream) {\n  return Symbol.asyncIterator in stream ? stream : async function* () {\n    const reader = stream.getReader();\n    try {\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) return;\n        yield value;\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }();\n}\n/* c8 ignore end */","map":{"version":3,"names":["CarBlockIterator","CarWriter","dagCBOR","varint","code","NO_ROOTS_HEADER_LENGTH","headerEncodingLength","root","headerLength","encode","version","roots","length","varintLength","encodingLength","blockHeaderEncodingLength","block","payloadLength","cid","bytes","blockEncodingLength","blocks","writer","out","create","error","put","err","close","chunks","chunk","push","Object","assign","Blob","BlockStream","ReadableStream","constructor","car","blocksPromise","getBlocksIterable","fromIterable","toIterable","stream","iterator","start","Symbol","asyncIterator","pull","controller","Error","value","done","next","enqueue","getRoots","reader","getReader","read","releaseLock"],"sources":["../../src/car.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}