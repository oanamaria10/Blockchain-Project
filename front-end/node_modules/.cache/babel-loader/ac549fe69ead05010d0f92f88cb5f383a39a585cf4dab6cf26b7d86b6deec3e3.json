{"ast":null,"code":"/**\n * Encoding utilities\n *\n * It is recommended that you import directly with:\n * ```js\n * import * as Encoding from '@web3-storage/access/encoding'\n *\n * // or\n *\n * import { encodeDelegations } from '@web3-storage/access/encoding'\n * ```\n *\n * @module\n */\nimport { CarBufferReader } from '@ipld/car/buffer-reader';\nimport * as CarBufferWriter from '@ipld/car/buffer-writer';\nimport { Delegation } from '@ucanto/core/delegation';\nimport * as u8 from 'uint8arrays';\n// eslint-disable-next-line no-unused-vars\nimport * as Types from '@ucanto/interface';\n/**\n * Encode delegations as bytes\n *\n * @param {Types.Delegation[]} delegations\n */\nexport function delegationsToBytes(delegations) {\n  if (!Array.isArray(delegations) || delegations.length === 0) {\n    throw new Error('Delegations required to be an non empty array.');\n  }\n  const roots = delegations.map(d => ( /** @type {CarBufferWriter.CID} */d.root.cid));\n  const cids = new Set();\n  /** @type {CarBufferWriter.Block[]} */\n  const blocks = [];\n  let byteLength = 0;\n  for (const delegation of delegations) {\n    for (const block of delegation.export()) {\n      const cid = block.cid.toV1().toString();\n      if (!cids.has(cid)) {\n        byteLength += CarBufferWriter.blockLength( /** @type {CarBufferWriter.Block} */block);\n        blocks.push( /** @type {CarBufferWriter.Block} */block);\n        cids.add(cid);\n      }\n    }\n  }\n  const headerLength = CarBufferWriter.estimateHeaderLength(roots.length);\n  const writer = CarBufferWriter.createWriter(new ArrayBuffer(headerLength + byteLength), {\n    roots\n  });\n  for (const block of blocks) {\n    writer.write(block);\n  }\n  return writer.close();\n}\n/**\n * Decode bytes into Delegations\n *\n * @template {Types.Capabilities} [T=Types.Capabilities]\n * @param {import('./types.js').BytesDelegation<T>} bytes\n */\nexport function bytesToDelegations(bytes) {\n  if (!(bytes instanceof Uint8Array) || bytes.length === 0) {\n    throw new TypeError('Input should be a non-empty Uint8Array.');\n  }\n  const reader = CarBufferReader.fromBytes(bytes);\n  const roots = reader.getRoots();\n  /** @type {Types.Delegation<T>[]} */\n  const delegations = [];\n  for (const root of roots) {\n    const rootBlock = reader.get(root);\n    if (rootBlock) {\n      const blocks = new Map();\n      for (const block of reader.blocks()) {\n        if (block.cid.toString() !== root.toString()) blocks.set(block.cid.toString(), block);\n      }\n      // @ts-ignore\n      delegations.push(new Delegation(rootBlock, blocks));\n    } else {\n      throw new Error('Failed to find root from raw delegation.');\n    }\n  }\n  return delegations;\n}\n/**\n * @param {Types.Delegation[]} delegations\n * @param {import('uint8arrays/to-string').SupportedEncodings} encoding\n */\nexport function delegationsToString(delegations, encoding = 'base64url') {\n  const bytes = delegationsToBytes(delegations);\n  return u8.toString(bytes, encoding);\n}\n/**\n * Encode one {@link Types.Delegation Delegation} into a string\n *\n * @param {Types.Delegation<Types.Capabilities>} delegation\n * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding]\n */\nexport function delegationToString(delegation, encoding) {\n  return delegationsToString([delegation], encoding);\n}\n/**\n * Decode string into {@link Types.Delegation Delegation}\n *\n * @template {Types.Capabilities} [T=Types.Capabilities]\n * @param {import('./types.js').EncodedDelegation<T>} raw\n * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding]\n */\nexport function stringToDelegations(raw, encoding = 'base64url') {\n  const bytes = u8.fromString(raw, encoding);\n  return bytesToDelegations(bytes);\n}\n/**\n * Decode string into a {@link Types.Delegation Delegation}\n *\n * @template {Types.Capabilities} [T=Types.Capabilities]\n * @param {import('./types.js').EncodedDelegation<T>} raw\n * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding]\n */\nexport function stringToDelegation(raw, encoding) {\n  const delegations = stringToDelegations(raw, encoding);\n  return /** @type {Types.Delegation<T>} */delegations[0];\n}\n/**\n * @param {number} [expiration]\n */\nexport function expirationToDate(expiration) {\n  const expires = expiration === Infinity || !expiration ? undefined : new Date(expiration * 1000);\n  return expires;\n}","map":{"version":3,"names":["CarBufferReader","CarBufferWriter","Delegation","u8","Types","delegationsToBytes","delegations","Array","isArray","length","Error","roots","map","d","root","cid","cids","Set","blocks","byteLength","delegation","block","export","toV1","toString","has","blockLength","push","add","headerLength","estimateHeaderLength","writer","createWriter","ArrayBuffer","write","close","bytesToDelegations","bytes","Uint8Array","TypeError","reader","fromBytes","getRoots","rootBlock","get","Map","set","delegationsToString","encoding","delegationToString","stringToDelegations","raw","fromString","stringToDelegation","expirationToDate","expiration","expires","Infinity","undefined","Date"],"sources":["../../src/encoding.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}