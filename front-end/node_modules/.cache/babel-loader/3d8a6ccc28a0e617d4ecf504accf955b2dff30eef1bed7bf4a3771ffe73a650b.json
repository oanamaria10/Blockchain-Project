{"ast":null,"code":"import { __assign, __read } from \"tslib\";\nimport { getCurrentHub } from '@sentry/core';\nimport { URL } from 'url';\n/**\n * Checks whether given url points to Sentry server\n * @param url url to verify\n */\nexport function isSentryRequest(url) {\n  var _a;\n  var dsn = (_a = getCurrentHub().getClient()) === null || _a === void 0 ? void 0 : _a.getDsn();\n  return dsn ? url.includes(dsn.host) : false;\n}\n/**\n * Assemble a URL to be used for breadcrumbs and spans.\n *\n * @param requestOptions RequestOptions object containing the component parts for a URL\n * @returns Fully-formed URL\n */\nexport function extractUrl(requestOptions) {\n  var protocol = requestOptions.protocol || '';\n  var hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  var port = !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 ? '' : \":\" + requestOptions.port;\n  var path = requestOptions.path ? requestOptions.path : '/';\n  return protocol + \"//\" + hostname + port + path;\n}\n/**\n * Handle various edge cases in the span description (for spans representing http(s) requests).\n *\n * @param description current `description` property of the span representing the request\n * @param requestOptions Configuration data for the request\n * @param Request Request object\n *\n * @returns The cleaned description\n */\nexport function cleanSpanDescription(description, requestOptions, request) {\n  var _a, _b, _c;\n  // nothing to clean\n  if (!description) {\n    return description;\n  }\n  // eslint-disable-next-line prefer-const\n  var _d = __read(description.split(' '), 2),\n    method = _d[0],\n    requestUrl = _d[1];\n  // superagent sticks the protocol in a weird place (we check for host because if both host *and* protocol are missing,\n  // we're likely dealing with an internal route and this doesn't apply)\n  if (requestOptions.host && !requestOptions.protocol) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    requestOptions.protocol = (_b = (_a = request) === null || _a === void 0 ? void 0 : _a.agent) === null || _b === void 0 ? void 0 : _b.protocol; // worst comes to worst, this is undefined and nothing changes\n    requestUrl = extractUrl(requestOptions);\n  }\n  // internal routes can end up starting with a triple slash rather than a single one\n  if ((_c = requestUrl) === null || _c === void 0 ? void 0 : _c.startsWith('///')) {\n    requestUrl = requestUrl.slice(2);\n  }\n  return method + \" \" + requestUrl;\n}\n/**\n * Convert a URL object into a RequestOptions object.\n *\n * Copied from Node's internals (where it's used in http(s).request() and http(s).get()), modified only to use the\n * RequestOptions type above.\n *\n * See https://github.com/nodejs/node/blob/master/lib/internal/url.js.\n */\nexport function urlToOptions(url) {\n  var options = {\n    protocol: url.protocol,\n    hostname: typeof url.hostname === 'string' && url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,\n    hash: url.hash,\n    search: url.search,\n    pathname: url.pathname,\n    path: \"\" + (url.pathname || '') + (url.search || ''),\n    href: url.href\n  };\n  if (url.port !== '') {\n    options.port = Number(url.port);\n  }\n  if (url.username || url.password) {\n    options.auth = url.username + \":\" + url.password;\n  }\n  return options;\n}\n/**\n * Normalize inputs to `http(s).request()` and `http(s).get()`.\n *\n * Legal inputs to `http(s).request()` and `http(s).get()` can take one of ten forms:\n *     [ RequestOptions | string | URL ],\n *     [ RequestOptions | string | URL, RequestCallback ],\n *     [ string | URL, RequestOptions ], and\n *     [ string | URL, RequestOptions, RequestCallback ].\n *\n * This standardizes to one of two forms: [ RequestOptions ] and [ RequestOptions, RequestCallback ]. A similar thing is\n * done as the first step of `http(s).request()` and `http(s).get()`; this just does it early so that we can interact\n * with the args in a standard way.\n *\n * @param requestArgs The inputs to `http(s).request()` or `http(s).get()`, as an array.\n *\n * @returns Equivalent args of the form [ RequestOptions ] or [ RequestOptions, RequestCallback ].\n */\nexport function normalizeRequestArgs(requestArgs) {\n  var callback, requestOptions;\n  // pop off the callback, if there is one\n  if (typeof requestArgs[requestArgs.length - 1] === 'function') {\n    callback = requestArgs.pop();\n  }\n  // create a RequestOptions object of whatever's at index 0\n  if (typeof requestArgs[0] === 'string') {\n    requestOptions = urlToOptions(new URL(requestArgs[0]));\n  } else if (requestArgs[0] instanceof URL) {\n    requestOptions = urlToOptions(requestArgs[0]);\n  } else {\n    requestOptions = requestArgs[0];\n  }\n  // if the options were given separately from the URL, fold them in\n  if (requestArgs.length === 2) {\n    requestOptions = __assign(__assign({}, requestOptions), requestArgs[1]);\n  }\n  // return args in standardized form\n  if (callback) {\n    return [requestOptions, callback];\n  } else {\n    return [requestOptions];\n  }\n}","map":{"version":3,"names":["getCurrentHub","URL","isSentryRequest","url","dsn","_a","getClient","getDsn","includes","host","extractUrl","requestOptions","protocol","hostname","port","path","cleanSpanDescription","description","request","_d","__read","split","method","requestUrl","_b","agent","_c","startsWith","slice","urlToOptions","options","hash","search","pathname","href","Number","username","password","auth","normalizeRequestArgs","requestArgs","callback","length","pop","__assign"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\node\\src\\integrations\\utils\\http.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport * as http from 'http';\nimport { URL } from 'url';\n\n/**\n * Checks whether given url points to Sentry server\n * @param url url to verify\n */\nexport function isSentryRequest(url: string): boolean {\n  const dsn = getCurrentHub()\n    .getClient()\n    ?.getDsn();\n  return dsn ? url.includes(dsn.host) : false;\n}\n\n/**\n * Assemble a URL to be used for breadcrumbs and spans.\n *\n * @param requestOptions RequestOptions object containing the component parts for a URL\n * @returns Fully-formed URL\n */\nexport function extractUrl(requestOptions: RequestOptions): string {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  const port =\n    !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 ? '' : `:${requestOptions.port}`;\n  const path = requestOptions.path ? requestOptions.path : '/';\n\n  return `${protocol}//${hostname}${port}${path}`;\n}\n\n/**\n * Handle various edge cases in the span description (for spans representing http(s) requests).\n *\n * @param description current `description` property of the span representing the request\n * @param requestOptions Configuration data for the request\n * @param Request Request object\n *\n * @returns The cleaned description\n */\nexport function cleanSpanDescription(\n  description: string | undefined,\n  requestOptions: RequestOptions,\n  request: http.ClientRequest,\n): string | undefined {\n  // nothing to clean\n  if (!description) {\n    return description;\n  }\n\n  // eslint-disable-next-line prefer-const\n  let [method, requestUrl] = description.split(' ');\n\n  // superagent sticks the protocol in a weird place (we check for host because if both host *and* protocol are missing,\n  // we're likely dealing with an internal route and this doesn't apply)\n  if (requestOptions.host && !requestOptions.protocol) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    requestOptions.protocol = (request as any)?.agent?.protocol; // worst comes to worst, this is undefined and nothing changes\n    requestUrl = extractUrl(requestOptions);\n  }\n\n  // internal routes can end up starting with a triple slash rather than a single one\n  if (requestUrl?.startsWith('///')) {\n    requestUrl = requestUrl.slice(2);\n  }\n\n  return `${method} ${requestUrl}`;\n}\n\n// the node types are missing a few properties which node's `urlToOptions` function spits out\nexport type RequestOptions = http.RequestOptions & { hash?: string; search?: string; pathname?: string; href?: string };\ntype RequestCallback = (response: http.IncomingMessage) => void;\nexport type RequestMethodArgs =\n  | [RequestOptions | string | URL, RequestCallback?]\n  | [string | URL, RequestOptions, RequestCallback?];\nexport type RequestMethod = (...args: RequestMethodArgs) => http.ClientRequest;\n\n/**\n * Convert a URL object into a RequestOptions object.\n *\n * Copied from Node's internals (where it's used in http(s).request() and http(s).get()), modified only to use the\n * RequestOptions type above.\n *\n * See https://github.com/nodejs/node/blob/master/lib/internal/url.js.\n */\nexport function urlToOptions(url: URL): RequestOptions {\n  const options: RequestOptions = {\n    protocol: url.protocol,\n    hostname:\n      typeof url.hostname === 'string' && url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,\n    hash: url.hash,\n    search: url.search,\n    pathname: url.pathname,\n    path: `${url.pathname || ''}${url.search || ''}`,\n    href: url.href,\n  };\n  if (url.port !== '') {\n    options.port = Number(url.port);\n  }\n  if (url.username || url.password) {\n    options.auth = `${url.username}:${url.password}`;\n  }\n  return options;\n}\n\n/**\n * Normalize inputs to `http(s).request()` and `http(s).get()`.\n *\n * Legal inputs to `http(s).request()` and `http(s).get()` can take one of ten forms:\n *     [ RequestOptions | string | URL ],\n *     [ RequestOptions | string | URL, RequestCallback ],\n *     [ string | URL, RequestOptions ], and\n *     [ string | URL, RequestOptions, RequestCallback ].\n *\n * This standardizes to one of two forms: [ RequestOptions ] and [ RequestOptions, RequestCallback ]. A similar thing is\n * done as the first step of `http(s).request()` and `http(s).get()`; this just does it early so that we can interact\n * with the args in a standard way.\n *\n * @param requestArgs The inputs to `http(s).request()` or `http(s).get()`, as an array.\n *\n * @returns Equivalent args of the form [ RequestOptions ] or [ RequestOptions, RequestCallback ].\n */\nexport function normalizeRequestArgs(\n  requestArgs: RequestMethodArgs,\n): [RequestOptions] | [RequestOptions, RequestCallback] {\n  let callback, requestOptions;\n\n  // pop off the callback, if there is one\n  if (typeof requestArgs[requestArgs.length - 1] === 'function') {\n    callback = requestArgs.pop() as RequestCallback;\n  }\n\n  // create a RequestOptions object of whatever's at index 0\n  if (typeof requestArgs[0] === 'string') {\n    requestOptions = urlToOptions(new URL(requestArgs[0]));\n  } else if (requestArgs[0] instanceof URL) {\n    requestOptions = urlToOptions(requestArgs[0]);\n  } else {\n    requestOptions = requestArgs[0];\n  }\n\n  // if the options were given separately from the URL, fold them in\n  if (requestArgs.length === 2) {\n    requestOptions = { ...requestOptions, ...requestArgs[1] };\n  }\n\n  // return args in standardized form\n  if (callback) {\n    return [requestOptions, callback];\n  } else {\n    return [requestOptions];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}