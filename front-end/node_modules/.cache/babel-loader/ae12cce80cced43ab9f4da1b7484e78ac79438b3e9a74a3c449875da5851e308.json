{"ast":null,"code":"'use strict';\n\n/**\n * @module XUnit\n */\n/**\n * Module dependencies.\n */\nvar Base = require('./base');\nvar utils = require('../utils');\nvar fs = require('fs');\nvar path = require('path');\nvar errors = require('../errors');\nvar createUnsupportedError = errors.createUnsupportedError;\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar STATE_FAILED = require('../runnable').constants.STATE_FAILED;\nvar inherits = utils.inherits;\nvar escape = utils.escape;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\nvar Date = global.Date;\n\n/**\n * Expose `XUnit`.\n */\n\nexports = module.exports = XUnit;\n\n/**\n * Constructs a new `XUnit` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction XUnit(runner, options) {\n  Base.call(this, runner, options);\n  var stats = this.stats;\n  var tests = [];\n  var self = this;\n\n  // the name of the test suite, as it will appear in the resulting XML file\n  var suiteName;\n\n  // the default name of the test suite if none is provided\n  var DEFAULT_SUITE_NAME = 'Mocha Tests';\n  if (options && options.reporterOptions) {\n    if (options.reporterOptions.output) {\n      if (!fs.createWriteStream) {\n        throw createUnsupportedError('file output not supported in browser');\n      }\n      fs.mkdirSync(path.dirname(options.reporterOptions.output), {\n        recursive: true\n      });\n      self.fileStream = fs.createWriteStream(options.reporterOptions.output);\n    }\n\n    // get the suite name from the reporter options (if provided)\n    suiteName = options.reporterOptions.suiteName;\n  }\n\n  // fall back to the default suite name\n  suiteName = suiteName || DEFAULT_SUITE_NAME;\n  runner.on(EVENT_TEST_PENDING, function (test) {\n    tests.push(test);\n  });\n  runner.on(EVENT_TEST_PASS, function (test) {\n    tests.push(test);\n  });\n  runner.on(EVENT_TEST_FAIL, function (test) {\n    tests.push(test);\n  });\n  runner.once(EVENT_RUN_END, function () {\n    self.write(tag('testsuite', {\n      name: suiteName,\n      tests: stats.tests,\n      failures: 0,\n      errors: stats.failures,\n      skipped: stats.tests - stats.failures - stats.passes,\n      timestamp: new Date().toUTCString(),\n      time: stats.duration / 1000 || 0\n    }, false));\n    tests.forEach(function (t) {\n      self.test(t);\n    });\n    self.write('</testsuite>');\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(XUnit, Base);\n\n/**\n * Override done to close the stream (if it's a file).\n *\n * @param failures\n * @param {Function} fn\n */\nXUnit.prototype.done = function (failures, fn) {\n  if (this.fileStream) {\n    this.fileStream.end(function () {\n      fn(failures);\n    });\n  } else {\n    fn(failures);\n  }\n};\n\n/**\n * Write out the given line.\n *\n * @param {string} line\n */\nXUnit.prototype.write = function (line) {\n  if (this.fileStream) {\n    this.fileStream.write(line + '\\n');\n  } else if (typeof process === 'object' && process.stdout) {\n    process.stdout.write(line + '\\n');\n  } else {\n    Base.consoleLog(line);\n  }\n};\n\n/**\n * Output tag for the given `test.`\n *\n * @param {Test} test\n */\nXUnit.prototype.test = function (test) {\n  Base.useColors = false;\n  var attrs = {\n    classname: test.parent.fullTitle(),\n    name: test.title,\n    time: test.duration / 1000 || 0\n  };\n  if (test.state === STATE_FAILED) {\n    var err = test.err;\n    var diff = !Base.hideDiff && Base.showDiff(err) ? '\\n' + Base.generateDiff(err.actual, err.expected) : '';\n    this.write(tag('testcase', attrs, false, tag('failure', {}, false, escape(err.message) + escape(diff) + '\\n' + escape(err.stack))));\n  } else if (test.isPending()) {\n    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));\n  } else {\n    this.write(tag('testcase', attrs, true));\n  }\n};\n\n/**\n * HTML tag helper.\n *\n * @param name\n * @param attrs\n * @param close\n * @param content\n * @return {string}\n */\nfunction tag(name, attrs, close, content) {\n  var end = close ? '/>' : '>';\n  var pairs = [];\n  var tag;\n  for (var key in attrs) {\n    if (Object.prototype.hasOwnProperty.call(attrs, key)) {\n      pairs.push(key + '=\"' + escape(attrs[key]) + '\"');\n    }\n  }\n  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;\n  if (content) {\n    tag += content + '</' + name + end;\n  }\n  return tag;\n}\nXUnit.description = 'XUnit-compatible XML output';","map":{"version":3,"names":["Base","require","utils","fs","path","errors","createUnsupportedError","constants","EVENT_TEST_PASS","EVENT_TEST_FAIL","EVENT_RUN_END","EVENT_TEST_PENDING","STATE_FAILED","inherits","escape","Date","global","exports","module","XUnit","runner","options","call","stats","tests","self","suiteName","DEFAULT_SUITE_NAME","reporterOptions","output","createWriteStream","mkdirSync","dirname","recursive","fileStream","on","test","push","once","write","tag","name","failures","skipped","passes","timestamp","toUTCString","time","duration","forEach","t","prototype","done","fn","end","line","process","stdout","consoleLog","useColors","attrs","classname","parent","fullTitle","title","state","err","diff","hideDiff","showDiff","generateDiff","actual","expected","message","stack","isPending","close","content","pairs","key","Object","hasOwnProperty","length","join","description"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/mocha/lib/reporters/xunit.js"],"sourcesContent":["'use strict';\n/**\n * @module XUnit\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\nvar fs = require('fs');\nvar path = require('path');\nvar errors = require('../errors');\nvar createUnsupportedError = errors.createUnsupportedError;\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;\nvar STATE_FAILED = require('../runnable').constants.STATE_FAILED;\nvar inherits = utils.inherits;\nvar escape = utils.escape;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\nvar Date = global.Date;\n\n/**\n * Expose `XUnit`.\n */\n\nexports = module.exports = XUnit;\n\n/**\n * Constructs a new `XUnit` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction XUnit(runner, options) {\n  Base.call(this, runner, options);\n\n  var stats = this.stats;\n  var tests = [];\n  var self = this;\n\n  // the name of the test suite, as it will appear in the resulting XML file\n  var suiteName;\n\n  // the default name of the test suite if none is provided\n  var DEFAULT_SUITE_NAME = 'Mocha Tests';\n\n  if (options && options.reporterOptions) {\n    if (options.reporterOptions.output) {\n      if (!fs.createWriteStream) {\n        throw createUnsupportedError('file output not supported in browser');\n      }\n\n      fs.mkdirSync(path.dirname(options.reporterOptions.output), {\n        recursive: true\n      });\n      self.fileStream = fs.createWriteStream(options.reporterOptions.output);\n    }\n\n    // get the suite name from the reporter options (if provided)\n    suiteName = options.reporterOptions.suiteName;\n  }\n\n  // fall back to the default suite name\n  suiteName = suiteName || DEFAULT_SUITE_NAME;\n\n  runner.on(EVENT_TEST_PENDING, function (test) {\n    tests.push(test);\n  });\n\n  runner.on(EVENT_TEST_PASS, function (test) {\n    tests.push(test);\n  });\n\n  runner.on(EVENT_TEST_FAIL, function (test) {\n    tests.push(test);\n  });\n\n  runner.once(EVENT_RUN_END, function () {\n    self.write(\n      tag(\n        'testsuite',\n        {\n          name: suiteName,\n          tests: stats.tests,\n          failures: 0,\n          errors: stats.failures,\n          skipped: stats.tests - stats.failures - stats.passes,\n          timestamp: new Date().toUTCString(),\n          time: stats.duration / 1000 || 0\n        },\n        false\n      )\n    );\n\n    tests.forEach(function (t) {\n      self.test(t);\n    });\n\n    self.write('</testsuite>');\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(XUnit, Base);\n\n/**\n * Override done to close the stream (if it's a file).\n *\n * @param failures\n * @param {Function} fn\n */\nXUnit.prototype.done = function (failures, fn) {\n  if (this.fileStream) {\n    this.fileStream.end(function () {\n      fn(failures);\n    });\n  } else {\n    fn(failures);\n  }\n};\n\n/**\n * Write out the given line.\n *\n * @param {string} line\n */\nXUnit.prototype.write = function (line) {\n  if (this.fileStream) {\n    this.fileStream.write(line + '\\n');\n  } else if (typeof process === 'object' && process.stdout) {\n    process.stdout.write(line + '\\n');\n  } else {\n    Base.consoleLog(line);\n  }\n};\n\n/**\n * Output tag for the given `test.`\n *\n * @param {Test} test\n */\nXUnit.prototype.test = function (test) {\n  Base.useColors = false;\n\n  var attrs = {\n    classname: test.parent.fullTitle(),\n    name: test.title,\n    time: test.duration / 1000 || 0\n  };\n\n  if (test.state === STATE_FAILED) {\n    var err = test.err;\n    var diff =\n      !Base.hideDiff && Base.showDiff(err)\n        ? '\\n' + Base.generateDiff(err.actual, err.expected)\n        : '';\n    this.write(\n      tag(\n        'testcase',\n        attrs,\n        false,\n        tag(\n          'failure',\n          {},\n          false,\n          escape(err.message) + escape(diff) + '\\n' + escape(err.stack)\n        )\n      )\n    );\n  } else if (test.isPending()) {\n    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));\n  } else {\n    this.write(tag('testcase', attrs, true));\n  }\n};\n\n/**\n * HTML tag helper.\n *\n * @param name\n * @param attrs\n * @param close\n * @param content\n * @return {string}\n */\nfunction tag(name, attrs, close, content) {\n  var end = close ? '/>' : '>';\n  var pairs = [];\n  var tag;\n\n  for (var key in attrs) {\n    if (Object.prototype.hasOwnProperty.call(attrs, key)) {\n      pairs.push(key + '=\"' + escape(attrs[key]) + '\"');\n    }\n  }\n\n  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;\n  if (content) {\n    tag += content + '</' + name + end;\n  }\n  return tag;\n}\n\nXUnit.description = 'XUnit-compatible XML output';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}