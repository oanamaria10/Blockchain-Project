{"ast":null,"code":"import * as Codec from './codec.js';\nimport * as CAR from './car.js';\nimport * as response from './legacy/response.js';\nimport * as request from './legacy/request.js';\nexport const {\n  contentType\n} = request;\nexport { request, response };\n\n/**\n * This is an inbound codec designed to support legacy clients and encode\n * responses in a legacy (CBOR) format.\n */\nexport const inbound = Codec.inbound({\n  decoders: {\n    [contentType]: request,\n    [CAR.contentType]: CAR.request\n  },\n  encoders: {\n    // Here we configure encoders such that if accept header is `*/*` (which is\n    // the default if omitted) we will encode the response in CBOR. If\n    // `application/vnd.ipld.car` is set we will encode the response in current\n    // format.\n    // Here we exploit the fact that legacy clients do not send an accept header\n    // and therefore will get response in legacy format. New clients on the other\n    // hand will send `application/vnd.ipld.car` and consequently get response\n    // in current format.\n    '*/*;q=0.1': response,\n    [CAR.contentType]: CAR.response\n  }\n});","map":{"version":3,"names":["Codec","CAR","response","request","contentType","inbound","decoders","encoders"],"sources":["C:/FACULTATE/Proiect/node_modules/@ucanto/transport/src/legacy.js"],"sourcesContent":["import * as Codec from './codec.js'\nimport * as CAR from './car.js'\nimport * as response from './legacy/response.js'\nimport * as request from './legacy/request.js'\n\nexport const { contentType } = request\nexport { request, response }\n\n/**\n * This is an inbound codec designed to support legacy clients and encode\n * responses in a legacy (CBOR) format.\n */\nexport const inbound = Codec.inbound({\n  decoders: {\n    [contentType]: request,\n    [CAR.contentType]: CAR.request,\n  },\n  encoders: {\n    // Here we configure encoders such that if accept header is `*/*` (which is\n    // the default if omitted) we will encode the response in CBOR. If\n    // `application/vnd.ipld.car` is set we will encode the response in current\n    // format.\n    // Here we exploit the fact that legacy clients do not send an accept header\n    // and therefore will get response in legacy format. New clients on the other\n    // hand will send `application/vnd.ipld.car` and consequently get response\n    // in current format.\n    '*/*;q=0.1': response,\n    [CAR.contentType]: CAR.response,\n  },\n})\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,YAAY;AACnC,OAAO,KAAKC,GAAG,MAAM,UAAU;AAC/B,OAAO,KAAKC,QAAQ,MAAM,sBAAsB;AAChD,OAAO,KAAKC,OAAO,MAAM,qBAAqB;AAE9C,OAAO,MAAM;EAAEC;AAAY,CAAC,GAAGD,OAAO;AACtC,SAASA,OAAO,EAAED,QAAQ;;AAE1B;AACA;AACA;AACA;AACA,OAAO,MAAMG,OAAO,GAAGL,KAAK,CAACK,OAAO,CAAC;EACnCC,QAAQ,EAAE;IACR,CAACF,WAAW,GAAGD,OAAO;IACtB,CAACF,GAAG,CAACG,WAAW,GAAGH,GAAG,CAACE;EACzB,CAAC;EACDI,QAAQ,EAAE;IACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,WAAW,EAAEL,QAAQ;IACrB,CAACD,GAAG,CAACG,WAAW,GAAGH,GAAG,CAACC;EACzB;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}