{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HardhatContext = void 0;\nconst errors_1 = require(\"./core/errors\");\nconst errors_list_1 = require(\"./core/errors-list\");\nconst vars_manager_1 = require(\"./core/vars/vars-manager\");\nconst dsl_1 = require(\"./core/tasks/dsl\");\nconst global_dir_1 = require(\"./util/global-dir\");\nconst platform_1 = require(\"./util/platform\");\nclass HardhatContext {\n  constructor() {\n    this.tasksDSL = new dsl_1.TasksDSL();\n    this.environmentExtenders = [];\n    this.providerExtenders = [];\n    this.configExtenders = [];\n    // NOTE: This is experimental and will be removed. Please contact our team if\n    // you are planning to use it.\n    this.experimentalHardhatNetworkMessageTraceHooks = [];\n    this.varsManager = new vars_manager_1.VarsManager((0, global_dir_1.getVarsFilePath)());\n  }\n  static isCreated() {\n    const globalWithHardhatContext = global;\n    return globalWithHardhatContext.__hardhatContext !== undefined;\n  }\n  static createHardhatContext() {\n    if (this.isCreated()) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_ALREADY_CREATED);\n    }\n    const globalWithHardhatContext = global;\n    const ctx = new HardhatContext();\n    globalWithHardhatContext.__hardhatContext = ctx;\n    return ctx;\n  }\n  static getHardhatContext() {\n    const globalWithHardhatContext = global;\n    const ctx = globalWithHardhatContext.__hardhatContext;\n    if (ctx === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_NOT_CREATED);\n    }\n    return ctx;\n  }\n  static deleteHardhatContext() {\n    const globalAsAny = global;\n    globalAsAny.__hardhatContext = undefined;\n  }\n  setHardhatRuntimeEnvironment(env) {\n    if (this.environment !== undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_HRE_ALREADY_DEFINED);\n    }\n    this.environment = env;\n  }\n  getHardhatRuntimeEnvironment() {\n    if (this.environment === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_HRE_NOT_DEFINED);\n    }\n    return this.environment;\n  }\n  setConfigLoadingAsStarted() {\n    this._filesLoadedBeforeConfig = (0, platform_1.getRequireCachedFiles)();\n  }\n  setConfigLoadingAsFinished() {\n    this._filesLoadedAfterConfig = (0, platform_1.getRequireCachedFiles)();\n  }\n  getFilesLoadedDuringConfig() {\n    // No config was loaded\n    if (this._filesLoadedBeforeConfig === undefined) {\n      return [];\n    }\n    (0, errors_1.assertHardhatInvariant)(this._filesLoadedAfterConfig !== undefined, \"Config loading was set as started and not finished\");\n    return arraysDifference(this._filesLoadedAfterConfig, this._filesLoadedBeforeConfig);\n  }\n}\nexports.HardhatContext = HardhatContext;\nfunction arraysDifference(a, b) {\n  return a.filter(e => !b.includes(e));\n}","map":{"version":3,"names":["errors_1","require","errors_list_1","vars_manager_1","dsl_1","global_dir_1","platform_1","HardhatContext","constructor","tasksDSL","TasksDSL","environmentExtenders","providerExtenders","configExtenders","experimentalHardhatNetworkMessageTraceHooks","varsManager","VarsManager","getVarsFilePath","isCreated","globalWithHardhatContext","global","__hardhatContext","undefined","createHardhatContext","HardhatError","ERRORS","GENERAL","CONTEXT_ALREADY_CREATED","ctx","getHardhatContext","CONTEXT_NOT_CREATED","deleteHardhatContext","globalAsAny","setHardhatRuntimeEnvironment","env","environment","CONTEXT_HRE_ALREADY_DEFINED","getHardhatRuntimeEnvironment","CONTEXT_HRE_NOT_DEFINED","setConfigLoadingAsStarted","_filesLoadedBeforeConfig","getRequireCachedFiles","setConfigLoadingAsFinished","_filesLoadedAfterConfig","getFilesLoadedDuringConfig","assertHardhatInvariant","arraysDifference","exports","a","b","filter","e","includes"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\context.ts"],"sourcesContent":["import {\n  ConfigExtender,\n  EnvironmentExtender,\n  ExperimentalHardhatNetworkMessageTraceHook,\n  HardhatRuntimeEnvironment,\n  ProviderExtender,\n} from \"../types\";\n\nimport { assertHardhatInvariant, HardhatError } from \"./core/errors\";\nimport { ERRORS } from \"./core/errors-list\";\nimport { VarsManagerSetup } from \"./core/vars/vars-manager-setup\";\nimport { VarsManager } from \"./core/vars/vars-manager\";\nimport { TasksDSL } from \"./core/tasks/dsl\";\nimport { getVarsFilePath } from \"./util/global-dir\";\nimport { getRequireCachedFiles } from \"./util/platform\";\n\nexport type GlobalWithHardhatContext = typeof global & {\n  __hardhatContext: HardhatContext;\n};\n\nexport class HardhatContext {\n  constructor() {\n    this.varsManager = new VarsManager(getVarsFilePath());\n  }\n\n  public static isCreated(): boolean {\n    const globalWithHardhatContext = global as GlobalWithHardhatContext;\n    return globalWithHardhatContext.__hardhatContext !== undefined;\n  }\n\n  public static createHardhatContext(): HardhatContext {\n    if (this.isCreated()) {\n      throw new HardhatError(ERRORS.GENERAL.CONTEXT_ALREADY_CREATED);\n    }\n    const globalWithHardhatContext = global as GlobalWithHardhatContext;\n    const ctx = new HardhatContext();\n    globalWithHardhatContext.__hardhatContext = ctx;\n    return ctx;\n  }\n\n  public static getHardhatContext(): HardhatContext {\n    const globalWithHardhatContext = global as GlobalWithHardhatContext;\n    const ctx = globalWithHardhatContext.__hardhatContext;\n    if (ctx === undefined) {\n      throw new HardhatError(ERRORS.GENERAL.CONTEXT_NOT_CREATED);\n    }\n    return ctx;\n  }\n\n  public static deleteHardhatContext() {\n    const globalAsAny = global as any;\n    globalAsAny.__hardhatContext = undefined;\n  }\n\n  public readonly tasksDSL = new TasksDSL();\n  public readonly environmentExtenders: EnvironmentExtender[] = [];\n  public environment?: HardhatRuntimeEnvironment;\n  public readonly providerExtenders: ProviderExtender[] = [];\n  public varsManager: VarsManager | VarsManagerSetup;\n\n  public readonly configExtenders: ConfigExtender[] = [];\n\n  // NOTE: This is experimental and will be removed. Please contact our team if\n  // you are planning to use it.\n  public readonly experimentalHardhatNetworkMessageTraceHooks: ExperimentalHardhatNetworkMessageTraceHook[] =\n    [];\n  private _filesLoadedBeforeConfig?: string[];\n  private _filesLoadedAfterConfig?: string[];\n\n  public setHardhatRuntimeEnvironment(env: HardhatRuntimeEnvironment) {\n    if (this.environment !== undefined) {\n      throw new HardhatError(ERRORS.GENERAL.CONTEXT_HRE_ALREADY_DEFINED);\n    }\n    this.environment = env;\n  }\n\n  public getHardhatRuntimeEnvironment(): HardhatRuntimeEnvironment {\n    if (this.environment === undefined) {\n      throw new HardhatError(ERRORS.GENERAL.CONTEXT_HRE_NOT_DEFINED);\n    }\n    return this.environment;\n  }\n\n  public setConfigLoadingAsStarted() {\n    this._filesLoadedBeforeConfig = getRequireCachedFiles();\n  }\n\n  public setConfigLoadingAsFinished() {\n    this._filesLoadedAfterConfig = getRequireCachedFiles();\n  }\n\n  public getFilesLoadedDuringConfig(): string[] {\n    // No config was loaded\n    if (this._filesLoadedBeforeConfig === undefined) {\n      return [];\n    }\n\n    assertHardhatInvariant(\n      this._filesLoadedAfterConfig !== undefined,\n      \"Config loading was set as started and not finished\"\n    );\n\n    return arraysDifference(\n      this._filesLoadedAfterConfig,\n      this._filesLoadedBeforeConfig\n    );\n  }\n}\n\nfunction arraysDifference<T>(a: T[], b: T[]): T[] {\n  return a.filter((e) => !b.includes(e));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}