{"ast":null,"code":"var _jsxFileName = \"C:\\\\FACULTATE\\\\Proiect\\\\front-end\\\\src\\\\uploadFile.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PinataSDK from '@pinata/sdk';\n\n// Initialize Pinata SDK with your API Key and Secret\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pinata = PinataSDK('5275d3cba1cc8b5fb3fc', '3bed044d9789917ea9c04271df631325a40f5d5b4bfc90afc2b5e2a3d4fe8d9c');\nconst UploadFile = ({\n  onFileUploaded\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [image, setImage] = useState(null);\n  const [link, setLink] = useState('');\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleImageChange = event => {\n    setImage(event.target.files[0]);\n  };\n  const handleLinkChange = event => {\n    setLink(event.target.value);\n  };\n  const uploadToPinata = async () => {\n    try {\n      // Check if all fields are filled\n      if (!file || !image || !link) {\n        alert('Please fill in all fields!');\n        return;\n      }\n\n      // Upload the file to Pinata\n      const fileResponse = await pinata.pinFileToIPFS(file);\n      const imageResponse = await pinata.pinFileToIPFS(image);\n      console.log('File uploaded to Pinata with CID:', fileResponse.IpfsHash);\n      console.log('Image uploaded to Pinata with CID:', imageResponse.IpfsHash);\n\n      // Pass the CIDs and link to the parent component\n      onFileUploaded(imageResponse.IpfsHash, fileResponse.IpfsHash, link);\n    } catch (err) {\n      console.error('Error uploading to Pinata:', err);\n      alert('An error occurred during the upload. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Campaign Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleImageChange,\n      accept: \"image/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Campaign link\",\n      value: link,\n      onChange: handleLinkChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadToPinata,\n      children: \"Upload to Pinata\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadFile, \"+rFBF2o0Wu4woQ7PUOa74OOXkzo=\");\n_c = UploadFile;\nexport default UploadFile;\nvar _c;\n$RefreshReg$(_c, \"UploadFile\");","map":{"version":3,"names":["React","useState","PinataSDK","jsxDEV","_jsxDEV","pinata","UploadFile","onFileUploaded","_s","file","setFile","image","setImage","link","setLink","handleFileChange","event","target","files","handleImageChange","handleLinkChange","value","uploadToPinata","alert","fileResponse","pinFileToIPFS","imageResponse","console","log","IpfsHash","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/FACULTATE/Proiect/front-end/src/uploadFile.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PinataSDK from '@pinata/sdk';\r\n\r\n// Initialize Pinata SDK with your API Key and Secret\r\nconst pinata = PinataSDK('5275d3cba1cc8b5fb3fc', '3bed044d9789917ea9c04271df631325a40f5d5b4bfc90afc2b5e2a3d4fe8d9c'); \r\n\r\nconst UploadFile = ({ onFileUploaded }) => {\r\n  const [file, setFile] = useState(null);\r\n  const [image, setImage] = useState(null);\r\n  const [link, setLink] = useState('');\r\n\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleImageChange = (event) => {\r\n    setImage(event.target.files[0]);\r\n  };\r\n\r\n  const handleLinkChange = (event) => {\r\n    setLink(event.target.value);\r\n  };\r\n\r\n  const uploadToPinata = async () => {\r\n    try {\r\n      // Check if all fields are filled\r\n      if (!file || !image || !link) {\r\n        alert('Please fill in all fields!');\r\n        return;\r\n      }\r\n\r\n      // Upload the file to Pinata\r\n      const fileResponse = await pinata.pinFileToIPFS(file);\r\n      const imageResponse = await pinata.pinFileToIPFS(image);\r\n\r\n      console.log('File uploaded to Pinata with CID:', fileResponse.IpfsHash);\r\n      console.log('Image uploaded to Pinata with CID:', imageResponse.IpfsHash);\r\n\r\n      // Pass the CIDs and link to the parent component\r\n      onFileUploaded(imageResponse.IpfsHash, fileResponse.IpfsHash, link);\r\n    } catch (err) {\r\n      console.error('Error uploading to Pinata:', err);\r\n      alert('An error occurred during the upload. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Upload Campaign Files</h2>\r\n      {/* Input for image */}\r\n      <input type=\"file\" onChange={handleImageChange} accept=\"image/*\" />\r\n      {/* Input for file */}\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      {/* Input for campaign link */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Campaign link\"\r\n        value={link}\r\n        onChange={handleLinkChange}\r\n      />\r\n      {/* Button to upload files to Pinata */}\r\n      <button onClick={uploadToPinata}>Upload to Pinata</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadFile;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,aAAa;;AAEnC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGH,SAAS,CAAC,sBAAsB,EAAE,kEAAkE,CAAC;AAEpH,MAAMI,UAAU,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMc,gBAAgB,GAAIC,KAAK,IAAK;IAClCN,OAAO,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,MAAMC,iBAAiB,GAAIH,KAAK,IAAK;IACnCJ,QAAQ,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACjC,CAAC;EAED,MAAME,gBAAgB,GAAIJ,KAAK,IAAK;IAClCF,OAAO,CAACE,KAAK,CAACC,MAAM,CAACI,KAAK,CAAC;EAC7B,CAAC;EAED,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF;MACA,IAAI,CAACb,IAAI,IAAI,CAACE,KAAK,IAAI,CAACE,IAAI,EAAE;QAC5BU,KAAK,CAAC,4BAA4B,CAAC;QACnC;MACF;;MAEA;MACA,MAAMC,YAAY,GAAG,MAAMnB,MAAM,CAACoB,aAAa,CAAChB,IAAI,CAAC;MACrD,MAAMiB,aAAa,GAAG,MAAMrB,MAAM,CAACoB,aAAa,CAACd,KAAK,CAAC;MAEvDgB,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEJ,YAAY,CAACK,QAAQ,CAAC;MACvEF,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,aAAa,CAACG,QAAQ,CAAC;;MAEzE;MACAtB,cAAc,CAACmB,aAAa,CAACG,QAAQ,EAAEL,YAAY,CAACK,QAAQ,EAAEhB,IAAI,CAAC;IACrE,CAAC,CAAC,OAAOiB,GAAG,EAAE;MACZH,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAED,GAAG,CAAC;MAChDP,KAAK,CAAC,wDAAwD,CAAC;IACjE;EACF,CAAC;EAED,oBACEnB,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE9BhC,OAAA;MAAOiC,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEnB,iBAAkB;MAACoB,MAAM,EAAC;IAAS;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEnEhC,OAAA;MAAOiC,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEvB;IAAiB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEjDhC,OAAA;MACEiC,IAAI,EAAC,MAAM;MACXG,WAAW,EAAC,eAAe;MAC3BnB,KAAK,EAAER,IAAK;MACZyB,QAAQ,EAAElB;IAAiB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eAEFhC,OAAA;MAAQqC,OAAO,EAAEnB,cAAe;MAAAU,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA1DIF,UAAU;AAAAoC,EAAA,GAAVpC,UAAU;AA4DhB,eAAeA,UAAU;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}