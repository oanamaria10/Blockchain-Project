{"ast":null,"code":"import defer from 'p-defer';\n/**\n * @template T\n * @typedef {import('./types.js').Driver<T>} Driver\n */\nconst STORE_NAME = 'AccessStore';\nconst DATA_ID = 1;\n/**\n * Driver implementation for the browser.\n *\n * Usage:\n *\n * ```js\n * import { IndexedDBDriver } from '@web3-storage/access/drivers/indexeddb'\n * ```\n *\n * @template T\n * @implements {Driver<T>}\n */\nexport class IndexedDBDriver {\n  /** @type {string} */\n  #dbName;\n  /** @type {number|undefined} */\n  #dbVersion;\n  /** @type {string} */\n  #dbStoreName;\n  /** @type {IDBDatabase|undefined} */\n  #db;\n  /** @type {boolean} */\n  #autoOpen;\n  /**\n   * @param {string} dbName\n   * @param {object} [options]\n   * @param {number} [options.dbVersion]\n   * @param {string} [options.dbStoreName]\n   * @param {boolean} [options.autoOpen]\n   */\n  constructor(dbName, options = {}) {\n    this.#dbName = dbName;\n    this.#dbVersion = options.dbVersion;\n    this.#dbStoreName = options.dbStoreName ?? STORE_NAME;\n    this.#autoOpen = options.autoOpen ?? true;\n  }\n  /** @returns {Promise<IDBDatabase>} */\n  async #getOpenDB() {\n    if (!this.#db) {\n      if (!this.#autoOpen) throw new Error('Store is not open');\n      await this.open();\n    }\n    // @ts-expect-error open sets this.#db\n    return this.#db;\n  }\n  async open() {\n    const db = this.#db;\n    if (db) return;\n    /** @type {import('p-defer').DeferredPromise<void>} */\n    const {\n      resolve,\n      reject,\n      promise\n    } = defer();\n    const openReq = indexedDB.open(this.#dbName, this.#dbVersion);\n    openReq.addEventListener('upgradeneeded', () => {\n      const db = openReq.result;\n      db.createObjectStore(this.#dbStoreName, {\n        keyPath: 'id'\n      });\n    });\n    openReq.addEventListener('success', () => {\n      this.#db = openReq.result;\n      resolve();\n    });\n    openReq.addEventListener('error', () => reject(openReq.error));\n    return promise;\n  }\n  async close() {\n    const db = this.#db;\n    if (!db) throw new Error('Store is not open');\n    db.close();\n    this.#db = undefined;\n  }\n  /** @param {T} data */\n  async save(data) {\n    const db = await this.#getOpenDB();\n    const putData = withObjectStore(db, 'readwrite', this.#dbStoreName, async store => {\n      /** @type {import('p-defer').DeferredPromise<void>} */\n      const {\n        resolve,\n        reject,\n        promise\n      } = defer();\n      const putReq = store.put({\n        id: DATA_ID,\n        ...data\n      });\n      putReq.addEventListener('success', () => resolve());\n      putReq.addEventListener('error', () => reject(new Error('failed to query DB', {\n        cause: putReq.error\n      })));\n      return promise;\n    });\n    return await putData();\n  }\n  async load() {\n    const db = await this.#getOpenDB();\n    const getData = withObjectStore(db, 'readonly', this.#dbStoreName, async store => {\n      /** @type {import('p-defer').DeferredPromise<T|undefined>} */\n      const {\n        resolve,\n        reject,\n        promise\n      } = defer();\n      const getReq = store.get(DATA_ID);\n      getReq.addEventListener('success', () => resolve(getReq.result));\n      getReq.addEventListener('error', () => reject(new Error('failed to query DB', {\n        cause: getReq.error\n      })));\n      return promise;\n    });\n    return await getData();\n  }\n  async reset() {\n    const db = await this.#getOpenDB();\n    const clear = withObjectStore(db, 'readwrite', this.#dbStoreName, s => {\n      /** @type {import('p-defer').DeferredPromise<void>} */\n      const {\n        resolve,\n        reject,\n        promise\n      } = defer();\n      const req = s.clear();\n      req.addEventListener('success', () => {\n        resolve();\n      });\n      req.addEventListener('error', () => reject(new Error('failed to query DB', {\n        cause: req.error\n      })));\n      return promise;\n    });\n    await clear();\n  }\n}\n/**\n * @template T\n * @param {IDBDatabase} db\n * @param {IDBTransactionMode} txnMode\n * @param {string} storeName\n * @param {(s: IDBObjectStore) => Promise<T>} fn\n * @returns\n */\nfunction withObjectStore(db, txnMode, storeName, fn) {\n  return async () => {\n    const tx = db.transaction(storeName, txnMode);\n    /** @type {import('p-defer').DeferredPromise<T>} */\n    const {\n      resolve,\n      reject,\n      promise\n    } = defer();\n    /** @type {T} */\n    let result;\n    tx.addEventListener('complete', () => resolve(result));\n    tx.addEventListener('abort', () => reject(tx.error || new Error('transaction aborted')));\n    tx.addEventListener('error', () => reject(new Error('transaction error', {\n      cause: tx.error\n    })));\n    try {\n      result = await fn(tx.objectStore(storeName));\n      tx.commit();\n    } catch (error) {\n      reject(error);\n      tx.abort();\n    }\n    return promise;\n  };\n}","map":{"version":3,"names":["defer","STORE_NAME","DATA_ID","IndexedDBDriver","dbName","dbVersion","dbStoreName","db","autoOpen","constructor","options","getOpenDB","#getOpenDB","Error","open","resolve","reject","promise","openReq","indexedDB","addEventListener","result","createObjectStore","keyPath","error","close","undefined","save","data","putData","withObjectStore","store","putReq","put","id","cause","load","getData","getReq","get","reset","clear","s","req","txnMode","storeName","fn","tx","transaction","objectStore","commit","abort"],"sources":["../../../src/drivers/indexeddb.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}