{"ast":null,"code":"'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nconst {\n  EventEmitter\n} = require('events');\nconst Hook = require('./hook');\nvar {\n  assignNewMochaID,\n  clamp,\n  constants: utilsConstants,\n  defineConstants,\n  getMochaID,\n  inherits,\n  isString\n} = require('./utils');\nconst debug = require('debug')('mocha:suite');\nconst milliseconds = require('ms');\nconst errors = require('./errors');\nconst {\n  MOCHA_ID_PROP_NAME\n} = utilsConstants;\n\n/**\n * Expose `Suite`.\n */\n\nexports = module.exports = Suite;\n\n/**\n * Create a new `Suite` with the given `title` and parent `Suite`.\n *\n * @public\n * @param {Suite} parent - Parent suite (required!)\n * @param {string} title - Title\n * @return {Suite}\n */\nSuite.create = function (parent, title) {\n  var suite = new Suite(title, parent.ctx);\n  suite.parent = parent;\n  title = suite.fullTitle();\n  parent.addSuite(suite);\n  return suite;\n};\n\n/**\n * Constructs a new `Suite` instance with the given `title`, `ctx`, and `isRoot`.\n *\n * @public\n * @class\n * @extends EventEmitter\n * @see {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}\n * @param {string} title - Suite title.\n * @param {Context} parentContext - Parent context instance.\n * @param {boolean} [isRoot=false] - Whether this is the root suite.\n */\nfunction Suite(title, parentContext, isRoot) {\n  if (!isString(title)) {\n    throw errors.createInvalidArgumentTypeError('Suite argument \"title\" must be a string. Received type \"' + typeof title + '\"', 'title', 'string');\n  }\n  this.title = title;\n  function Context() {}\n  Context.prototype = parentContext;\n  this.ctx = new Context();\n  this.suites = [];\n  this.tests = [];\n  this.root = isRoot === true;\n  this.pending = false;\n  this._retries = -1;\n  this._beforeEach = [];\n  this._beforeAll = [];\n  this._afterEach = [];\n  this._afterAll = [];\n  this._timeout = 2000;\n  this._slow = 75;\n  this._bail = false;\n  this._onlyTests = [];\n  this._onlySuites = [];\n  assignNewMochaID(this);\n  Object.defineProperty(this, 'id', {\n    get() {\n      return getMochaID(this);\n    }\n  });\n  this.reset();\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\ninherits(Suite, EventEmitter);\n\n/**\n * Resets the state initially or for a next run.\n */\nSuite.prototype.reset = function () {\n  this.delayed = false;\n  function doReset(thingToReset) {\n    thingToReset.reset();\n  }\n  this.suites.forEach(doReset);\n  this.tests.forEach(doReset);\n  this._beforeEach.forEach(doReset);\n  this._afterEach.forEach(doReset);\n  this._beforeAll.forEach(doReset);\n  this._afterAll.forEach(doReset);\n};\n\n/**\n * Return a clone of this `Suite`.\n *\n * @private\n * @return {Suite}\n */\nSuite.prototype.clone = function () {\n  var suite = new Suite(this.title);\n  debug('clone');\n  suite.ctx = this.ctx;\n  suite.root = this.root;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  return suite;\n};\n\n/**\n * Set or get timeout `ms` or short-hand such as \"2s\".\n *\n * @private\n * @todo Do not attempt to set value if `ms` is undefined\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.timeout = function (ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n\n  // Clamp to range\n  var INT_MAX = Math.pow(2, 31) - 1;\n  var range = [0, INT_MAX];\n  ms = clamp(ms, range);\n  debug('timeout %d', ms);\n  this._timeout = parseInt(ms, 10);\n  return this;\n};\n\n/**\n * Set or get number of times to retry a failed test.\n *\n * @private\n * @param {number|string} n\n * @return {Suite|number} for chaining\n */\nSuite.prototype.retries = function (n) {\n  if (!arguments.length) {\n    return this._retries;\n  }\n  debug('retries %d', n);\n  this._retries = parseInt(n, 10) || 0;\n  return this;\n};\n\n/**\n * Set or get slow `ms` or short-hand such as \"2s\".\n *\n * @private\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.slow = function (ms) {\n  if (!arguments.length) {\n    return this._slow;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Set or get whether to bail after first error.\n *\n * @private\n * @param {boolean} bail\n * @return {Suite|number} for chaining\n */\nSuite.prototype.bail = function (bail) {\n  if (!arguments.length) {\n    return this._bail;\n  }\n  debug('bail %s', bail);\n  this._bail = bail;\n  return this;\n};\n\n/**\n * Check if this suite or its parent suite is marked as pending.\n *\n * @private\n */\nSuite.prototype.isPending = function () {\n  return this.pending || this.parent && this.parent.isPending();\n};\n\n/**\n * Generic hook-creator.\n * @private\n * @param {string} title - Title of hook\n * @param {Function} fn - Hook callback\n * @returns {Hook} A new hook\n */\nSuite.prototype._createHook = function (title, fn) {\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.retries(this.retries());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  hook.file = this.file;\n  return hook;\n};\n\n/**\n * Run `fn(test[, done])` before running tests.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeAll = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before all\" hook' + (title ? ': ' + title : '');\n  var hook = this._createHook(title, fn);\n  this._beforeAll.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_ALL, hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after running tests.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterAll = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after all\" hook' + (title ? ': ' + title : '');\n  var hook = this._createHook(title, fn);\n  this._afterAll.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_ALL, hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` before each test case.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeEach = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before each\" hook' + (title ? ': ' + title : '');\n  var hook = this._createHook(title, fn);\n  this._beforeEach.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_EACH, hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after each test case.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterEach = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after each\" hook' + (title ? ': ' + title : '');\n  var hook = this._createHook(title, fn);\n  this._afterEach.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_EACH, hook);\n  return this;\n};\n\n/**\n * Add a test `suite`.\n *\n * @private\n * @param {Suite} suite\n * @return {Suite} for chaining\n */\nSuite.prototype.addSuite = function (suite) {\n  suite.parent = this;\n  suite.root = false;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  this.suites.push(suite);\n  this.emit(constants.EVENT_SUITE_ADD_SUITE, suite);\n  return this;\n};\n\n/**\n * Add a `test` to this suite.\n *\n * @private\n * @param {Test} test\n * @return {Suite} for chaining\n */\nSuite.prototype.addTest = function (test) {\n  test.parent = this;\n  test.timeout(this.timeout());\n  test.retries(this.retries());\n  test.slow(this.slow());\n  test.ctx = this.ctx;\n  this.tests.push(test);\n  this.emit(constants.EVENT_SUITE_ADD_TEST, test);\n  return this;\n};\n\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @memberof Suite\n * @public\n * @return {string}\n */\nSuite.prototype.fullTitle = function () {\n  return this.titlePath().join(' ');\n};\n\n/**\n * Return the title path generated by recursively concatenating the parent's\n * title path.\n *\n * @memberof Suite\n * @public\n * @return {string[]}\n */\nSuite.prototype.titlePath = function () {\n  var result = [];\n  if (this.parent) {\n    result = result.concat(this.parent.titlePath());\n  }\n  if (!this.root) {\n    result.push(this.title);\n  }\n  return result;\n};\n\n/**\n * Return the total number of tests.\n *\n * @memberof Suite\n * @public\n * @return {number}\n */\nSuite.prototype.total = function () {\n  return this.suites.reduce(function (sum, suite) {\n    return sum + suite.total();\n  }, 0) + this.tests.length;\n};\n\n/**\n * Iterates through each suite recursively to find all tests. Applies a\n * function in the format `fn(test)`.\n *\n * @private\n * @param {Function} fn\n * @return {Suite}\n */\nSuite.prototype.eachTest = function (fn) {\n  this.tests.forEach(fn);\n  this.suites.forEach(function (suite) {\n    suite.eachTest(fn);\n  });\n  return this;\n};\n\n/**\n * This will run the root suite if we happen to be running in delayed mode.\n * @private\n */\nSuite.prototype.run = function run() {\n  if (this.root) {\n    this.emit(constants.EVENT_ROOT_SUITE_RUN);\n  }\n};\n\n/**\n * Determines whether a suite has an `only` test or suite as a descendant.\n *\n * @private\n * @returns {Boolean}\n */\nSuite.prototype.hasOnly = function hasOnly() {\n  return this._onlyTests.length > 0 || this._onlySuites.length > 0 || this.suites.some(function (suite) {\n    return suite.hasOnly();\n  });\n};\n\n/**\n * Filter suites based on `isOnly` logic.\n *\n * @private\n * @returns {Boolean}\n */\nSuite.prototype.filterOnly = function filterOnly() {\n  if (this._onlyTests.length) {\n    // If the suite contains `only` tests, run those and ignore any nested suites.\n    this.tests = this._onlyTests;\n    this.suites = [];\n  } else {\n    // Otherwise, do not run any of the tests in this suite.\n    this.tests = [];\n    this._onlySuites.forEach(function (onlySuite) {\n      // If there are other `only` tests/suites nested in the current `only` suite, then filter that `only` suite.\n      // Otherwise, all of the tests on this `only` suite should be run, so don't filter it.\n      if (onlySuite.hasOnly()) {\n        onlySuite.filterOnly();\n      }\n    });\n    // Run the `only` suites, as well as any other suites that have `only` tests/suites as descendants.\n    var onlySuites = this._onlySuites;\n    this.suites = this.suites.filter(function (childSuite) {\n      return onlySuites.indexOf(childSuite) !== -1 || childSuite.filterOnly();\n    });\n  }\n  // Keep the suite only if there is something to run\n  return this.tests.length > 0 || this.suites.length > 0;\n};\n\n/**\n * Adds a suite to the list of subsuites marked `only`.\n *\n * @private\n * @param {Suite} suite\n */\nSuite.prototype.appendOnlySuite = function (suite) {\n  this._onlySuites.push(suite);\n};\n\n/**\n * Marks a suite to be `only`.\n *\n * @private\n */\nSuite.prototype.markOnly = function () {\n  this.parent && this.parent.appendOnlySuite(this);\n};\n\n/**\n * Adds a test to the list of tests marked `only`.\n *\n * @private\n * @param {Test} test\n */\nSuite.prototype.appendOnlyTest = function (test) {\n  this._onlyTests.push(test);\n};\n\n/**\n * Returns the array of hooks by hook name; see `HOOK_TYPE_*` constants.\n * @private\n */\nSuite.prototype.getHooks = function getHooks(name) {\n  return this['_' + name];\n};\n\n/**\n * cleans all references from this suite and all child suites.\n */\nSuite.prototype.dispose = function () {\n  this.suites.forEach(function (suite) {\n    suite.dispose();\n  });\n  this.cleanReferences();\n};\n\n/**\n * Cleans up the references to all the deferred functions\n * (before/after/beforeEach/afterEach) and tests of a Suite.\n * These must be deleted otherwise a memory leak can happen,\n * as those functions may reference variables from closures,\n * thus those variables can never be garbage collected as long\n * as the deferred functions exist.\n *\n * @private\n */\nSuite.prototype.cleanReferences = function cleanReferences() {\n  function cleanArrReferences(arr) {\n    for (var i = 0; i < arr.length; i++) {\n      delete arr[i].fn;\n    }\n  }\n  if (Array.isArray(this._beforeAll)) {\n    cleanArrReferences(this._beforeAll);\n  }\n  if (Array.isArray(this._beforeEach)) {\n    cleanArrReferences(this._beforeEach);\n  }\n  if (Array.isArray(this._afterAll)) {\n    cleanArrReferences(this._afterAll);\n  }\n  if (Array.isArray(this._afterEach)) {\n    cleanArrReferences(this._afterEach);\n  }\n  for (var i = 0; i < this.tests.length; i++) {\n    delete this.tests[i].fn;\n  }\n};\n\n/**\n * Returns an object suitable for IPC.\n * Functions are represented by keys beginning with `$$`.\n * @private\n * @returns {Object}\n */\nSuite.prototype.serialize = function serialize() {\n  return {\n    _bail: this._bail,\n    $$fullTitle: this.fullTitle(),\n    $$isPending: Boolean(this.isPending()),\n    root: this.root,\n    title: this.title,\n    [MOCHA_ID_PROP_NAME]: this.id,\n    parent: this.parent ? {\n      [MOCHA_ID_PROP_NAME]: this.parent.id\n    } : null\n  };\n};\nvar constants = defineConstants(\n/**\n * {@link Suite}-related constants.\n * @public\n * @memberof Suite\n * @alias constants\n * @readonly\n * @static\n * @enum {string}\n */\n{\n  /**\n   * Event emitted after a test file has been loaded. Not emitted in browser.\n   */\n  EVENT_FILE_POST_REQUIRE: 'post-require',\n  /**\n   * Event emitted before a test file has been loaded. In browser, this is emitted once an interface has been selected.\n   */\n  EVENT_FILE_PRE_REQUIRE: 'pre-require',\n  /**\n   * Event emitted immediately after a test file has been loaded. Not emitted in browser.\n   */\n  EVENT_FILE_REQUIRE: 'require',\n  /**\n   * Event emitted when `global.run()` is called (use with `delay` option).\n   */\n  EVENT_ROOT_SUITE_RUN: 'run',\n  /**\n   * Namespace for collection of a `Suite`'s \"after all\" hooks.\n   */\n  HOOK_TYPE_AFTER_ALL: 'afterAll',\n  /**\n   * Namespace for collection of a `Suite`'s \"after each\" hooks.\n   */\n  HOOK_TYPE_AFTER_EACH: 'afterEach',\n  /**\n   * Namespace for collection of a `Suite`'s \"before all\" hooks.\n   */\n  HOOK_TYPE_BEFORE_ALL: 'beforeAll',\n  /**\n   * Namespace for collection of a `Suite`'s \"before each\" hooks.\n   */\n  HOOK_TYPE_BEFORE_EACH: 'beforeEach',\n  /**\n   * Emitted after a child `Suite` has been added to a `Suite`.\n   */\n  EVENT_SUITE_ADD_SUITE: 'suite',\n  /**\n   * Emitted after an \"after all\" `Hook` has been added to a `Suite`.\n   */\n  EVENT_SUITE_ADD_HOOK_AFTER_ALL: 'afterAll',\n  /**\n   * Emitted after an \"after each\" `Hook` has been added to a `Suite`.\n   */\n  EVENT_SUITE_ADD_HOOK_AFTER_EACH: 'afterEach',\n  /**\n   * Emitted after an \"before all\" `Hook` has been added to a `Suite`.\n   */\n  EVENT_SUITE_ADD_HOOK_BEFORE_ALL: 'beforeAll',\n  /**\n   * Emitted after an \"before each\" `Hook` has been added to a `Suite`.\n   */\n  EVENT_SUITE_ADD_HOOK_BEFORE_EACH: 'beforeEach',\n  /**\n   * Emitted after a `Test` has been added to a `Suite`.\n   */\n  EVENT_SUITE_ADD_TEST: 'test'\n});\nSuite.constants = constants;","map":{"version":3,"names":["EventEmitter","require","Hook","assignNewMochaID","clamp","constants","utilsConstants","defineConstants","getMochaID","inherits","isString","debug","milliseconds","errors","MOCHA_ID_PROP_NAME","exports","module","Suite","create","parent","title","suite","ctx","fullTitle","addSuite","parentContext","isRoot","createInvalidArgumentTypeError","Context","prototype","suites","tests","root","pending","_retries","_beforeEach","_beforeAll","_afterEach","_afterAll","_timeout","_slow","_bail","_onlyTests","_onlySuites","Object","defineProperty","get","reset","delayed","doReset","thingToReset","forEach","clone","timeout","retries","slow","bail","ms","arguments","length","INT_MAX","Math","pow","range","parseInt","n","isPending","_createHook","fn","hook","file","beforeAll","name","push","emit","EVENT_SUITE_ADD_HOOK_BEFORE_ALL","afterAll","EVENT_SUITE_ADD_HOOK_AFTER_ALL","beforeEach","EVENT_SUITE_ADD_HOOK_BEFORE_EACH","afterEach","EVENT_SUITE_ADD_HOOK_AFTER_EACH","EVENT_SUITE_ADD_SUITE","addTest","test","EVENT_SUITE_ADD_TEST","titlePath","join","result","concat","total","reduce","sum","eachTest","run","EVENT_ROOT_SUITE_RUN","hasOnly","some","filterOnly","onlySuite","onlySuites","filter","childSuite","indexOf","appendOnlySuite","markOnly","appendOnlyTest","getHooks","dispose","cleanReferences","cleanArrReferences","arr","i","Array","isArray","serialize","$$fullTitle","$$isPending","Boolean","id","EVENT_FILE_POST_REQUIRE","EVENT_FILE_PRE_REQUIRE","EVENT_FILE_REQUIRE","HOOK_TYPE_AFTER_ALL","HOOK_TYPE_AFTER_EACH","HOOK_TYPE_BEFORE_ALL","HOOK_TYPE_BEFORE_EACH"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/mocha/lib/suite.js"],"sourcesContent":["'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nconst {EventEmitter} = require('events');\nconst Hook = require('./hook');\nvar {\n  assignNewMochaID,\n  clamp,\n  constants: utilsConstants,\n  defineConstants,\n  getMochaID,\n  inherits,\n  isString\n} = require('./utils');\nconst debug = require('debug')('mocha:suite');\nconst milliseconds = require('ms');\nconst errors = require('./errors');\n\nconst {MOCHA_ID_PROP_NAME} = utilsConstants;\n\n/**\n * Expose `Suite`.\n */\n\nexports = module.exports = Suite;\n\n/**\n * Create a new `Suite` with the given `title` and parent `Suite`.\n *\n * @public\n * @param {Suite} parent - Parent suite (required!)\n * @param {string} title - Title\n * @return {Suite}\n */\nSuite.create = function (parent, title) {\n  var suite = new Suite(title, parent.ctx);\n  suite.parent = parent;\n  title = suite.fullTitle();\n  parent.addSuite(suite);\n  return suite;\n};\n\n/**\n * Constructs a new `Suite` instance with the given `title`, `ctx`, and `isRoot`.\n *\n * @public\n * @class\n * @extends EventEmitter\n * @see {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}\n * @param {string} title - Suite title.\n * @param {Context} parentContext - Parent context instance.\n * @param {boolean} [isRoot=false] - Whether this is the root suite.\n */\nfunction Suite(title, parentContext, isRoot) {\n  if (!isString(title)) {\n    throw errors.createInvalidArgumentTypeError(\n      'Suite argument \"title\" must be a string. Received type \"' +\n        typeof title +\n        '\"',\n      'title',\n      'string'\n    );\n  }\n  this.title = title;\n  function Context() {}\n  Context.prototype = parentContext;\n  this.ctx = new Context();\n  this.suites = [];\n  this.tests = [];\n  this.root = isRoot === true;\n  this.pending = false;\n  this._retries = -1;\n  this._beforeEach = [];\n  this._beforeAll = [];\n  this._afterEach = [];\n  this._afterAll = [];\n  this._timeout = 2000;\n  this._slow = 75;\n  this._bail = false;\n  this._onlyTests = [];\n  this._onlySuites = [];\n  assignNewMochaID(this);\n\n  Object.defineProperty(this, 'id', {\n    get() {\n      return getMochaID(this);\n    }\n  });\n\n  this.reset();\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\ninherits(Suite, EventEmitter);\n\n/**\n * Resets the state initially or for a next run.\n */\nSuite.prototype.reset = function () {\n  this.delayed = false;\n  function doReset(thingToReset) {\n    thingToReset.reset();\n  }\n  this.suites.forEach(doReset);\n  this.tests.forEach(doReset);\n  this._beforeEach.forEach(doReset);\n  this._afterEach.forEach(doReset);\n  this._beforeAll.forEach(doReset);\n  this._afterAll.forEach(doReset);\n};\n\n/**\n * Return a clone of this `Suite`.\n *\n * @private\n * @return {Suite}\n */\nSuite.prototype.clone = function () {\n  var suite = new Suite(this.title);\n  debug('clone');\n  suite.ctx = this.ctx;\n  suite.root = this.root;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  return suite;\n};\n\n/**\n * Set or get timeout `ms` or short-hand such as \"2s\".\n *\n * @private\n * @todo Do not attempt to set value if `ms` is undefined\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.timeout = function (ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n\n  // Clamp to range\n  var INT_MAX = Math.pow(2, 31) - 1;\n  var range = [0, INT_MAX];\n  ms = clamp(ms, range);\n\n  debug('timeout %d', ms);\n  this._timeout = parseInt(ms, 10);\n  return this;\n};\n\n/**\n * Set or get number of times to retry a failed test.\n *\n * @private\n * @param {number|string} n\n * @return {Suite|number} for chaining\n */\nSuite.prototype.retries = function (n) {\n  if (!arguments.length) {\n    return this._retries;\n  }\n  debug('retries %d', n);\n  this._retries = parseInt(n, 10) || 0;\n  return this;\n};\n\n/**\n * Set or get slow `ms` or short-hand such as \"2s\".\n *\n * @private\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.slow = function (ms) {\n  if (!arguments.length) {\n    return this._slow;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Set or get whether to bail after first error.\n *\n * @private\n * @param {boolean} bail\n * @return {Suite|number} for chaining\n */\nSuite.prototype.bail = function (bail) {\n  if (!arguments.length) {\n    return this._bail;\n  }\n  debug('bail %s', bail);\n  this._bail = bail;\n  return this;\n};\n\n/**\n * Check if this suite or its parent suite is marked as pending.\n *\n * @private\n */\nSuite.prototype.isPending = function () {\n  return this.pending || (this.parent && this.parent.isPending());\n};\n\n/**\n * Generic hook-creator.\n * @private\n * @param {string} title - Title of hook\n * @param {Function} fn - Hook callback\n * @returns {Hook} A new hook\n */\nSuite.prototype._createHook = function (title, fn) {\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.retries(this.retries());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  hook.file = this.file;\n  return hook;\n};\n\n/**\n * Run `fn(test[, done])` before running tests.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeAll = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before all\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n  this._beforeAll.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_ALL, hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after running tests.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterAll = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after all\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n  this._afterAll.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_ALL, hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` before each test case.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeEach = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before each\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n  this._beforeEach.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_EACH, hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after each test case.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterEach = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after each\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n  this._afterEach.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_EACH, hook);\n  return this;\n};\n\n/**\n * Add a test `suite`.\n *\n * @private\n * @param {Suite} suite\n * @return {Suite} for chaining\n */\nSuite.prototype.addSuite = function (suite) {\n  suite.parent = this;\n  suite.root = false;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  this.suites.push(suite);\n  this.emit(constants.EVENT_SUITE_ADD_SUITE, suite);\n  return this;\n};\n\n/**\n * Add a `test` to this suite.\n *\n * @private\n * @param {Test} test\n * @return {Suite} for chaining\n */\nSuite.prototype.addTest = function (test) {\n  test.parent = this;\n  test.timeout(this.timeout());\n  test.retries(this.retries());\n  test.slow(this.slow());\n  test.ctx = this.ctx;\n  this.tests.push(test);\n  this.emit(constants.EVENT_SUITE_ADD_TEST, test);\n  return this;\n};\n\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @memberof Suite\n * @public\n * @return {string}\n */\nSuite.prototype.fullTitle = function () {\n  return this.titlePath().join(' ');\n};\n\n/**\n * Return the title path generated by recursively concatenating the parent's\n * title path.\n *\n * @memberof Suite\n * @public\n * @return {string[]}\n */\nSuite.prototype.titlePath = function () {\n  var result = [];\n  if (this.parent) {\n    result = result.concat(this.parent.titlePath());\n  }\n  if (!this.root) {\n    result.push(this.title);\n  }\n  return result;\n};\n\n/**\n * Return the total number of tests.\n *\n * @memberof Suite\n * @public\n * @return {number}\n */\nSuite.prototype.total = function () {\n  return (\n    this.suites.reduce(function (sum, suite) {\n      return sum + suite.total();\n    }, 0) + this.tests.length\n  );\n};\n\n/**\n * Iterates through each suite recursively to find all tests. Applies a\n * function in the format `fn(test)`.\n *\n * @private\n * @param {Function} fn\n * @return {Suite}\n */\nSuite.prototype.eachTest = function (fn) {\n  this.tests.forEach(fn);\n  this.suites.forEach(function (suite) {\n    suite.eachTest(fn);\n  });\n  return this;\n};\n\n/**\n * This will run the root suite if we happen to be running in delayed mode.\n * @private\n */\nSuite.prototype.run = function run() {\n  if (this.root) {\n    this.emit(constants.EVENT_ROOT_SUITE_RUN);\n  }\n};\n\n/**\n * Determines whether a suite has an `only` test or suite as a descendant.\n *\n * @private\n * @returns {Boolean}\n */\nSuite.prototype.hasOnly = function hasOnly() {\n  return (\n    this._onlyTests.length > 0 ||\n    this._onlySuites.length > 0 ||\n    this.suites.some(function (suite) {\n      return suite.hasOnly();\n    })\n  );\n};\n\n/**\n * Filter suites based on `isOnly` logic.\n *\n * @private\n * @returns {Boolean}\n */\nSuite.prototype.filterOnly = function filterOnly() {\n  if (this._onlyTests.length) {\n    // If the suite contains `only` tests, run those and ignore any nested suites.\n    this.tests = this._onlyTests;\n    this.suites = [];\n  } else {\n    // Otherwise, do not run any of the tests in this suite.\n    this.tests = [];\n    this._onlySuites.forEach(function (onlySuite) {\n      // If there are other `only` tests/suites nested in the current `only` suite, then filter that `only` suite.\n      // Otherwise, all of the tests on this `only` suite should be run, so don't filter it.\n      if (onlySuite.hasOnly()) {\n        onlySuite.filterOnly();\n      }\n    });\n    // Run the `only` suites, as well as any other suites that have `only` tests/suites as descendants.\n    var onlySuites = this._onlySuites;\n    this.suites = this.suites.filter(function (childSuite) {\n      return onlySuites.indexOf(childSuite) !== -1 || childSuite.filterOnly();\n    });\n  }\n  // Keep the suite only if there is something to run\n  return this.tests.length > 0 || this.suites.length > 0;\n};\n\n/**\n * Adds a suite to the list of subsuites marked `only`.\n *\n * @private\n * @param {Suite} suite\n */\nSuite.prototype.appendOnlySuite = function (suite) {\n  this._onlySuites.push(suite);\n};\n\n/**\n * Marks a suite to be `only`.\n *\n * @private\n */\nSuite.prototype.markOnly = function () {\n  this.parent && this.parent.appendOnlySuite(this);\n};\n\n/**\n * Adds a test to the list of tests marked `only`.\n *\n * @private\n * @param {Test} test\n */\nSuite.prototype.appendOnlyTest = function (test) {\n  this._onlyTests.push(test);\n};\n\n/**\n * Returns the array of hooks by hook name; see `HOOK_TYPE_*` constants.\n * @private\n */\nSuite.prototype.getHooks = function getHooks(name) {\n  return this['_' + name];\n};\n\n/**\n * cleans all references from this suite and all child suites.\n */\nSuite.prototype.dispose = function () {\n  this.suites.forEach(function (suite) {\n    suite.dispose();\n  });\n  this.cleanReferences();\n};\n\n/**\n * Cleans up the references to all the deferred functions\n * (before/after/beforeEach/afterEach) and tests of a Suite.\n * These must be deleted otherwise a memory leak can happen,\n * as those functions may reference variables from closures,\n * thus those variables can never be garbage collected as long\n * as the deferred functions exist.\n *\n * @private\n */\nSuite.prototype.cleanReferences = function cleanReferences() {\n  function cleanArrReferences(arr) {\n    for (var i = 0; i < arr.length; i++) {\n      delete arr[i].fn;\n    }\n  }\n\n  if (Array.isArray(this._beforeAll)) {\n    cleanArrReferences(this._beforeAll);\n  }\n\n  if (Array.isArray(this._beforeEach)) {\n    cleanArrReferences(this._beforeEach);\n  }\n\n  if (Array.isArray(this._afterAll)) {\n    cleanArrReferences(this._afterAll);\n  }\n\n  if (Array.isArray(this._afterEach)) {\n    cleanArrReferences(this._afterEach);\n  }\n\n  for (var i = 0; i < this.tests.length; i++) {\n    delete this.tests[i].fn;\n  }\n};\n\n/**\n * Returns an object suitable for IPC.\n * Functions are represented by keys beginning with `$$`.\n * @private\n * @returns {Object}\n */\nSuite.prototype.serialize = function serialize() {\n  return {\n    _bail: this._bail,\n    $$fullTitle: this.fullTitle(),\n    $$isPending: Boolean(this.isPending()),\n    root: this.root,\n    title: this.title,\n    [MOCHA_ID_PROP_NAME]: this.id,\n    parent: this.parent ? {[MOCHA_ID_PROP_NAME]: this.parent.id} : null\n  };\n};\n\nvar constants = defineConstants(\n  /**\n   * {@link Suite}-related constants.\n   * @public\n   * @memberof Suite\n   * @alias constants\n   * @readonly\n   * @static\n   * @enum {string}\n   */\n  {\n    /**\n     * Event emitted after a test file has been loaded. Not emitted in browser.\n     */\n    EVENT_FILE_POST_REQUIRE: 'post-require',\n    /**\n     * Event emitted before a test file has been loaded. In browser, this is emitted once an interface has been selected.\n     */\n    EVENT_FILE_PRE_REQUIRE: 'pre-require',\n    /**\n     * Event emitted immediately after a test file has been loaded. Not emitted in browser.\n     */\n    EVENT_FILE_REQUIRE: 'require',\n    /**\n     * Event emitted when `global.run()` is called (use with `delay` option).\n     */\n    EVENT_ROOT_SUITE_RUN: 'run',\n\n    /**\n     * Namespace for collection of a `Suite`'s \"after all\" hooks.\n     */\n    HOOK_TYPE_AFTER_ALL: 'afterAll',\n    /**\n     * Namespace for collection of a `Suite`'s \"after each\" hooks.\n     */\n    HOOK_TYPE_AFTER_EACH: 'afterEach',\n    /**\n     * Namespace for collection of a `Suite`'s \"before all\" hooks.\n     */\n    HOOK_TYPE_BEFORE_ALL: 'beforeAll',\n    /**\n     * Namespace for collection of a `Suite`'s \"before each\" hooks.\n     */\n    HOOK_TYPE_BEFORE_EACH: 'beforeEach',\n\n    /**\n     * Emitted after a child `Suite` has been added to a `Suite`.\n     */\n    EVENT_SUITE_ADD_SUITE: 'suite',\n    /**\n     * Emitted after an \"after all\" `Hook` has been added to a `Suite`.\n     */\n    EVENT_SUITE_ADD_HOOK_AFTER_ALL: 'afterAll',\n    /**\n     * Emitted after an \"after each\" `Hook` has been added to a `Suite`.\n     */\n    EVENT_SUITE_ADD_HOOK_AFTER_EACH: 'afterEach',\n    /**\n     * Emitted after an \"before all\" `Hook` has been added to a `Suite`.\n     */\n    EVENT_SUITE_ADD_HOOK_BEFORE_ALL: 'beforeAll',\n    /**\n     * Emitted after an \"before each\" `Hook` has been added to a `Suite`.\n     */\n    EVENT_SUITE_ADD_HOOK_BEFORE_EACH: 'beforeEach',\n    /**\n     * Emitted after a `Test` has been added to a `Suite`.\n     */\n    EVENT_SUITE_ADD_TEST: 'test'\n  }\n);\n\nSuite.constants = constants;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}