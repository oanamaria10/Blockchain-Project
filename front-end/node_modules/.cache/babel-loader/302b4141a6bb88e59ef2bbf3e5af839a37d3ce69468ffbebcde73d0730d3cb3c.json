{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.watchCompilerOutput = void 0;\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\nconst path = __importStar(require(\"path\"));\nconst constants_1 = require(\"../../internal/constants\");\nconst reporter_1 = require(\"../../internal/sentry/reporter\");\nconst log = (0, debug_1.default)(\"hardhat:core:compilation-watcher\");\nasync function watchCompilerOutput(provider, paths) {\n  const chokidar = await Promise.resolve().then(() => __importStar(require(\"chokidar\")));\n  const buildInfoDir = path.join(paths.artifacts, constants_1.BUILD_INFO_DIR_NAME);\n  const addCompilationResult = async buildInfo => {\n    try {\n      log(\"Adding new compilation result to the node\");\n      const {\n        input,\n        output,\n        solcVersion\n      } = await fs_extra_1.default.readJSON(buildInfo, {\n        encoding: \"utf8\"\n      });\n      await provider.request({\n        method: \"hardhat_addCompilationResult\",\n        params: [solcVersion, input, output]\n      });\n    } catch (error) {\n      console.warn(chalk_1.default.yellow(\"There was a problem adding the new compiler result. Run Hardhat with --verbose to learn more.\"));\n      log(\"Last compilation result couldn't be added. Please report this to help us improve Hardhat.\\n\", error);\n      if (error instanceof Error) {\n        reporter_1.Reporter.reportError(error);\n      }\n    }\n  };\n  log(`Watching changes on '${buildInfoDir}'`);\n  return chokidar.watch(buildInfoDir, {\n    ignoreInitial: true,\n    awaitWriteFinish: {\n      stabilityThreshold: 250,\n      pollInterval: 50\n    }\n  }).on(\"add\", addCompilationResult);\n}\nexports.watchCompilerOutput = watchCompilerOutput;","map":{"version":3,"names":["chalk_1","__importDefault","require","debug_1","fs_extra_1","path","__importStar","constants_1","reporter_1","log","default","watchCompilerOutput","provider","paths","chokidar","Promise","resolve","then","buildInfoDir","join","artifacts","BUILD_INFO_DIR_NAME","addCompilationResult","buildInfo","input","output","solcVersion","readJSON","encoding","request","method","params","error","console","warn","yellow","Error","Reporter","reportError","watch","ignoreInitial","awaitWriteFinish","stabilityThreshold","pollInterval","on","exports"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\builtin-tasks\\utils\\watch.ts"],"sourcesContent":["import chalk from \"chalk\";\nimport { FSWatcher } from \"chokidar\";\nimport debug from \"debug\";\nimport fsExtra from \"fs-extra\";\nimport * as path from \"path\";\n\nimport { BUILD_INFO_DIR_NAME } from \"../../internal/constants\";\nimport { Reporter } from \"../../internal/sentry/reporter\";\nimport { EIP1193Provider, ProjectPathsConfig } from \"../../types\";\n\nconst log = debug(\"hardhat:core:compilation-watcher\");\n\nexport type Watcher = FSWatcher;\n\nexport async function watchCompilerOutput(\n  provider: EIP1193Provider,\n  paths: ProjectPathsConfig\n): Promise<Watcher> {\n  const chokidar = await import(\"chokidar\");\n\n  const buildInfoDir = path.join(paths.artifacts, BUILD_INFO_DIR_NAME);\n\n  const addCompilationResult = async (buildInfo: string) => {\n    try {\n      log(\"Adding new compilation result to the node\");\n\n      const { input, output, solcVersion } = await fsExtra.readJSON(buildInfo, {\n        encoding: \"utf8\",\n      });\n\n      await provider.request({\n        method: \"hardhat_addCompilationResult\",\n        params: [solcVersion, input, output],\n      });\n    } catch (error) {\n      console.warn(\n        chalk.yellow(\n          \"There was a problem adding the new compiler result. Run Hardhat with --verbose to learn more.\"\n        )\n      );\n\n      log(\n        \"Last compilation result couldn't be added. Please report this to help us improve Hardhat.\\n\",\n        error\n      );\n\n      if (error instanceof Error) {\n        Reporter.reportError(error);\n      }\n    }\n  };\n\n  log(`Watching changes on '${buildInfoDir}'`);\n\n  return chokidar\n    .watch(buildInfoDir, {\n      ignoreInitial: true,\n      awaitWriteFinish: {\n        stabilityThreshold: 250,\n        pollInterval: 50,\n      },\n    })\n    .on(\"add\", addCompilationResult);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAF,eAAA,CAAAC,OAAA;AACA,MAAAE,UAAA,GAAAH,eAAA,CAAAC,OAAA;AACA,MAAAG,IAAA,GAAAC,YAAA,CAAAJ,OAAA;AAEA,MAAAK,WAAA,GAAAL,OAAA;AACA,MAAAM,UAAA,GAAAN,OAAA;AAGA,MAAMO,GAAG,GAAG,IAAAN,OAAA,CAAAO,OAAK,EAAC,kCAAkC,CAAC;AAI9C,eAAeC,mBAAmBA,CACvCC,QAAyB,EACzBC,KAAyB;EAEzB,MAAMC,QAAQ,GAAG,MAAAC,OAAA,CAAAC,OAAA,GAAAC,IAAA,OAAAX,YAAA,CAAAJ,OAAA,CAAa,UAAU,GAAC;EAEzC,MAAMgB,YAAY,GAAGb,IAAI,CAACc,IAAI,CAACN,KAAK,CAACO,SAAS,EAAEb,WAAA,CAAAc,mBAAmB,CAAC;EAEpE,MAAMC,oBAAoB,GAAG,MAAOC,SAAiB,IAAI;IACvD,IAAI;MACFd,GAAG,CAAC,2CAA2C,CAAC;MAEhD,MAAM;QAAEe,KAAK;QAAEC,MAAM;QAAEC;MAAW,CAAE,GAAG,MAAMtB,UAAA,CAAAM,OAAO,CAACiB,QAAQ,CAACJ,SAAS,EAAE;QACvEK,QAAQ,EAAE;OACX,CAAC;MAEF,MAAMhB,QAAQ,CAACiB,OAAO,CAAC;QACrBC,MAAM,EAAE,8BAA8B;QACtCC,MAAM,EAAE,CAACL,WAAW,EAAEF,KAAK,EAAEC,MAAM;OACpC,CAAC;KACH,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CACVlC,OAAA,CAAAU,OAAK,CAACyB,MAAM,CACV,+FAA+F,CAChG,CACF;MAED1B,GAAG,CACD,6FAA6F,EAC7FuB,KAAK,CACN;MAED,IAAIA,KAAK,YAAYI,KAAK,EAAE;QAC1B5B,UAAA,CAAA6B,QAAQ,CAACC,WAAW,CAACN,KAAK,CAAC;;;EAGjC,CAAC;EAEDvB,GAAG,CAAC,wBAAwBS,YAAY,GAAG,CAAC;EAE5C,OAAOJ,QAAQ,CACZyB,KAAK,CAACrB,YAAY,EAAE;IACnBsB,aAAa,EAAE,IAAI;IACnBC,gBAAgB,EAAE;MAChBC,kBAAkB,EAAE,GAAG;MACvBC,YAAY,EAAE;;GAEjB,CAAC,CACDC,EAAE,CAAC,KAAK,EAAEtB,oBAAoB,CAAC;AACpC;AAjDAuB,OAAA,CAAAlC,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}