{"ast":null,"code":"\"use strict\";\n\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider, Resolver } from \"./base-provider\";\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { AnkrProvider } from \"./ankr-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n////////////////////////\n// Helper Functions\nfunction getDefaultProvider(network, options) {\n  if (network == null) {\n    network = \"homestead\";\n  }\n  // If passed a URL, figure out the right type of provider based on the scheme\n  if (typeof network === \"string\") {\n    // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n    // Handle http and ws (and their secure variants)\n    const match = network.match(/^(ws|http)s?:/i);\n    if (match) {\n      switch (match[1].toLowerCase()) {\n        case \"http\":\n        case \"https\":\n          return new JsonRpcProvider(network);\n        case \"ws\":\n        case \"wss\":\n          return new WebSocketProvider(network);\n        default:\n          logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n      }\n    }\n  }\n  const n = getNetwork(network);\n  if (!n || !n._defaultProvider) {\n    logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n      operation: \"getDefaultProvider\",\n      network: network\n    });\n  }\n  return n._defaultProvider({\n    FallbackProvider,\n    AlchemyProvider,\n    AnkrProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    JsonRpcProvider,\n    NodesmithProvider,\n    PocketProvider,\n    Web3Provider,\n    IpcProvider\n  }, options);\n}\n////////////////////////\n// Exports\nexport {\n// Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, Resolver, UrlJsonRpcProvider,\n///////////////////////\n// Concrete Providers\nFallbackProvider, AlchemyProvider, AlchemyWebSocketProvider, AnkrProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, InfuraWebSocketProvider, JsonRpcProvider, JsonRpcBatchProvider, NodesmithProvider, PocketProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider,\n///////////////////////\n// Signer\nJsonRpcSigner,\n///////////////////////\n// Functions\ngetDefaultProvider, getNetwork, isCommunityResource, isCommunityResourcable, showThrottleMessage,\n///////////////////////\n// Objects\nFormatter };","map":{"version":3,"names":["Provider","getNetwork","BaseProvider","Resolver","AlchemyProvider","AlchemyWebSocketProvider","AnkrProvider","CloudflareProvider","EtherscanProvider","FallbackProvider","IpcProvider","InfuraProvider","InfuraWebSocketProvider","JsonRpcProvider","JsonRpcSigner","JsonRpcBatchProvider","NodesmithProvider","PocketProvider","StaticJsonRpcProvider","UrlJsonRpcProvider","Web3Provider","WebSocketProvider","Formatter","isCommunityResourcable","isCommunityResource","showThrottleMessage","Logger","version","logger","getDefaultProvider","network","options","match","toLowerCase","throwArgumentError","n","_defaultProvider","throwError","errors","NETWORK_ERROR","operation"],"sources":["C:/Users/Oana/Desktop/Blockchain/Blockchain-Project/node_modules/@ethersproject/providers/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider, Resolver } from \"./base-provider\";\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { AnkrProvider } from \"./ankr-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n////////////////////////\n// Helper Functions\nfunction getDefaultProvider(network, options) {\n    if (network == null) {\n        network = \"homestead\";\n    }\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof (network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1].toLowerCase()) {\n                case \"http\":\n                case \"https\":\n                    return new JsonRpcProvider(network);\n                case \"ws\":\n                case \"wss\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n    return n._defaultProvider({\n        FallbackProvider,\n        AlchemyProvider,\n        AnkrProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n        IpcProvider,\n    }, options);\n}\n////////////////////////\n// Exports\nexport { \n// Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, Resolver, UrlJsonRpcProvider, \n///////////////////////\n// Concrete Providers\nFallbackProvider, AlchemyProvider, AlchemyWebSocketProvider, AnkrProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, InfuraWebSocketProvider, JsonRpcProvider, JsonRpcBatchProvider, NodesmithProvider, PocketProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider, \n///////////////////////\n// Signer\nJsonRpcSigner, \n///////////////////////\n// Functions\ngetDefaultProvider, getNetwork, isCommunityResource, isCommunityResourcable, showThrottleMessage, \n///////////////////////\n// Objects\nFormatter };\n//# sourceMappingURL=index.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}