{"ast":null,"code":"import * as UnixFS from '@ipld/unixfs';\nimport * as raw from 'multiformats/codecs/raw';\nimport { withMaxChunkSize } from '@ipld/unixfs/file/chunker/fixed';\nimport { withWidth } from '@ipld/unixfs/file/layout/balanced';\nconst SHARD_THRESHOLD = 1000; // shard directory after > 1,000 items\nconst queuingStrategy = UnixFS.withCapacity();\nconst defaultSettings = UnixFS.configure({\n  fileChunkEncoder: raw,\n  smallFileEncoder: raw,\n  chunker: withMaxChunkSize(1024 * 1024),\n  fileLayout: withWidth(1024)\n});\n/**\n * @param {import('./types.js').BlobLike} blob\n * @param {import('./types.js').UnixFSEncoderSettingsOptions} [options]\n * @returns {Promise<import('./types.js').UnixFSEncodeResult>}\n */\nexport async function encodeFile(blob, options) {\n  const readable = createFileEncoderStream(blob, options);\n  const blocks = await collect(readable);\n  // @ts-expect-error There is always a root block\n  return {\n    cid: blocks.at(-1).cid,\n    blocks\n  };\n}\n/**\n * @param {import('./types.js').BlobLike} blob\n * @param {import('./types.js').UnixFSEncoderSettingsOptions} [options]\n * @returns {ReadableStream<import('@ipld/unixfs').Block>}\n */\nexport function createFileEncoderStream(blob, options) {\n  /** @type {TransformStream<import('@ipld/unixfs').Block, import('@ipld/unixfs').Block>} */\n  const {\n    readable,\n    writable\n  } = new TransformStream({}, queuingStrategy);\n  const settings = options?.settings ?? defaultSettings;\n  const unixfsWriter = UnixFS.createWriter({\n    writable,\n    settings\n  });\n  const fileBuilder = new UnixFSFileBuilder('', blob);\n  void (async () => {\n    await fileBuilder.finalize(unixfsWriter);\n    await unixfsWriter.close();\n  })();\n  return readable;\n}\nclass UnixFSFileBuilder {\n  #file;\n  /**\n   * @param {string} name\n   * @param {import('./types.js').BlobLike} file\n   */\n  constructor(name, file) {\n    this.name = name;\n    this.#file = file;\n  }\n  /** @param {import('@ipld/unixfs').View} writer */\n  async finalize(writer) {\n    const unixfsFileWriter = UnixFS.createFileWriter(writer);\n    await this.#file.stream().pipeTo(new WritableStream({\n      async write(chunk) {\n        await unixfsFileWriter.write(chunk);\n      }\n    }));\n    return await unixfsFileWriter.close();\n  }\n}\nclass UnixFSDirectoryBuilder {\n  #options;\n  /** @type {Map<string, UnixFSFileBuilder | UnixFSDirectoryBuilder>} */\n  entries = new Map();\n  /**\n   * @param {string} name\n   * @param {import('./types.js').UnixFSDirectoryEncoderOptions} [options]\n   */\n  constructor(name, options) {\n    this.name = name;\n    this.#options = options;\n  }\n  /** @param {import('@ipld/unixfs').View} writer */\n  async finalize(writer) {\n    const dirWriter = this.entries.size <= SHARD_THRESHOLD ? UnixFS.createDirectoryWriter(writer) : UnixFS.createShardedDirectoryWriter(writer);\n    for (const [name, entry] of this.entries) {\n      const link = await entry.finalize(writer);\n      if (this.#options?.onDirectoryEntryLink) {\n        // @ts-expect-error\n        this.#options.onDirectoryEntryLink({\n          name: entry.name,\n          ...link\n        });\n      }\n      dirWriter.set(name, link);\n    }\n    return await dirWriter.close();\n  }\n}\n/**\n * @param {Iterable<import('./types.js').FileLike>} files\n * @param {import('./types.js').UnixFSEncoderSettingsOptions & import('./types.js').UnixFSDirectoryEncoderOptions} [options]\n * @returns {Promise<import('./types.js').UnixFSEncodeResult>}\n */\nexport async function encodeDirectory(files, options) {\n  const readable = createDirectoryEncoderStream(files, options);\n  const blocks = await collect(readable);\n  // @ts-expect-error There is always a root block\n  return {\n    cid: blocks.at(-1).cid,\n    blocks\n  };\n}\n/**\n * @param {Iterable<import('./types.js').FileLike>} files\n * @param {import('./types.js').UnixFSEncoderSettingsOptions & import('./types.js').UnixFSDirectoryEncoderOptions} [options]\n * @returns {ReadableStream<import('@ipld/unixfs').Block>}\n */\nexport function createDirectoryEncoderStream(files, options) {\n  const rootDir = new UnixFSDirectoryBuilder('', options);\n  for (const file of files) {\n    const path = file.name.split('/');\n    if (path[0] === '' || path[0] === '.') {\n      path.shift();\n    }\n    let dir = rootDir;\n    for (const [i, name] of path.entries()) {\n      if (i === path.length - 1) {\n        dir.entries.set(name, new UnixFSFileBuilder(path.join('/'), file));\n        break;\n      }\n      let dirBuilder = dir.entries.get(name);\n      if (dirBuilder == null) {\n        const dirName = dir === rootDir ? name : `${dir.name}/${name}`;\n        dirBuilder = new UnixFSDirectoryBuilder(dirName, options);\n        dir.entries.set(name, dirBuilder);\n      }\n      if (!(dirBuilder instanceof UnixFSDirectoryBuilder)) {\n        throw new Error(`\"${file.name}\" cannot be a file and a directory`);\n      }\n      dir = dirBuilder;\n    }\n  }\n  /** @type {TransformStream<import('@ipld/unixfs').Block, import('@ipld/unixfs').Block>} */\n  const {\n    readable,\n    writable\n  } = new TransformStream({}, queuingStrategy);\n  const settings = options?.settings ?? defaultSettings;\n  const unixfsWriter = UnixFS.createWriter({\n    writable,\n    settings\n  });\n  void (async () => {\n    const link = await rootDir.finalize(unixfsWriter);\n    if (options?.onDirectoryEntryLink) {\n      options.onDirectoryEntryLink({\n        name: '',\n        ...link\n      });\n    }\n    await unixfsWriter.close();\n  })();\n  return readable;\n}\n/**\n * @template T\n * @param {ReadableStream<T>} collectable\n * @returns {Promise<T[]>}\n */\nasync function collect(collectable) {\n  /** @type {T[]} */\n  const chunks = [];\n  await collectable.pipeTo(new WritableStream({\n    write(chunk) {\n      chunks.push(chunk);\n    }\n  }));\n  return chunks;\n}","map":{"version":3,"names":["UnixFS","raw","withMaxChunkSize","withWidth","SHARD_THRESHOLD","queuingStrategy","withCapacity","defaultSettings","configure","fileChunkEncoder","smallFileEncoder","chunker","fileLayout","encodeFile","blob","options","readable","createFileEncoderStream","blocks","collect","cid","at","writable","TransformStream","settings","unixfsWriter","createWriter","fileBuilder","UnixFSFileBuilder","finalize","close","file","constructor","name","writer","unixfsFileWriter","createFileWriter","stream","pipeTo","WritableStream","write","chunk","UnixFSDirectoryBuilder","entries","Map","dirWriter","size","createDirectoryWriter","createShardedDirectoryWriter","entry","link","onDirectoryEntryLink","set","encodeDirectory","files","createDirectoryEncoderStream","rootDir","path","split","shift","dir","i","length","join","dirBuilder","get","dirName","Error","collectable","chunks","push"],"sources":["../../src/unixfs.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}