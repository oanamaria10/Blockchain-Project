{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SolidityError = exports.encodeSolidityStackTrace = exports.wrapWithSolidityErrorsCorrection = exports.getCurrentStack = void 0;\nconst ethereumjs_util_1 = require(\"@nomicfoundation/ethereumjs-util\");\nconst panic_errors_1 = require(\"./panic-errors\");\nconst solidity_stack_trace_1 = require(\"./solidity-stack-trace\");\nconst inspect = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction getCurrentStack() {\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  Error.prepareStackTrace = (e, s) => s;\n  const error = new Error();\n  const stack = error.stack;\n  Error.prepareStackTrace = previousPrepareStackTrace;\n  return stack;\n}\nexports.getCurrentStack = getCurrentStack;\nasync function wrapWithSolidityErrorsCorrection(f, stackFramesToRemove) {\n  const stackTraceAtCall = getCurrentStack().slice(stackFramesToRemove);\n  try {\n    return await f();\n  } catch (error) {\n    if (error.stackTrace === undefined) {\n      // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n      throw error;\n    }\n    // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n    throw encodeSolidityStackTrace(error.message, error.stackTrace, stackTraceAtCall);\n  }\n}\nexports.wrapWithSolidityErrorsCorrection = wrapWithSolidityErrorsCorrection;\nfunction encodeSolidityStackTrace(fallbackMessage, stackTrace, previousStack) {\n  if (Error.prepareStackTrace === undefined) {\n    // Node 12 doesn't have a default Error.prepareStackTrace\n    require(\"source-map-support/register\");\n  }\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  Error.prepareStackTrace = (error, stack) => {\n    if (previousStack !== undefined) {\n      stack = previousStack;\n    } else {\n      // We remove error management related stack traces\n      stack.splice(0, 1);\n    }\n    for (const entry of stackTrace) {\n      const callsite = encodeStackTraceEntry(entry);\n      if (callsite === undefined) {\n        continue;\n      }\n      stack.unshift(callsite);\n    }\n    return previousPrepareStackTrace(error, stack);\n  };\n  const msg = getMessageFromLastStackTraceEntry(stackTrace[stackTrace.length - 1]);\n  const solidityError = new SolidityError(msg !== undefined ? msg : fallbackMessage, stackTrace);\n  // This hack is here because prepare stack is lazy\n  solidityError.stack = solidityError.stack;\n  Error.prepareStackTrace = previousPrepareStackTrace;\n  return solidityError;\n}\nexports.encodeSolidityStackTrace = encodeSolidityStackTrace;\nfunction encodeStackTraceEntry(stackTraceEntry) {\n  switch (stackTraceEntry.type) {\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_FUNCTION_WITHOUT_FALLBACK_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.MISSING_FALLBACK_OR_RECEIVE_ERROR:\n      return sourceReferenceToSolidityCallsite({\n        ...stackTraceEntry.sourceReference,\n        function: solidity_stack_trace_1.UNRECOGNIZED_FUNCTION_NAME\n      });\n    case solidity_stack_trace_1.StackTraceEntryType.CALLSTACK_ENTRY:\n    case solidity_stack_trace_1.StackTraceEntryType.REVERT_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.CUSTOM_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.FUNCTION_NOT_PAYABLE_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.INVALID_PARAMS_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.FALLBACK_NOT_PAYABLE_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.FALLBACK_NOT_PAYABLE_AND_NO_RECEIVE_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.RETURNDATA_SIZE_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.NONCONTRACT_ACCOUNT_CALLED_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.CALL_FAILED_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.DIRECT_LIBRARY_CALL_ERROR:\n      return sourceReferenceToSolidityCallsite(stackTraceEntry.sourceReference);\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_CREATE_CALLSTACK_ENTRY:\n      return new SolidityCallSite(undefined, solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.CONSTRUCTOR_FUNCTION_NAME, undefined);\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_CONTRACT_CALLSTACK_ENTRY:\n      return new SolidityCallSite((0, ethereumjs_util_1.bytesToHex)(stackTraceEntry.address), solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, undefined);\n    case solidity_stack_trace_1.StackTraceEntryType.PRECOMPILE_ERROR:\n      return new SolidityCallSite(undefined, `<PrecompileContract ${stackTraceEntry.precompile}>`, solidity_stack_trace_1.PRECOMPILE_FUNCTION_NAME, undefined);\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_CREATE_ERROR:\n      return new SolidityCallSite(undefined, solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.CONSTRUCTOR_FUNCTION_NAME, undefined);\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_CONTRACT_ERROR:\n      return new SolidityCallSite((0, ethereumjs_util_1.bytesToHex)(stackTraceEntry.address), solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, undefined);\n    case solidity_stack_trace_1.StackTraceEntryType.INTERNAL_FUNCTION_CALLSTACK_ENTRY:\n      return new SolidityCallSite(stackTraceEntry.sourceReference.sourceName, stackTraceEntry.sourceReference.contract, `internal@${stackTraceEntry.pc}`, undefined);\n    case solidity_stack_trace_1.StackTraceEntryType.CONTRACT_CALL_RUN_OUT_OF_GAS_ERROR:\n      if (stackTraceEntry.sourceReference !== undefined) {\n        return sourceReferenceToSolidityCallsite(stackTraceEntry.sourceReference);\n      }\n      return new SolidityCallSite(undefined, solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, undefined);\n    case solidity_stack_trace_1.StackTraceEntryType.OTHER_EXECUTION_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.CONTRACT_TOO_LARGE_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.PANIC_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.UNMAPPED_SOLC_0_6_3_REVERT_ERROR:\n      if (stackTraceEntry.sourceReference === undefined) {\n        return new SolidityCallSite(undefined, solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, undefined);\n      }\n      return sourceReferenceToSolidityCallsite(stackTraceEntry.sourceReference);\n  }\n}\nfunction sourceReferenceToSolidityCallsite(sourceReference) {\n  return new SolidityCallSite(sourceReference.sourceName, sourceReference.contract, sourceReference.function !== undefined ? sourceReference.function : solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, sourceReference.line);\n}\nfunction getMessageFromLastStackTraceEntry(stackTraceEntry) {\n  switch (stackTraceEntry.type) {\n    case solidity_stack_trace_1.StackTraceEntryType.PRECOMPILE_ERROR:\n      return `Transaction reverted: call to precompile ${stackTraceEntry.precompile} failed`;\n    case solidity_stack_trace_1.StackTraceEntryType.FUNCTION_NOT_PAYABLE_ERROR:\n      return `Transaction reverted: non-payable function was called with value ${stackTraceEntry.value.toString(10)}`;\n    case solidity_stack_trace_1.StackTraceEntryType.INVALID_PARAMS_ERROR:\n      return `Transaction reverted: function was called with incorrect parameters`;\n    case solidity_stack_trace_1.StackTraceEntryType.FALLBACK_NOT_PAYABLE_ERROR:\n      return `Transaction reverted: fallback function is not payable and was called with value ${stackTraceEntry.value.toString(10)}`;\n    case solidity_stack_trace_1.StackTraceEntryType.FALLBACK_NOT_PAYABLE_AND_NO_RECEIVE_ERROR:\n      return `Transaction reverted: there's no receive function, fallback function is not payable and was called with value ${stackTraceEntry.value.toString(10)}`;\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_FUNCTION_WITHOUT_FALLBACK_ERROR:\n      return `Transaction reverted: function selector was not recognized and there's no fallback function`;\n    case solidity_stack_trace_1.StackTraceEntryType.MISSING_FALLBACK_OR_RECEIVE_ERROR:\n      return `Transaction reverted: function selector was not recognized and there's no fallback nor receive function`;\n    case solidity_stack_trace_1.StackTraceEntryType.RETURNDATA_SIZE_ERROR:\n      return `Transaction reverted: function returned an unexpected amount of data`;\n    case solidity_stack_trace_1.StackTraceEntryType.NONCONTRACT_ACCOUNT_CALLED_ERROR:\n      return `Transaction reverted: function call to a non-contract account`;\n    case solidity_stack_trace_1.StackTraceEntryType.CALL_FAILED_ERROR:\n      return `Transaction reverted: function call failed to execute`;\n    case solidity_stack_trace_1.StackTraceEntryType.DIRECT_LIBRARY_CALL_ERROR:\n      return `Transaction reverted: library was called directly`;\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_CREATE_ERROR:\n    case solidity_stack_trace_1.StackTraceEntryType.UNRECOGNIZED_CONTRACT_ERROR:\n      if (stackTraceEntry.message.isErrorReturnData()) {\n        return `VM Exception while processing transaction: reverted with reason string '${stackTraceEntry.message.decodeError()}'`;\n      }\n      if (stackTraceEntry.message.isPanicReturnData()) {\n        const message = (0, panic_errors_1.panicErrorCodeToMessage)(stackTraceEntry.message.decodePanic());\n        return `VM Exception while processing transaction: ${message}`;\n      }\n      if (!stackTraceEntry.message.isEmpty()) {\n        const returnData = Buffer.from(stackTraceEntry.message.value).toString(\"hex\");\n        return `VM Exception while processing transaction: reverted with an unrecognized custom error (return data: 0x${returnData})`;\n      }\n      if (stackTraceEntry.isInvalidOpcodeError) {\n        return \"VM Exception while processing transaction: invalid opcode\";\n      }\n      return \"Transaction reverted without a reason string\";\n    case solidity_stack_trace_1.StackTraceEntryType.REVERT_ERROR:\n      if (stackTraceEntry.message.isErrorReturnData()) {\n        return `VM Exception while processing transaction: reverted with reason string '${stackTraceEntry.message.decodeError()}'`;\n      }\n      if (stackTraceEntry.isInvalidOpcodeError) {\n        return \"VM Exception while processing transaction: invalid opcode\";\n      }\n      return \"Transaction reverted without a reason string\";\n    case solidity_stack_trace_1.StackTraceEntryType.PANIC_ERROR:\n      const panicMessage = (0, panic_errors_1.panicErrorCodeToMessage)(stackTraceEntry.errorCode);\n      return `VM Exception while processing transaction: ${panicMessage}`;\n    case solidity_stack_trace_1.StackTraceEntryType.CUSTOM_ERROR:\n      return `VM Exception while processing transaction: ${stackTraceEntry.message}`;\n    case solidity_stack_trace_1.StackTraceEntryType.OTHER_EXECUTION_ERROR:\n      // TODO: What if there was returnData?\n      return `Transaction reverted and Hardhat couldn't infer the reason.`;\n    case solidity_stack_trace_1.StackTraceEntryType.UNMAPPED_SOLC_0_6_3_REVERT_ERROR:\n      return \"Transaction reverted without a reason string and without a valid sourcemap provided by the compiler. Some line numbers may be off. We strongly recommend upgrading solc and always using revert reasons.\";\n    case solidity_stack_trace_1.StackTraceEntryType.CONTRACT_TOO_LARGE_ERROR:\n      return \"Transaction reverted: trying to deploy a contract whose code is too large\";\n    case solidity_stack_trace_1.StackTraceEntryType.CONTRACT_CALL_RUN_OUT_OF_GAS_ERROR:\n      return \"Transaction reverted: contract call run out of gas and made the transaction revert\";\n  }\n}\n// Note: This error class MUST NOT extend ProviderError, as libraries\n//   use the code property to detect if they are dealing with a JSON-RPC error,\n//   and take control of errors.\nclass SolidityError extends Error {\n  constructor(message, stackTrace) {\n    super(message);\n    this.stackTrace = stackTrace;\n  }\n  [inspect]() {\n    return this.inspect();\n  }\n  inspect() {\n    return this.stack !== undefined ? this.stack : \"Internal error when encoding SolidityError\";\n  }\n}\nexports.SolidityError = SolidityError;\nclass SolidityCallSite {\n  constructor(_sourceName, _contract, _functionName, _line) {\n    this._sourceName = _sourceName;\n    this._contract = _contract;\n    this._functionName = _functionName;\n    this._line = _line;\n  }\n  getColumnNumber() {\n    return null;\n  }\n  getEvalOrigin() {\n    return undefined;\n  }\n  getFileName() {\n    return this._sourceName ?? \"unknown\";\n  }\n  getFunction() {\n    return undefined;\n  }\n  getFunctionName() {\n    // if it's a top-level function, we print its name\n    if (this._contract === undefined) {\n      return this._functionName ?? null;\n    }\n    return null;\n  }\n  getLineNumber() {\n    return this._line !== undefined ? this._line : null;\n  }\n  getMethodName() {\n    if (this._contract !== undefined) {\n      return this._functionName ?? null;\n    }\n    return null;\n  }\n  getPosition() {\n    return 0;\n  }\n  getPromiseIndex() {\n    return 0;\n  }\n  getScriptNameOrSourceURL() {\n    return \"\";\n  }\n  getThis() {\n    return undefined;\n  }\n  getTypeName() {\n    return this._contract ?? null;\n  }\n  isAsync() {\n    return false;\n  }\n  isConstructor() {\n    return false;\n  }\n  isEval() {\n    return false;\n  }\n  isNative() {\n    return false;\n  }\n  isPromiseAll() {\n    return false;\n  }\n  isToplevel() {\n    return false;\n  }\n  getScriptHash() {\n    return \"\";\n  }\n  getEnclosingColumnNumber() {\n    return 0;\n  }\n  getEnclosingLineNumber() {\n    return 0;\n  }\n  toString() {\n    return \"[SolidityCallSite]\";\n  }\n}","map":{"version":3,"names":["ethereumjs_util_1","require","panic_errors_1","solidity_stack_trace_1","inspect","Symbol","for","getCurrentStack","previousPrepareStackTrace","Error","prepareStackTrace","e","s","error","stack","exports","wrapWithSolidityErrorsCorrection","f","stackFramesToRemove","stackTraceAtCall","slice","stackTrace","undefined","encodeSolidityStackTrace","message","fallbackMessage","previousStack","splice","entry","callsite","encodeStackTraceEntry","unshift","msg","getMessageFromLastStackTraceEntry","length","solidityError","SolidityError","stackTraceEntry","type","StackTraceEntryType","UNRECOGNIZED_FUNCTION_WITHOUT_FALLBACK_ERROR","MISSING_FALLBACK_OR_RECEIVE_ERROR","sourceReferenceToSolidityCallsite","sourceReference","function","UNRECOGNIZED_FUNCTION_NAME","CALLSTACK_ENTRY","REVERT_ERROR","CUSTOM_ERROR","FUNCTION_NOT_PAYABLE_ERROR","INVALID_PARAMS_ERROR","FALLBACK_NOT_PAYABLE_ERROR","FALLBACK_NOT_PAYABLE_AND_NO_RECEIVE_ERROR","RETURNDATA_SIZE_ERROR","NONCONTRACT_ACCOUNT_CALLED_ERROR","CALL_FAILED_ERROR","DIRECT_LIBRARY_CALL_ERROR","UNRECOGNIZED_CREATE_CALLSTACK_ENTRY","SolidityCallSite","UNRECOGNIZED_CONTRACT_NAME","CONSTRUCTOR_FUNCTION_NAME","UNRECOGNIZED_CONTRACT_CALLSTACK_ENTRY","bytesToHex","address","UNKNOWN_FUNCTION_NAME","PRECOMPILE_ERROR","precompile","PRECOMPILE_FUNCTION_NAME","UNRECOGNIZED_CREATE_ERROR","UNRECOGNIZED_CONTRACT_ERROR","INTERNAL_FUNCTION_CALLSTACK_ENTRY","sourceName","contract","pc","CONTRACT_CALL_RUN_OUT_OF_GAS_ERROR","OTHER_EXECUTION_ERROR","CONTRACT_TOO_LARGE_ERROR","PANIC_ERROR","UNMAPPED_SOLC_0_6_3_REVERT_ERROR","line","value","toString","isErrorReturnData","decodeError","isPanicReturnData","panicErrorCodeToMessage","decodePanic","isEmpty","returnData","Buffer","from","isInvalidOpcodeError","panicMessage","errorCode","constructor","_sourceName","_contract","_functionName","_line","getColumnNumber","getEvalOrigin","getFileName","getFunction","getFunctionName","getLineNumber","getMethodName","getPosition","getPromiseIndex","getScriptNameOrSourceURL","getThis","getTypeName","isAsync","isConstructor","isEval","isNative","isPromiseAll","isToplevel","getScriptHash","getEnclosingColumnNumber","getEnclosingLineNumber"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\hardhat-network\\stack-traces\\solidity-errors.ts"],"sourcesContent":["import { bytesToHex as bufferToHex } from \"@nomicfoundation/ethereumjs-util\";\n\nimport { panicErrorCodeToMessage } from \"./panic-errors\";\nimport {\n  CONSTRUCTOR_FUNCTION_NAME,\n  PRECOMPILE_FUNCTION_NAME,\n  SolidityStackTrace,\n  SolidityStackTraceEntry,\n  SourceReference,\n  StackTraceEntryType,\n  UNKNOWN_FUNCTION_NAME,\n  UNRECOGNIZED_CONTRACT_NAME,\n  UNRECOGNIZED_FUNCTION_NAME,\n} from \"./solidity-stack-trace\";\n\nconst inspect = Symbol.for(\"nodejs.util.inspect.custom\");\n\nexport function getCurrentStack(): NodeJS.CallSite[] {\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n\n  Error.prepareStackTrace = (e, s) => s;\n\n  const error = new Error();\n  const stack: NodeJS.CallSite[] = error.stack as any;\n\n  Error.prepareStackTrace = previousPrepareStackTrace;\n\n  return stack;\n}\n\nexport async function wrapWithSolidityErrorsCorrection(\n  f: () => Promise<any>,\n  stackFramesToRemove: number\n) {\n  const stackTraceAtCall = getCurrentStack().slice(stackFramesToRemove);\n\n  try {\n    return await f();\n  } catch (error: any) {\n    if (error.stackTrace === undefined) {\n      // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n      throw error;\n    }\n\n    // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n    throw encodeSolidityStackTrace(\n      error.message,\n      error.stackTrace,\n      stackTraceAtCall\n    );\n  }\n}\n\nexport function encodeSolidityStackTrace(\n  fallbackMessage: string,\n  stackTrace: SolidityStackTrace,\n  previousStack?: NodeJS.CallSite[]\n): SolidityError {\n  if (Error.prepareStackTrace === undefined) {\n    // Node 12 doesn't have a default Error.prepareStackTrace\n    require(\"source-map-support/register\");\n  }\n\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  Error.prepareStackTrace = (error, stack) => {\n    if (previousStack !== undefined) {\n      stack = previousStack;\n    } else {\n      // We remove error management related stack traces\n      stack.splice(0, 1);\n    }\n\n    for (const entry of stackTrace) {\n      const callsite = encodeStackTraceEntry(entry);\n      if (callsite === undefined) {\n        continue;\n      }\n\n      stack.unshift(callsite);\n    }\n\n    return previousPrepareStackTrace!(error, stack);\n  };\n\n  const msg = getMessageFromLastStackTraceEntry(\n    stackTrace[stackTrace.length - 1]\n  );\n\n  const solidityError = new SolidityError(\n    msg !== undefined ? msg : fallbackMessage,\n    stackTrace\n  );\n\n  // This hack is here because prepare stack is lazy\n  solidityError.stack = solidityError.stack;\n\n  Error.prepareStackTrace = previousPrepareStackTrace;\n\n  return solidityError;\n}\n\nfunction encodeStackTraceEntry(\n  stackTraceEntry: SolidityStackTraceEntry\n): SolidityCallSite {\n  switch (stackTraceEntry.type) {\n    case StackTraceEntryType.UNRECOGNIZED_FUNCTION_WITHOUT_FALLBACK_ERROR:\n    case StackTraceEntryType.MISSING_FALLBACK_OR_RECEIVE_ERROR:\n      return sourceReferenceToSolidityCallsite({\n        ...stackTraceEntry.sourceReference,\n        function: UNRECOGNIZED_FUNCTION_NAME,\n      });\n\n    case StackTraceEntryType.CALLSTACK_ENTRY:\n    case StackTraceEntryType.REVERT_ERROR:\n    case StackTraceEntryType.CUSTOM_ERROR:\n    case StackTraceEntryType.FUNCTION_NOT_PAYABLE_ERROR:\n    case StackTraceEntryType.INVALID_PARAMS_ERROR:\n    case StackTraceEntryType.FALLBACK_NOT_PAYABLE_ERROR:\n    case StackTraceEntryType.FALLBACK_NOT_PAYABLE_AND_NO_RECEIVE_ERROR:\n    case StackTraceEntryType.RETURNDATA_SIZE_ERROR:\n    case StackTraceEntryType.NONCONTRACT_ACCOUNT_CALLED_ERROR:\n    case StackTraceEntryType.CALL_FAILED_ERROR:\n    case StackTraceEntryType.DIRECT_LIBRARY_CALL_ERROR:\n      return sourceReferenceToSolidityCallsite(stackTraceEntry.sourceReference);\n\n    case StackTraceEntryType.UNRECOGNIZED_CREATE_CALLSTACK_ENTRY:\n      return new SolidityCallSite(\n        undefined,\n        UNRECOGNIZED_CONTRACT_NAME,\n        CONSTRUCTOR_FUNCTION_NAME,\n        undefined\n      );\n\n    case StackTraceEntryType.UNRECOGNIZED_CONTRACT_CALLSTACK_ENTRY:\n      return new SolidityCallSite(\n        bufferToHex(stackTraceEntry.address),\n        UNRECOGNIZED_CONTRACT_NAME,\n        UNKNOWN_FUNCTION_NAME,\n        undefined\n      );\n\n    case StackTraceEntryType.PRECOMPILE_ERROR:\n      return new SolidityCallSite(\n        undefined,\n        `<PrecompileContract ${stackTraceEntry.precompile}>`,\n        PRECOMPILE_FUNCTION_NAME,\n        undefined\n      );\n\n    case StackTraceEntryType.UNRECOGNIZED_CREATE_ERROR:\n      return new SolidityCallSite(\n        undefined,\n        UNRECOGNIZED_CONTRACT_NAME,\n        CONSTRUCTOR_FUNCTION_NAME,\n        undefined\n      );\n\n    case StackTraceEntryType.UNRECOGNIZED_CONTRACT_ERROR:\n      return new SolidityCallSite(\n        bufferToHex(stackTraceEntry.address),\n        UNRECOGNIZED_CONTRACT_NAME,\n        UNKNOWN_FUNCTION_NAME,\n        undefined\n      );\n\n    case StackTraceEntryType.INTERNAL_FUNCTION_CALLSTACK_ENTRY:\n      return new SolidityCallSite(\n        stackTraceEntry.sourceReference.sourceName,\n        stackTraceEntry.sourceReference.contract,\n        `internal@${stackTraceEntry.pc}`,\n        undefined\n      );\n    case StackTraceEntryType.CONTRACT_CALL_RUN_OUT_OF_GAS_ERROR:\n      if (stackTraceEntry.sourceReference !== undefined) {\n        return sourceReferenceToSolidityCallsite(\n          stackTraceEntry.sourceReference\n        );\n      }\n\n      return new SolidityCallSite(\n        undefined,\n        UNRECOGNIZED_CONTRACT_NAME,\n        UNKNOWN_FUNCTION_NAME,\n        undefined\n      );\n\n    case StackTraceEntryType.OTHER_EXECUTION_ERROR:\n    case StackTraceEntryType.CONTRACT_TOO_LARGE_ERROR:\n    case StackTraceEntryType.PANIC_ERROR:\n    case StackTraceEntryType.UNMAPPED_SOLC_0_6_3_REVERT_ERROR:\n      if (stackTraceEntry.sourceReference === undefined) {\n        return new SolidityCallSite(\n          undefined,\n          UNRECOGNIZED_CONTRACT_NAME,\n          UNKNOWN_FUNCTION_NAME,\n          undefined\n        );\n      }\n\n      return sourceReferenceToSolidityCallsite(stackTraceEntry.sourceReference);\n  }\n}\n\nfunction sourceReferenceToSolidityCallsite(\n  sourceReference: SourceReference\n): SolidityCallSite {\n  return new SolidityCallSite(\n    sourceReference.sourceName,\n    sourceReference.contract,\n    sourceReference.function !== undefined\n      ? sourceReference.function\n      : UNKNOWN_FUNCTION_NAME,\n    sourceReference.line\n  );\n}\n\nfunction getMessageFromLastStackTraceEntry(\n  stackTraceEntry: SolidityStackTraceEntry\n): string | undefined {\n  switch (stackTraceEntry.type) {\n    case StackTraceEntryType.PRECOMPILE_ERROR:\n      return `Transaction reverted: call to precompile ${stackTraceEntry.precompile} failed`;\n\n    case StackTraceEntryType.FUNCTION_NOT_PAYABLE_ERROR:\n      return `Transaction reverted: non-payable function was called with value ${stackTraceEntry.value.toString(\n        10\n      )}`;\n\n    case StackTraceEntryType.INVALID_PARAMS_ERROR:\n      return `Transaction reverted: function was called with incorrect parameters`;\n\n    case StackTraceEntryType.FALLBACK_NOT_PAYABLE_ERROR:\n      return `Transaction reverted: fallback function is not payable and was called with value ${stackTraceEntry.value.toString(\n        10\n      )}`;\n\n    case StackTraceEntryType.FALLBACK_NOT_PAYABLE_AND_NO_RECEIVE_ERROR:\n      return `Transaction reverted: there's no receive function, fallback function is not payable and was called with value ${stackTraceEntry.value.toString(\n        10\n      )}`;\n\n    case StackTraceEntryType.UNRECOGNIZED_FUNCTION_WITHOUT_FALLBACK_ERROR:\n      return `Transaction reverted: function selector was not recognized and there's no fallback function`;\n\n    case StackTraceEntryType.MISSING_FALLBACK_OR_RECEIVE_ERROR:\n      return `Transaction reverted: function selector was not recognized and there's no fallback nor receive function`;\n\n    case StackTraceEntryType.RETURNDATA_SIZE_ERROR:\n      return `Transaction reverted: function returned an unexpected amount of data`;\n\n    case StackTraceEntryType.NONCONTRACT_ACCOUNT_CALLED_ERROR:\n      return `Transaction reverted: function call to a non-contract account`;\n\n    case StackTraceEntryType.CALL_FAILED_ERROR:\n      return `Transaction reverted: function call failed to execute`;\n\n    case StackTraceEntryType.DIRECT_LIBRARY_CALL_ERROR:\n      return `Transaction reverted: library was called directly`;\n\n    case StackTraceEntryType.UNRECOGNIZED_CREATE_ERROR:\n    case StackTraceEntryType.UNRECOGNIZED_CONTRACT_ERROR:\n      if (stackTraceEntry.message.isErrorReturnData()) {\n        return `VM Exception while processing transaction: reverted with reason string '${stackTraceEntry.message.decodeError()}'`;\n      }\n\n      if (stackTraceEntry.message.isPanicReturnData()) {\n        const message = panicErrorCodeToMessage(\n          stackTraceEntry.message.decodePanic()\n        );\n        return `VM Exception while processing transaction: ${message}`;\n      }\n\n      if (!stackTraceEntry.message.isEmpty()) {\n        const returnData = Buffer.from(stackTraceEntry.message.value).toString(\n          \"hex\"\n        );\n\n        return `VM Exception while processing transaction: reverted with an unrecognized custom error (return data: 0x${returnData})`;\n      }\n\n      if (stackTraceEntry.isInvalidOpcodeError) {\n        return \"VM Exception while processing transaction: invalid opcode\";\n      }\n\n      return \"Transaction reverted without a reason string\";\n\n    case StackTraceEntryType.REVERT_ERROR:\n      if (stackTraceEntry.message.isErrorReturnData()) {\n        return `VM Exception while processing transaction: reverted with reason string '${stackTraceEntry.message.decodeError()}'`;\n      }\n\n      if (stackTraceEntry.isInvalidOpcodeError) {\n        return \"VM Exception while processing transaction: invalid opcode\";\n      }\n\n      return \"Transaction reverted without a reason string\";\n\n    case StackTraceEntryType.PANIC_ERROR:\n      const panicMessage = panicErrorCodeToMessage(stackTraceEntry.errorCode);\n      return `VM Exception while processing transaction: ${panicMessage}`;\n\n    case StackTraceEntryType.CUSTOM_ERROR:\n      return `VM Exception while processing transaction: ${stackTraceEntry.message}`;\n\n    case StackTraceEntryType.OTHER_EXECUTION_ERROR:\n      // TODO: What if there was returnData?\n      return `Transaction reverted and Hardhat couldn't infer the reason.`;\n\n    case StackTraceEntryType.UNMAPPED_SOLC_0_6_3_REVERT_ERROR:\n      return \"Transaction reverted without a reason string and without a valid sourcemap provided by the compiler. Some line numbers may be off. We strongly recommend upgrading solc and always using revert reasons.\";\n\n    case StackTraceEntryType.CONTRACT_TOO_LARGE_ERROR:\n      return \"Transaction reverted: trying to deploy a contract whose code is too large\";\n\n    case StackTraceEntryType.CONTRACT_CALL_RUN_OUT_OF_GAS_ERROR:\n      return \"Transaction reverted: contract call run out of gas and made the transaction revert\";\n  }\n}\n\n// Note: This error class MUST NOT extend ProviderError, as libraries\n//   use the code property to detect if they are dealing with a JSON-RPC error,\n//   and take control of errors.\nexport class SolidityError extends Error {\n  public readonly stackTrace: SolidityStackTrace;\n\n  constructor(message: string, stackTrace: SolidityStackTrace) {\n    super(message);\n    this.stackTrace = stackTrace;\n  }\n\n  public [inspect](): string {\n    return this.inspect();\n  }\n\n  public inspect(): string {\n    return this.stack !== undefined\n      ? this.stack\n      : \"Internal error when encoding SolidityError\";\n  }\n}\n\nclass SolidityCallSite implements NodeJS.CallSite {\n  constructor(\n    private _sourceName: string | undefined,\n    private _contract: string | undefined,\n    private _functionName: string | undefined,\n    private _line: number | undefined\n  ) {}\n\n  public getColumnNumber() {\n    return null;\n  }\n\n  public getEvalOrigin() {\n    return undefined;\n  }\n\n  public getFileName() {\n    return this._sourceName ?? \"unknown\";\n  }\n\n  public getFunction() {\n    return undefined;\n  }\n\n  public getFunctionName() {\n    // if it's a top-level function, we print its name\n    if (this._contract === undefined) {\n      return this._functionName ?? null;\n    }\n\n    return null;\n  }\n\n  public getLineNumber() {\n    return this._line !== undefined ? this._line : null;\n  }\n\n  public getMethodName() {\n    if (this._contract !== undefined) {\n      return this._functionName ?? null;\n    }\n\n    return null;\n  }\n\n  public getPosition() {\n    return 0;\n  }\n\n  public getPromiseIndex() {\n    return 0;\n  }\n\n  public getScriptNameOrSourceURL() {\n    return \"\";\n  }\n\n  public getThis() {\n    return undefined;\n  }\n\n  public getTypeName() {\n    return this._contract ?? null;\n  }\n\n  public isAsync() {\n    return false;\n  }\n\n  public isConstructor() {\n    return false;\n  }\n\n  public isEval() {\n    return false;\n  }\n\n  public isNative() {\n    return false;\n  }\n\n  public isPromiseAll() {\n    return false;\n  }\n\n  public isToplevel() {\n    return false;\n  }\n\n  public getScriptHash(): string {\n    return \"\";\n  }\n\n  public getEnclosingColumnNumber(): number {\n    return 0;\n  }\n\n  public getEnclosingLineNumber(): number {\n    return 0;\n  }\n\n  public toString(): string {\n    return \"[SolidityCallSite]\";\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}