{"ast":null,"code":"import { ed25519 } from '@ucanto/principal';\nimport { conclude } from '@web3-storage/capabilities/ucan';\nimport * as UCAN from '@web3-storage/capabilities/ucan';\nimport { Delegation, Receipt } from '@ucanto/core';\nimport * as W3sBlobCapabilities from '@web3-storage/capabilities/web3.storage/blob';\nimport * as BlobCapabilities from '@web3-storage/capabilities/blob';\nimport * as HTTPCapabilities from '@web3-storage/capabilities/http';\nimport { SpaceDID } from '@web3-storage/capabilities/utils';\nimport retry, { AbortError } from 'p-retry';\nimport { servicePrincipal, connection } from '../service.js';\nimport { REQUEST_RETRIES } from '../constants.js';\nimport { poll } from '../receipts.js';\nimport { isCloudflareWorkers } from '../runtime.js';\n/**\n * @param {string} url\n * @param {import('../types.js').ProgressFn} handler\n */\nfunction createUploadProgressHandler(url, handler) {\n  /** @param {import('../types.js').ProgressStatus} status */\n  const onUploadProgress = ({\n    total,\n    loaded,\n    lengthComputable\n  }) => {\n    return handler({\n      total,\n      loaded,\n      lengthComputable,\n      url\n    });\n  };\n  return onUploadProgress;\n}\n// FIXME this code has been copied over from upload-api\n/**\n * @param {import('@ucanto/interface').Invocation} concludeFx\n */\nfunction getConcludeReceipt(concludeFx) {\n  const receiptBlocks = new Map();\n  for (const block of concludeFx.iterateIPLDBlocks()) {\n    receiptBlocks.set(`${block.cid}`, block);\n  }\n  return Receipt.view({\n    // @ts-expect-error object of type unknown\n    root: concludeFx.capabilities[0].nb.receipt,\n    blocks: receiptBlocks\n  });\n}\n// FIXME this code has been copied over from upload-api\n/**\n * @param {import('@ucanto/interface').Receipt} receipt\n */\nfunction parseBlobAddReceiptNext(receipt) {\n  // Get invocations next\n  /**\n   * @type {import('@ucanto/interface').Invocation[]}\n   */\n  // @ts-expect-error read only effect\n  const forkInvocations = receipt.fx.fork;\n  const allocateTask = forkInvocations.find(fork => fork.capabilities[0].can === W3sBlobCapabilities.allocate.can);\n  const concludefxs = forkInvocations.filter(fork => fork.capabilities[0].can === UCAN.conclude.can);\n  const putTask = forkInvocations.find(fork => fork.capabilities[0].can === HTTPCapabilities.put.can);\n  const acceptTask = forkInvocations.find(fork => fork.capabilities[0].can === W3sBlobCapabilities.accept.can);\n  /* c8 ignore next 3 */\n  if (!allocateTask || !concludefxs.length || !putTask || !acceptTask) {\n    throw new Error('mandatory effects not received');\n  }\n  // Decode receipts available\n  const nextReceipts = concludefxs.map(fx => getConcludeReceipt(fx));\n  /** @type {import('@ucanto/interface').Receipt<import('../types.js').BlobAllocateSuccess, import('../types.js').BlobAllocateFailure> | undefined} */\n  // @ts-expect-error types unknown for next\n  const allocateReceipt = nextReceipts.find(receipt => receipt.ran.link().equals(allocateTask.cid));\n  /** @type {import('@ucanto/interface').Receipt<{}, import('@ucanto/interface').Failure> | undefined} */\n  // @ts-expect-error types unknown for next\n  const putReceipt = nextReceipts.find(receipt => receipt.ran.link().equals(putTask.cid));\n  /** @type {import('@ucanto/interface').Receipt<import('../types.js').BlobAcceptSuccess, import('../types.js').BlobAcceptFailure> | undefined} */\n  // @ts-expect-error types unknown for next\n  const acceptReceipt = nextReceipts.find(receipt => receipt.ran.link().equals(acceptTask.cid));\n  /* c8 ignore next 3 */\n  if (!allocateReceipt) {\n    throw new Error('mandatory effects not received');\n  }\n  return {\n    allocate: {\n      task: allocateTask,\n      receipt: allocateReceipt\n    },\n    put: {\n      task: putTask,\n      receipt: putReceipt\n    },\n    accept: {\n      task: acceptTask,\n      receipt: acceptReceipt\n    }\n  };\n}\n// FIXME this code has been copied over from upload-api\n/**\n * @param {import('@ucanto/interface').Signer} id\n * @param {import('@ucanto/interface').Principal} serviceDid\n * @param {import('@ucanto/interface').Receipt} receipt\n */\nexport function createConcludeInvocation(id, serviceDid, receipt) {\n  const receiptBlocks = [];\n  const receiptCids = [];\n  for (const block of receipt.iterateIPLDBlocks()) {\n    receiptBlocks.push(block);\n    receiptCids.push(block.cid);\n  }\n  const concludeAllocatefx = conclude.invoke({\n    issuer: id,\n    audience: serviceDid,\n    with: id.toDIDKey(),\n    nb: {\n      receipt: receipt.link()\n    },\n    expiration: Infinity,\n    facts: [{\n      ...receiptCids\n    }]\n  });\n  for (const block of receiptBlocks) {\n    concludeAllocatefx.attach(block);\n  }\n  return concludeAllocatefx;\n}\n/**\n * Store a blob to the service. The issuer needs the `blob/add`\n * delegated capability.\n *\n * Required delegated capability proofs: `blob/add`\n *\n * @param {import('../types.js').InvocationConfig} conf Configuration\n * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.\n *\n * The `issuer` is the signing authority that is issuing the UCAN\n * invocation(s). It is typically the user _agent_.\n *\n * The `with` is the resource the invocation applies to. It is typically the\n * DID of a space.\n *\n * The `proofs` are a set of capability delegations that prove the issuer\n * has the capability to perform the action.\n *\n * The issuer needs the `blob/add` delegated capability.\n * @param {import('multiformats').MultihashDigest} digest\n * @param {Blob|Uint8Array} data Blob data.\n * @param {import('../types.js').RequestOptions} [options]\n * @returns {Promise<import('../types.js').BlobAddOk>}\n */\nexport async function add({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, digest, data, options = {}) {\n  /* c8 ignore next 2 */\n  const bytes = data instanceof Uint8Array ? data : new Uint8Array(await data.arrayBuffer());\n  const size = bytes.length;\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const result = await retry(async () => {\n    return await BlobCapabilities.add.invoke({\n      issuer,\n      /* c8 ignore next */\n      audience: audience ?? servicePrincipal,\n      with: SpaceDID.from(resource),\n      nb: input(digest, size),\n      proofs,\n      nonce: options.nonce\n    }).execute(conn);\n  }, {\n    onFailedAttempt: console.warn,\n    retries: options.retries ?? REQUEST_RETRIES\n  });\n  if (!result.out.ok) {\n    throw new Error(`failed ${BlobCapabilities.add.can} invocation`, {\n      cause: result.out.error\n    });\n  }\n  const nextTasks = parseBlobAddReceiptNext(result);\n  const {\n    receipt: allocateReceipt\n  } = nextTasks.allocate;\n  /* c8 ignore next 5 */\n  if (!allocateReceipt.out.ok) {\n    throw new Error(`failed ${BlobCapabilities.add.can} invocation`, {\n      cause: allocateReceipt.out.error\n    });\n  }\n  const {\n    address\n  } = allocateReceipt.out.ok;\n  if (address) {\n    const fetchWithUploadProgress = options.fetchWithUploadProgress || options.fetch || globalThis.fetch.bind(globalThis);\n    let fetchDidCallUploadProgressCb = false;\n    await retry(async () => {\n      try {\n        const res = await fetchWithUploadProgress(address.url, {\n          method: 'PUT',\n          ...(!isCloudflareWorkers && {\n            mode: 'cors'\n          }),\n          body: bytes,\n          headers: address.headers,\n          signal: options.signal,\n          onUploadProgress: status => {\n            fetchDidCallUploadProgressCb = true;\n            if (options.onUploadProgress) createUploadProgressHandler(address.url, options.onUploadProgress)(status);\n          },\n          // @ts-expect-error - this is needed by recent versions of node - see https://github.com/bluesky-social/atproto/pull/470 for more info\n          duplex: 'half'\n        });\n        // do not retry client errors\n        if (res.status >= 400 && res.status < 500) {\n          throw new AbortError(`upload failed: ${res.status}`);\n        }\n        if (!res.ok) {\n          throw new Error(`upload failed: ${res.status}`);\n        }\n      } catch (err) {\n        if (options.signal?.aborted === true) {\n          throw new AbortError('upload aborted');\n        }\n        throw err;\n      }\n    }, {\n      retries: options.retries ?? REQUEST_RETRIES\n    });\n    if (!fetchDidCallUploadProgressCb && options.onUploadProgress) {\n      // the fetch implementation didn't support onUploadProgress\n      const blob = new Blob([bytes]);\n      options.onUploadProgress({\n        total: blob.size,\n        loaded: blob.size,\n        lengthComputable: false\n      });\n    }\n  }\n  // Invoke `conclude` with `http/put` receipt\n  let {\n    receipt: httpPutReceipt\n  } = nextTasks.put;\n  if (!httpPutReceipt?.out.ok) {\n    const derivedSigner = ed25519.from( /** @type {import('@ucanto/interface').SignerArchive<import('@ucanto/interface').DID, typeof ed25519.signatureCode>} */\n    nextTasks.put.task.facts[0]['keys']);\n    httpPutReceipt = await Receipt.issue({\n      issuer: derivedSigner,\n      ran: nextTasks.put.task.cid,\n      result: {\n        ok: {}\n      }\n    });\n    const httpPutConcludeInvocation = createConcludeInvocation(issuer, /* c8 ignore next */\n    audience ?? servicePrincipal, httpPutReceipt);\n    const ucanConclude = await httpPutConcludeInvocation.execute(conn);\n    if (!ucanConclude.out.ok) {\n      throw new Error(`failed ${BlobCapabilities.add.can} invocation`, {\n        cause: result.out.error\n      });\n    }\n  }\n  // Ensure the blob has been accepted\n  let {\n    receipt: acceptReceipt\n  } = nextTasks.accept;\n  if (!acceptReceipt?.out.ok) {\n    acceptReceipt = await poll(nextTasks.accept.task.link(), options);\n  }\n  const blocks = new Map([...acceptReceipt.iterateIPLDBlocks()].map(block => [`${block.cid}`, block]));\n  const site = Delegation.view({\n    root: ( /** @type {import('@ucanto/interface').UCANLink} */acceptReceipt.out.ok?.site),\n    blocks\n  });\n  return {\n    site\n  };\n}\n/** Returns the ability used by an invocation. */\nexport const ability = BlobCapabilities.add.can;\n/**\n * Returns required input to the invocation.\n *\n * @param {import('multiformats').MultihashDigest} digest\n * @param {number} size\n */\nexport const input = (digest, size) => ({\n  blob: {\n    digest: digest.bytes,\n    size\n  }\n});","map":{"version":3,"names":["ed25519","conclude","UCAN","Delegation","Receipt","W3sBlobCapabilities","BlobCapabilities","HTTPCapabilities","SpaceDID","retry","AbortError","servicePrincipal","connection","REQUEST_RETRIES","poll","isCloudflareWorkers","createUploadProgressHandler","url","handler","onUploadProgress","total","loaded","lengthComputable","getConcludeReceipt","concludeFx","receiptBlocks","Map","block","iterateIPLDBlocks","set","cid","view","root","capabilities","nb","receipt","blocks","parseBlobAddReceiptNext","forkInvocations","fx","fork","allocateTask","find","can","allocate","concludefxs","filter","putTask","put","acceptTask","accept","length","Error","nextReceipts","map","allocateReceipt","ran","link","equals","putReceipt","acceptReceipt","task","createConcludeInvocation","id","serviceDid","receiptCids","push","concludeAllocatefx","invoke","issuer","audience","with","toDIDKey","expiration","Infinity","facts","attach","add","resource","proofs","digest","data","options","bytes","Uint8Array","arrayBuffer","size","conn","result","from","input","nonce","execute","onFailedAttempt","console","warn","retries","out","ok","cause","error","nextTasks","address","fetchWithUploadProgress","fetch","globalThis","bind","fetchDidCallUploadProgressCb","res","method","mode","body","headers","signal","status","duplex","err","aborted","blob","Blob","httpPutReceipt","derivedSigner","issue","httpPutConcludeInvocation","ucanConclude","site","ability"],"sources":["../../../src/blob/add.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}