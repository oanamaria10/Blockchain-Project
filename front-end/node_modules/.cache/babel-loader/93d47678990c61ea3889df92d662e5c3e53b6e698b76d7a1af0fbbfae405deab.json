{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isJavascriptFile = exports.isTypescriptFile = exports.loadTsNode = exports.isTypescriptSupported = exports.isRunningWithTypescript = exports.willRunWithTypescript = void 0;\nconst config_loading_1 = require(\"./config/config-loading\");\nconst errors_1 = require(\"./errors\");\nconst errors_list_1 = require(\"./errors-list\");\nconst execution_mode_1 = require(\"./execution-mode\");\nlet cachedIsTypescriptSupported;\n/**\n * Returns true if Hardhat will run in using typescript mode.\n * @param configPath The config path if provider by the user.\n */\nfunction willRunWithTypescript(configPath) {\n  const config = (0, config_loading_1.resolveConfigPath)(configPath);\n  return isNonEsmTypescriptFile(config);\n}\nexports.willRunWithTypescript = willRunWithTypescript;\n/**\n * Returns true if an Hardhat is already running with typescript.\n */\nfunction isRunningWithTypescript(config) {\n  return isNonEsmTypescriptFile(config.paths.configFile);\n}\nexports.isRunningWithTypescript = isRunningWithTypescript;\nfunction isTypescriptSupported() {\n  if (cachedIsTypescriptSupported === undefined) {\n    try {\n      // We resolve these from Hardhat's installation.\n      require.resolve(\"typescript\");\n      require.resolve(\"ts-node\");\n      cachedIsTypescriptSupported = true;\n    } catch {\n      cachedIsTypescriptSupported = false;\n    }\n  }\n  return cachedIsTypescriptSupported;\n}\nexports.isTypescriptSupported = isTypescriptSupported;\nfunction loadTsNode(tsConfigPath, shouldTypecheck = false) {\n  try {\n    require.resolve(\"typescript\");\n  } catch {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.TYPESCRIPT_NOT_INSTALLED);\n  }\n  try {\n    require.resolve(\"ts-node\");\n  } catch {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.TS_NODE_NOT_INSTALLED);\n  }\n  // If we are running tests we just want to transpile\n  if ((0, execution_mode_1.isRunningHardhatCoreTests)()) {\n    // eslint-disable-next-line import/no-extraneous-dependencies\n    require(\"ts-node/register/transpile-only\");\n    return;\n  }\n  if (tsConfigPath !== undefined) {\n    process.env.TS_NODE_PROJECT = tsConfigPath;\n  }\n  // See: https://github.com/nomiclabs/hardhat/issues/265\n  if (process.env.TS_NODE_FILES === undefined) {\n    process.env.TS_NODE_FILES = \"true\";\n  }\n  let tsNodeRequirement = \"ts-node/register\";\n  if (!shouldTypecheck) {\n    tsNodeRequirement += \"/transpile-only\";\n  }\n  // eslint-disable-next-line import/no-extraneous-dependencies\n  require(tsNodeRequirement);\n}\nexports.loadTsNode = loadTsNode;\nfunction isNonEsmTypescriptFile(path) {\n  return /\\.(ts|cts)$/i.test(path);\n}\nfunction isTypescriptFile(path) {\n  return /\\.(ts|cts|mts)$/i.test(path);\n}\nexports.isTypescriptFile = isTypescriptFile;\nfunction isJavascriptFile(path) {\n  return /\\.(js|cjs|mjs)$/i.test(path);\n}\nexports.isJavascriptFile = isJavascriptFile;","map":{"version":3,"names":["config_loading_1","require","errors_1","errors_list_1","execution_mode_1","cachedIsTypescriptSupported","willRunWithTypescript","configPath","config","resolveConfigPath","isNonEsmTypescriptFile","exports","isRunningWithTypescript","paths","configFile","isTypescriptSupported","undefined","resolve","loadTsNode","tsConfigPath","shouldTypecheck","HardhatError","ERRORS","GENERAL","TYPESCRIPT_NOT_INSTALLED","TS_NODE_NOT_INSTALLED","isRunningHardhatCoreTests","process","env","TS_NODE_PROJECT","TS_NODE_FILES","tsNodeRequirement","path","test","isTypescriptFile","isJavascriptFile"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\core\\typescript-support.ts"],"sourcesContent":["import { HardhatConfig } from \"../../types\";\n\nimport { resolveConfigPath } from \"./config/config-loading\";\nimport { HardhatError } from \"./errors\";\nimport { ERRORS } from \"./errors-list\";\nimport { isRunningHardhatCoreTests } from \"./execution-mode\";\n\nlet cachedIsTypescriptSupported: boolean | undefined;\n\n/**\n * Returns true if Hardhat will run in using typescript mode.\n * @param configPath The config path if provider by the user.\n */\nexport function willRunWithTypescript(configPath?: string): boolean {\n  const config = resolveConfigPath(configPath);\n  return isNonEsmTypescriptFile(config);\n}\n\n/**\n * Returns true if an Hardhat is already running with typescript.\n */\nexport function isRunningWithTypescript(config: HardhatConfig): boolean {\n  return isNonEsmTypescriptFile(config.paths.configFile);\n}\n\nexport function isTypescriptSupported() {\n  if (cachedIsTypescriptSupported === undefined) {\n    try {\n      // We resolve these from Hardhat's installation.\n      require.resolve(\"typescript\");\n      require.resolve(\"ts-node\");\n      cachedIsTypescriptSupported = true;\n    } catch {\n      cachedIsTypescriptSupported = false;\n    }\n  }\n\n  return cachedIsTypescriptSupported;\n}\n\nexport function loadTsNode(\n  tsConfigPath?: string,\n  shouldTypecheck: boolean = false\n) {\n  try {\n    require.resolve(\"typescript\");\n  } catch {\n    throw new HardhatError(ERRORS.GENERAL.TYPESCRIPT_NOT_INSTALLED);\n  }\n\n  try {\n    require.resolve(\"ts-node\");\n  } catch {\n    throw new HardhatError(ERRORS.GENERAL.TS_NODE_NOT_INSTALLED);\n  }\n\n  // If we are running tests we just want to transpile\n  if (isRunningHardhatCoreTests()) {\n    // eslint-disable-next-line import/no-extraneous-dependencies\n    require(\"ts-node/register/transpile-only\");\n    return;\n  }\n\n  if (tsConfigPath !== undefined) {\n    process.env.TS_NODE_PROJECT = tsConfigPath;\n  }\n\n  // See: https://github.com/nomiclabs/hardhat/issues/265\n  if (process.env.TS_NODE_FILES === undefined) {\n    process.env.TS_NODE_FILES = \"true\";\n  }\n\n  let tsNodeRequirement = \"ts-node/register\";\n\n  if (!shouldTypecheck) {\n    tsNodeRequirement += \"/transpile-only\";\n  }\n\n  // eslint-disable-next-line import/no-extraneous-dependencies\n  require(tsNodeRequirement);\n}\n\nfunction isNonEsmTypescriptFile(path: string): boolean {\n  return /\\.(ts|cts)$/i.test(path);\n}\n\nexport function isTypescriptFile(path: string): boolean {\n  return /\\.(ts|cts|mts)$/i.test(path);\n}\n\nexport function isJavascriptFile(path: string): boolean {\n  return /\\.(js|cjs|mjs)$/i.test(path);\n}\n"],"mappings":";;;;;;AAEA,MAAAA,gBAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AACA,MAAAE,aAAA,GAAAF,OAAA;AACA,MAAAG,gBAAA,GAAAH,OAAA;AAEA,IAAII,2BAAgD;AAEpD;;;;AAIA,SAAgBC,qBAAqBA,CAACC,UAAmB;EACvD,MAAMC,MAAM,GAAG,IAAAR,gBAAA,CAAAS,iBAAiB,EAACF,UAAU,CAAC;EAC5C,OAAOG,sBAAsB,CAACF,MAAM,CAAC;AACvC;AAHAG,OAAA,CAAAL,qBAAA,GAAAA,qBAAA;AAKA;;;AAGA,SAAgBM,uBAAuBA,CAACJ,MAAqB;EAC3D,OAAOE,sBAAsB,CAACF,MAAM,CAACK,KAAK,CAACC,UAAU,CAAC;AACxD;AAFAH,OAAA,CAAAC,uBAAA,GAAAA,uBAAA;AAIA,SAAgBG,qBAAqBA,CAAA;EACnC,IAAIV,2BAA2B,KAAKW,SAAS,EAAE;IAC7C,IAAI;MACF;MACAf,OAAO,CAACgB,OAAO,CAAC,YAAY,CAAC;MAC7BhB,OAAO,CAACgB,OAAO,CAAC,SAAS,CAAC;MAC1BZ,2BAA2B,GAAG,IAAI;KACnC,CAAC,MAAM;MACNA,2BAA2B,GAAG,KAAK;;;EAIvC,OAAOA,2BAA2B;AACpC;AAbAM,OAAA,CAAAI,qBAAA,GAAAA,qBAAA;AAeA,SAAgBG,UAAUA,CACxBC,YAAqB,EACrBC,eAAA,GAA2B,KAAK;EAEhC,IAAI;IACFnB,OAAO,CAACgB,OAAO,CAAC,YAAY,CAAC;GAC9B,CAAC,MAAM;IACN,MAAM,IAAIf,QAAA,CAAAmB,YAAY,CAAClB,aAAA,CAAAmB,MAAM,CAACC,OAAO,CAACC,wBAAwB,CAAC;;EAGjE,IAAI;IACFvB,OAAO,CAACgB,OAAO,CAAC,SAAS,CAAC;GAC3B,CAAC,MAAM;IACN,MAAM,IAAIf,QAAA,CAAAmB,YAAY,CAAClB,aAAA,CAAAmB,MAAM,CAACC,OAAO,CAACE,qBAAqB,CAAC;;EAG9D;EACA,IAAI,IAAArB,gBAAA,CAAAsB,yBAAyB,GAAE,EAAE;IAC/B;IACAzB,OAAO,CAAC,iCAAiC,CAAC;IAC1C;;EAGF,IAAIkB,YAAY,KAAKH,SAAS,EAAE;IAC9BW,OAAO,CAACC,GAAG,CAACC,eAAe,GAAGV,YAAY;;EAG5C;EACA,IAAIQ,OAAO,CAACC,GAAG,CAACE,aAAa,KAAKd,SAAS,EAAE;IAC3CW,OAAO,CAACC,GAAG,CAACE,aAAa,GAAG,MAAM;;EAGpC,IAAIC,iBAAiB,GAAG,kBAAkB;EAE1C,IAAI,CAACX,eAAe,EAAE;IACpBW,iBAAiB,IAAI,iBAAiB;;EAGxC;EACA9B,OAAO,CAAC8B,iBAAiB,CAAC;AAC5B;AAxCApB,OAAA,CAAAO,UAAA,GAAAA,UAAA;AA0CA,SAASR,sBAAsBA,CAACsB,IAAY;EAC1C,OAAO,cAAc,CAACC,IAAI,CAACD,IAAI,CAAC;AAClC;AAEA,SAAgBE,gBAAgBA,CAACF,IAAY;EAC3C,OAAO,kBAAkB,CAACC,IAAI,CAACD,IAAI,CAAC;AACtC;AAFArB,OAAA,CAAAuB,gBAAA,GAAAA,gBAAA;AAIA,SAAgBC,gBAAgBA,CAACH,IAAY;EAC3C,OAAO,kBAAkB,CAACC,IAAI,CAACD,IAAI,CAAC;AACtC;AAFArB,OAAA,CAAAwB,gBAAA,GAAAA,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}