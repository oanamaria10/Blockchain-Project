{"ast":null,"code":"import { addContextToFrame, basename, dirname, SyncPromise } from '@sentry/utils';\nimport { readFile } from 'fs';\nimport { LRUMap } from 'lru_map';\nimport * as stacktrace from './stacktrace';\nvar DEFAULT_LINES_OF_CONTEXT = 7;\nvar FILE_CONTENT_CACHE = new LRUMap(100);\n/**\n * Resets the file cache. Exists for testing purposes.\n * @hidden\n */\nexport function resetFileContentCache() {\n  FILE_CONTENT_CACHE.clear();\n}\n/** JSDoc */\nfunction getFunction(frame) {\n  try {\n    return frame.functionName || frame.typeName + \".\" + (frame.methodName || '<anonymous>');\n  } catch (e) {\n    // This seems to happen sometimes when using 'use strict',\n    // stemming from `getTypeName`.\n    // [TypeError: Cannot read property 'constructor' of undefined]\n    return '<anonymous>';\n  }\n}\nvar mainModule = (require.main && require.main.filename && dirname(require.main.filename) || global.process.cwd()) + \"/\";\n/** JSDoc */\nfunction getModule(filename, base) {\n  if (!base) {\n    // eslint-disable-next-line no-param-reassign\n    base = mainModule;\n  }\n  // It's specifically a module\n  var file = basename(filename, '.js');\n  // eslint-disable-next-line no-param-reassign\n  filename = dirname(filename);\n  var n = filename.lastIndexOf('/node_modules/');\n  if (n > -1) {\n    // /node_modules/ is 14 chars\n    return filename.substr(n + 14).replace(/\\//g, '.') + \":\" + file;\n  }\n  // Let's see if it's a part of the main module\n  // To be a part of main module, it has to share the same base\n  n = (filename + \"/\").lastIndexOf(base, 0);\n  if (n === 0) {\n    var moduleName = filename.substr(base.length).replace(/\\//g, '.');\n    if (moduleName) {\n      moduleName += ':';\n    }\n    moduleName += file;\n    return moduleName;\n  }\n  return file;\n}\n/**\n * This function reads file contents and caches them in a global LRU cache.\n * Returns a Promise filepath => content array for all files that we were able to read.\n *\n * @param filenames Array of filepaths to read content from.\n */\nfunction readSourceFiles(filenames) {\n  // we're relying on filenames being de-duped already\n  if (filenames.length === 0) {\n    return SyncPromise.resolve({});\n  }\n  return new SyncPromise(function (resolve) {\n    var sourceFiles = {};\n    var count = 0;\n    var _loop_1 = function (i) {\n      var filename = filenames[i];\n      var cache = FILE_CONTENT_CACHE.get(filename);\n      // We have a cache hit\n      if (cache !== undefined) {\n        // If it's not null (which means we found a file and have a content)\n        // we set the content and return it later.\n        if (cache !== null) {\n          sourceFiles[filename] = cache;\n        }\n        // eslint-disable-next-line no-plusplus\n        count++;\n        // In any case we want to skip here then since we have a content already or we couldn't\n        // read the file and don't want to try again.\n        if (count === filenames.length) {\n          resolve(sourceFiles);\n        }\n        return \"continue\";\n      }\n      readFile(filename, function (err, data) {\n        var content = err ? null : data.toString();\n        sourceFiles[filename] = content;\n        // We always want to set the cache, even to null which means there was an error reading the file.\n        // We do not want to try to read the file again.\n        FILE_CONTENT_CACHE.set(filename, content);\n        // eslint-disable-next-line no-plusplus\n        count++;\n        if (count === filenames.length) {\n          resolve(sourceFiles);\n        }\n      });\n    };\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (var i = 0; i < filenames.length; i++) {\n      _loop_1(i);\n    }\n  });\n}\n/**\n * @hidden\n */\nexport function extractStackFromError(error) {\n  var stack = stacktrace.parse(error);\n  if (!stack) {\n    return [];\n  }\n  return stack;\n}\n/**\n * @hidden\n */\nexport function parseStack(stack, options) {\n  var filesToRead = [];\n  var linesOfContext = options && options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n  var frames = stack.map(function (frame) {\n    var parsedFrame = {\n      colno: frame.columnNumber,\n      filename: frame.fileName || '',\n      function: getFunction(frame),\n      lineno: frame.lineNumber\n    };\n    var isInternal = frame.native || parsedFrame.filename && !parsedFrame.filename.startsWith('/') && !parsedFrame.filename.startsWith('.') && parsedFrame.filename.indexOf(':\\\\') !== 1;\n    // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n    parsedFrame.in_app = !isInternal && parsedFrame.filename !== undefined && parsedFrame.filename.indexOf('node_modules/') === -1;\n    // Extract a module name based on the filename\n    if (parsedFrame.filename) {\n      parsedFrame.module = getModule(parsedFrame.filename);\n      if (!isInternal && linesOfContext > 0 && filesToRead.indexOf(parsedFrame.filename) === -1) {\n        filesToRead.push(parsedFrame.filename);\n      }\n    }\n    return parsedFrame;\n  });\n  // We do an early return if we do not want to fetch context liens\n  if (linesOfContext <= 0) {\n    return SyncPromise.resolve(frames);\n  }\n  try {\n    return addPrePostContext(filesToRead, frames, linesOfContext);\n  } catch (_) {\n    // This happens in electron for example where we are not able to read files from asar.\n    // So it's fine, we recover be just returning all frames without pre/post context.\n    return SyncPromise.resolve(frames);\n  }\n}\n/**\n * This function tries to read the source files + adding pre and post context (source code)\n * to a frame.\n * @param filesToRead string[] of filepaths\n * @param frames StackFrame[] containg all frames\n */\nfunction addPrePostContext(filesToRead, frames, linesOfContext) {\n  return new SyncPromise(function (resolve) {\n    return readSourceFiles(filesToRead).then(function (sourceFiles) {\n      var result = frames.map(function (frame) {\n        if (frame.filename && sourceFiles[frame.filename]) {\n          try {\n            var lines = sourceFiles[frame.filename].split('\\n');\n            addContextToFrame(lines, frame, linesOfContext);\n          } catch (e) {\n            // anomaly, being defensive in case\n            // unlikely to ever happen in practice but can definitely happen in theory\n          }\n        }\n        return frame;\n      });\n      resolve(result);\n    });\n  });\n}\n/**\n * @hidden\n */\nexport function getExceptionFromError(error, options) {\n  var name = error.name || error.constructor.name;\n  var stack = extractStackFromError(error);\n  return new SyncPromise(function (resolve) {\n    return parseStack(stack, options).then(function (frames) {\n      var result = {\n        stacktrace: {\n          frames: prepareFramesForEvent(frames)\n        },\n        type: name,\n        value: error.message\n      };\n      resolve(result);\n    });\n  });\n}\n/**\n * @hidden\n */\nexport function parseError(error, options) {\n  return new SyncPromise(function (resolve) {\n    return getExceptionFromError(error, options).then(function (exception) {\n      resolve({\n        exception: {\n          values: [exception]\n        }\n      });\n    });\n  });\n}\n/**\n * @hidden\n */\nexport function prepareFramesForEvent(stack) {\n  if (!stack || !stack.length) {\n    return [];\n  }\n  var localStack = stack;\n  var firstFrameFunction = localStack[0].function || '';\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack.reverse();\n}","map":{"version":3,"names":["addContextToFrame","basename","dirname","SyncPromise","readFile","LRUMap","stacktrace","DEFAULT_LINES_OF_CONTEXT","FILE_CONTENT_CACHE","resetFileContentCache","clear","getFunction","frame","functionName","typeName","methodName","e","mainModule","require","main","filename","global","process","cwd","getModule","base","file","n","lastIndexOf","substr","replace","moduleName","length","readSourceFiles","filenames","resolve","sourceFiles","count","i","cache","get","undefined","err","data","content","toString","set","extractStackFromError","error","stack","parse","parseStack","options","filesToRead","linesOfContext","frameContextLines","frames","map","parsedFrame","colno","columnNumber","fileName","function","lineno","lineNumber","isInternal","native","startsWith","indexOf","in_app","module","push","addPrePostContext","_","then","result","lines","split","getExceptionFromError","name","constructor","prepareFramesForEvent","type","value","message","parseError","exception","values","localStack","firstFrameFunction","slice","reverse"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\node\\src\\parsers.ts"],"sourcesContent":["import { Event, Exception, ExtendedError, StackFrame } from '@sentry/types';\nimport { addContextToFrame, basename, dirname, SyncPromise } from '@sentry/utils';\nimport { readFile } from 'fs';\nimport { LRUMap } from 'lru_map';\n\nimport { NodeOptions } from './backend';\nimport * as stacktrace from './stacktrace';\n\nconst DEFAULT_LINES_OF_CONTEXT: number = 7;\nconst FILE_CONTENT_CACHE = new LRUMap<string, string | null>(100);\n\n/**\n * Resets the file cache. Exists for testing purposes.\n * @hidden\n */\nexport function resetFileContentCache(): void {\n  FILE_CONTENT_CACHE.clear();\n}\n\n/** JSDoc */\nfunction getFunction(frame: stacktrace.StackFrame): string {\n  try {\n    return frame.functionName || `${frame.typeName}.${frame.methodName || '<anonymous>'}`;\n  } catch (e) {\n    // This seems to happen sometimes when using 'use strict',\n    // stemming from `getTypeName`.\n    // [TypeError: Cannot read property 'constructor' of undefined]\n    return '<anonymous>';\n  }\n}\n\nconst mainModule: string = `${(require.main && require.main.filename && dirname(require.main.filename)) ||\n  global.process.cwd()}/`;\n\n/** JSDoc */\nfunction getModule(filename: string, base?: string): string {\n  if (!base) {\n    // eslint-disable-next-line no-param-reassign\n    base = mainModule;\n  }\n\n  // It's specifically a module\n  const file = basename(filename, '.js');\n  // eslint-disable-next-line no-param-reassign\n  filename = dirname(filename);\n  let n = filename.lastIndexOf('/node_modules/');\n  if (n > -1) {\n    // /node_modules/ is 14 chars\n    return `${filename.substr(n + 14).replace(/\\//g, '.')}:${file}`;\n  }\n  // Let's see if it's a part of the main module\n  // To be a part of main module, it has to share the same base\n  n = `${filename}/`.lastIndexOf(base, 0);\n  if (n === 0) {\n    let moduleName = filename.substr(base.length).replace(/\\//g, '.');\n    if (moduleName) {\n      moduleName += ':';\n    }\n    moduleName += file;\n    return moduleName;\n  }\n  return file;\n}\n\n/**\n * This function reads file contents and caches them in a global LRU cache.\n * Returns a Promise filepath => content array for all files that we were able to read.\n *\n * @param filenames Array of filepaths to read content from.\n */\nfunction readSourceFiles(filenames: string[]): PromiseLike<{ [key: string]: string | null }> {\n  // we're relying on filenames being de-duped already\n  if (filenames.length === 0) {\n    return SyncPromise.resolve({});\n  }\n\n  return new SyncPromise<{\n    [key: string]: string | null;\n  }>(resolve => {\n    const sourceFiles: {\n      [key: string]: string | null;\n    } = {};\n\n    let count = 0;\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < filenames.length; i++) {\n      const filename = filenames[i];\n\n      const cache = FILE_CONTENT_CACHE.get(filename);\n      // We have a cache hit\n      if (cache !== undefined) {\n        // If it's not null (which means we found a file and have a content)\n        // we set the content and return it later.\n        if (cache !== null) {\n          sourceFiles[filename] = cache;\n        }\n        // eslint-disable-next-line no-plusplus\n        count++;\n        // In any case we want to skip here then since we have a content already or we couldn't\n        // read the file and don't want to try again.\n        if (count === filenames.length) {\n          resolve(sourceFiles);\n        }\n        continue;\n      }\n\n      readFile(filename, (err: Error | null, data: Buffer) => {\n        const content = err ? null : data.toString();\n        sourceFiles[filename] = content;\n\n        // We always want to set the cache, even to null which means there was an error reading the file.\n        // We do not want to try to read the file again.\n        FILE_CONTENT_CACHE.set(filename, content);\n        // eslint-disable-next-line no-plusplus\n        count++;\n        if (count === filenames.length) {\n          resolve(sourceFiles);\n        }\n      });\n    }\n  });\n}\n\n/**\n * @hidden\n */\nexport function extractStackFromError(error: Error): stacktrace.StackFrame[] {\n  const stack = stacktrace.parse(error);\n  if (!stack) {\n    return [];\n  }\n  return stack;\n}\n\n/**\n * @hidden\n */\nexport function parseStack(stack: stacktrace.StackFrame[], options?: NodeOptions): PromiseLike<StackFrame[]> {\n  const filesToRead: string[] = [];\n\n  const linesOfContext =\n    options && options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n\n  const frames: StackFrame[] = stack.map(frame => {\n    const parsedFrame: StackFrame = {\n      colno: frame.columnNumber,\n      filename: frame.fileName || '',\n      function: getFunction(frame),\n      lineno: frame.lineNumber,\n    };\n\n    const isInternal =\n      frame.native ||\n      (parsedFrame.filename &&\n        !parsedFrame.filename.startsWith('/') &&\n        !parsedFrame.filename.startsWith('.') &&\n        parsedFrame.filename.indexOf(':\\\\') !== 1);\n\n    // in_app is all that's not an internal Node function or a module within node_modules\n    // note that isNative appears to return true even for node core libraries\n    // see https://github.com/getsentry/raven-node/issues/176\n    parsedFrame.in_app =\n      !isInternal && parsedFrame.filename !== undefined && parsedFrame.filename.indexOf('node_modules/') === -1;\n\n    // Extract a module name based on the filename\n    if (parsedFrame.filename) {\n      parsedFrame.module = getModule(parsedFrame.filename);\n\n      if (!isInternal && linesOfContext > 0 && filesToRead.indexOf(parsedFrame.filename) === -1) {\n        filesToRead.push(parsedFrame.filename);\n      }\n    }\n\n    return parsedFrame;\n  });\n\n  // We do an early return if we do not want to fetch context liens\n  if (linesOfContext <= 0) {\n    return SyncPromise.resolve(frames);\n  }\n\n  try {\n    return addPrePostContext(filesToRead, frames, linesOfContext);\n  } catch (_) {\n    // This happens in electron for example where we are not able to read files from asar.\n    // So it's fine, we recover be just returning all frames without pre/post context.\n    return SyncPromise.resolve(frames);\n  }\n}\n\n/**\n * This function tries to read the source files + adding pre and post context (source code)\n * to a frame.\n * @param filesToRead string[] of filepaths\n * @param frames StackFrame[] containg all frames\n */\nfunction addPrePostContext(\n  filesToRead: string[],\n  frames: StackFrame[],\n  linesOfContext: number,\n): PromiseLike<StackFrame[]> {\n  return new SyncPromise<StackFrame[]>(resolve =>\n    readSourceFiles(filesToRead).then(sourceFiles => {\n      const result = frames.map(frame => {\n        if (frame.filename && sourceFiles[frame.filename]) {\n          try {\n            const lines = (sourceFiles[frame.filename] as string).split('\\n');\n\n            addContextToFrame(lines, frame, linesOfContext);\n          } catch (e) {\n            // anomaly, being defensive in case\n            // unlikely to ever happen in practice but can definitely happen in theory\n          }\n        }\n        return frame;\n      });\n\n      resolve(result);\n    }),\n  );\n}\n\n/**\n * @hidden\n */\nexport function getExceptionFromError(error: Error, options?: NodeOptions): PromiseLike<Exception> {\n  const name = error.name || error.constructor.name;\n  const stack = extractStackFromError(error);\n  return new SyncPromise<Exception>(resolve =>\n    parseStack(stack, options).then(frames => {\n      const result = {\n        stacktrace: {\n          frames: prepareFramesForEvent(frames),\n        },\n        type: name,\n        value: error.message,\n      };\n      resolve(result);\n    }),\n  );\n}\n\n/**\n * @hidden\n */\nexport function parseError(error: ExtendedError, options?: NodeOptions): PromiseLike<Event> {\n  return new SyncPromise<Event>(resolve =>\n    getExceptionFromError(error, options).then((exception: Exception) => {\n      resolve({\n        exception: {\n          values: [exception],\n        },\n      });\n    }),\n  );\n}\n\n/**\n * @hidden\n */\nexport function prepareFramesForEvent(stack: StackFrame[]): StackFrame[] {\n  if (!stack || !stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n  const firstFrameFunction = localStack[0].function || '';\n\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack.reverse();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}