{"ast":null,"code":"import { connect } from '@ucanto/client';\nimport { CAR, HTTP } from '@ucanto/transport';\nimport * as DealTracker from '@web3-storage/capabilities/filecoin/deal-tracker';\nimport { services } from './service.js';\n/**\n * @typedef {import('./types.js').DealTrackerService} DealTrackerService\n * @typedef {import('@ucanto/interface').ConnectionView<DealTrackerService>} ConnectionView\n */\n/** @type {ConnectionView} */\nexport const connection = connect({\n  id: services.DEAL_TRACKER.principal,\n  codec: CAR.outbound,\n  channel: HTTP.open({\n    url: services.DEAL_TRACKER.url,\n    method: 'POST'\n  })\n});\n/**\n * The `deal/info` task can be executed to request deal information for a given\n * piece. It issues a signed receipt of the execution result.\n *\n * A receipt for successful execution will contain details of deals the\n * provided piece CID is currently active in.\n *\n * Otherwise the task is failed and the receipt will contain details of the\n * reason behind the failure.\n *\n * @see https://github.com/storacha/specs/blob/main/w3-filecoin.md#dealinfo\n *\n * @param {import('./types.js').InvocationConfig} conf - Configuration\n * @param {import('@web3-storage/data-segment').PieceLink} piece\n * @param {import('./types.js').RequestOptions<DealTrackerService>} [options]\n */\nexport async function dealInfo({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, piece, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const invocation = DealTracker.dealInfo.invoke({\n    issuer,\n    /* c8 ignore next */\n    audience: audience ?? services.DEAL_TRACKER.principal,\n    with: resource,\n    nb: {\n      piece\n    },\n    proofs\n  });\n  return await invocation.execute(conn);\n}","map":{"version":3,"names":["connect","CAR","HTTP","DealTracker","services","connection","id","DEAL_TRACKER","principal","codec","outbound","channel","open","url","method","dealInfo","issuer","with","resource","proofs","audience","piece","options","conn","invocation","invoke","nb","execute"],"sources":["../../src/deal-tracker.js"],"sourcesContent":[null],"mappings":"AAAA,SAASA,OAAO,QAAQ,gBAAgB;AACxC,SAASC,GAAG,EAAEC,IAAI,QAAQ,mBAAmB;AAC7C,OAAO,KAAKC,WAAW,MAAM,kDAAkD;AAC/E,SAASC,QAAQ,QAAQ,cAAc;AAEvC;;;;AAKA;AACA,OAAO,MAAMC,UAAU,GAAGL,OAAO,CAAC;EAChCM,EAAE,EAAEF,QAAQ,CAACG,YAAY,CAACC,SAAS;EACnCC,KAAK,EAAER,GAAG,CAACS,QAAQ;EACnBC,OAAO,EAAET,IAAI,CAACU,IAAI,CAAC;IACjBC,GAAG,EAAET,QAAQ,CAACG,YAAY,CAACM,GAAG;IAC9BC,MAAM,EAAE;GACT;CACF,CAAC;AAEF;;;;;;;;;;;;;;;;AAgBA,OAAO,eAAeC,QAAQA,CAC5B;EAAEC,MAAM;EAAEC,IAAI,EAAEC,QAAQ;EAAEC,MAAM;EAAEC;AAAQ,CAAE,EAC5CC,KAAK,EACLC,OAAO,GAAG,EAAE;EAEZ;EACA,MAAMC,IAAI,GAAGD,OAAO,CAACjB,UAAU,IAAIA,UAAU;EAE7C,MAAMmB,UAAU,GAAGrB,WAAW,CAACY,QAAQ,CAACU,MAAM,CAAC;IAC7CT,MAAM;IACN;IACAI,QAAQ,EAAEA,QAAQ,IAAIhB,QAAQ,CAACG,YAAY,CAACC,SAAS;IACrDS,IAAI,EAAEC,QAAQ;IACdQ,EAAE,EAAE;MACFL;KACD;IACDF;GACD,CAAC;EAEF,OAAO,MAAMK,UAAU,CAACG,OAAO,CAACJ,IAAI,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}