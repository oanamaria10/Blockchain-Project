{"ast":null,"code":"import * as API from '../../api.js';\nimport { EXPANDED_BYTES_PER_QUAD, EXPANDED_BYTES_PER_NODE } from '../../constant.js';\nimport { log2Ceil, onesCount64 } from '../../uint64.js';\nexport { toExpanded as fromPadded, fromExpanded as toPadded } from './padded.js';\nexport { toExpanded as fromUnpadded } from './unpadded.js';\n\n/**\n * Validates that given `size` is a valid {@link API.PieceSize} that is a\n * power of 2. Returns {@link API.Result} with `PaddedPieceSize` ok case and an\n * Error in the error case.\n *\n * @see https://github.com/filecoin-project/go-state-types/blob/ff2ed169ff566458f2acd8b135d62e8ca27e7d0c/abi/piece.go#L18-L29\n *\n * @param {number|API.uint64} input\n * @returns {API.Result<API.PieceSize, RangeError>}\n */\nexport const tryFrom = input => {\n  const size = BigInt(input);\n  if (size < EXPANDED_BYTES_PER_QUAD) {\n    return {\n      error: RangeError(`Minimum piece size is ${EXPANDED_BYTES_PER_QUAD} bytes`)\n    };\n  }\n  if (onesCount64(size) !== 1) {\n    return {\n      error: RangeError('Piece size must be a power of 2')\n    };\n  }\n  return {\n    ok: size\n  };\n};\n\n/**\n * Validates that given `size` is a valid {@link API.PieceSize} and\n * returns {@link API.PieceSize} capturing the validation at the type\n * level. If given `size` is not a valid `PaddedPieceSize` throws an error.\n *\n * This function is a variation on {@link validate} that throws exceptions\n * instead of returning a {@link API.Result}.\n *\n * @param {number|API.uint64} size\n */\nexport const from = size => {\n  const result = tryFrom(size);\n  if (result.error) {\n    throw result.error;\n  } else {\n    return result.ok;\n  }\n};\n\n/**\n * Calculates the {@link API.PieceSize} for the given height of the piece tree.\n *\n * @param {number} height\n * @returns {API.PieceSize}\n */\nexport const fromHeight = height => fromWidth(2n ** BigInt(height));\n\n/**\n * Calculates the height of the piece tree from unpadded size.\n *\n * @param {API.PieceSize} size\n */\nexport const toHeight = size => log2Ceil(toWidth(size));\n\n/**\n * Takes piece tree width (leaf count) and returns corresponding\n * {@link API.PieceSize}.\n *\n * @param {API.uint64} width\n * @returns {API.PieceSize}\n */\nexport const fromWidth = width => width * EXPANDED_BYTES_PER_NODE;\n\n/**\n * Takes `{@link API.PaddedPieceSize}` and returns corresponding\n * piece tree width (leaf count).\n *\n * @param {API.PieceSize} size\n */\nexport const toWidth = size => size / EXPANDED_BYTES_PER_NODE;","map":{"version":3,"names":["API","EXPANDED_BYTES_PER_QUAD","EXPANDED_BYTES_PER_NODE","log2Ceil","onesCount64","toExpanded","fromPadded","fromExpanded","toPadded","fromUnpadded","tryFrom","input","size","BigInt","error","RangeError","ok","from","result","fromHeight","height","fromWidth","toHeight","toWidth","width"],"sources":["C:/FACULTATE/Proiect/node_modules/@web3-storage/data-segment/src/piece/size/expanded.js"],"sourcesContent":["import * as API from '../../api.js'\nimport {\n  EXPANDED_BYTES_PER_QUAD,\n  EXPANDED_BYTES_PER_NODE,\n} from '../../constant.js'\nimport { log2Ceil, onesCount64 } from '../../uint64.js'\n\nexport { toExpanded as fromPadded, fromExpanded as toPadded } from './padded.js'\nexport { toExpanded as fromUnpadded } from './unpadded.js'\n\n/**\n * Validates that given `size` is a valid {@link API.PieceSize} that is a\n * power of 2. Returns {@link API.Result} with `PaddedPieceSize` ok case and an\n * Error in the error case.\n *\n * @see https://github.com/filecoin-project/go-state-types/blob/ff2ed169ff566458f2acd8b135d62e8ca27e7d0c/abi/piece.go#L18-L29\n *\n * @param {number|API.uint64} input\n * @returns {API.Result<API.PieceSize, RangeError>}\n */\nexport const tryFrom = (input) => {\n  const size = BigInt(input)\n  if (size < EXPANDED_BYTES_PER_QUAD) {\n    return {\n      error: RangeError(\n        `Minimum piece size is ${EXPANDED_BYTES_PER_QUAD} bytes`\n      ),\n    }\n  }\n\n  if (onesCount64(size) !== 1) {\n    return { error: RangeError('Piece size must be a power of 2') }\n  }\n\n  return { ok: size }\n}\n\n/**\n * Validates that given `size` is a valid {@link API.PieceSize} and\n * returns {@link API.PieceSize} capturing the validation at the type\n * level. If given `size` is not a valid `PaddedPieceSize` throws an error.\n *\n * This function is a variation on {@link validate} that throws exceptions\n * instead of returning a {@link API.Result}.\n *\n * @param {number|API.uint64} size\n */\nexport const from = (size) => {\n  const result = tryFrom(size)\n  if (result.error) {\n    throw result.error\n  } else {\n    return result.ok\n  }\n}\n\n/**\n * Calculates the {@link API.PieceSize} for the given height of the piece tree.\n *\n * @param {number} height\n * @returns {API.PieceSize}\n */\nexport const fromHeight = (height) => fromWidth(2n ** BigInt(height))\n\n/**\n * Calculates the height of the piece tree from unpadded size.\n *\n * @param {API.PieceSize} size\n */\nexport const toHeight = (size) => log2Ceil(toWidth(size))\n\n/**\n * Takes piece tree width (leaf count) and returns corresponding\n * {@link API.PieceSize}.\n *\n * @param {API.uint64} width\n * @returns {API.PieceSize}\n */\nexport const fromWidth = (width) => width * EXPANDED_BYTES_PER_NODE\n\n/**\n * Takes `{@link API.PaddedPieceSize}` and returns corresponding\n * piece tree width (leaf count).\n *\n * @param {API.PieceSize} size\n */\nexport const toWidth = (size) => size / EXPANDED_BYTES_PER_NODE\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,cAAc;AACnC,SACEC,uBAAuB,EACvBC,uBAAuB,QAClB,mBAAmB;AAC1B,SAASC,QAAQ,EAAEC,WAAW,QAAQ,iBAAiB;AAEvD,SAASC,UAAU,IAAIC,UAAU,EAAEC,YAAY,IAAIC,QAAQ,QAAQ,aAAa;AAChF,SAASH,UAAU,IAAII,YAAY,QAAQ,eAAe;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAIC,KAAK,IAAK;EAChC,MAAMC,IAAI,GAAGC,MAAM,CAACF,KAAK,CAAC;EAC1B,IAAIC,IAAI,GAAGX,uBAAuB,EAAE;IAClC,OAAO;MACLa,KAAK,EAAEC,UAAU,CACd,yBAAwBd,uBAAwB,QACnD;IACF,CAAC;EACH;EAEA,IAAIG,WAAW,CAACQ,IAAI,CAAC,KAAK,CAAC,EAAE;IAC3B,OAAO;MAAEE,KAAK,EAAEC,UAAU,CAAC,iCAAiC;IAAE,CAAC;EACjE;EAEA,OAAO;IAAEC,EAAE,EAAEJ;EAAK,CAAC;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,IAAI,GAAIL,IAAI,IAAK;EAC5B,MAAMM,MAAM,GAAGR,OAAO,CAACE,IAAI,CAAC;EAC5B,IAAIM,MAAM,CAACJ,KAAK,EAAE;IAChB,MAAMI,MAAM,CAACJ,KAAK;EACpB,CAAC,MAAM;IACL,OAAOI,MAAM,CAACF,EAAE;EAClB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,UAAU,GAAIC,MAAM,IAAKC,SAAS,CAAC,EAAE,IAAIR,MAAM,CAACO,MAAM,CAAC,CAAC;;AAErE;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,QAAQ,GAAIV,IAAI,IAAKT,QAAQ,CAACoB,OAAO,CAACX,IAAI,CAAC,CAAC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,SAAS,GAAIG,KAAK,IAAKA,KAAK,GAAGtB,uBAAuB;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMqB,OAAO,GAAIX,IAAI,IAAKA,IAAI,GAAGV,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}