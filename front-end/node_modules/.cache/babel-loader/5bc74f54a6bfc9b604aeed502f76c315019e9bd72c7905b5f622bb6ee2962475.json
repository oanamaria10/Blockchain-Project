{"ast":null,"code":"import * as API from '@ucanto/interface';\nimport { delegate, Delegation, isDelegation } from './delegation.js';\nimport * as DAG from './dag.js';\n\n/**\n * Takes invocation link or a reference and returns `true` if value\n * passed is a reference, returns `false` if value is a link.\n *\n * @param {API.Invocation | API.Link} value\n * @return {value is API.Invocation}\n */\nexport const isInvocation = value => isDelegation(value);\n\n/**\n * @template {API.Capability} Capability\n * @param {API.InvocationOptions<Capability>} options\n * @return {API.IssuedInvocationView<Capability>}\n */\nexport const invoke = options => new IssuedInvocation(options);\n\n/**\n * @template {API.Capability} C\n * @param {object} dag\n * @param {API.UCANBlock<[C]>} dag.root\n * @param {DAG.BlockStore} [dag.blocks]\n * @returns {API.Invocation<C>}\n */\nexport const create = ({\n  root,\n  blocks\n}) => new Invocation(root, blocks);\n\n/**\n * Takes a link of the `root` block and a map of blocks and constructs an\n * `Invocation` from it. If `root` is not included in the provided blocks\n * provided fallback is returned and if not provided than throws an error.\n * If root points to wrong block (that is not an invocation) it will misbehave\n * and likely throw some errors on field access.\n *\n * @template {API.Capability} C\n * @template {API.Invocation} Invocation\n * @template [T=never]\n * @param {object} dag\n * @param {API.UCANLink<[C]>} dag.root\n * @param {DAG.BlockStore} dag.blocks\n * @param {T} [fallback]\n * @returns {API.Invocation<C>|T}\n */\nexport const view = ({\n  root,\n  blocks\n}, fallback) => {\n  const block = DAG.get(root, blocks, null);\n  if (block == null) {\n    return fallback !== undefined ? fallback : DAG.notFound(root);\n  }\n  return /** @type {API.Invocation<C>} */create({\n    root: block,\n    blocks\n  });\n};\n\n/**\n * @template {API.Capability} Capability\n * @implements {API.IssuedInvocationView<Capability>}\n * @implements {API.IssuedInvocation<Capability>}\n */\nclass IssuedInvocation {\n  /**\n   * @param {API.InvocationOptions<Capability>} data\n   */\n  constructor({\n    issuer,\n    audience,\n    capability,\n    proofs = [],\n    expiration,\n    lifetimeInSeconds,\n    notBefore,\n    nonce,\n    facts = []\n  }) {\n    /** @readonly */\n    this.issuer = issuer;\n    /** @readonly */\n    this.audience = audience;\n    /** @readonly */\n    this.proofs = proofs;\n\n    /**\n     * @readonly\n     * @type {[Capability]}\n     */\n    this.capabilities = [capability];\n    this.expiration = expiration;\n    this.lifetimeInSeconds = lifetimeInSeconds;\n    this.notBefore = notBefore;\n    this.nonce = nonce;\n    this.facts = facts;\n\n    /** @type {API.BlockStore<unknown>} */\n    this.attachedBlocks = new Map();\n  }\n\n  /**\n   * @param {API.Block} block\n   */\n  attach(block) {\n    this.attachedBlocks.set(`${block.cid}`, block);\n  }\n  delegate() {\n    return delegate(this);\n  }\n  buildIPLDView() {\n    return delegate(this);\n  }\n\n  /**\n   * @template {API.InvocationService<Capability>} Service\n   * @param {API.ConnectionView<Service>} connection\n   * @returns {Promise<API.InferReceipt<Capability, Service>>}\n   */\n  async execute(connection) {\n    /** @type {API.ServiceInvocation<Capability, Service>} */\n    // @ts-expect-error - Our `API.InvocationService<Capability>` constraint\n    // does not seem to be enough to convince TS that `this` is valid\n    // `ServiceInvocations<Service>`.\n    const invocation = this;\n    const [result] = await connection.execute(invocation);\n    return result;\n  }\n}\n\n/**\n * @template {API.Capability} Capability\n * @implements {API.Invocation<Capability>}\n * @extends {Delegation<[Capability]>}\n */\nexport class Invocation extends Delegation {}","map":{"version":3,"names":["API","delegate","Delegation","isDelegation","DAG","isInvocation","value","invoke","options","IssuedInvocation","create","root","blocks","Invocation","view","fallback","block","get","undefined","notFound","constructor","issuer","audience","capability","proofs","expiration","lifetimeInSeconds","notBefore","nonce","facts","capabilities","attachedBlocks","Map","attach","set","cid","buildIPLDView","execute","connection","invocation","result"],"sources":["C:/FACULTATE/Proiect/node_modules/@ucanto/core/src/invocation.js"],"sourcesContent":["import * as API from '@ucanto/interface'\nimport { delegate, Delegation, isDelegation } from './delegation.js'\nimport * as DAG from './dag.js'\n\n/**\n * Takes invocation link or a reference and returns `true` if value\n * passed is a reference, returns `false` if value is a link.\n *\n * @param {API.Invocation | API.Link} value\n * @return {value is API.Invocation}\n */\nexport const isInvocation = value => isDelegation(value)\n\n/**\n * @template {API.Capability} Capability\n * @param {API.InvocationOptions<Capability>} options\n * @return {API.IssuedInvocationView<Capability>}\n */\nexport const invoke = options => new IssuedInvocation(options)\n\n/**\n * @template {API.Capability} C\n * @param {object} dag\n * @param {API.UCANBlock<[C]>} dag.root\n * @param {DAG.BlockStore} [dag.blocks]\n * @returns {API.Invocation<C>}\n */\nexport const create = ({ root, blocks }) => new Invocation(root, blocks)\n\n/**\n * Takes a link of the `root` block and a map of blocks and constructs an\n * `Invocation` from it. If `root` is not included in the provided blocks\n * provided fallback is returned and if not provided than throws an error.\n * If root points to wrong block (that is not an invocation) it will misbehave\n * and likely throw some errors on field access.\n *\n * @template {API.Capability} C\n * @template {API.Invocation} Invocation\n * @template [T=never]\n * @param {object} dag\n * @param {API.UCANLink<[C]>} dag.root\n * @param {DAG.BlockStore} dag.blocks\n * @param {T} [fallback]\n * @returns {API.Invocation<C>|T}\n */\nexport const view = ({ root, blocks }, fallback) => {\n  const block = DAG.get(root, blocks, null)\n  if (block == null) {\n    return fallback !== undefined ? fallback : DAG.notFound(root)\n  }\n\n  return /** @type {API.Invocation<C>} */ (create({ root: block, blocks }))\n}\n\n/**\n * @template {API.Capability} Capability\n * @implements {API.IssuedInvocationView<Capability>}\n * @implements {API.IssuedInvocation<Capability>}\n */\nclass IssuedInvocation {\n  /**\n   * @param {API.InvocationOptions<Capability>} data\n   */\n  constructor({\n    issuer,\n    audience,\n    capability,\n    proofs = [],\n    expiration,\n    lifetimeInSeconds,\n    notBefore,\n    nonce,\n    facts = [],\n  }) {\n    /** @readonly */\n    this.issuer = issuer\n    /** @readonly */\n    this.audience = audience\n    /** @readonly */\n    this.proofs = proofs\n\n    /**\n     * @readonly\n     * @type {[Capability]}\n     */\n    this.capabilities = [capability]\n\n    this.expiration = expiration\n    this.lifetimeInSeconds = lifetimeInSeconds\n    this.notBefore = notBefore\n    this.nonce = nonce\n    this.facts = facts\n\n    /** @type {API.BlockStore<unknown>} */\n    this.attachedBlocks = new Map()\n  }\n\n  /**\n   * @param {API.Block} block\n   */\n  attach(block) {\n    this.attachedBlocks.set(`${block.cid}`, block)\n  }\n\n  delegate() {\n    return delegate(this)\n  }\n\n  buildIPLDView() {\n    return delegate(this)\n  }\n\n  /**\n   * @template {API.InvocationService<Capability>} Service\n   * @param {API.ConnectionView<Service>} connection\n   * @returns {Promise<API.InferReceipt<Capability, Service>>}\n   */\n  async execute(connection) {\n    /** @type {API.ServiceInvocation<Capability, Service>} */\n    // @ts-expect-error - Our `API.InvocationService<Capability>` constraint\n    // does not seem to be enough to convince TS that `this` is valid\n    // `ServiceInvocations<Service>`.\n    const invocation = this\n    const [result] = await connection.execute(invocation)\n    return result\n  }\n}\n\n/**\n * @template {API.Capability} Capability\n * @implements {API.Invocation<Capability>}\n * @extends {Delegation<[Capability]>}\n */\nexport class Invocation extends Delegation {}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}