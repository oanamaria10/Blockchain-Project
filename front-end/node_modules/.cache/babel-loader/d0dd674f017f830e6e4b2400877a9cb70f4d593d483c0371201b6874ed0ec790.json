{"ast":null,"code":"\"use strict\";\n\nimport { AbiCoder, checkResultErrors, ConstructorFragment, defaultAbiCoder, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, Indexed, Interface, LogDescription, ParamType, TransactionDescription } from \"@ethersproject/abi\";\nimport { getAddress, getCreate2Address, getContractAddress, getIcapAddress, isAddress } from \"@ethersproject/address\";\nimport * as base64 from \"@ethersproject/base64\";\nimport { Base58 as base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexConcat, hexDataSlice, hexDataLength, hexlify, hexStripZeros, hexValue, hexZeroPad, isBytes, isBytesLike, isHexString, joinSignature, zeroPad, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder, dnsEncode, hashMessage, id, isValidName, namehash } from \"@ethersproject/hash\";\nimport { defaultPath, entropyToMnemonic, getAccountPath, HDNode, isValidMnemonic, mnemonicToEntropy, mnemonicToSeed } from \"@ethersproject/hdnode\";\nimport { getJsonWalletAddress } from \"@ethersproject/json-wallets\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { computeHmac, ripemd160, sha256, sha512 } from \"@ethersproject/sha2\";\nimport { keccak256 as solidityKeccak256, pack as solidityPack, sha256 as soliditySha256 } from \"@ethersproject/solidity\";\nimport { randomBytes, shuffled } from \"@ethersproject/random\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey, SigningKey } from \"@ethersproject/signing-key\";\nimport { formatBytes32String, nameprep, parseBytes32String, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs } from \"@ethersproject/strings\";\nimport { accessListify, computeAddress, parse as parseTransaction, recoverAddress, serialize as serializeTransaction, TransactionTypes } from \"@ethersproject/transactions\";\nimport { commify, formatEther, parseEther, formatUnits, parseUnits } from \"@ethersproject/units\";\nimport { verifyMessage, verifyTypedData } from \"@ethersproject/wallet\";\nimport { _fetchData, fetchJson, poll } from \"@ethersproject/web\";\n////////////////////////\n// Enums\nimport { SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { UnicodeNormalizationForm, Utf8ErrorReason } from \"@ethersproject/strings\";\n////////////////////////\n// Exports\nexport { AbiCoder, defaultAbiCoder, Fragment, ConstructorFragment, ErrorFragment, EventFragment, FunctionFragment, ParamType, FormatTypes, checkResultErrors, Logger, RLP, _fetchData, fetchJson, poll, checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy, arrayify, concat, stripZeros, zeroPad, isBytes, isBytesLike, defaultPath, HDNode, SigningKey, Interface, LogDescription, TransactionDescription, base58, base64, hexlify, isHexString, hexConcat, hexStripZeros, hexValue, hexZeroPad, hexDataLength, hexDataSlice, nameprep, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs, formatBytes32String, parseBytes32String, dnsEncode, hashMessage, namehash, isValidName, id, _TypedDataEncoder, getAddress, getIcapAddress, getContractAddress, getCreate2Address, isAddress, formatEther, parseEther, formatUnits, parseUnits, commify, computeHmac, keccak256, ripemd160, sha256, sha512, randomBytes, shuffled, solidityPack, solidityKeccak256, soliditySha256, splitSignature, joinSignature, accessListify, parseTransaction, serializeTransaction, TransactionTypes, getJsonWalletAddress, computeAddress, recoverAddress, computePublicKey, recoverPublicKey, verifyMessage, verifyTypedData, getAccountPath, mnemonicToEntropy, entropyToMnemonic, isValidMnemonic, mnemonicToSeed,\n////////////////////////\n// Enums\nSupportedAlgorithm, UnicodeNormalizationForm, Utf8ErrorReason, Indexed };","map":{"version":3,"names":["AbiCoder","checkResultErrors","ConstructorFragment","defaultAbiCoder","ErrorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","Indexed","Interface","LogDescription","ParamType","TransactionDescription","getAddress","getCreate2Address","getContractAddress","getIcapAddress","isAddress","base64","Base58","base58","arrayify","concat","hexConcat","hexDataSlice","hexDataLength","hexlify","hexStripZeros","hexValue","hexZeroPad","isBytes","isBytesLike","isHexString","joinSignature","zeroPad","splitSignature","stripZeros","_TypedDataEncoder","dnsEncode","hashMessage","id","isValidName","namehash","defaultPath","entropyToMnemonic","getAccountPath","HDNode","isValidMnemonic","mnemonicToEntropy","mnemonicToSeed","getJsonWalletAddress","keccak256","Logger","computeHmac","ripemd160","sha256","sha512","solidityKeccak256","pack","solidityPack","soliditySha256","randomBytes","shuffled","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","RLP","computePublicKey","recoverPublicKey","SigningKey","formatBytes32String","nameprep","parseBytes32String","_toEscapedUtf8String","toUtf8Bytes","toUtf8CodePoints","toUtf8String","Utf8ErrorFuncs","accessListify","computeAddress","parse","parseTransaction","recoverAddress","serialize","serializeTransaction","TransactionTypes","commify","formatEther","parseEther","formatUnits","parseUnits","verifyMessage","verifyTypedData","_fetchData","fetchJson","poll","SupportedAlgorithm","UnicodeNormalizationForm","Utf8ErrorReason"],"sources":["C:/Users/Oana/Desktop/Blockchain/Blockchain-Project/node_modules/ethers/lib.esm/utils.js"],"sourcesContent":["\"use strict\";\nimport { AbiCoder, checkResultErrors, ConstructorFragment, defaultAbiCoder, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, Indexed, Interface, LogDescription, ParamType, TransactionDescription } from \"@ethersproject/abi\";\nimport { getAddress, getCreate2Address, getContractAddress, getIcapAddress, isAddress } from \"@ethersproject/address\";\nimport * as base64 from \"@ethersproject/base64\";\nimport { Base58 as base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexConcat, hexDataSlice, hexDataLength, hexlify, hexStripZeros, hexValue, hexZeroPad, isBytes, isBytesLike, isHexString, joinSignature, zeroPad, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder, dnsEncode, hashMessage, id, isValidName, namehash } from \"@ethersproject/hash\";\nimport { defaultPath, entropyToMnemonic, getAccountPath, HDNode, isValidMnemonic, mnemonicToEntropy, mnemonicToSeed } from \"@ethersproject/hdnode\";\nimport { getJsonWalletAddress } from \"@ethersproject/json-wallets\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { computeHmac, ripemd160, sha256, sha512 } from \"@ethersproject/sha2\";\nimport { keccak256 as solidityKeccak256, pack as solidityPack, sha256 as soliditySha256 } from \"@ethersproject/solidity\";\nimport { randomBytes, shuffled } from \"@ethersproject/random\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey, SigningKey } from \"@ethersproject/signing-key\";\nimport { formatBytes32String, nameprep, parseBytes32String, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs } from \"@ethersproject/strings\";\nimport { accessListify, computeAddress, parse as parseTransaction, recoverAddress, serialize as serializeTransaction, TransactionTypes } from \"@ethersproject/transactions\";\nimport { commify, formatEther, parseEther, formatUnits, parseUnits } from \"@ethersproject/units\";\nimport { verifyMessage, verifyTypedData } from \"@ethersproject/wallet\";\nimport { _fetchData, fetchJson, poll } from \"@ethersproject/web\";\n////////////////////////\n// Enums\nimport { SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { UnicodeNormalizationForm, Utf8ErrorReason } from \"@ethersproject/strings\";\n////////////////////////\n// Exports\nexport { AbiCoder, defaultAbiCoder, Fragment, ConstructorFragment, ErrorFragment, EventFragment, FunctionFragment, ParamType, FormatTypes, checkResultErrors, Logger, RLP, _fetchData, fetchJson, poll, checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy, arrayify, concat, stripZeros, zeroPad, isBytes, isBytesLike, defaultPath, HDNode, SigningKey, Interface, LogDescription, TransactionDescription, base58, base64, hexlify, isHexString, hexConcat, hexStripZeros, hexValue, hexZeroPad, hexDataLength, hexDataSlice, nameprep, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs, formatBytes32String, parseBytes32String, dnsEncode, hashMessage, namehash, isValidName, id, _TypedDataEncoder, getAddress, getIcapAddress, getContractAddress, getCreate2Address, isAddress, formatEther, parseEther, formatUnits, parseUnits, commify, computeHmac, keccak256, ripemd160, sha256, sha512, randomBytes, shuffled, solidityPack, solidityKeccak256, soliditySha256, splitSignature, joinSignature, accessListify, parseTransaction, serializeTransaction, TransactionTypes, getJsonWalletAddress, computeAddress, recoverAddress, computePublicKey, recoverPublicKey, verifyMessage, verifyTypedData, getAccountPath, mnemonicToEntropy, entropyToMnemonic, isValidMnemonic, mnemonicToSeed, \n////////////////////////\n// Enums\nSupportedAlgorithm, UnicodeNormalizationForm, Utf8ErrorReason, Indexed };\n//# sourceMappingURL=utils.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}