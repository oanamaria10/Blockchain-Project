{"ast":null,"code":"import * as UCAN from \"./ucan.js\";\nimport * as json from \"@ipld/dag-json\";\nimport * as Schema from \"./schema.js\";\nimport { base64url } from \"multiformats/bases/base64\";\nimport { createNamed as createSignature } from \"./signature.js\";\n\n/**\n * Parse JWT formatted UCAN. Note than no validation takes place here.\n *\n * @template {UCAN.Capabilities} C\n * @param {UCAN.JWT<C>|string} jwt\n * @returns {UCAN.Model<C>}\n */\nexport const parse = jwt => {\n  const segments = jwt.split(\".\");\n  const [header, payload, signature] = segments.length === 3 ? segments : Schema.throw(`Can't parse UCAN: ${jwt}: Expected JWT format: 3 dot-separated base64url-encoded values.`);\n  const {\n    ucv,\n    alg\n  } = parseHeader(header);\n  return {\n    ...parsePayload(payload),\n    v: ucv,\n    s: createSignature(alg, base64url.baseDecode(signature))\n  };\n};\n\n/**\n * @param {string} header\n */\nexport const parseHeader = header => {\n  const {\n    ucv,\n    alg,\n    typ\n  } = json.decode(base64url.baseDecode(header));\n  return {\n    typ: Schema.readLiteral(typ, \"JWT\", \"typ\"),\n    ucv: Schema.readVersion(ucv, \"ucv\"),\n    alg: Schema.readString(alg, \"alg\")\n  };\n};\n\n/**\n * @template {UCAN.Capabilities} C\n * @param {string} source\n * @returns {UCAN.Payload<C>}\n */\nexport const parsePayload = source => {\n  /** @type {Record<string, unknown>} */\n  const payload = json.decode(base64url.baseDecode(source));\n  return Schema.readJWTPayload(payload);\n};","map":{"version":3,"names":["UCAN","json","Schema","base64url","createNamed","createSignature","parse","jwt","segments","split","header","payload","signature","length","throw","ucv","alg","parseHeader","parsePayload","v","s","baseDecode","typ","decode","readLiteral","readVersion","readString","source","readJWTPayload"],"sources":["C:/FACULTATE/Proiect/node_modules/@ipld/dag-ucan/src/parser.js"],"sourcesContent":["import * as UCAN from \"./ucan.js\"\nimport * as json from \"@ipld/dag-json\"\nimport * as Schema from \"./schema.js\"\nimport { base64url } from \"multiformats/bases/base64\"\nimport { createNamed as createSignature } from \"./signature.js\"\n\n/**\n * Parse JWT formatted UCAN. Note than no validation takes place here.\n *\n * @template {UCAN.Capabilities} C\n * @param {UCAN.JWT<C>|string} jwt\n * @returns {UCAN.Model<C>}\n */\nexport const parse = jwt => {\n  const segments = jwt.split(\".\")\n  const [header, payload, signature] =\n    segments.length === 3\n      ? segments\n      : Schema.throw(\n          `Can't parse UCAN: ${jwt}: Expected JWT format: 3 dot-separated base64url-encoded values.`\n        )\n\n  const { ucv, alg } = parseHeader(header)\n\n  return {\n    ...parsePayload(payload),\n    v: ucv,\n    s: createSignature(alg, base64url.baseDecode(signature)),\n  }\n}\n\n/**\n * @param {string} header\n */\nexport const parseHeader = header => {\n  const { ucv, alg, typ } = json.decode(base64url.baseDecode(header))\n\n  return {\n    typ: Schema.readLiteral(typ, \"JWT\", \"typ\"),\n    ucv: Schema.readVersion(ucv, \"ucv\"),\n    alg: Schema.readString(alg, \"alg\"),\n  }\n}\n\n/**\n * @template {UCAN.Capabilities} C\n * @param {string} source\n * @returns {UCAN.Payload<C>}\n */\nexport const parsePayload = source => {\n  /** @type {Record<string, unknown>} */\n  const payload = json.decode(base64url.baseDecode(source))\n  return Schema.readJWTPayload(payload)\n}\n"],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,WAAW;AACjC,OAAO,KAAKC,IAAI,MAAM,gBAAgB;AACtC,OAAO,KAAKC,MAAM,MAAM,aAAa;AACrC,SAASC,SAAS,QAAQ,2BAA2B;AACrD,SAASC,WAAW,IAAIC,eAAe,QAAQ,gBAAgB;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAGC,GAAG,IAAI;EAC1B,MAAMC,QAAQ,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;EAC/B,MAAM,CAACC,MAAM,EAAEC,OAAO,EAAEC,SAAS,CAAC,GAChCJ,QAAQ,CAACK,MAAM,KAAK,CAAC,GACjBL,QAAQ,GACRN,MAAM,CAACY,KAAK,CACT,qBAAoBP,GAAI,kEAC3B,CAAC;EAEP,MAAM;IAAEQ,GAAG;IAAEC;EAAI,CAAC,GAAGC,WAAW,CAACP,MAAM,CAAC;EAExC,OAAO;IACL,GAAGQ,YAAY,CAACP,OAAO,CAAC;IACxBQ,CAAC,EAAEJ,GAAG;IACNK,CAAC,EAAEf,eAAe,CAACW,GAAG,EAAEb,SAAS,CAACkB,UAAU,CAACT,SAAS,CAAC;EACzD,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMK,WAAW,GAAGP,MAAM,IAAI;EACnC,MAAM;IAAEK,GAAG;IAAEC,GAAG;IAAEM;EAAI,CAAC,GAAGrB,IAAI,CAACsB,MAAM,CAACpB,SAAS,CAACkB,UAAU,CAACX,MAAM,CAAC,CAAC;EAEnE,OAAO;IACLY,GAAG,EAAEpB,MAAM,CAACsB,WAAW,CAACF,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC;IAC1CP,GAAG,EAAEb,MAAM,CAACuB,WAAW,CAACV,GAAG,EAAE,KAAK,CAAC;IACnCC,GAAG,EAAEd,MAAM,CAACwB,UAAU,CAACV,GAAG,EAAE,KAAK;EACnC,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,YAAY,GAAGS,MAAM,IAAI;EACpC;EACA,MAAMhB,OAAO,GAAGV,IAAI,CAACsB,MAAM,CAACpB,SAAS,CAACkB,UAAU,CAACM,MAAM,CAAC,CAAC;EACzD,OAAOzB,MAAM,CAAC0B,cAAc,CAACjB,OAAO,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}