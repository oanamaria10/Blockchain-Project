{"ast":null,"code":"import * as API from '@ucanto/interface';\nimport { encodeSequence, readInt, readSequenceWith, encodeInt } from './asn1.js';\nimport { base64url } from 'multiformats/bases/base64';\nimport * as PKCS8 from './pkcs8.js';\nimport * as SPKI from './spki.js';\nimport * as PublicKey from './public-key.js';\nexport const code = 0x1305;\nconst VERSION = new Uint8Array();\n\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc3447#appendix-A.1.2\n * @typedef {object} RSAPrivateKey\n * @property {Uint8Array} v\n * @property {Uint8Array} n\n * @property {Uint8Array} e\n * @property {Uint8Array} d\n * @property {Uint8Array} p\n * @property {Uint8Array} q\n * @property {Uint8Array} dp\n * @property {Uint8Array} dq\n * @property {Uint8Array} qi\n */\n\n/**\n * Takes private-key information in [Private-Key Information Syntax](https://datatracker.ietf.org/doc/html/rfc5208#section-5)\n * and extracts all the fields as per [RSA private key syntax](https://datatracker.ietf.org/doc/html/rfc3447#appendix-A.1.2)\n *\n *\n * @param {API.ByteView<RSAPrivateKey>} source\n * @param {number} byteOffset\n * @returns {RSAPrivateKey}\n */\nexport const decode = (source, byteOffset = 0) => {\n  const [v, n, e, d, p, q, dp, dq, qi] = readSequenceWith([readInt, readInt, readInt, readInt, readInt, readInt, readInt, readInt, readInt], source, byteOffset);\n  return {\n    v,\n    n,\n    e,\n    d,\n    p,\n    q,\n    dp,\n    dq,\n    qi\n  };\n};\n\n/**\n * @param {RSAPrivateKey} key\n * @returns {API.ByteView<RSAPrivateKey>}\n */\nexport const encode = ({\n  v,\n  n,\n  e,\n  d,\n  p,\n  q,\n  dp,\n  dq,\n  qi\n}) => {\n  return encodeSequence([encodeInt(v), encodeInt(n), encodeInt(e), encodeInt(d), encodeInt(p), encodeInt(q), encodeInt(dp), encodeInt(dq), encodeInt(qi)]);\n};\n\n/**\n * @param {RSAPrivateKey} key\n * @returns {JsonWebKey}\n */\nexport const toJWK = ({\n  n,\n  e,\n  d,\n  p,\n  q,\n  dp,\n  dq,\n  qi\n}) => ({\n  kty: 'RSA',\n  alg: 'RS256',\n  key_ops: ['sign'],\n  ext: true,\n  n: base64url.baseEncode(n),\n  e: base64url.baseEncode(e),\n  d: base64url.baseEncode(d),\n  p: base64url.baseEncode(p),\n  q: base64url.baseEncode(q),\n  dp: base64url.baseEncode(dp),\n  dq: base64url.baseEncode(dq),\n  qi: base64url.baseEncode(qi)\n});\n\n/**\n * @param {JsonWebKey} key\n * @returns {RSAPrivateKey}\n */\nexport const fromJWK = ({\n  n,\n  e,\n  d,\n  p,\n  q,\n  dp,\n  dq,\n  qi\n}) => ({\n  v: VERSION,\n  n: base64urlDecode(n),\n  e: base64urlDecode(e),\n  d: base64urlDecode(d),\n  p: base64urlDecode(p),\n  q: base64urlDecode(q),\n  dp: base64urlDecode(dp),\n  dq: base64urlDecode(dq),\n  qi: base64urlDecode(qi)\n});\n\n/**\n * @param {RSAPrivateKey} key\n */\nexport const toPKCS8 = key => PKCS8.encode(encode(key));\n\n/**\n * @param {API.ByteView<PKCS8.PrivateKeyInfo>} info\n */\nexport const fromPKCS8 = info => decode(PKCS8.decode(info));\n\n/**\n * @param {RSAPrivateKey} key\n */\nexport const toSPKI = key => SPKI.encode(PublicKey.encode(key));\n\n/**\n *\n * @param {string|undefined} input\n * @returns\n */\nconst base64urlDecode = (input = '') => base64url.baseDecode(input);","map":{"version":3,"names":["API","encodeSequence","readInt","readSequenceWith","encodeInt","base64url","PKCS8","SPKI","PublicKey","code","VERSION","Uint8Array","decode","source","byteOffset","v","n","e","d","p","q","dp","dq","qi","encode","toJWK","kty","alg","key_ops","ext","baseEncode","fromJWK","base64urlDecode","toPKCS8","key","fromPKCS8","info","toSPKI","input","baseDecode"],"sources":["C:/FACULTATE/Proiect/node_modules/@ucanto/principal/src/rsa/private-key.js"],"sourcesContent":["import * as API from '@ucanto/interface'\nimport { encodeSequence, readInt, readSequenceWith, encodeInt } from './asn1.js'\nimport { base64url } from 'multiformats/bases/base64'\nimport * as PKCS8 from './pkcs8.js'\nimport * as SPKI from './spki.js'\nimport * as PublicKey from './public-key.js'\n\nexport const code = 0x1305\nconst VERSION = new Uint8Array()\n\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc3447#appendix-A.1.2\n * @typedef {object} RSAPrivateKey\n * @property {Uint8Array} v\n * @property {Uint8Array} n\n * @property {Uint8Array} e\n * @property {Uint8Array} d\n * @property {Uint8Array} p\n * @property {Uint8Array} q\n * @property {Uint8Array} dp\n * @property {Uint8Array} dq\n * @property {Uint8Array} qi\n */\n\n/**\n * Takes private-key information in [Private-Key Information Syntax](https://datatracker.ietf.org/doc/html/rfc5208#section-5)\n * and extracts all the fields as per [RSA private key syntax](https://datatracker.ietf.org/doc/html/rfc3447#appendix-A.1.2)\n *\n *\n * @param {API.ByteView<RSAPrivateKey>} source\n * @param {number} byteOffset\n * @returns {RSAPrivateKey}\n */\nexport const decode = (source, byteOffset = 0) => {\n  const [v, n, e, d, p, q, dp, dq, qi] = readSequenceWith(\n    [\n      readInt,\n      readInt,\n      readInt,\n      readInt,\n      readInt,\n      readInt,\n      readInt,\n      readInt,\n      readInt,\n    ],\n    source,\n    byteOffset\n  )\n\n  return { v, n, e, d, p, q, dp, dq, qi }\n}\n\n/**\n * @param {RSAPrivateKey} key\n * @returns {API.ByteView<RSAPrivateKey>}\n */\nexport const encode = ({ v, n, e, d, p, q, dp, dq, qi }) => {\n  return encodeSequence([\n    encodeInt(v),\n    encodeInt(n),\n    encodeInt(e),\n    encodeInt(d),\n    encodeInt(p),\n    encodeInt(q),\n    encodeInt(dp),\n    encodeInt(dq),\n    encodeInt(qi),\n  ])\n}\n\n/**\n * @param {RSAPrivateKey} key\n * @returns {JsonWebKey}\n */\nexport const toJWK = ({ n, e, d, p, q, dp, dq, qi }) => ({\n  kty: 'RSA',\n  alg: 'RS256',\n  key_ops: ['sign'],\n  ext: true,\n  n: base64url.baseEncode(n),\n  e: base64url.baseEncode(e),\n  d: base64url.baseEncode(d),\n  p: base64url.baseEncode(p),\n  q: base64url.baseEncode(q),\n  dp: base64url.baseEncode(dp),\n  dq: base64url.baseEncode(dq),\n  qi: base64url.baseEncode(qi),\n})\n\n/**\n * @param {JsonWebKey} key\n * @returns {RSAPrivateKey}\n */\nexport const fromJWK = ({ n, e, d, p, q, dp, dq, qi }) => ({\n  v: VERSION,\n  n: base64urlDecode(n),\n  e: base64urlDecode(e),\n  d: base64urlDecode(d),\n  p: base64urlDecode(p),\n  q: base64urlDecode(q),\n  dp: base64urlDecode(dp),\n  dq: base64urlDecode(dq),\n  qi: base64urlDecode(qi),\n})\n\n/**\n * @param {RSAPrivateKey} key\n */\nexport const toPKCS8 = key => PKCS8.encode(encode(key))\n\n/**\n * @param {API.ByteView<PKCS8.PrivateKeyInfo>} info\n */\nexport const fromPKCS8 = info => decode(PKCS8.decode(info))\n\n/**\n * @param {RSAPrivateKey} key\n */\nexport const toSPKI = key => SPKI.encode(PublicKey.encode(key))\n\n/**\n *\n * @param {string|undefined} input\n * @returns\n */\nconst base64urlDecode = (input = '') => base64url.baseDecode(input)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}