{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.vars = exports.experimentalAddHardhatNetworkMessageTraceHook = exports.extendProvider = exports.extendConfig = exports.extendEnvironment = exports.types = exports.scope = exports.internalTask = exports.subtask = exports.task = void 0;\nconst context_1 = require(\"../../context\");\nconst errors_1 = require(\"../errors\");\nconst errors_list_1 = require(\"../errors-list\");\nconst argumentTypes = __importStar(require(\"../params/argumentTypes\"));\nfunction task(name, descriptionOrAction, action) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n  if (descriptionOrAction === undefined) {\n    return dsl.task(name);\n  }\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.task(name, descriptionOrAction);\n  }\n  return dsl.task(name, descriptionOrAction, action);\n}\nexports.task = task;\nfunction subtask(name, descriptionOrAction, action) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n  if (descriptionOrAction === undefined) {\n    return dsl.subtask(name);\n  }\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.subtask(name, descriptionOrAction);\n  }\n  return dsl.subtask(name, descriptionOrAction, action);\n}\nexports.subtask = subtask;\n// Backwards compatibility alias\nexports.internalTask = subtask;\nfunction scope(name, description) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n  return dsl.scope(name, description);\n}\nexports.scope = scope;\nexports.types = argumentTypes;\n/**\n * Register an environment extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the Hardhat Runtime\n * Environment.\n */\nfunction extendEnvironment(extender) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.environmentExtenders.push(extender);\n}\nexports.extendEnvironment = extendEnvironment;\n/**\n * Register a config extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the resolved config\n * to be modified and the config provided by the user\n */\nfunction extendConfig(extender) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.configExtenders.push(extender);\n}\nexports.extendConfig = extendConfig;\n/**\n * Register a provider extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the current provider\n * and returns a new one.\n */\nfunction extendProvider(extender) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.providerExtenders.push(extender);\n}\nexports.extendProvider = extendProvider;\n// NOTE: This is experimental and will be removed. Please contact our team\n// if you are planning to use it.\nfunction experimentalAddHardhatNetworkMessageTraceHook(hook) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.experimentalHardhatNetworkMessageTraceHooks.push(hook);\n}\nexports.experimentalAddHardhatNetworkMessageTraceHook = experimentalAddHardhatNetworkMessageTraceHook;\n/**\n * This object provides methods to interact with the configuration variables.\n */\nexports.vars = {\n  has: hasVar,\n  get: getVar\n};\n/**\n * Checks if a configuration variable exists.\n *\n * @remarks\n * This method, when used during setup (via `npx hardhat vars setup`), will mark the variable as optional.\n *\n * @param varName - The name of the variable to check.\n *\n * @returns `true` if the variable exists, `false` otherwise.\n */\nfunction hasVar(varName) {\n  // varsManager will be an instance of VarsManager or VarsManagerSetup depending on the context (vars setup mode or not)\n  return context_1.HardhatContext.getHardhatContext().varsManager.has(varName, true);\n}\n/**\n * Gets the value of the given configuration variable.\n *\n * @remarks\n * This method, when used during setup (via `npx hardhat vars setup`), will mark the variable as required,\n * unless a default value is provided.\n *\n * @param varName - The name of the variable to retrieve.\n * @param [defaultValue] - An optional default value to return if the variable does not exist.\n *\n * @returns The value of the configuration variable if it exists, or the default value if provided.\n *\n * @throws HH1201 if the variable does not exist and no default value is set.\n */\nfunction getVar(varName, defaultValue) {\n  // varsManager will be an instance of VarsManager or VarsManagerSetup depending on the context (vars setup mode or not)\n  const value = context_1.HardhatContext.getHardhatContext().varsManager.get(varName, defaultValue, true);\n  if (value !== undefined) return value;\n  throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.VALUE_NOT_FOUND_FOR_VAR, {\n    value: varName\n  });\n}","map":{"version":3,"names":["context_1","require","errors_1","errors_list_1","argumentTypes","__importStar","task","name","descriptionOrAction","action","ctx","HardhatContext","getHardhatContext","dsl","tasksDSL","undefined","exports","subtask","internalTask","scope","description","types","extendEnvironment","extender","environmentExtenders","push","extendConfig","configExtenders","extendProvider","providerExtenders","experimentalAddHardhatNetworkMessageTraceHook","hook","experimentalHardhatNetworkMessageTraceHooks","vars","has","hasVar","get","getVar","varName","varsManager","defaultValue","value","HardhatError","ERRORS","VARS","VALUE_NOT_FOUND_FOR_VAR"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\core\\config\\config-env.ts"],"sourcesContent":["import {\n  ActionType,\n  ConfigExtender,\n  ConfigurableScopeDefinition,\n  ConfigurableTaskDefinition,\n  EnvironmentExtender,\n  ExperimentalHardhatNetworkMessageTraceHook,\n  ProviderExtender,\n  TaskArguments,\n} from \"../../../types\";\nimport { HardhatContext } from \"../../context\";\nimport { HardhatError } from \"../errors\";\nimport { ERRORS } from \"../errors-list\";\nimport * as argumentTypes from \"../params/argumentTypes\";\n\n/**\n * Creates a task, overriding any previous task with the same name.\n *\n * @remarks The action must await every async call made within it.\n *\n * @param name The task's name.\n * @param description The task's description.\n * @param action The task's action.\n * @returns A task definition.\n */\nexport function task<TaskArgumentsT extends TaskArguments>(\n  name: string,\n  description?: string,\n  action?: ActionType<TaskArgumentsT>\n): ConfigurableTaskDefinition;\n\n/**\n * Creates a task without description, overriding any previous task\n * with the same name.\n *\n * @remarks The action must await every async call made within it.\n *\n * @param name The task's name.\n * @param action The task's action.\n *\n * @returns A task definition.\n */\nexport function task<TaskArgumentsT extends TaskArguments>(\n  name: string,\n  action: ActionType<TaskArgumentsT>\n): ConfigurableTaskDefinition;\n\nexport function task<TaskArgumentsT extends TaskArguments>(\n  name: string,\n  descriptionOrAction?: string | ActionType<TaskArgumentsT>,\n  action?: ActionType<TaskArgumentsT>\n): ConfigurableTaskDefinition {\n  const ctx = HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n\n  if (descriptionOrAction === undefined) {\n    return dsl.task(name);\n  }\n\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.task(name, descriptionOrAction);\n  }\n\n  return dsl.task(name, descriptionOrAction, action);\n}\n\n/**\n * Creates a subtask, overriding any previous task with the same name.\n *\n * @remarks The subtasks won't be displayed in the CLI help messages.\n * @remarks The action must await every async call made within it.\n *\n * @param name The task's name.\n * @param description The task's description.\n * @param action The task's action.\n * @returns A task definition.\n */\nexport function subtask<TaskArgumentsT extends TaskArguments>(\n  name: string,\n  description?: string,\n  action?: ActionType<TaskArgumentsT>\n): ConfigurableTaskDefinition;\n\n/**\n * Creates a subtask without description, overriding any previous\n * task with the same name.\n *\n * @remarks The subtasks won't be displayed in the CLI help messages.\n * @remarks The action must await every async call made within it.\n *\n * @param name The task's name.\n * @param action The task's action.\n * @returns A task definition.\n */\nexport function subtask<TaskArgumentsT extends TaskArguments>(\n  name: string,\n  action: ActionType<TaskArgumentsT>\n): ConfigurableTaskDefinition;\n\nexport function subtask<TaskArgumentsT extends TaskArguments>(\n  name: string,\n  descriptionOrAction?: string | ActionType<TaskArgumentsT>,\n  action?: ActionType<TaskArgumentsT>\n): ConfigurableTaskDefinition {\n  const ctx = HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n\n  if (descriptionOrAction === undefined) {\n    return dsl.subtask(name);\n  }\n\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.subtask(name, descriptionOrAction);\n  }\n\n  return dsl.subtask(name, descriptionOrAction, action);\n}\n\n// Backwards compatibility alias\nexport const internalTask = subtask;\n\nexport function scope(\n  name: string,\n  description?: string\n): ConfigurableScopeDefinition {\n  const ctx = HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n\n  return dsl.scope(name, description);\n}\n\nexport const types = argumentTypes;\n\n/**\n * Register an environment extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the Hardhat Runtime\n * Environment.\n */\nexport function extendEnvironment(extender: EnvironmentExtender) {\n  const ctx = HardhatContext.getHardhatContext();\n  ctx.environmentExtenders.push(extender);\n}\n\n/**\n * Register a config extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the resolved config\n * to be modified and the config provided by the user\n */\nexport function extendConfig(extender: ConfigExtender) {\n  const ctx = HardhatContext.getHardhatContext();\n  ctx.configExtenders.push(extender);\n}\n\n/**\n * Register a provider extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the current provider\n * and returns a new one.\n */\nexport function extendProvider(extender: ProviderExtender) {\n  const ctx = HardhatContext.getHardhatContext();\n  ctx.providerExtenders.push(extender);\n}\n\n// NOTE: This is experimental and will be removed. Please contact our team\n// if you are planning to use it.\nexport function experimentalAddHardhatNetworkMessageTraceHook(\n  hook: ExperimentalHardhatNetworkMessageTraceHook\n) {\n  const ctx = HardhatContext.getHardhatContext();\n  ctx.experimentalHardhatNetworkMessageTraceHooks.push(hook);\n}\n\n/**\n * This object provides methods to interact with the configuration variables.\n */\nexport const vars = {\n  has: hasVar,\n  get: getVar,\n};\n\n/**\n * Checks if a configuration variable exists.\n *\n * @remarks\n * This method, when used during setup (via `npx hardhat vars setup`), will mark the variable as optional.\n *\n * @param varName - The name of the variable to check.\n *\n * @returns `true` if the variable exists, `false` otherwise.\n */\nfunction hasVar(varName: string): boolean {\n  // varsManager will be an instance of VarsManager or VarsManagerSetup depending on the context (vars setup mode or not)\n  return HardhatContext.getHardhatContext().varsManager.has(varName, true);\n}\n\n/**\n * Gets the value of the given configuration variable.\n *\n * @remarks\n * This method, when used during setup (via `npx hardhat vars setup`), will mark the variable as required,\n * unless a default value is provided.\n *\n * @param varName - The name of the variable to retrieve.\n * @param [defaultValue] - An optional default value to return if the variable does not exist.\n *\n * @returns The value of the configuration variable if it exists, or the default value if provided.\n *\n * @throws HH1201 if the variable does not exist and no default value is set.\n */\nfunction getVar(varName: string, defaultValue?: string): string {\n  // varsManager will be an instance of VarsManager or VarsManagerSetup depending on the context (vars setup mode or not)\n  const value = HardhatContext.getHardhatContext().varsManager.get(\n    varName,\n    defaultValue,\n    true\n  );\n\n  if (value !== undefined) return value;\n\n  throw new HardhatError(ERRORS.VARS.VALUE_NOT_FOUND_FOR_VAR, {\n    value: varName,\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}