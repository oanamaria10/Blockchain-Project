{"ast":null,"code":"import { CAR } from '@ucanto/transport';\nimport * as StoreCapabilities from '@web3-storage/capabilities/store';\nimport { SpaceDID } from '@web3-storage/capabilities/utils';\nimport retry, { AbortError } from 'p-retry';\nimport { servicePrincipal, connection } from './service.js';\nimport { REQUEST_RETRIES } from './constants.js';\n/**\n *\n * @param {string} url\n * @param {import('./types.js').ProgressFn} handler\n */\nfunction createUploadProgressHandler(url, handler) {\n  /**\n   *\n   * @param {import('./types.js').ProgressStatus} status\n   */\n  function onUploadProgress({\n    total,\n    loaded,\n    lengthComputable\n  }) {\n    return handler({\n      total,\n      loaded,\n      lengthComputable,\n      url\n    });\n  }\n  return onUploadProgress;\n}\n/**\n * Store a DAG encoded as a CAR file. The issuer needs the `store/add`\n * delegated capability.\n *\n * Required delegated capability proofs: `store/add`\n *\n * @param {import('./types.js').InvocationConfig} conf Configuration\n * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.\n *\n * The `issuer` is the signing authority that is issuing the UCAN\n * invocation(s). It is typically the user _agent_.\n *\n * The `with` is the resource the invocation applies to. It is typically the\n * DID of a space.\n *\n * The `proofs` are a set of capability delegations that prove the issuer\n * has the capability to perform the action.\n *\n * The issuer needs the `store/add` delegated capability.\n * @param {Blob|Uint8Array} car CAR file data.\n * @param {import('./types.js').RequestOptions} [options]\n * @returns {Promise<import('./types.js').CARLink>}\n */\nexport async function add({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, car, options = {}) {\n  // TODO: validate blob contains CAR data\n  /* c8 ignore next 2 */\n  const bytes = car instanceof Uint8Array ? car : new Uint8Array(await car.arrayBuffer());\n  const link = await CAR.codec.link(bytes);\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const result = await retry(async () => {\n    return await StoreCapabilities.add.invoke({\n      issuer,\n      /* c8 ignore next */\n      audience: audience ?? servicePrincipal,\n      with: SpaceDID.from(resource),\n      nb: {\n        link,\n        size: bytes.length\n      },\n      proofs,\n      nonce: options.nonce\n    }).execute(conn);\n  }, {\n    onFailedAttempt: console.warn,\n    retries: options.retries ?? REQUEST_RETRIES\n  });\n  if (!result.out.ok) {\n    throw new Error(`failed ${StoreCapabilities.add.can} invocation`, {\n      cause: result.out.error\n    });\n  }\n  // Return early if it was already uploaded.\n  if (result.out.ok.status === 'done') {\n    return link;\n  }\n  const responseAddUpload = result.out.ok;\n  const fetchWithUploadProgress = options.fetchWithUploadProgress || options.fetch || globalThis.fetch.bind(globalThis);\n  let fetchDidCallUploadProgressCb = false;\n  const res = await retry(async () => {\n    try {\n      const res = await fetchWithUploadProgress(responseAddUpload.url, {\n        method: 'PUT',\n        body: car,\n        headers: responseAddUpload.headers,\n        signal: options.signal,\n        onUploadProgress: status => {\n          fetchDidCallUploadProgressCb = true;\n          if (options.onUploadProgress) createUploadProgressHandler(responseAddUpload.url, options.onUploadProgress)(status);\n        },\n        // @ts-expect-error - this is needed by recent versions of node - see https://github.com/bluesky-social/atproto/pull/470 for more info\n        duplex: 'half'\n      });\n      if (res.status >= 400 && res.status < 500) {\n        throw new AbortError(`upload failed: ${res.status}`);\n      }\n      return res;\n    } catch (err) {\n      if (options.signal?.aborted === true) {\n        throw new AbortError('upload aborted');\n      }\n      throw err;\n    }\n  }, {\n    retries: options.retries ?? REQUEST_RETRIES\n  });\n  if (!fetchDidCallUploadProgressCb && options.onUploadProgress) {\n    // the fetch implementation didn't support onUploadProgress\n    const carBlob = new Blob([car]);\n    options.onUploadProgress({\n      total: carBlob.size,\n      loaded: carBlob.size,\n      lengthComputable: false\n    });\n  }\n  if (!res.ok) {\n    throw new Error(`upload failed: ${res.status}`);\n  }\n  return link;\n}\n/**\n * Get details of a stored item.\n *\n * Required delegated capability proofs: `store/get`\n *\n * @param {import('./types.js').InvocationConfig} conf Configuration\n * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.\n *\n * The `issuer` is the signing authority that is issuing the UCAN\n * invocation(s). It is typically the user _agent_.\n *\n * The `with` is the resource the invocation applies to. It is typically the\n * DID of a space.\n *\n * The `proofs` are a set of capability delegations that prove the issuer\n * has the capability to perform the action.\n *\n * The issuer needs the `store/get` delegated capability.\n * @param {import('multiformats/link').Link<unknown, CAR.codec.code>} link CID of stored CAR file.\n * @param {import('./types.js').RequestOptions} [options]\n * @returns {Promise<import('./types.js').StoreGetSuccess>}\n */\nexport async function get({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, link, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const result = await retry(async () => {\n    return await StoreCapabilities.get.invoke({\n      issuer,\n      /* c8 ignore next */\n      audience: audience ?? servicePrincipal,\n      with: SpaceDID.from(resource),\n      nb: {\n        link\n      },\n      proofs,\n      nonce: options.nonce\n    }).execute(conn);\n  }, {\n    onFailedAttempt: console.warn,\n    retries: options.retries ?? REQUEST_RETRIES\n  });\n  if (!result.out.ok) {\n    throw new Error(`failed ${StoreCapabilities.get.can} invocation`, {\n      cause: result.out.error\n    });\n  }\n  return result.out.ok;\n}\n/**\n * List CAR files stored by the issuer.\n *\n * @param {import('./types.js').InvocationConfig} conf Configuration\n * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.\n *\n * The `issuer` is the signing authority that is issuing the UCAN\n * invocation(s). It is typically the user _agent_.\n *\n * The `with` is the resource the invocation applies to. It is typically the\n * DID of a space.\n *\n * The `proofs` are a set of capability delegations that prove the issuer\n * has the capability to perform the action.\n *\n * The issuer needs the `store/list` delegated capability.\n * @param {import('./types.js').ListRequestOptions} [options]\n * @returns {Promise<import('./types.js').StoreListSuccess>}\n */\nexport async function list({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const result = await StoreCapabilities.list.invoke({\n    issuer,\n    /* c8 ignore next */\n    audience: audience ?? servicePrincipal,\n    with: SpaceDID.from(resource),\n    proofs,\n    nb: {\n      cursor: options.cursor,\n      size: options.size,\n      pre: options.pre\n    },\n    nonce: options.nonce\n  }).execute(conn);\n  if (!result.out.ok) {\n    throw new Error(`failed ${StoreCapabilities.list.can} invocation`, {\n      cause: result.out.error\n    });\n  }\n  return result.out.ok;\n}\n/**\n * Remove a stored CAR file by CAR CID.\n *\n * @param {import('./types.js').InvocationConfig} conf Configuration\n * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.\n *\n * The `issuer` is the signing authority that is issuing the UCAN\n * invocation(s). It is typically the user _agent_.\n *\n * The `with` is the resource the invocation applies to. It is typically the\n * DID of a space.\n *\n * The `proofs` are a set of capability delegations that prove the issuer\n * has the capability to perform the action.\n *\n * The issuer needs the `store/remove` delegated capability.\n * @param {import('./types.js').CARLink} link CID of CAR file to remove.\n * @param {import('./types.js').RequestOptions} [options]\n */\nexport async function remove({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, link, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const result = await StoreCapabilities.remove.invoke({\n    issuer,\n    /* c8 ignore next */\n    audience: audience ?? servicePrincipal,\n    with: SpaceDID.from(resource),\n    nb: {\n      link\n    },\n    proofs,\n    nonce: options.nonce\n  }).execute(conn);\n  if (!result.out.ok) {\n    throw new Error(`failed ${StoreCapabilities.remove.can} invocation`, {\n      cause: result.out.error\n    });\n  }\n  return result.out;\n}","map":{"version":3,"names":["CAR","StoreCapabilities","SpaceDID","retry","AbortError","servicePrincipal","connection","REQUEST_RETRIES","createUploadProgressHandler","url","handler","onUploadProgress","total","loaded","lengthComputable","add","issuer","with","resource","proofs","audience","car","options","bytes","Uint8Array","arrayBuffer","link","codec","conn","result","invoke","from","nb","size","length","nonce","execute","onFailedAttempt","console","warn","retries","out","ok","Error","can","cause","error","status","responseAddUpload","fetchWithUploadProgress","fetch","globalThis","bind","fetchDidCallUploadProgressCb","res","method","body","headers","signal","duplex","err","aborted","carBlob","Blob","get","list","cursor","pre","remove"],"sources":["../../src/store.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}