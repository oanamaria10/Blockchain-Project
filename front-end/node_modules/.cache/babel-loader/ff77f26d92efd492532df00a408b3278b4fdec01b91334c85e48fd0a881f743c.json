{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport { logger, timestampWithMs } from '@sentry/utils';\nimport { SpanRecorder } from './span';\nimport { SpanStatus } from './spanstatus';\nimport { Transaction } from './transaction';\nexport var DEFAULT_IDLE_TIMEOUT = 1000;\n/**\n * @inheritDoc\n */\nvar IdleTransactionSpanRecorder = /** @class */function (_super) {\n  __extends(IdleTransactionSpanRecorder, _super);\n  function IdleTransactionSpanRecorder(_pushActivity, _popActivity, transactionSpanId, maxlen) {\n    if (transactionSpanId === void 0) {\n      transactionSpanId = '';\n    }\n    var _this = _super.call(this, maxlen) || this;\n    _this._pushActivity = _pushActivity;\n    _this._popActivity = _popActivity;\n    _this.transactionSpanId = transactionSpanId;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n  IdleTransactionSpanRecorder.prototype.add = function (span) {\n    var _this = this;\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = function (endTimestamp) {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n        _this._popActivity(span.spanId);\n      };\n      // We should only push new activities if the span does not have an end timestamp.\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n    _super.prototype.add.call(this, span);\n  };\n  return IdleTransactionSpanRecorder;\n}(SpanRecorder);\nexport { IdleTransactionSpanRecorder };\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nvar IdleTransaction = /** @class */function (_super) {\n  __extends(IdleTransaction, _super);\n  function IdleTransaction(transactionContext, _idleHub,\n  // The time to wait in ms until the idle transaction will be finished. Default: 1000\n  _idleTimeout,\n  // If an idle transaction should be put itself on and off the scope automatically.\n  _onScope) {\n    if (_idleTimeout === void 0) {\n      _idleTimeout = DEFAULT_IDLE_TIMEOUT;\n    }\n    if (_onScope === void 0) {\n      _onScope = false;\n    }\n    var _this = _super.call(this, transactionContext, _idleHub) || this;\n    _this._idleHub = _idleHub;\n    _this._idleTimeout = _idleTimeout;\n    _this._onScope = _onScope;\n    // Activities store a list of active spans\n    _this.activities = {};\n    // Stores reference to the timeout that calls _beat().\n    _this._heartbeatTimer = 0;\n    // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n    _this._heartbeatCounter = 0;\n    // We should not use heartbeat if we finished a transaction\n    _this._finished = false;\n    _this._beforeFinishCallbacks = [];\n    if (_idleHub && _onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub);\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      logger.log(\"Setting idle transaction on scope. Span ID: \" + _this.spanId);\n      _idleHub.configureScope(function (scope) {\n        return scope.setSpan(_this);\n      });\n    }\n    return _this;\n  }\n  /** {@inheritDoc} */\n  IdleTransaction.prototype.finish = function (endTimestamp) {\n    var e_1, _a;\n    var _this = this;\n    if (endTimestamp === void 0) {\n      endTimestamp = timestampWithMs();\n    }\n    this._finished = true;\n    this.activities = {};\n    if (this.spanRecorder) {\n      logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n      try {\n        for (var _b = __values(this._beforeFinishCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var callback = _c.value;\n          callback(this, endTimestamp);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      this.spanRecorder.spans = this.spanRecorder.spans.filter(function (span) {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === _this.spanId) {\n          return true;\n        }\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus(SpanStatus.Cancelled);\n          logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n        var keepSpan = span.startTimestamp < endTimestamp;\n        if (!keepSpan) {\n          logger.log('[Tracing] discarding Span since it happened after Transaction was finished', JSON.stringify(span, undefined, 2));\n        }\n        return keepSpan;\n      });\n      // this._onScope is true if the transaction was previously on the scope.\n      if (this._onScope) {\n        clearActiveTransaction(this._idleHub);\n      }\n      logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      logger.log('[Tracing] No active IdleTransaction');\n    }\n    return _super.prototype.finish.call(this, endTimestamp);\n  };\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  IdleTransaction.prototype.registerBeforeFinishCallback = function (callback) {\n    this._beforeFinishCallbacks.push(callback);\n  };\n  /**\n   * @inheritDoc\n   */\n  IdleTransaction.prototype.initSpanRecorder = function (maxlen) {\n    var _this = this;\n    if (!this.spanRecorder) {\n      this._initTimeout = setTimeout(function () {\n        if (!_this._finished) {\n          _this.finish();\n        }\n      }, this._idleTimeout);\n      var pushActivity = function (id) {\n        if (_this._finished) {\n          return;\n        }\n        _this._pushActivity(id);\n      };\n      var popActivity = function (id) {\n        if (_this._finished) {\n          return;\n        }\n        _this._popActivity(id);\n      };\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n      // Start heartbeat so that transactions do not run forever.\n      logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    this.spanRecorder.add(this);\n  };\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  IdleTransaction.prototype._pushActivity = function (spanId) {\n    if (this._initTimeout) {\n      clearTimeout(this._initTimeout);\n      this._initTimeout = undefined;\n    }\n    logger.log(\"[Tracing] pushActivity: \" + spanId);\n    this.activities[spanId] = true;\n    logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  };\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  IdleTransaction.prototype._popActivity = function (spanId) {\n    var _this = this;\n    if (this.activities[spanId]) {\n      logger.log(\"[Tracing] popActivity \" + spanId);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n    if (Object.keys(this.activities).length === 0) {\n      var timeout = this._idleTimeout;\n      // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n      var end_1 = timestampWithMs() + timeout / 1000;\n      setTimeout(function () {\n        if (!_this._finished) {\n          _this.finish(end_1);\n        }\n      }, timeout);\n    }\n  };\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  IdleTransaction.prototype._beat = function () {\n    clearTimeout(this._heartbeatTimer);\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n    var keys = Object.keys(this.activities);\n    var heartbeatString = keys.length ? keys.reduce(function (prev, current) {\n      return prev + current;\n    }) : '';\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n    this._prevHeartbeatString = heartbeatString;\n    if (this._heartbeatCounter >= 3) {\n      logger.log(\"[Tracing] Transaction finished because of no change for 3 heart beats\");\n      this.setStatus(SpanStatus.DeadlineExceeded);\n      this.setTag('heartbeat', 'failed');\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  };\n  /**\n   * Pings the heartbeat\n   */\n  IdleTransaction.prototype._pingHeartbeat = function () {\n    var _this = this;\n    logger.log(\"pinging Heartbeat -> current counter: \" + this._heartbeatCounter);\n    this._heartbeatTimer = setTimeout(function () {\n      _this._beat();\n    }, 5000);\n  };\n  return IdleTransaction;\n}(Transaction);\nexport { IdleTransaction };\n/**\n * Reset active transaction on scope\n */\nfunction clearActiveTransaction(hub) {\n  if (hub) {\n    var scope = hub.getScope();\n    if (scope) {\n      var transaction = scope.getTransaction();\n      if (transaction) {\n        scope.setSpan(undefined);\n      }\n    }\n  }\n}","map":{"version":3,"names":["logger","timestampWithMs","SpanRecorder","SpanStatus","Transaction","DEFAULT_IDLE_TIMEOUT","IdleTransactionSpanRecorder","_super","__extends","_pushActivity","_popActivity","transactionSpanId","maxlen","_this","call","prototype","add","span","spanId","finish","endTimestamp","undefined","IdleTransaction","transactionContext","_idleHub","_idleTimeout","_onScope","activities","_heartbeatTimer","_heartbeatCounter","_finished","_beforeFinishCallbacks","clearActiveTransaction","log","configureScope","scope","setSpan","spanRecorder","Date","toISOString","op","_b","__values","_c","next","done","callback","value","spans","filter","setStatus","Cancelled","JSON","stringify","keepSpan","startTimestamp","registerBeforeFinishCallback","push","initSpanRecorder","_initTimeout","setTimeout","pushActivity","id","popActivity","_pingHeartbeat","clearTimeout","Object","keys","length","timeout","end_1","_beat","heartbeatString","reduce","prev","current","_prevHeartbeatString","DeadlineExceeded","setTag","hub","getScope","transaction","getTransaction"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\tracing\\src\\idletransaction.ts"],"sourcesContent":["import { Hub } from '@sentry/hub';\nimport { TransactionContext } from '@sentry/types';\nimport { logger, timestampWithMs } from '@sentry/utils';\n\nimport { Span, SpanRecorder } from './span';\nimport { SpanStatus } from './spanstatus';\nimport { Transaction } from './transaction';\n\nexport const DEFAULT_IDLE_TIMEOUT = 1000;\n\n/**\n * @inheritDoc\n */\nexport class IdleTransactionSpanRecorder extends SpanRecorder {\n  public constructor(\n    private readonly _pushActivity: (id: string) => void,\n    private readonly _popActivity: (id: string) => void,\n    public transactionSpanId: string = '',\n    maxlen?: number,\n  ) {\n    super(maxlen);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(span: Span): void {\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = (endTimestamp?: number) => {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n        this._popActivity(span.spanId);\n      };\n\n      // We should only push new activities if the span does not have an end timestamp.\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n\n    super.add(span);\n  }\n}\n\nexport type BeforeFinishCallback = (transactionSpan: IdleTransaction, endTimestamp: number) => void;\n\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nexport class IdleTransaction extends Transaction {\n  // Activities store a list of active spans\n  public activities: Record<string, boolean> = {};\n\n  // Stores reference to the timeout that calls _beat().\n  private _heartbeatTimer: number = 0;\n\n  // Track state of activities in previous heartbeat\n  private _prevHeartbeatString: string | undefined;\n\n  // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n  private _heartbeatCounter: number = 0;\n\n  // We should not use heartbeat if we finished a transaction\n  private _finished: boolean = false;\n\n  private readonly _beforeFinishCallbacks: BeforeFinishCallback[] = [];\n\n  // If a transaction is created and no activities are added, we want to make sure that\n  // it times out properly. This is cleared and not used when activities are added.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _initTimeout: any;\n\n  public constructor(\n    transactionContext: TransactionContext,\n    private readonly _idleHub?: Hub,\n    // The time to wait in ms until the idle transaction will be finished. Default: 1000\n    private readonly _idleTimeout: number = DEFAULT_IDLE_TIMEOUT,\n    // If an idle transaction should be put itself on and off the scope automatically.\n    private readonly _onScope: boolean = false,\n  ) {\n    super(transactionContext, _idleHub);\n\n    if (_idleHub && _onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub);\n\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      logger.log(`Setting idle transaction on scope. Span ID: ${this.spanId}`);\n      _idleHub.configureScope(scope => scope.setSpan(this));\n    }\n  }\n\n  /** {@inheritDoc} */\n  public finish(endTimestamp: number = timestampWithMs()): string | undefined {\n    this._finished = true;\n    this.activities = {};\n\n    if (this.spanRecorder) {\n      logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n      for (const callback of this._beforeFinishCallbacks) {\n        callback(this, endTimestamp);\n      }\n\n      this.spanRecorder.spans = this.spanRecorder.spans.filter((span: Span) => {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === this.spanId) {\n          return true;\n        }\n\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus(SpanStatus.Cancelled);\n          logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        const keepSpan = span.startTimestamp < endTimestamp;\n        if (!keepSpan) {\n          logger.log(\n            '[Tracing] discarding Span since it happened after Transaction was finished',\n            JSON.stringify(span, undefined, 2),\n          );\n        }\n        return keepSpan;\n      });\n\n      // this._onScope is true if the transaction was previously on the scope.\n      if (this._onScope) {\n        clearActiveTransaction(this._idleHub);\n      }\n\n      logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      logger.log('[Tracing] No active IdleTransaction');\n    }\n\n    return super.finish(endTimestamp);\n  }\n\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  public registerBeforeFinishCallback(callback: BeforeFinishCallback): void {\n    this._beforeFinishCallbacks.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public initSpanRecorder(maxlen?: number): void {\n    if (!this.spanRecorder) {\n      this._initTimeout = setTimeout(() => {\n        if (!this._finished) {\n          this.finish();\n        }\n      }, this._idleTimeout);\n\n      const pushActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._pushActivity(id);\n      };\n      const popActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._popActivity(id);\n      };\n\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n\n      // Start heartbeat so that transactions do not run forever.\n      logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  private _pushActivity(spanId: string): void {\n    if (this._initTimeout) {\n      clearTimeout(this._initTimeout);\n      this._initTimeout = undefined;\n    }\n    logger.log(`[Tracing] pushActivity: ${spanId}`);\n    this.activities[spanId] = true;\n    logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  private _popActivity(spanId: string): void {\n    if (this.activities[spanId]) {\n      logger.log(`[Tracing] popActivity ${spanId}`);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      const timeout = this._idleTimeout;\n      // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n      const end = timestampWithMs() + timeout / 1000;\n\n      setTimeout(() => {\n        if (!this._finished) {\n          this.finish(end);\n        }\n      }, timeout);\n    }\n  }\n\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  private _beat(): void {\n    clearTimeout(this._heartbeatTimer);\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n\n    const keys = Object.keys(this.activities);\n    const heartbeatString = keys.length ? keys.reduce((prev: string, current: string) => prev + current) : '';\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      logger.log(`[Tracing] Transaction finished because of no change for 3 heart beats`);\n      this.setStatus(SpanStatus.DeadlineExceeded);\n      this.setTag('heartbeat', 'failed');\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  }\n\n  /**\n   * Pings the heartbeat\n   */\n  private _pingHeartbeat(): void {\n    logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);\n    this._heartbeatTimer = (setTimeout(() => {\n      this._beat();\n    }, 5000) as unknown) as number;\n  }\n}\n\n/**\n * Reset active transaction on scope\n */\nfunction clearActiveTransaction(hub?: Hub): void {\n  if (hub) {\n    const scope = hub.getScope();\n    if (scope) {\n      const transaction = scope.getTransaction();\n      if (transaction) {\n        scope.setSpan(undefined);\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}