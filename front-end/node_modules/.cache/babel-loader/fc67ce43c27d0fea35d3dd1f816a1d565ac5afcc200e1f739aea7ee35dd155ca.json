{"ast":null,"code":"import * as API from '@ucanto/interface';\n\n/**\n * @param {API.DID} did\n * @param {API.PrincipalParser[]} parsers\n * @return {API.Verifier}\n */\nconst parseWith = (did, parsers) => {\n  if (did.startsWith('did:')) {\n    for (const parser of parsers) {\n      try {\n        return parser.parse(did);\n      } catch (_) {}\n    }\n    throw new Error(`Unsupported did ${did}`);\n  } else {\n    throw new Error(`Expected did instead got ${did}`);\n  }\n};\n\n/**\n * @param {API.PrincipalParser} left\n * @param {API.PrincipalParser} right\n * @returns {API.ComposedDIDParser}\n */\nexport const or = (left, right) => new Parser([left, right]);\n\n/**\n * @implements {API.ComposedDIDParser}\n */\nclass Parser {\n  /**\n   * @param {API.PrincipalParser[]} variants\n   */\n  constructor(variants) {\n    this.variants = variants;\n  }\n\n  /**\n   * @param {API.DID} did\n   */\n  parse(did) {\n    return parseWith(did, this.variants);\n  }\n\n  /**\n   * @param {API.PrincipalParser} parser\n   */\n  or(parser) {\n    return new Parser([...this.variants, parser]);\n  }\n}\n\n/**\n * @template {API.DID} ID\n * @template {API.MulticodecCode} SigAlg\n * @param {API.VerifierKey<SigAlg>} key\n * @param {ID} id\n * @returns {API.Verifier<ID, SigAlg>}\n */\nexport const withDID = (key, id) => new VerifierWithDID(id, key);\n\n/**\n * @template {API.DID} ID\n * @template {API.MulticodecCode} SigAlg\n * @implements {API.Verifier<ID, SigAlg>}\n */\nclass VerifierWithDID {\n  /**\n   * @param {ID} id\n   * @param {API.VerifierKey<SigAlg>} key\n   */\n  constructor(id, key) {\n    this.id = id;\n    this.key = key;\n  }\n  did() {\n    return this.id;\n  }\n  toDIDKey() {\n    return this.key.toDIDKey();\n  }\n\n  /**\n   * @template T\n   * @param {API.ByteView<T>} payload\n   * @param {API.Signature<T, SigAlg>} signature\n   * @returns {API.Await<boolean>}\n   */\n  verify(payload, signature) {\n    return this.key.verify(payload, signature);\n  }\n\n  /**\n   * @template {API.DID} ID\n   * @param {ID} id\n   */\n  withDID(id) {\n    return withDID(this.key, id);\n  }\n}","map":{"version":3,"names":["API","parseWith","did","parsers","startsWith","parser","parse","_","Error","or","left","right","Parser","constructor","variants","withDID","key","id","VerifierWithDID","toDIDKey","verify","payload","signature"],"sources":["C:/FACULTATE/Proiect/node_modules/@ucanto/principal/src/verifier.js"],"sourcesContent":["import * as API from '@ucanto/interface'\n\n/**\n * @param {API.DID} did\n * @param {API.PrincipalParser[]} parsers\n * @return {API.Verifier}\n */\nconst parseWith = (did, parsers) => {\n  if (did.startsWith('did:')) {\n    for (const parser of parsers) {\n      try {\n        return parser.parse(did)\n      } catch (_) {}\n    }\n    throw new Error(`Unsupported did ${did}`)\n  } else {\n    throw new Error(`Expected did instead got ${did}`)\n  }\n}\n\n/**\n * @param {API.PrincipalParser} left\n * @param {API.PrincipalParser} right\n * @returns {API.ComposedDIDParser}\n */\nexport const or = (left, right) => new Parser([left, right])\n\n/**\n * @implements {API.ComposedDIDParser}\n */\nclass Parser {\n  /**\n   * @param {API.PrincipalParser[]} variants\n   */\n  constructor(variants) {\n    this.variants = variants\n  }\n\n  /**\n   * @param {API.DID} did\n   */\n  parse(did) {\n    return parseWith(did, this.variants)\n  }\n\n  /**\n   * @param {API.PrincipalParser} parser\n   */\n  or(parser) {\n    return new Parser([...this.variants, parser])\n  }\n}\n\n/**\n * @template {API.DID} ID\n * @template {API.MulticodecCode} SigAlg\n * @param {API.VerifierKey<SigAlg>} key\n * @param {ID} id\n * @returns {API.Verifier<ID, SigAlg>}\n */\nexport const withDID = (key, id) => new VerifierWithDID(id, key)\n\n/**\n * @template {API.DID} ID\n * @template {API.MulticodecCode} SigAlg\n * @implements {API.Verifier<ID, SigAlg>}\n */\nclass VerifierWithDID {\n  /**\n   * @param {ID} id\n   * @param {API.VerifierKey<SigAlg>} key\n   */\n  constructor(id, key) {\n    this.id = id\n    this.key = key\n  }\n  did() {\n    return this.id\n  }\n\n  toDIDKey() {\n    return this.key.toDIDKey()\n  }\n\n  /**\n   * @template T\n   * @param {API.ByteView<T>} payload\n   * @param {API.Signature<T, SigAlg>} signature\n   * @returns {API.Await<boolean>}\n   */\n  verify(payload, signature) {\n    return this.key.verify(payload, signature)\n  }\n\n  /**\n   * @template {API.DID} ID\n   * @param {ID} id\n   */\n  withDID(id) {\n    return withDID(this.key, id)\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,mBAAmB;;AAExC;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAGA,CAACC,GAAG,EAAEC,OAAO,KAAK;EAClC,IAAID,GAAG,CAACE,UAAU,CAAC,MAAM,CAAC,EAAE;IAC1B,KAAK,MAAMC,MAAM,IAAIF,OAAO,EAAE;MAC5B,IAAI;QACF,OAAOE,MAAM,CAACC,KAAK,CAACJ,GAAG,CAAC;MAC1B,CAAC,CAAC,OAAOK,CAAC,EAAE,CAAC;IACf;IACA,MAAM,IAAIC,KAAK,CAAE,mBAAkBN,GAAI,EAAC,CAAC;EAC3C,CAAC,MAAM;IACL,MAAM,IAAIM,KAAK,CAAE,4BAA2BN,GAAI,EAAC,CAAC;EACpD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,EAAE,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK,IAAIC,MAAM,CAAC,CAACF,IAAI,EAAEC,KAAK,CAAC,CAAC;;AAE5D;AACA;AACA;AACA,MAAMC,MAAM,CAAC;EACX;AACF;AACA;EACEC,WAAWA,CAACC,QAAQ,EAAE;IACpB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;;EAEA;AACF;AACA;EACER,KAAKA,CAACJ,GAAG,EAAE;IACT,OAAOD,SAAS,CAACC,GAAG,EAAE,IAAI,CAACY,QAAQ,CAAC;EACtC;;EAEA;AACF;AACA;EACEL,EAAEA,CAACJ,MAAM,EAAE;IACT,OAAO,IAAIO,MAAM,CAAC,CAAC,GAAG,IAAI,CAACE,QAAQ,EAAET,MAAM,CAAC,CAAC;EAC/C;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,OAAO,GAAGA,CAACC,GAAG,EAAEC,EAAE,KAAK,IAAIC,eAAe,CAACD,EAAE,EAAED,GAAG,CAAC;;AAEhE;AACA;AACA;AACA;AACA;AACA,MAAME,eAAe,CAAC;EACpB;AACF;AACA;AACA;EACEL,WAAWA,CAACI,EAAE,EAAED,GAAG,EAAE;IACnB,IAAI,CAACC,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACD,GAAG,GAAGA,GAAG;EAChB;EACAd,GAAGA,CAAA,EAAG;IACJ,OAAO,IAAI,CAACe,EAAE;EAChB;EAEAE,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACH,GAAG,CAACG,QAAQ,CAAC,CAAC;EAC5B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,MAAMA,CAACC,OAAO,EAAEC,SAAS,EAAE;IACzB,OAAO,IAAI,CAACN,GAAG,CAACI,MAAM,CAACC,OAAO,EAAEC,SAAS,CAAC;EAC5C;;EAEA;AACF;AACA;AACA;EACEP,OAAOA,CAACE,EAAE,EAAE;IACV,OAAOF,OAAO,CAAC,IAAI,CAACC,GAAG,EAAEC,EAAE,CAAC;EAC9B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}