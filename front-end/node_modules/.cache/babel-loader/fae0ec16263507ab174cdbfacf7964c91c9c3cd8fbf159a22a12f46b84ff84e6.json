{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getConfiguredCompilers = exports.analyzeModuleNotFoundError = exports.loadConfigAndTasks = exports.resolveConfigPath = exports.importCsjOrEsModule = void 0;\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst semver_1 = __importDefault(require(\"semver\"));\nconst context_1 = require(\"../../context\");\nconst packageInfo_1 = require(\"../../util/packageInfo\");\nconst errors_1 = require(\"../errors\");\nconst errors_list_1 = require(\"../errors-list\");\nconst project_structure_1 = require(\"../project-structure\");\nconst constants_1 = require(\"../../hardhat-network/stack-traces/constants\");\nconst config_resolution_1 = require(\"./config-resolution\");\nconst default_config_1 = require(\"./default-config\");\nconst log = (0, debug_1.default)(\"hardhat:core:config\");\nfunction importCsjOrEsModule(filePath) {\n  try {\n    const imported = require(filePath);\n    return imported.default !== undefined ? imported.default : imported;\n  } catch (e) {\n    if (e.code === \"ERR_REQUIRE_ESM\") {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.ESM_PROJECT_WITHOUT_CJS_CONFIG, {}, e);\n    }\n    // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n    throw e;\n  }\n}\nexports.importCsjOrEsModule = importCsjOrEsModule;\nfunction resolveConfigPath(configPath) {\n  if (configPath === undefined) {\n    configPath = (0, project_structure_1.getUserConfigPath)();\n  } else {\n    if (!path_1.default.isAbsolute(configPath)) {\n      configPath = path_1.default.join(process.cwd(), configPath);\n      configPath = path_1.default.normalize(configPath);\n    }\n  }\n  return configPath;\n}\nexports.resolveConfigPath = resolveConfigPath;\nfunction loadConfigAndTasks(hardhatArguments, {\n  showEmptyConfigWarning = false,\n  showSolidityConfigWarnings = false\n} = {\n  showEmptyConfigWarning: false,\n  showSolidityConfigWarnings: false\n}) {\n  const {\n    validateConfig,\n    validateResolvedConfig\n  } = require(\"./config-validation\");\n  let configPath = hardhatArguments !== undefined ? hardhatArguments.config : undefined;\n  configPath = resolveConfigPath(configPath);\n  log(`Loading Hardhat config from ${configPath}`);\n  // Before loading the builtin tasks, the default and user's config we expose\n  // the config env in the global object.\n  const configEnv = require(\"./config-env\");\n  const globalAsAny = global;\n  Object.entries(configEnv).forEach(([key, value]) => globalAsAny[key] = value);\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.setConfigLoadingAsStarted();\n  let userConfig;\n  try {\n    require(\"../tasks/builtin-tasks\");\n    userConfig = importCsjOrEsModule(configPath);\n  } catch (e) {\n    analyzeModuleNotFoundError(e, configPath);\n    // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n    throw e;\n  } finally {\n    ctx.setConfigLoadingAsFinished();\n  }\n  if (showEmptyConfigWarning) {\n    checkEmptyConfig(userConfig, {\n      showSolidityConfigWarnings\n    });\n  }\n  validateConfig(userConfig);\n  if (showSolidityConfigWarnings) {\n    checkMissingSolidityConfig(userConfig);\n  }\n  // To avoid bad practices we remove the previously exported stuff\n  Object.keys(configEnv).forEach(key => globalAsAny[key] = undefined);\n  const frozenUserConfig = deepFreezeUserConfig(userConfig);\n  const resolved = (0, config_resolution_1.resolveConfig)(configPath, userConfig);\n  for (const extender of context_1.HardhatContext.getHardhatContext().configExtenders) {\n    extender(resolved, frozenUserConfig);\n  }\n  validateResolvedConfig(resolved);\n  if (showSolidityConfigWarnings) {\n    checkUnsupportedSolidityConfig(resolved);\n    checkUnsupportedRemappings(resolved);\n  }\n  return {\n    resolvedConfig: resolved,\n    userConfig: frozenUserConfig\n  };\n}\nexports.loadConfigAndTasks = loadConfigAndTasks;\nfunction deepFreezeUserConfig(config, propertyPath = []) {\n  if (typeof config !== \"object\" || config === null) {\n    return config;\n  }\n  return new Proxy(config, {\n    get(target, property, receiver) {\n      return deepFreezeUserConfig(Reflect.get(target, property, receiver), [...propertyPath, property]);\n    },\n    set(target, property, _value, _receiver) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.USER_CONFIG_MODIFIED, {\n        path: [...propertyPath, property].map(pathPart => pathPart.toString()).join(\".\")\n      });\n    }\n  });\n}\n/**\n * Receives an Error and checks if it's a MODULE_NOT_FOUND and the reason that\n * caused it.\n *\n * If it can infer the reason, it throws an appropiate error. Otherwise it does\n * nothing.\n */\nfunction analyzeModuleNotFoundError(error, configPath) {\n  const stackTraceParser = require(\"stacktrace-parser\");\n  if (error.code !== \"MODULE_NOT_FOUND\") {\n    return;\n  }\n  const stackTrace = stackTraceParser.parse(error.stack);\n  const throwingFile = stackTrace.filter(x => x.file !== null).map(x => x.file)\n  // ignore frames related to source map support\n  .filter(x => !x.includes(path_1.default.join(\"@cspotcode\", \"source-map-support\"))).find(x => path_1.default.isAbsolute(x));\n  if (throwingFile === null || throwingFile === undefined) {\n    return;\n  }\n  // if the error comes from the config file, we ignore it because we know it's\n  // a direct import that's missing\n  if (throwingFile === configPath) {\n    return;\n  }\n  const packageJsonPath = (0, packageInfo_1.findClosestPackageJson)(throwingFile);\n  if (packageJsonPath === null) {\n    return;\n  }\n  const packageJson = fs_extra_1.default.readJsonSync(packageJsonPath);\n  const peerDependencies = packageJson.peerDependencies ?? {};\n  if (peerDependencies[\"@nomiclabs/buidler\"] !== undefined) {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.PLUGINS.BUIDLER_PLUGIN, {\n      plugin: packageJson.name\n    });\n  }\n  // if the problem doesn't come from a hardhat plugin, we ignore it\n  if (peerDependencies.hardhat === undefined) {\n    return;\n  }\n  const missingPeerDependencies = {};\n  for (const [peerDependency, version] of Object.entries(peerDependencies)) {\n    const peerDependencyPackageJson = readPackageJson(peerDependency, configPath);\n    if (peerDependencyPackageJson === undefined) {\n      missingPeerDependencies[peerDependency] = version;\n    }\n  }\n  const missingPeerDependenciesNames = Object.keys(missingPeerDependencies);\n  if (missingPeerDependenciesNames.length > 0) {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.PLUGINS.MISSING_DEPENDENCIES, {\n      plugin: packageJson.name,\n      missingDependencies: missingPeerDependenciesNames.join(\", \"),\n      missingDependenciesVersions: Object.entries(missingPeerDependencies).map(([name, version]) => `\"${name}@${version}\"`).join(\" \")\n    });\n  }\n}\nexports.analyzeModuleNotFoundError = analyzeModuleNotFoundError;\nfunction readPackageJson(packageName, configPath) {\n  const resolve = require(\"resolve\");\n  try {\n    const packageJsonPath = resolve.sync(path_1.default.join(packageName, \"package.json\"), {\n      basedir: path_1.default.dirname(configPath)\n    });\n    return require(packageJsonPath);\n  } catch {\n    return undefined;\n  }\n}\nfunction checkEmptyConfig(userConfig, {\n  showSolidityConfigWarnings\n}) {\n  if (userConfig === undefined || Object.keys(userConfig).length === 0) {\n    let warning = `Hardhat config is returning an empty config object, check the export from the config file if this is unexpected.\\n`;\n    // This 'learn more' section is also printed by the solidity config warning,\n    // so we need to check to avoid printing it twice\n    if (!showSolidityConfigWarnings) {\n      warning += `\\nLearn more about configuring Hardhat at https://hardhat.org/config\\n`;\n    }\n    console.warn(chalk_1.default.yellow(warning));\n  }\n}\nfunction checkMissingSolidityConfig(userConfig) {\n  if (userConfig.solidity === undefined) {\n    console.warn(chalk_1.default.yellow(`Solidity compiler is not configured. Version ${default_config_1.DEFAULT_SOLC_VERSION} will be used by default. Add a 'solidity' entry to your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`));\n  }\n}\nfunction checkUnsupportedSolidityConfig(resolvedConfig) {\n  const configuredCompilers = getConfiguredCompilers(resolvedConfig.solidity);\n  const solcVersions = configuredCompilers.map(x => x.version);\n  const unsupportedVersions = [];\n  for (const solcVersion of solcVersions) {\n    if (!semver_1.default.satisfies(solcVersion, constants_1.SUPPORTED_SOLIDITY_VERSION_RANGE) && !unsupportedVersions.includes(solcVersion)) {\n      unsupportedVersions.push(solcVersion);\n    }\n  }\n  if (unsupportedVersions.length > 0) {\n    console.warn(chalk_1.default.yellow(`Solidity ${unsupportedVersions.join(\", \")} ${unsupportedVersions.length === 1 ? \"is\" : \"are\"} not fully supported yet. You can still use Hardhat, but some features, like stack traces, might not work correctly.\n\nLearn more at https://hardhat.org/hardhat-runner/docs/reference/solidity-support\n`));\n  }\n}\nfunction checkUnsupportedRemappings({\n  solidity\n}) {\n  const solcConfigs = [...solidity.compilers, ...Object.values(solidity.overrides)];\n  const remappings = solcConfigs.filter(({\n    settings\n  }) => settings.remappings !== undefined);\n  if (remappings.length > 0) {\n    console.warn(chalk_1.default.yellow(`Solidity remappings are not currently supported; you may experience unexpected compilation results. Remove any 'remappings' fields from your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`));\n  }\n}\nfunction getConfiguredCompilers(solidityConfig) {\n  const compilerVersions = solidityConfig.compilers;\n  const overrideVersions = Object.values(solidityConfig.overrides);\n  return [...compilerVersions, ...overrideVersions];\n}\nexports.getConfiguredCompilers = getConfiguredCompilers;","map":{"version":3,"names":["chalk_1","__importDefault","require","debug_1","fs_extra_1","path_1","semver_1","context_1","packageInfo_1","errors_1","errors_list_1","project_structure_1","constants_1","config_resolution_1","default_config_1","log","default","importCsjOrEsModule","filePath","imported","undefined","e","code","HardhatError","ERRORS","GENERAL","ESM_PROJECT_WITHOUT_CJS_CONFIG","exports","resolveConfigPath","configPath","getUserConfigPath","isAbsolute","join","process","cwd","normalize","loadConfigAndTasks","hardhatArguments","showEmptyConfigWarning","showSolidityConfigWarnings","validateConfig","validateResolvedConfig","config","configEnv","globalAsAny","global","Object","entries","forEach","key","value","ctx","HardhatContext","getHardhatContext","setConfigLoadingAsStarted","userConfig","analyzeModuleNotFoundError","setConfigLoadingAsFinished","checkEmptyConfig","checkMissingSolidityConfig","keys","frozenUserConfig","deepFreezeUserConfig","resolved","resolveConfig","extender","configExtenders","checkUnsupportedSolidityConfig","checkUnsupportedRemappings","resolvedConfig","propertyPath","Proxy","get","target","property","receiver","Reflect","set","_value","_receiver","USER_CONFIG_MODIFIED","path","map","pathPart","toString","error","stackTraceParser","stackTrace","parse","stack","throwingFile","filter","x","file","includes","find","packageJsonPath","findClosestPackageJson","packageJson","readJsonSync","peerDependencies","PLUGINS","BUIDLER_PLUGIN","plugin","name","hardhat","missingPeerDependencies","peerDependency","version","peerDependencyPackageJson","readPackageJson","missingPeerDependenciesNames","length","MISSING_DEPENDENCIES","missingDependencies","missingDependenciesVersions","packageName","resolve","sync","basedir","dirname","warning","console","warn","yellow","solidity","DEFAULT_SOLC_VERSION","configuredCompilers","getConfiguredCompilers","solcVersions","unsupportedVersions","solcVersion","satisfies","SUPPORTED_SOLIDITY_VERSION_RANGE","push","solcConfigs","compilers","values","overrides","remappings","settings","solidityConfig","compilerVersions","overrideVersions"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\core\\config\\config-loading.ts"],"sourcesContent":["import type StackTraceParserT from \"stacktrace-parser\";\n\nimport chalk from \"chalk\";\nimport debug from \"debug\";\nimport fsExtra from \"fs-extra\";\nimport path from \"path\";\nimport semver from \"semver\";\n\nimport {\n  HardhatArguments,\n  HardhatConfig,\n  HardhatUserConfig,\n  SolcConfig,\n} from \"../../../types\";\nimport { HardhatContext } from \"../../context\";\nimport { findClosestPackageJson } from \"../../util/packageInfo\";\nimport { HardhatError } from \"../errors\";\nimport { ERRORS } from \"../errors-list\";\nimport { getUserConfigPath } from \"../project-structure\";\n\nimport { SUPPORTED_SOLIDITY_VERSION_RANGE } from \"../../hardhat-network/stack-traces/constants\";\nimport { resolveConfig } from \"./config-resolution\";\nimport { DEFAULT_SOLC_VERSION } from \"./default-config\";\n\nconst log = debug(\"hardhat:core:config\");\n\nexport function importCsjOrEsModule(filePath: string): any {\n  try {\n    const imported = require(filePath);\n    return imported.default !== undefined ? imported.default : imported;\n  } catch (e: any) {\n    if (e.code === \"ERR_REQUIRE_ESM\") {\n      throw new HardhatError(\n        ERRORS.GENERAL.ESM_PROJECT_WITHOUT_CJS_CONFIG,\n        {},\n        e\n      );\n    }\n\n    // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n    throw e;\n  }\n}\n\nexport function resolveConfigPath(configPath: string | undefined) {\n  if (configPath === undefined) {\n    configPath = getUserConfigPath();\n  } else {\n    if (!path.isAbsolute(configPath)) {\n      configPath = path.join(process.cwd(), configPath);\n      configPath = path.normalize(configPath);\n    }\n  }\n  return configPath;\n}\n\nexport function loadConfigAndTasks(\n  hardhatArguments?: Partial<HardhatArguments>,\n  {\n    showEmptyConfigWarning = false,\n    showSolidityConfigWarnings = false,\n  }: {\n    showEmptyConfigWarning?: boolean;\n    showSolidityConfigWarnings?: boolean;\n  } = {\n    showEmptyConfigWarning: false,\n    showSolidityConfigWarnings: false,\n  }\n): { resolvedConfig: HardhatConfig; userConfig: HardhatUserConfig } {\n  const { validateConfig, validateResolvedConfig } =\n    require(\"./config-validation\") as typeof import(\"./config-validation\");\n  let configPath =\n    hardhatArguments !== undefined ? hardhatArguments.config : undefined;\n\n  configPath = resolveConfigPath(configPath);\n  log(`Loading Hardhat config from ${configPath}`);\n  // Before loading the builtin tasks, the default and user's config we expose\n  // the config env in the global object.\n  const configEnv = require(\"./config-env\");\n\n  const globalAsAny: any = global;\n\n  Object.entries(configEnv).forEach(\n    ([key, value]) => (globalAsAny[key] = value)\n  );\n\n  const ctx = HardhatContext.getHardhatContext();\n\n  ctx.setConfigLoadingAsStarted();\n\n  let userConfig;\n\n  try {\n    require(\"../tasks/builtin-tasks\");\n    userConfig = importCsjOrEsModule(configPath);\n  } catch (e) {\n    analyzeModuleNotFoundError(e, configPath);\n\n    // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n    throw e;\n  } finally {\n    ctx.setConfigLoadingAsFinished();\n  }\n\n  if (showEmptyConfigWarning) {\n    checkEmptyConfig(userConfig, { showSolidityConfigWarnings });\n  }\n\n  validateConfig(userConfig);\n\n  if (showSolidityConfigWarnings) {\n    checkMissingSolidityConfig(userConfig);\n  }\n\n  // To avoid bad practices we remove the previously exported stuff\n  Object.keys(configEnv).forEach((key) => (globalAsAny[key] = undefined));\n\n  const frozenUserConfig = deepFreezeUserConfig(userConfig);\n\n  const resolved = resolveConfig(configPath, userConfig);\n\n  for (const extender of HardhatContext.getHardhatContext().configExtenders) {\n    extender(resolved, frozenUserConfig);\n  }\n\n  validateResolvedConfig(resolved);\n\n  if (showSolidityConfigWarnings) {\n    checkUnsupportedSolidityConfig(resolved);\n    checkUnsupportedRemappings(resolved);\n  }\n\n  return { resolvedConfig: resolved, userConfig: frozenUserConfig };\n}\n\nfunction deepFreezeUserConfig(\n  config: any,\n  propertyPath: Array<string | number | symbol> = []\n) {\n  if (typeof config !== \"object\" || config === null) {\n    return config;\n  }\n\n  return new Proxy(config, {\n    get(target: any, property: string | number | symbol, receiver: any): any {\n      return deepFreezeUserConfig(Reflect.get(target, property, receiver), [\n        ...propertyPath,\n        property,\n      ]);\n    },\n\n    set(\n      target: any,\n      property: string | number | symbol,\n      _value: any,\n      _receiver: any\n    ): boolean {\n      throw new HardhatError(ERRORS.GENERAL.USER_CONFIG_MODIFIED, {\n        path: [...propertyPath, property]\n          .map((pathPart) => pathPart.toString())\n          .join(\".\"),\n      });\n    },\n  });\n}\n\n/**\n * Receives an Error and checks if it's a MODULE_NOT_FOUND and the reason that\n * caused it.\n *\n * If it can infer the reason, it throws an appropiate error. Otherwise it does\n * nothing.\n */\nexport function analyzeModuleNotFoundError(error: any, configPath: string) {\n  const stackTraceParser =\n    require(\"stacktrace-parser\") as typeof StackTraceParserT;\n\n  if (error.code !== \"MODULE_NOT_FOUND\") {\n    return;\n  }\n  const stackTrace = stackTraceParser.parse(error.stack);\n  const throwingFile = stackTrace\n    .filter((x) => x.file !== null)\n    .map((x) => x.file!)\n    // ignore frames related to source map support\n    .filter((x) => !x.includes(path.join(\"@cspotcode\", \"source-map-support\")))\n    .find((x) => path.isAbsolute(x));\n\n  if (throwingFile === null || throwingFile === undefined) {\n    return;\n  }\n\n  // if the error comes from the config file, we ignore it because we know it's\n  // a direct import that's missing\n  if (throwingFile === configPath) {\n    return;\n  }\n\n  const packageJsonPath = findClosestPackageJson(throwingFile);\n\n  if (packageJsonPath === null) {\n    return;\n  }\n\n  const packageJson = fsExtra.readJsonSync(packageJsonPath);\n  const peerDependencies: { [name: string]: string } =\n    packageJson.peerDependencies ?? {};\n\n  if (peerDependencies[\"@nomiclabs/buidler\"] !== undefined) {\n    throw new HardhatError(ERRORS.PLUGINS.BUIDLER_PLUGIN, {\n      plugin: packageJson.name,\n    });\n  }\n\n  // if the problem doesn't come from a hardhat plugin, we ignore it\n  if (peerDependencies.hardhat === undefined) {\n    return;\n  }\n\n  const missingPeerDependencies: { [name: string]: string } = {};\n  for (const [peerDependency, version] of Object.entries(peerDependencies)) {\n    const peerDependencyPackageJson = readPackageJson(\n      peerDependency,\n      configPath\n    );\n    if (peerDependencyPackageJson === undefined) {\n      missingPeerDependencies[peerDependency] = version;\n    }\n  }\n\n  const missingPeerDependenciesNames = Object.keys(missingPeerDependencies);\n  if (missingPeerDependenciesNames.length > 0) {\n    throw new HardhatError(ERRORS.PLUGINS.MISSING_DEPENDENCIES, {\n      plugin: packageJson.name,\n      missingDependencies: missingPeerDependenciesNames.join(\", \"),\n      missingDependenciesVersions: Object.entries(missingPeerDependencies)\n        .map(([name, version]) => `\"${name}@${version}\"`)\n        .join(\" \"),\n    });\n  }\n}\n\ninterface PackageJson {\n  name: string;\n  version: string;\n  peerDependencies?: {\n    [name: string]: string;\n  };\n}\n\nfunction readPackageJson(\n  packageName: string,\n  configPath: string\n): PackageJson | undefined {\n  const resolve = require(\"resolve\") as typeof import(\"resolve\");\n\n  try {\n    const packageJsonPath = resolve.sync(\n      path.join(packageName, \"package.json\"),\n      {\n        basedir: path.dirname(configPath),\n      }\n    );\n\n    return require(packageJsonPath);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction checkEmptyConfig(\n  userConfig: any,\n  { showSolidityConfigWarnings }: { showSolidityConfigWarnings: boolean }\n) {\n  if (userConfig === undefined || Object.keys(userConfig).length === 0) {\n    let warning = `Hardhat config is returning an empty config object, check the export from the config file if this is unexpected.\\n`;\n\n    // This 'learn more' section is also printed by the solidity config warning,\n    // so we need to check to avoid printing it twice\n    if (!showSolidityConfigWarnings) {\n      warning += `\\nLearn more about configuring Hardhat at https://hardhat.org/config\\n`;\n    }\n\n    console.warn(chalk.yellow(warning));\n  }\n}\n\nfunction checkMissingSolidityConfig(userConfig: any) {\n  if (userConfig.solidity === undefined) {\n    console.warn(\n      chalk.yellow(\n        `Solidity compiler is not configured. Version ${DEFAULT_SOLC_VERSION} will be used by default. Add a 'solidity' entry to your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`\n      )\n    );\n  }\n}\n\nfunction checkUnsupportedSolidityConfig(resolvedConfig: HardhatConfig) {\n  const configuredCompilers = getConfiguredCompilers(resolvedConfig.solidity);\n  const solcVersions = configuredCompilers.map((x) => x.version);\n\n  const unsupportedVersions: string[] = [];\n  for (const solcVersion of solcVersions) {\n    if (\n      !semver.satisfies(solcVersion, SUPPORTED_SOLIDITY_VERSION_RANGE) &&\n      !unsupportedVersions.includes(solcVersion)\n    ) {\n      unsupportedVersions.push(solcVersion);\n    }\n  }\n\n  if (unsupportedVersions.length > 0) {\n    console.warn(\n      chalk.yellow(\n        `Solidity ${unsupportedVersions.join(\", \")} ${\n          unsupportedVersions.length === 1 ? \"is\" : \"are\"\n        } not fully supported yet. You can still use Hardhat, but some features, like stack traces, might not work correctly.\n\nLearn more at https://hardhat.org/hardhat-runner/docs/reference/solidity-support\n`\n      )\n    );\n  }\n}\n\nfunction checkUnsupportedRemappings({ solidity }: HardhatConfig) {\n  const solcConfigs = [\n    ...solidity.compilers,\n    ...Object.values(solidity.overrides),\n  ];\n  const remappings = solcConfigs.filter(\n    ({ settings }) => settings.remappings !== undefined\n  );\n\n  if (remappings.length > 0) {\n    console.warn(\n      chalk.yellow(\n        `Solidity remappings are not currently supported; you may experience unexpected compilation results. Remove any 'remappings' fields from your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`\n      )\n    );\n  }\n}\n\nexport function getConfiguredCompilers(\n  solidityConfig: HardhatConfig[\"solidity\"]\n): SolcConfig[] {\n  const compilerVersions = solidityConfig.compilers;\n  const overrideVersions = Object.values(solidityConfig.overrides);\n  return [...compilerVersions, ...overrideVersions];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}