{"ast":null,"code":"import { isIPv4, isIPv6 } from 'is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from 'is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip) {\n  let offset = 0;\n  let result;\n  ip = ip.trim();\n  if (isV4(ip)) {\n    result = new Uint8Array(offset + 4);\n    ip.split(/\\./g).forEach(byte => {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (isV6(ip)) {\n    const sections = ip.split(':', 8);\n    let i;\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i]);\n      let v4Buffer;\n      if (isv4) {\n        v4Buffer = toBytes(sections[i]);\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n      }\n      if (v4Buffer != null && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n      }\n    }\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0');\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0');\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv = [i, 1];\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n      sections.splice.apply(sections, argv);\n    }\n    result = new Uint8Array(offset + 16);\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16);\n      result[offset++] = word >> 8 & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n  if (result == null) {\n    throw new Error(`invalid ip address \"${ip}\"`);\n  }\n  return result;\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf, offset = 0, length) {\n  offset = ~~offset;\n  length = length ?? buf.length - offset;\n  const result = [];\n  let string = '';\n  const view = new DataView(buf.buffer);\n  if (length === 4) {\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buf[offset + i]);\n    }\n    string = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16));\n    }\n    string = result.join(':');\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    string = string.replace(/:{3,4}/, '::');\n  }\n  return string;\n};","map":{"version":3,"names":["isIPv4","isIPv6","toString","uint8ArrayToString","isIP","isV4","isV6","toBytes","ip","offset","result","trim","Uint8Array","split","forEach","byte","parseInt","sections","i","length","isv4","v4Buffer","slice","splice","unshift","push","argv","apply","word","Error","buf","string","view","DataView","buffer","join","getUint16","replace"],"sources":["C:\\FACULTATE\\Proiect\\node_modules\\@multiformats\\multiaddr\\src\\ip.ts"],"sourcesContent":["import { isIPv4, isIPv6 } from 'is-ip'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nexport { isIP } from 'is-ip'\nexport const isV4 = isIPv4\nexport const isV6 = isIPv6\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip: string): Uint8Array {\n  let offset = 0\n  let result\n  ip = ip.trim()\n\n  if (isV4(ip)) {\n    result = new Uint8Array(offset + 4)\n    ip.split(/\\./g).forEach((byte) => {\n      result[offset++] = parseInt(byte, 10) & 0xff\n    })\n  } else if (isV6(ip)) {\n    const sections = ip.split(':', 8)\n\n    let i\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i])\n      let v4Buffer: Uint8Array | undefined\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i])\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16')\n      }\n\n      if (v4Buffer != null && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'))\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0')\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0')\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv: [number, number, ...string[]] = [i, 1]\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0')\n      }\n      sections.splice.apply(sections, argv)\n    }\n\n    result = new Uint8Array(offset + 16)\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16)\n      result[offset++] = (word >> 8) & 0xff\n      result[offset++] = word & 0xff\n    }\n  }\n\n  if (result == null) {\n    throw new Error(`invalid ip address \"${ip}\"`)\n  }\n\n  return result\n}\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf: Uint8Array, offset: number = 0, length?: number) {\n  offset = ~~offset\n  length = length ?? (buf.length - offset)\n\n  const result = []\n  let string = ''\n  const view = new DataView(buf.buffer)\n  if (length === 4) {\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buf[offset + i])\n    }\n    string = result.join('.')\n  } else if (length === 16) {\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16))\n    }\n    string = result.join(':')\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n    string = string.replace(/:{3,4}/, '::')\n  }\n\n  return string\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}