{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRecommendedGitIgnore = exports.getUserConfigPath = exports.isCwdInsideProject = void 0;\nconst find_up_1 = __importDefault(require(\"find-up\"));\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst packageInfo_1 = require(\"../util/packageInfo\");\nconst errors_1 = require(\"./errors\");\nconst errors_list_1 = require(\"./errors-list\");\nconst JS_CONFIG_FILENAME = \"hardhat.config.js\";\nconst CJS_CONFIG_FILENAME = \"hardhat.config.cjs\";\nconst TS_CONFIG_FILENAME = \"hardhat.config.ts\";\nconst CTS_CONFIG_FILENAME = \"hardhat.config.cts\";\nfunction isCwdInsideProject() {\n  return find_up_1.default.sync(TS_CONFIG_FILENAME) !== null || find_up_1.default.sync(CTS_CONFIG_FILENAME) !== null || find_up_1.default.sync(CJS_CONFIG_FILENAME) !== null || find_up_1.default.sync(JS_CONFIG_FILENAME) !== null;\n}\nexports.isCwdInsideProject = isCwdInsideProject;\nfunction getUserConfigPath() {\n  const tsConfigPath = find_up_1.default.sync(TS_CONFIG_FILENAME);\n  if (tsConfigPath !== null) {\n    return tsConfigPath;\n  }\n  const ctsConfigPath = find_up_1.default.sync(CTS_CONFIG_FILENAME);\n  if (ctsConfigPath !== null) {\n    return ctsConfigPath;\n  }\n  const cjsConfigPath = find_up_1.default.sync(CJS_CONFIG_FILENAME);\n  if (cjsConfigPath !== null) {\n    return cjsConfigPath;\n  }\n  const pathToConfigFile = find_up_1.default.sync(JS_CONFIG_FILENAME);\n  if (pathToConfigFile === null) {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.NOT_INSIDE_PROJECT);\n  }\n  return pathToConfigFile;\n}\nexports.getUserConfigPath = getUserConfigPath;\nasync function getRecommendedGitIgnore() {\n  const packageRoot = (0, packageInfo_1.getPackageRoot)();\n  const gitIgnorePath = path_1.default.join(packageRoot, \"recommended-gitignore.txt\");\n  return fs_extra_1.default.readFile(gitIgnorePath, \"utf-8\");\n}\nexports.getRecommendedGitIgnore = getRecommendedGitIgnore;","map":{"version":3,"names":["find_up_1","__importDefault","require","fs_extra_1","path_1","packageInfo_1","errors_1","errors_list_1","JS_CONFIG_FILENAME","CJS_CONFIG_FILENAME","TS_CONFIG_FILENAME","CTS_CONFIG_FILENAME","isCwdInsideProject","default","sync","exports","getUserConfigPath","tsConfigPath","ctsConfigPath","cjsConfigPath","pathToConfigFile","HardhatError","ERRORS","GENERAL","NOT_INSIDE_PROJECT","getRecommendedGitIgnore","packageRoot","getPackageRoot","gitIgnorePath","join","readFile"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\core\\project-structure.ts"],"sourcesContent":["import findUp from \"find-up\";\nimport fsExtra from \"fs-extra\";\nimport path from \"path\";\n\nimport { getPackageRoot } from \"../util/packageInfo\";\n\nimport { HardhatError } from \"./errors\";\nimport { ERRORS } from \"./errors-list\";\n\nconst JS_CONFIG_FILENAME = \"hardhat.config.js\";\nconst CJS_CONFIG_FILENAME = \"hardhat.config.cjs\";\nconst TS_CONFIG_FILENAME = \"hardhat.config.ts\";\nconst CTS_CONFIG_FILENAME = \"hardhat.config.cts\";\n\nexport function isCwdInsideProject() {\n  return (\n    findUp.sync(TS_CONFIG_FILENAME) !== null ||\n    findUp.sync(CTS_CONFIG_FILENAME) !== null ||\n    findUp.sync(CJS_CONFIG_FILENAME) !== null ||\n    findUp.sync(JS_CONFIG_FILENAME) !== null\n  );\n}\n\nexport function getUserConfigPath() {\n  const tsConfigPath = findUp.sync(TS_CONFIG_FILENAME);\n  if (tsConfigPath !== null) {\n    return tsConfigPath;\n  }\n\n  const ctsConfigPath = findUp.sync(CTS_CONFIG_FILENAME);\n  if (ctsConfigPath !== null) {\n    return ctsConfigPath;\n  }\n\n  const cjsConfigPath = findUp.sync(CJS_CONFIG_FILENAME);\n  if (cjsConfigPath !== null) {\n    return cjsConfigPath;\n  }\n\n  const pathToConfigFile = findUp.sync(JS_CONFIG_FILENAME);\n  if (pathToConfigFile === null) {\n    throw new HardhatError(ERRORS.GENERAL.NOT_INSIDE_PROJECT);\n  }\n\n  return pathToConfigFile;\n}\n\nexport async function getRecommendedGitIgnore() {\n  const packageRoot = getPackageRoot();\n  const gitIgnorePath = path.join(packageRoot, \"recommended-gitignore.txt\");\n\n  return fsExtra.readFile(gitIgnorePath, \"utf-8\");\n}\n"],"mappings":";;;;;;;;;;;AAAA,MAAAA,SAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,UAAA,GAAAF,eAAA,CAAAC,OAAA;AACA,MAAAE,MAAA,GAAAH,eAAA,CAAAC,OAAA;AAEA,MAAAG,aAAA,GAAAH,OAAA;AAEA,MAAAI,QAAA,GAAAJ,OAAA;AACA,MAAAK,aAAA,GAAAL,OAAA;AAEA,MAAMM,kBAAkB,GAAG,mBAAmB;AAC9C,MAAMC,mBAAmB,GAAG,oBAAoB;AAChD,MAAMC,kBAAkB,GAAG,mBAAmB;AAC9C,MAAMC,mBAAmB,GAAG,oBAAoB;AAEhD,SAAgBC,kBAAkBA,CAAA;EAChC,OACEZ,SAAA,CAAAa,OAAM,CAACC,IAAI,CAACJ,kBAAkB,CAAC,KAAK,IAAI,IACxCV,SAAA,CAAAa,OAAM,CAACC,IAAI,CAACH,mBAAmB,CAAC,KAAK,IAAI,IACzCX,SAAA,CAAAa,OAAM,CAACC,IAAI,CAACL,mBAAmB,CAAC,KAAK,IAAI,IACzCT,SAAA,CAAAa,OAAM,CAACC,IAAI,CAACN,kBAAkB,CAAC,KAAK,IAAI;AAE5C;AAPAO,OAAA,CAAAH,kBAAA,GAAAA,kBAAA;AASA,SAAgBI,iBAAiBA,CAAA;EAC/B,MAAMC,YAAY,GAAGjB,SAAA,CAAAa,OAAM,CAACC,IAAI,CAACJ,kBAAkB,CAAC;EACpD,IAAIO,YAAY,KAAK,IAAI,EAAE;IACzB,OAAOA,YAAY;;EAGrB,MAAMC,aAAa,GAAGlB,SAAA,CAAAa,OAAM,CAACC,IAAI,CAACH,mBAAmB,CAAC;EACtD,IAAIO,aAAa,KAAK,IAAI,EAAE;IAC1B,OAAOA,aAAa;;EAGtB,MAAMC,aAAa,GAAGnB,SAAA,CAAAa,OAAM,CAACC,IAAI,CAACL,mBAAmB,CAAC;EACtD,IAAIU,aAAa,KAAK,IAAI,EAAE;IAC1B,OAAOA,aAAa;;EAGtB,MAAMC,gBAAgB,GAAGpB,SAAA,CAAAa,OAAM,CAACC,IAAI,CAACN,kBAAkB,CAAC;EACxD,IAAIY,gBAAgB,KAAK,IAAI,EAAE;IAC7B,MAAM,IAAId,QAAA,CAAAe,YAAY,CAACd,aAAA,CAAAe,MAAM,CAACC,OAAO,CAACC,kBAAkB,CAAC;;EAG3D,OAAOJ,gBAAgB;AACzB;AAtBAL,OAAA,CAAAC,iBAAA,GAAAA,iBAAA;AAwBO,eAAeS,uBAAuBA,CAAA;EAC3C,MAAMC,WAAW,GAAG,IAAArB,aAAA,CAAAsB,cAAc,GAAE;EACpC,MAAMC,aAAa,GAAGxB,MAAA,CAAAS,OAAI,CAACgB,IAAI,CAACH,WAAW,EAAE,2BAA2B,CAAC;EAEzE,OAAOvB,UAAA,CAAAU,OAAO,CAACiB,QAAQ,CAACF,aAAa,EAAE,OAAO,CAAC;AACjD;AALAb,OAAA,CAAAU,uBAAA,GAAAA,uBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}