{"ast":null,"code":"import { uploadFile, uploadDirectory, uploadCAR, Receipt } from '@web3-storage/upload-client';\nimport { Access as AccessCapabilities, Blob as BlobCapabilities, Index as IndexCapabilities, Upload as UploadCapabilities, Filecoin as FilecoinCapabilities, Space as SpaceCapabilities } from '@web3-storage/capabilities';\nimport * as DIDMailto from '@web3-storage/did-mailto';\nimport { Base } from './base.js';\nimport * as Account from './account.js';\nimport { Space } from './space.js';\nimport { AgentDelegation } from './delegation.js';\nimport { BlobClient } from './capability/blob.js';\nimport { IndexClient } from './capability/index.js';\nimport { StoreClient } from './capability/store.js';\nimport { UploadClient } from './capability/upload.js';\nimport { SpaceClient } from './capability/space.js';\nimport { SubscriptionClient } from './capability/subscription.js';\nimport { UsageClient } from './capability/usage.js';\nimport { AccessClient } from './capability/access.js';\nimport { PlanClient } from './capability/plan.js';\nimport { FilecoinClient } from './capability/filecoin.js';\nimport { CouponAPI } from './coupon.js';\nimport * as _Access from './capability/access.js';\nexport { _Access as Access };\nimport * as Result from './result.js';\nimport * as UcantoClient from '@ucanto/client';\nimport { HTTP } from '@ucanto/transport';\nimport * as CAR from '@ucanto/transport/car';\nexport { AccessClient, BlobClient, FilecoinClient, IndexClient, PlanClient, StoreClient, SpaceClient, SubscriptionClient, UploadClient, UsageClient };\nexport class Client extends Base {\n  /**\n   * @param {import('@web3-storage/access').AgentData} agentData\n   * @param {object} [options]\n   * @param {import('./types.js').ServiceConf} [options.serviceConf]\n   * @param {URL} [options.receiptsEndpoint]\n   */\n  constructor(agentData, options) {\n    super(agentData, options);\n    this.capability = {\n      access: new AccessClient(agentData, options),\n      filecoin: new FilecoinClient(agentData, options),\n      index: new IndexClient(agentData, options),\n      plan: new PlanClient(agentData, options),\n      space: new SpaceClient(agentData, options),\n      blob: new BlobClient(agentData, options),\n      store: new StoreClient(agentData, options),\n      subscription: new SubscriptionClient(agentData, options),\n      upload: new UploadClient(agentData, options),\n      usage: new UsageClient(agentData, options)\n    };\n    this.coupon = new CouponAPI(agentData, options);\n  }\n  did() {\n    return this._agent.did();\n  }\n  /* c8 ignore start - testing websockets is hard */\n  /**\n   * @deprecated - Use client.login instead.\n   *\n   * Authorize the current agent to use capabilities granted to the passed\n   * email account.\n   *\n   * @param {`${string}@${string}`} email\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @param {Iterable<{ can: import('./types.js').Ability }>} [options.capabilities]\n   */\n  async authorize(email, options) {\n    await this.capability.access.authorize(email, options);\n  }\n  /**\n   * @param {Account.EmailAddress} email\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  async login(email, options = {}) {\n    const account = Result.unwrap(await Account.login(this, email, options));\n    Result.unwrap(await account.save());\n    return account;\n  }\n  /* c8 ignore stop */\n  /**\n   * List all accounts that agent has stored access to.\n   *\n   * @returns {Record<DIDMailto, Account>} A dictionary with `did:mailto` as keys and `Account` instances as values.\n   */\n  accounts() {\n    return Account.list(this);\n  }\n  /**\n   * Uploads a file to the service and returns the root data CID for the\n   * generated DAG.\n   *\n   * Required delegated capabilities:\n   * - `filecoin/offer`\n   * - `space/blob/add`\n   * - `space/index/add`\n   * - `upload/add`\n   *\n   * @param {import('./types.js').BlobLike} file - File data.\n   * @param {import('./types.js').UploadFileOptions} [options]\n   */\n  async uploadFile(file, options = {}) {\n    const conf = await this._invocationConfig([BlobCapabilities.add.can, IndexCapabilities.add.can, FilecoinCapabilities.offer.can, UploadCapabilities.add.can]);\n    options = {\n      receiptsEndpoint: this._receiptsEndpoint.toString(),\n      connection: this._serviceConf.upload,\n      ...options\n    };\n    return uploadFile(conf, file, options);\n  }\n  /**\n   * Uploads a directory of files to the service and returns the root data CID\n   * for the generated DAG. All files are added to a container directory, with\n   * paths in the file names preserved.\n   *\n   * Required delegated capabilities:\n   * - `filecoin/offer`\n   * - `space/blob/add`\n   * - `space/index/add`\n   * - `upload/add`\n   *\n   * @param {import('./types.js').FileLike[]} files - File data.\n   * @param {import('./types.js').UploadDirectoryOptions} [options]\n   */\n  async uploadDirectory(files, options = {}) {\n    const conf = await this._invocationConfig([BlobCapabilities.add.can, IndexCapabilities.add.can, FilecoinCapabilities.offer.can, UploadCapabilities.add.can]);\n    options = {\n      receiptsEndpoint: this._receiptsEndpoint.toString(),\n      connection: this._serviceConf.upload,\n      ...options\n    };\n    return uploadDirectory(conf, files, options);\n  }\n  /**\n   * Uploads a CAR file to the service.\n   *\n   * The difference between this function and `capability.blob.add` is that\n   * the CAR file is automatically sharded, an index is generated, uploaded and\n   * registered (see `capability.index.add`) and finally an an \"upload\" is\n   * registered, linking the individual shards (see `capability.upload.add`).\n   *\n   * Use the `onShardStored` callback to obtain the CIDs of the CAR file shards.\n   *\n   * Required delegated capabilities:\n   * - `filecoin/offer`\n   * - `space/blob/add`\n   * - `space/index/add`\n   * - `upload/add`\n   *\n   * @param {import('./types.js').BlobLike} car - CAR file.\n   * @param {import('./types.js').UploadOptions} [options]\n   */\n  async uploadCAR(car, options = {}) {\n    const conf = await this._invocationConfig([BlobCapabilities.add.can, IndexCapabilities.add.can, FilecoinCapabilities.offer.can, UploadCapabilities.add.can]);\n    options = {\n      receiptsEndpoint: this._receiptsEndpoint.toString(),\n      connection: this._serviceConf.upload,\n      ...options\n    };\n    return uploadCAR(conf, car, options);\n  }\n  /**\n   * Get a receipt for an executed task by its CID.\n   *\n   * @param {import('multiformats').UnknownLink} taskCid\n   */\n  async getReceipt(taskCid) {\n    const receiptsEndpoint = new URL(this._receiptsEndpoint).toString();\n    return Receipt.poll(taskCid, {\n      receiptsEndpoint\n    });\n  }\n  /**\n   * Return the default provider.\n   */\n  defaultProvider() {\n    return this._agent.connection.id.did();\n  }\n  /**\n   * The current space.\n   */\n  currentSpace() {\n    const agent = this._agent;\n    const id = agent.currentSpace();\n    if (!id) return;\n    const meta = agent.spaces.get(id);\n    return new Space({\n      id,\n      meta,\n      agent\n    });\n  }\n  /**\n   * Use a specific space.\n   *\n   * @param {import('./types.js').DID} did\n   */\n  async setCurrentSpace(did) {\n    await this._agent.setCurrentSpace( /** @type {`did:key:${string}`} */did);\n  }\n  /**\n   * Spaces available to this agent.\n   */\n  spaces() {\n    return [...this._agent.spaces].map(([id, meta]) => {\n      // @ts-expect-error id is not did:key\n      return new Space({\n        id,\n        meta,\n        agent: this._agent\n      });\n    });\n  }\n  /**\n   * Creates a new space with a given name.\n   * If an account is not provided, the space is created without any delegation and is not saved, hence it is a temporary space.\n   * When an account is provided in the options argument, then it creates a delegated recovery account\n   * by provisioning the space, saving it and then delegating access to the recovery account.\n   * In addition, it authorizes the listed Gateway Services to serve content from the created space.\n   * It is done by delegating the `space/content/serve/*` capability to the Gateway Service.\n   * User can skip the Gateway authorization by setting the `skipGatewayAuthorization` option to `true`.\n   * If no gateways are specified or the `skipGatewayAuthorization` flag is not set, the client will automatically grant access\n   * to the Storacha Gateway by default (https://freewaying.dag.haus/).\n   *\n   * @typedef {import('./types.js').ConnectionView<import('./types.js').ContentServeService>} ConnectionView\n   *\n   * @typedef {object} SpaceCreateOptions\n   * @property {Account.Account} [account] - The account configured as the recovery account for the space.\n   * @property {Array<ConnectionView>} [authorizeGatewayServices] - The DID Key or DID Web of the Gateway to authorize to serve content from the created space.\n   * @property {boolean} [skipGatewayAuthorization] - Whether to skip the Gateway authorization. It means that the content of the space will not be served by any Gateway.\n   *\n   * @param {string} name - The name of the space to create.\n   * @param {SpaceCreateOptions} [options] - Options for the space creation.\n   * @returns {Promise<import(\"./space.js\").OwnedSpace>} The created space owned by the agent.\n   */\n  async createSpace(name, options) {\n    // Save the space to authorize the client to use the space\n    const space = await this._agent.createSpace(name);\n    const account = options?.account;\n    if (account) {\n      // Provision the account with the space\n      const provisionResult = await account.provision(space.did());\n      if (provisionResult.error) {\n        throw new Error(`failed to provision account: ${provisionResult.error.message}`, {\n          cause: provisionResult.error\n        });\n      }\n      // Save the space to authorize the client to use the space\n      await space.save();\n      // Create a recovery for the account\n      const recovery = await space.createRecovery(account.did());\n      // Delegate space access to the recovery\n      const delegationResult = await this.capability.access.delegate({\n        space: space.did(),\n        delegations: [recovery]\n      });\n      if (delegationResult.error) {\n        throw new Error(`failed to authorize recovery account: ${delegationResult.error.message}`, {\n          cause: delegationResult.error\n        });\n      }\n    }\n    // Authorize the listed Gateway Services to serve content from the created space\n    if (options?.skipGatewayAuthorization !== true) {\n      let authorizeGatewayServices = options?.authorizeGatewayServices;\n      if (!authorizeGatewayServices || authorizeGatewayServices.length === 0) {\n        // If no Gateway Services are provided, authorize the Storacha Gateway Service\n        authorizeGatewayServices = [UcantoClient.connect({\n          id: {\n            did: () => ( /** @type {`did:${string}:${string}`} */\n            /* c8 ignore next - default prod gateway id is not used in tests */\n            process.env.DEFAULT_GATEWAY_ID ?? 'did:web:w3s.link')\n          },\n          codec: CAR.outbound,\n          channel: HTTP.open({\n            url: new URL( /* c8 ignore next - default prod gateway url is not used in tests */\n            process.env.DEFAULT_GATEWAY_URL ?? 'https://w3s.link')\n          })\n        })];\n      }\n      // Save the space to authorize the client to use the space\n      await space.save();\n      for (const serviceConnection of authorizeGatewayServices) {\n        await authorizeContentServe(this, space, serviceConnection);\n      }\n    }\n    return space;\n  }\n  /**\n   * Share an existing space with another Storacha account via email address delegation.\n   * Delegates access to the space to the specified email account with the following permissions:\n   * - space/* - for managing space metadata\n   * - blob/* - for managing blobs\n   * - store/* - for managing stores\n   * - upload/*- for registering uploads\n   * - access/* - for re-delegating access to other devices\n   * - filecoin/* - for submitting to the filecoin pipeline\n   * - usage/* - for querying usage\n   * The default expiration is set to infinity.\n   *\n   * @typedef {object} ShareOptions\n   * @property {import('./types.js').ServiceAbility[]} abilities - Abilities to delegate to the delegate account.\n   * @property {number} expiration - Expiration time in seconds.\n   \n   * @param {import(\"./types.js\").EmailAddress} delegateEmail - Email of the account to share the space with.\n   * @param {import('./types.js').SpaceDID} spaceDID - The DID of the space to share.\n   * @param {ShareOptions} [options] - Options for the delegation.\n   *\n   * @returns {Promise<import('./delegation.js').AgentDelegation<any>>} Resolves with the AgentDelegation instance once the space is successfully shared.\n   * @throws {Error} - Throws an error if there is an issue delegating access to the space.\n   */\n  async shareSpace(delegateEmail, spaceDID, options = {\n    abilities: ['space/*', 'store/*', 'upload/*', 'access/*', 'usage/*', 'filecoin/*'],\n    expiration: Infinity\n  }) {\n    const {\n      abilities,\n      ...restOptions\n    } = options;\n    const currentSpace = this.agent.currentSpace();\n    try {\n      // Make sure the agent is using the shared space before delegating\n      await this.agent.setCurrentSpace(spaceDID);\n      // Delegate capabilities to the delegate account to access the **current space**\n      const {\n        root,\n        blocks\n      } = await this.agent.delegate({\n        ...restOptions,\n        abilities,\n        audience: {\n          did: () => DIDMailto.fromEmail(DIDMailto.email(delegateEmail))\n        },\n        // @ts-expect-error audienceMeta is not defined in ShareOptions\n        audienceMeta: options.audienceMeta ?? {}\n      });\n      const delegation = new AgentDelegation(root, blocks, {\n        audience: delegateEmail\n      });\n      const sharingResult = await this.capability.access.delegate({\n        space: spaceDID,\n        delegations: [delegation]\n      });\n      if (sharingResult.error) {\n        throw new Error(`failed to share space with ${delegateEmail}: ${sharingResult.error.message}`, {\n          cause: sharingResult.error\n        });\n      }\n      return delegation;\n    } finally {\n      // Reset to the original space if it was different\n      if (currentSpace && currentSpace !== spaceDID) {\n        await this.agent.setCurrentSpace(currentSpace);\n      }\n    }\n  }\n  /* c8 ignore stop */\n  /**\n   * Add a space from a received proof.\n   *\n   * @param {import('./types.js').Delegation} proof\n   */\n  async addSpace(proof) {\n    return await this._agent.importSpaceFromDelegation(proof);\n  }\n  /**\n   * Get all the proofs matching the capabilities.\n   *\n   * Proofs are delegations with an _audience_ matching the agent DID.\n   *\n   * @param {import('./types.js').Capability[]} [caps] - Capabilities to\n   * filter by. Empty or undefined caps with return all the proofs.\n   */\n  proofs(caps) {\n    return this._agent.proofs(caps);\n  }\n  /**\n   * Add a proof to the agent. Proofs are delegations with an _audience_\n   * matching the agent DID.\n   *\n   * @param {import('./types.js').Delegation} proof\n   */\n  async addProof(proof) {\n    await this._agent.addProof(proof);\n  }\n  /**\n   * Get delegations created by the agent for others.\n   *\n   * @param {import('./types.js').Capability[]} [caps] - Capabilities to\n   * filter by. Empty or undefined caps with return all the delegations.\n   */\n  delegations(caps) {\n    const delegations = [];\n    for (const {\n      delegation,\n      meta\n    } of this._agent.delegationsWithMeta(caps)) {\n      delegations.push(new AgentDelegation(delegation.root, delegation.blocks, meta));\n    }\n    return delegations;\n  }\n  /**\n   * Create a delegation to the passed audience for the given abilities with\n   * the _current_ space as the resource.\n   *\n   * @param {import('./types.js').Principal} audience\n   * @param {import('./types.js').ServiceAbility[]} abilities\n   * @param {Omit<import('./types.js').UCANOptions, 'audience'> & { audienceMeta?: import('./types.js').AgentMeta }} [options]\n   */\n  async createDelegation(audience, abilities, options = {}) {\n    const audienceMeta = options.audienceMeta ?? {\n      name: 'agent',\n      type: 'device'\n    };\n    const {\n      root,\n      blocks\n    } = await this._agent.delegate({\n      ...options,\n      abilities,\n      audience,\n      audienceMeta\n    });\n    return new AgentDelegation(root, blocks, {\n      audience: audienceMeta\n    });\n  }\n  /**\n   * Revoke a delegation by CID.\n   *\n   * If the delegation was issued by this agent (and therefore is stored in the\n   * delegation store) you can just pass the CID. If not, or if the current agent's\n   * delegation store no longer contains the delegation, you MUST pass a chain of\n   * proofs that proves your authority to revoke this delegation as `options.proofs`.\n   *\n   * @param {import('@ucanto/interface').UCANLink} delegationCID\n   * @param {object} [options]\n   * @param {import('@ucanto/interface').Delegation[]} [options.proofs]\n   */\n  async revokeDelegation(delegationCID, options = {}) {\n    return this._agent.revoke(delegationCID, {\n      proofs: options.proofs\n    });\n  }\n  /**\n   * Removes association of a content CID with the space. Optionally, also removes\n   * association of CAR shards with space.\n   *\n   * ⚠️ If `shards` option is `true` all shards will be deleted even if there is another upload(s) that\n   * reference same shards, which in turn could corrupt those uploads.\n   *\n   * Required delegated capabilities:\n   * - `space/blob/remove`\n   * - `store/remove`\n   * - `upload/get`\n   * - `upload/remove`\n   *\n   * @param {import('multiformats').UnknownLink} contentCID\n   * @param {object} [options]\n   * @param {boolean} [options.shards]\n   */\n  async remove(contentCID, options = {}) {\n    // Shortcut if there is no request to remove shards\n    if (!options.shards) {\n      // Remove association of content CID with selected space.\n      await this.capability.upload.remove(contentCID);\n      return;\n    }\n    // Get shards associated with upload.\n    const upload = await this.capability.upload.get(contentCID);\n    // Remove shards\n    if (upload.shards?.length) {\n      await Promise.allSettled(upload.shards.map(async shard => {\n        try {\n          const res = await this.capability.blob.remove(shard.multihash);\n          /* c8 ignore start */\n          // if no size, the blob was not found, try delete from store\n          if (res.ok && res.ok.size === 0) {\n            await this.capability.store.remove(shard);\n          }\n        } catch ( /** @type {any} */error) {\n          // If not found, we can tolerate error as it may be a consecutive call for deletion where first failed\n          if (error?.cause?.name !== 'StoreItemNotFound') {\n            throw new Error(`failed to remove shard: ${shard}`, {\n              cause: error\n            });\n          }\n          /* c8 ignore next 4 */\n        }\n      }));\n    }\n    // Remove association of content CID with selected space.\n    await this.capability.upload.remove(contentCID);\n  }\n}\n/**\n * Authorizes an audience to serve content from the provided space and record egress events.\n * It also publishes the delegation to the content serve service.\n * Delegates the following capabilities to the audience:\n * - `space/content/serve/*`\n *\n * @param {Client} client - The w3up client instance.\n * @param {import('./types.js').OwnedSpace} space - The space to authorize the audience for.\n * @param {import('./types.js').ConnectionView<import('./types.js').ContentServeService>} connection - The connection to the Content Serve Service that will handle, validate, and store the access/delegate UCAN invocation.\n * @param {object} [options] - Options for the content serve authorization invocation.\n * @param {`did:${string}:${string}`} [options.audience] - The Web DID of the audience (gateway or peer) to authorize.\n * @param {number} [options.expiration] - The time at which the delegation expires in seconds from unix epoch.\n */\nexport const authorizeContentServe = async (client, space, connection, options = {}) => {\n  const currentSpace = client.currentSpace();\n  try {\n    // Set the current space to the space we are authorizing the gateway for, otherwise the delegation will fail\n    await client.setCurrentSpace(space.did());\n    /** @type {import('@ucanto/client').Principal<`did:${string}:${string}`>} */\n    const audience = {\n      did: () => options.audience ?? connection.id.did()\n    };\n    // Grant the audience the ability to serve content from the space, it includes existing proofs automatically\n    const delegation = await client.createDelegation(audience, [SpaceCapabilities.contentServe.can], {\n      expiration: options.expiration ?? Infinity\n    });\n    // Publish the delegation to the content serve service\n    const accessProofs = client.proofs([{\n      can: AccessCapabilities.access.can,\n      with: space.did()\n    }]);\n    const verificationResult = await AccessCapabilities.delegate.invoke({\n      issuer: client.agent.issuer,\n      audience,\n      with: space.did(),\n      proofs: [...accessProofs, delegation],\n      nb: {\n        delegations: {\n          [delegation.cid.toString()]: delegation.cid\n        }\n      }\n    }).execute(connection);\n    /* c8 ignore next 8 - can't mock this error */\n    if (verificationResult.out.error) {\n      throw new Error(`failed to publish delegation for audience ${audience.did()}: ${verificationResult.out.error.message}`, {\n        cause: verificationResult.out.error\n      });\n    }\n    return {\n      ok: {\n        ...verificationResult.out.ok,\n        delegation\n      }\n    };\n  } finally {\n    if (currentSpace) {\n      await client.setCurrentSpace(currentSpace.did());\n    }\n  }\n};","map":{"version":3,"names":["uploadFile","uploadDirectory","uploadCAR","Receipt","Access","AccessCapabilities","Blob","BlobCapabilities","Index","IndexCapabilities","Upload","UploadCapabilities","Filecoin","FilecoinCapabilities","Space","SpaceCapabilities","DIDMailto","Base","Account","AgentDelegation","BlobClient","IndexClient","StoreClient","UploadClient","SpaceClient","SubscriptionClient","UsageClient","AccessClient","PlanClient","FilecoinClient","CouponAPI","_Access","Result","UcantoClient","HTTP","CAR","Client","constructor","agentData","options","capability","access","filecoin","index","plan","space","blob","store","subscription","upload","usage","coupon","did","_agent","authorize","email","login","account","unwrap","save","accounts","list","file","conf","_invocationConfig","add","can","offer","receiptsEndpoint","_receiptsEndpoint","toString","connection","_serviceConf","files","car","getReceipt","taskCid","URL","poll","defaultProvider","id","currentSpace","agent","meta","spaces","get","setCurrentSpace","map","createSpace","name","provisionResult","provision","error","Error","message","cause","recovery","createRecovery","delegationResult","delegate","delegations","skipGatewayAuthorization","authorizeGatewayServices","length","connect","process","env","DEFAULT_GATEWAY_ID","codec","outbound","channel","open","url","DEFAULT_GATEWAY_URL","serviceConnection","authorizeContentServe","shareSpace","delegateEmail","spaceDID","abilities","expiration","Infinity","restOptions","root","blocks","audience","fromEmail","audienceMeta","delegation","sharingResult","addSpace","proof","importSpaceFromDelegation","proofs","caps","addProof","delegationsWithMeta","push","createDelegation","type","revokeDelegation","delegationCID","revoke","remove","contentCID","shards","Promise","allSettled","shard","res","multihash","ok","size","client","contentServe","accessProofs","with","verificationResult","invoke","issuer","nb","cid","execute","out"],"sources":["../../src/client.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}