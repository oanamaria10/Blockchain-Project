{"ast":null,"code":"var _jsxFileName = \"C:\\\\FACULTATE\\\\Proiect\\\\front-end\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport campaignAbi from './Campaign.json';\nimport donationTokenAbi from './DonationToken.json'; // Import the DonationToken ABI\nimport Login from './Login';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CampaignInteraction() {\n  _s();\n  const [accountAddress, setAccountAddress] = useState('');\n  const [accountBalance, setAccountBalance] = useState('');\n  const [donationAmount, setDonationAmount] = useState('');\n  const [targetAmount, setTargetAmount] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [totalDonations, setTotalDonations] = useState(0);\n  const [provider] = useState(new ethers.providers.JsonRpcProvider(\"http://localhost:8545\"));\n  const [signerIndex, setSignerIndex] = useState(null);\n  const [campaignContract, setCampaignContract] = useState(null);\n  const [donationTokenContract, setDonationTokenContract] = useState(null);\n  const [accountData, setAccountData] = useState([]);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isContractsLoaded, setIsContractsLoaded] = useState(false);\n  useEffect(() => {\n    async function fetchAccountData() {\n      try {\n        const accounts = await provider.listAccounts();\n        setAccountData(accounts || []);\n      } catch (error) {\n        alert('Error fetching account data: ' + error.message);\n      }\n    }\n    fetchAccountData();\n  }, [provider]);\n  useEffect(() => {\n    async function initializeContracts() {\n      if (signerIndex !== null && provider) {\n        const signer = provider.getSigner(signerIndex);\n        try {\n          // Initialize Campaign Contract\n          const campaignAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"; // Replace with deployed address\n          const campaign = new ethers.Contract(campaignAddress, campaignAbi.abi, signer);\n          setCampaignContract(campaign);\n\n          // Initialize Donation Token Contract\n          const donationTokenAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // Replace with deployed address\n          const donationToken = new ethers.Contract(donationTokenAddress, donationTokenAbi.abi, signer);\n          setDonationTokenContract(donationToken);\n          setIsContractsLoaded(true);\n          alert(\"Contracts initialized successfully!\");\n        } catch (error) {\n          alert('Error initializing contracts: ' + error.message);\n        }\n      }\n    }\n    initializeContracts();\n  }, [signerIndex, provider]);\n  useEffect(() => {\n    if (campaignContract) {\n      alert(\"Campaign contract state updated.\");\n    }\n  }, [campaignContract]);\n  async function handleLogin(address) {\n    try {\n      setIsLoggedIn(true);\n      setAccountAddress(address);\n      const balance = await provider.getBalance(address);\n      setAccountBalance(ethers.utils.formatEther(balance));\n      const index = accountData.indexOf(address);\n      if (index === -1) {\n        alert(\"Address not found in accountData.\");\n      } else {\n        setSignerIndex(index);\n        alert(\"Logged in successfully.\");\n      }\n    } catch (error) {\n      alert('Error during login: ' + error.message);\n    }\n  }\n  async function donate() {\n    try {\n      if (!isContractsLoaded || !campaignContract) {\n        alert(\"Contracts are still loading. Please wait.\");\n        return;\n      }\n      if (!ethers.utils.isAddress(accountAddress)) {\n        alert(\"Invalid account address.\");\n        return;\n      }\n      if (donationAmount && parseFloat(donationAmount) > 0) {\n        const donationValue = ethers.utils.parseEther(donationAmount);\n        const balance = await provider.getBalance(accountAddress);\n        if (balance.lt(donationValue)) {\n          alert(\"Insufficient balance for the donation.\");\n          return;\n        }\n        const donationTx = await campaignContract.donate({\n          value: donationValue\n        });\n        await donationTx.wait();\n        const updatedBalance = await provider.getBalance(accountAddress);\n        setAccountBalance(ethers.utils.formatEther(updatedBalance));\n        const currentTotalDonations = await campaignContract.totalDonations();\n        const currentTargetAmount = await campaignContract.targetAmount();\n        setTotalDonations(ethers.utils.formatEther(currentTotalDonations));\n        setTargetAmount(ethers.utils.formatEther(currentTargetAmount));\n        const currentProgress = parseFloat(currentTotalDonations) * 100 / parseFloat(currentTargetAmount);\n        setProgress(currentProgress || 0);\n        alert(\"Donation successful!\");\n      } else {\n        alert(\"Please enter a valid donation amount.\");\n      }\n    } catch (error) {\n      alert('An error occurred while making the donation. Please check the console for details.');\n    }\n  }\n  async function setCampaignTarget() {\n    try {\n      if (campaignContract && parseFloat(targetAmount) > 0) {\n        // Fetch the campaign owner's address\n        const campaignOwner = await campaignContract.owner(); // Assuming there's an 'owner()' function in the contract\n\n        // Check if the current account is the campaign owner\n        if (accountAddress !== campaignOwner) {\n          alert(\"Only the campaign owner can set the target amount.\");\n          return;\n        }\n        const targetValue = ethers.utils.parseEther(targetAmount);\n        const currentTotalDonations = await campaignContract.totalDonations();\n        if (targetValue.lte(currentTotalDonations)) {\n          alert(\"Target amount must be greater than total donations.\");\n          return;\n        }\n\n        // Set target amount and wait for confirmation\n        const setTargetTx = await campaignContract.setTargetAmount(targetValue);\n        await setTargetTx.wait();\n        alert(\"Target amount set successfully!\");\n      } else {\n        alert(\"Please enter a valid target amount.\");\n      }\n    } catch (error) {\n      alert('An error occurred while setting the target amount. Please check the console for details.');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isLoggedIn ? /*#__PURE__*/_jsxDEV(Login, {\n      accountData: accountData,\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Campaign Interaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Connected Account Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Address: \", accountAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Balance: \", accountBalance, \" ETH\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Campaign Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Donations: \", totalDonations, \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Target Amount: \", targetAmount, \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Progress: \", progress.toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Donate to the Campaign\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Donation Amount (ETH or Tokens):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: donationAmount,\n        onChange: e => setDonationAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 119\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: donate,\n        children: \"Donate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Set Campaign Target (Owner only)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Target Amount (ETH):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: targetAmount,\n        onChange: e => setTargetAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 115\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setCampaignTarget,\n        children: \"Set Target\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n}\n_s(CampaignInteraction, \"pLZIP7qjrY6Xlib+5KE+ApfQlX4=\");\n_c = CampaignInteraction;\nexport default CampaignInteraction;\nvar _c;\n$RefreshReg$(_c, \"CampaignInteraction\");","map":{"version":3,"names":["React","useEffect","useState","ethers","campaignAbi","donationTokenAbi","Login","jsxDEV","_jsxDEV","CampaignInteraction","_s","accountAddress","setAccountAddress","accountBalance","setAccountBalance","donationAmount","setDonationAmount","targetAmount","setTargetAmount","progress","setProgress","totalDonations","setTotalDonations","provider","providers","JsonRpcProvider","signerIndex","setSignerIndex","campaignContract","setCampaignContract","donationTokenContract","setDonationTokenContract","accountData","setAccountData","isLoggedIn","setIsLoggedIn","isContractsLoaded","setIsContractsLoaded","fetchAccountData","accounts","listAccounts","error","alert","message","initializeContracts","signer","getSigner","campaignAddress","campaign","Contract","abi","donationTokenAddress","donationToken","handleLogin","address","balance","getBalance","utils","formatEther","index","indexOf","donate","isAddress","parseFloat","donationValue","parseEther","lt","donationTx","value","wait","updatedBalance","currentTotalDonations","currentTargetAmount","currentProgress","setCampaignTarget","campaignOwner","owner","targetValue","lte","setTargetTx","children","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","type","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/FACULTATE/Proiect/front-end/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport campaignAbi from './Campaign.json';\r\nimport donationTokenAbi from './DonationToken.json'; // Import the DonationToken ABI\r\nimport Login from './Login';\r\nimport './App.css';\r\n\r\nfunction CampaignInteraction() {\r\n    const [accountAddress, setAccountAddress] = useState('');\r\n    const [accountBalance, setAccountBalance] = useState('');\r\n    const [donationAmount, setDonationAmount] = useState('');\r\n    const [targetAmount, setTargetAmount] = useState('');\r\n    const [progress, setProgress] = useState(0);\r\n    const [totalDonations, setTotalDonations] = useState(0);\r\n    const [provider] = useState(new ethers.providers.JsonRpcProvider(\"http://localhost:8545\"));\r\n    const [signerIndex, setSignerIndex] = useState(null);\r\n\r\n    const [campaignContract, setCampaignContract] = useState(null);\r\n    const [donationTokenContract, setDonationTokenContract] = useState(null);\r\n    const [accountData, setAccountData] = useState([]);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [isContractsLoaded, setIsContractsLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function fetchAccountData() {\r\n            try {\r\n                const accounts = await provider.listAccounts();\r\n                setAccountData(accounts || []);\r\n            } catch (error) {\r\n                alert('Error fetching account data: ' + error.message);\r\n            }\r\n        }\r\n        fetchAccountData();\r\n    }, [provider]);\r\n\r\n    useEffect(() => {\r\n        async function initializeContracts() {\r\n            if (signerIndex !== null && provider) {\r\n                const signer = provider.getSigner(signerIndex);\r\n\r\n                try {\r\n                    // Initialize Campaign Contract\r\n                    const campaignAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"; // Replace with deployed address\r\n                    const campaign = new ethers.Contract(campaignAddress, campaignAbi.abi, signer);\r\n                    setCampaignContract(campaign);\r\n\r\n                    // Initialize Donation Token Contract\r\n                    const donationTokenAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // Replace with deployed address\r\n                    const donationToken = new ethers.Contract(donationTokenAddress, donationTokenAbi.abi, signer);\r\n                    setDonationTokenContract(donationToken);\r\n\r\n                    setIsContractsLoaded(true);\r\n                    alert(\"Contracts initialized successfully!\");\r\n                } catch (error) {\r\n                    alert('Error initializing contracts: ' + error.message);\r\n                }\r\n            }\r\n        }\r\n        initializeContracts();\r\n    }, [signerIndex, provider]);\r\n\r\n    useEffect(() => {\r\n        if (campaignContract) {\r\n            alert(\"Campaign contract state updated.\");\r\n        }\r\n    }, [campaignContract]);\r\n\r\n    async function handleLogin(address) {\r\n        try {\r\n            setIsLoggedIn(true);\r\n            setAccountAddress(address);\r\n            const balance = await provider.getBalance(address);\r\n            setAccountBalance(ethers.utils.formatEther(balance));\r\n\r\n            const index = accountData.indexOf(address);\r\n            if (index === -1) {\r\n                alert(\"Address not found in accountData.\");\r\n            } else {\r\n                setSignerIndex(index);\r\n                alert(\"Logged in successfully.\");\r\n            }\r\n        } catch (error) {\r\n            alert('Error during login: ' + error.message);\r\n        }\r\n    }\r\n\r\n    async function donate() {\r\n        try {\r\n            if (!isContractsLoaded || !campaignContract) {\r\n                alert(\"Contracts are still loading. Please wait.\");\r\n                return;\r\n            }\r\n            if (!ethers.utils.isAddress(accountAddress)) {\r\n                alert(\"Invalid account address.\");\r\n                return;\r\n            }\r\n\r\n            if (donationAmount && parseFloat(donationAmount) > 0) {\r\n                const donationValue = ethers.utils.parseEther(donationAmount);\r\n\r\n                const balance = await provider.getBalance(accountAddress);\r\n                if (balance.lt(donationValue)) {\r\n                    alert(\"Insufficient balance for the donation.\");\r\n                    return;\r\n                }\r\n\r\n                const donationTx = await campaignContract.donate({ value: donationValue });\r\n                await donationTx.wait();\r\n\r\n                const updatedBalance = await provider.getBalance(accountAddress);\r\n                setAccountBalance(ethers.utils.formatEther(updatedBalance));\r\n\r\n                const currentTotalDonations = await campaignContract.totalDonations();\r\n                const currentTargetAmount = await campaignContract.targetAmount();\r\n\r\n                setTotalDonations(ethers.utils.formatEther(currentTotalDonations));\r\n                setTargetAmount(ethers.utils.formatEther(currentTargetAmount));\r\n\r\n                const currentProgress = (parseFloat(currentTotalDonations) * 100) / parseFloat(currentTargetAmount);\r\n                setProgress(currentProgress || 0);\r\n\r\n                alert(\"Donation successful!\");\r\n            } else {\r\n                alert(\"Please enter a valid donation amount.\");\r\n            }\r\n        } catch (error) {\r\n            alert('An error occurred while making the donation. Please check the console for details.');\r\n        }\r\n    }\r\n\r\n    async function setCampaignTarget() {\r\n        try {\r\n            if (campaignContract && parseFloat(targetAmount) > 0) {\r\n                // Fetch the campaign owner's address\r\n                const campaignOwner = await campaignContract.owner(); // Assuming there's an 'owner()' function in the contract\r\n                \r\n                // Check if the current account is the campaign owner\r\n                if (accountAddress !== campaignOwner) {\r\n                    alert(\"Only the campaign owner can set the target amount.\");\r\n                    return;\r\n                }\r\n\r\n                const targetValue = ethers.utils.parseEther(targetAmount);\r\n\r\n                const currentTotalDonations = await campaignContract.totalDonations();\r\n                if (targetValue.lte(currentTotalDonations)) {\r\n                    alert(\"Target amount must be greater than total donations.\");\r\n                    return;\r\n                }\r\n\r\n                // Set target amount and wait for confirmation\r\n                const setTargetTx = await campaignContract.setTargetAmount(targetValue);\r\n                await setTargetTx.wait();\r\n\r\n                alert(\"Target amount set successfully!\");\r\n            } else {\r\n                alert(\"Please enter a valid target amount.\");\r\n            }\r\n        } catch (error) {\r\n            alert('An error occurred while setting the target amount. Please check the console for details.');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!isLoggedIn ? (\r\n                <Login accountData={accountData} onLogin={handleLogin} />\r\n            ) : (\r\n                <div>\r\n                    <h1>Campaign Interaction</h1>\r\n\r\n                    <div>\r\n                        <h2>Connected Account Information</h2>\r\n                        <p>Address: {accountAddress}</p>\r\n                        <p>Balance: {accountBalance} ETH</p>\r\n                    </div>\r\n\r\n                    <h2>Campaign Progress</h2>\r\n                    <p>Total Donations: {totalDonations} ETH</p>\r\n                    <p>Target Amount: {targetAmount} ETH</p>\r\n                    <p>Progress: {progress.toFixed(2)}%</p>\r\n\r\n                    <hr />\r\n\r\n                    <h2>Donate to the Campaign</h2>\r\n                    <label>Donation Amount (ETH or Tokens):</label>\r\n                    <input type=\"number\" value={donationAmount} onChange={(e) => setDonationAmount(e.target.value)} /><br />\r\n                    <button onClick={donate}>Donate</button>\r\n\r\n                    <hr />\r\n\r\n                    <h2>Set Campaign Target (Owner only)</h2>\r\n                    <label>Target Amount (ETH):</label>\r\n                    <input type=\"number\" value={targetAmount} onChange={(e) => setTargetAmount(e.target.value)} /><br />\r\n                    <button onClick={setCampaignTarget}>Set Target</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CampaignInteraction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}