{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobalObject } from '@sentry/utils';\nimport { initMetric } from './lib/initMetric';\nvar global = getGlobalObject();\nvar afterLoad = function (callback) {\n  if (document.readyState === 'complete') {\n    // Queue a task so the callback runs after `loadEventEnd`.\n    setTimeout(callback, 0);\n  } else {\n    // Use `pageshow` so the callback runs after `loadEventEnd`.\n    addEventListener('pageshow', callback);\n  }\n};\nvar getNavigationEntryFromPerformanceTiming = function () {\n  // Really annoying that TypeScript errors when using `PerformanceTiming`.\n  // eslint-disable-next-line deprecation/deprecation\n  var timing = global.performance.timing;\n  var navigationEntry = {\n    entryType: 'navigation',\n    startTime: 0\n  };\n  for (var key in timing) {\n    if (key !== 'navigationStart' && key !== 'toJSON') {\n      navigationEntry[key] = Math.max(timing[key] - timing.navigationStart, 0);\n    }\n  }\n  return navigationEntry;\n};\nexport var getTTFB = function (onReport) {\n  var metric = initMetric('TTFB');\n  afterLoad(function () {\n    try {\n      // Use the NavigationTiming L2 entry if available.\n      var navigationEntry = global.performance.getEntriesByType('navigation')[0] || getNavigationEntryFromPerformanceTiming();\n      metric.value = metric.delta = navigationEntry.responseStart;\n      metric.entries = [navigationEntry];\n      onReport(metric);\n    } catch (error) {\n      // Do nothing.\n    }\n  });\n};","map":{"version":3,"names":["getGlobalObject","initMetric","global","afterLoad","callback","document","readyState","setTimeout","addEventListener","getNavigationEntryFromPerformanceTiming","timing","performance","navigationEntry","entryType","startTime","key","Math","max","navigationStart","getTTFB","onReport","metric","getEntriesByType","value","delta","responseStart","entries","error"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\tracing\\src\\browser\\web-vitals\\getTTFB.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { initMetric } from './lib/initMetric';\nimport { NavigationTimingPolyfillEntry, ReportHandler } from './types';\n\nconst global = getGlobalObject<Window>();\n\nconst afterLoad = (callback: () => void): void => {\n  if (document.readyState === 'complete') {\n    // Queue a task so the callback runs after `loadEventEnd`.\n    setTimeout(callback, 0);\n  } else {\n    // Use `pageshow` so the callback runs after `loadEventEnd`.\n    addEventListener('pageshow', callback);\n  }\n};\n\nconst getNavigationEntryFromPerformanceTiming = (): NavigationTimingPolyfillEntry => {\n  // Really annoying that TypeScript errors when using `PerformanceTiming`.\n  // eslint-disable-next-line deprecation/deprecation\n  const timing = global.performance.timing;\n\n  const navigationEntry: { [key: string]: number | string } = {\n    entryType: 'navigation',\n    startTime: 0,\n  };\n\n  for (const key in timing) {\n    if (key !== 'navigationStart' && key !== 'toJSON') {\n      navigationEntry[key] = Math.max((timing[key as keyof PerformanceTiming] as number) - timing.navigationStart, 0);\n    }\n  }\n  return navigationEntry as NavigationTimingPolyfillEntry;\n};\n\nexport const getTTFB = (onReport: ReportHandler): void => {\n  const metric = initMetric('TTFB');\n\n  afterLoad(() => {\n    try {\n      // Use the NavigationTiming L2 entry if available.\n      const navigationEntry =\n        global.performance.getEntriesByType('navigation')[0] || getNavigationEntryFromPerformanceTiming();\n\n      metric.value = metric.delta = (navigationEntry as PerformanceNavigationTiming).responseStart;\n\n      metric.entries = [navigationEntry];\n\n      onReport(metric);\n    } catch (error) {\n      // Do nothing.\n    }\n  });\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,eAAe,QAAQ,eAAe;AAE/C,SAASC,UAAU,QAAQ,kBAAkB;AAG7C,IAAMC,MAAM,GAAGF,eAAe,EAAU;AAExC,IAAMG,SAAS,GAAG,SAAAA,CAACC,QAAoB;EACrC,IAAIC,QAAQ,CAACC,UAAU,KAAK,UAAU,EAAE;IACtC;IACAC,UAAU,CAACH,QAAQ,EAAE,CAAC,CAAC;GACxB,MAAM;IACL;IACAI,gBAAgB,CAAC,UAAU,EAAEJ,QAAQ,CAAC;;AAE1C,CAAC;AAED,IAAMK,uCAAuC,GAAG,SAAAA,CAAA;EAC9C;EACA;EACA,IAAMC,MAAM,GAAGR,MAAM,CAACS,WAAW,CAACD,MAAM;EAExC,IAAME,eAAe,GAAuC;IAC1DC,SAAS,EAAE,YAAY;IACvBC,SAAS,EAAE;GACZ;EAED,KAAK,IAAMC,GAAG,IAAIL,MAAM,EAAE;IACxB,IAAIK,GAAG,KAAK,iBAAiB,IAAIA,GAAG,KAAK,QAAQ,EAAE;MACjDH,eAAe,CAACG,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAEP,MAAM,CAACK,GAA8B,CAAY,GAAGL,MAAM,CAACQ,eAAe,EAAE,CAAC,CAAC;;;EAGnH,OAAON,eAAgD;AACzD,CAAC;AAED,OAAO,IAAMO,OAAO,GAAG,SAAAA,CAACC,QAAuB;EAC7C,IAAMC,MAAM,GAAGpB,UAAU,CAAC,MAAM,CAAC;EAEjCE,SAAS,CAAC;IACR,IAAI;MACF;MACA,IAAMS,eAAe,GACnBV,MAAM,CAACS,WAAW,CAACW,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAIb,uCAAuC,EAAE;MAEnGY,MAAM,CAACE,KAAK,GAAGF,MAAM,CAACG,KAAK,GAAIZ,eAA+C,CAACa,aAAa;MAE5FJ,MAAM,CAACK,OAAO,GAAG,CAACd,eAAe,CAAC;MAElCQ,QAAQ,CAACC,MAAM,CAAC;KACjB,CAAC,OAAOM,KAAK,EAAE;MACd;IAAA;EAEJ,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}