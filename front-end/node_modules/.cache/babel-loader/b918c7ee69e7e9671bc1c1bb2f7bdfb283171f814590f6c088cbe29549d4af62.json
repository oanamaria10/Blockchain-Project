{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initializeVmTraceDecoder = exports.VmTraceDecoder = void 0;\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst reporter_1 = require(\"../../sentry/reporter\");\nconst compiler_to_model_1 = require(\"./compiler-to-model\");\nconst message_trace_1 = require(\"./message-trace\");\nconst model_1 = require(\"./model\");\nconst solidity_stack_trace_1 = require(\"./solidity-stack-trace\");\nconst log = (0, debug_1.default)(\"hardhat:core:hardhat-network:node\");\nclass VmTraceDecoder {\n  constructor(_contractsIdentifier) {\n    this._contractsIdentifier = _contractsIdentifier;\n  }\n  getContractAndFunctionNamesForCall(code, calldata) {\n    const isCreate = calldata === undefined;\n    const bytecode = this._contractsIdentifier.getBytecodeForCall(code, isCreate);\n    const contractName = bytecode?.contract.name ?? solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME;\n    if (isCreate) {\n      return {\n        contractName\n      };\n    } else {\n      if (bytecode === undefined) {\n        return {\n          contractName,\n          functionName: \"\"\n        };\n      } else {\n        const func = bytecode.contract.getFunctionFromSelector(calldata.slice(0, 4));\n        const functionName = func === undefined ? solidity_stack_trace_1.UNRECOGNIZED_FUNCTION_NAME : func.type === model_1.ContractFunctionType.FALLBACK ? solidity_stack_trace_1.FALLBACK_FUNCTION_NAME : func.type === model_1.ContractFunctionType.RECEIVE ? solidity_stack_trace_1.RECEIVE_FUNCTION_NAME : func.name;\n        return {\n          contractName,\n          functionName\n        };\n      }\n    }\n  }\n  tryToDecodeMessageTrace(messageTrace) {\n    if ((0, message_trace_1.isPrecompileTrace)(messageTrace)) {\n      return messageTrace;\n    }\n    return {\n      ...messageTrace,\n      bytecode: this._contractsIdentifier.getBytecodeForCall(messageTrace.code, (0, message_trace_1.isCreateTrace)(messageTrace)),\n      steps: messageTrace.steps.map(s => (0, message_trace_1.isEvmStep)(s) ? s : this.tryToDecodeMessageTrace(s))\n    };\n  }\n  addBytecode(bytecode) {\n    this._contractsIdentifier.addBytecode(bytecode);\n  }\n}\nexports.VmTraceDecoder = VmTraceDecoder;\nfunction initializeVmTraceDecoder(vmTraceDecoder, tracingConfig) {\n  if (tracingConfig.buildInfos === undefined) {\n    return;\n  }\n  try {\n    for (const buildInfo of tracingConfig.buildInfos) {\n      const bytecodes = (0, compiler_to_model_1.createModelsAndDecodeBytecodes)(buildInfo.solcVersion, buildInfo.input, buildInfo.output);\n      for (const bytecode of bytecodes) {\n        if (tracingConfig.ignoreContracts === true && bytecode.contract.name.startsWith(\"Ignored\")) {\n          continue;\n        }\n        vmTraceDecoder.addBytecode(bytecode);\n      }\n    }\n  } catch (error) {\n    console.warn(chalk_1.default.yellow(\"The Hardhat Network tracing engine could not be initialized. Run Hardhat with --verbose to learn more.\"));\n    log(\"Hardhat Network tracing disabled: ContractsIdentifier failed to be initialized. Please report this to help us improve Hardhat.\\n\", error);\n    if (error instanceof Error) {\n      reporter_1.Reporter.reportError(error);\n    }\n  }\n}\nexports.initializeVmTraceDecoder = initializeVmTraceDecoder;","map":{"version":3,"names":["chalk_1","__importDefault","require","debug_1","reporter_1","compiler_to_model_1","message_trace_1","model_1","solidity_stack_trace_1","log","default","VmTraceDecoder","constructor","_contractsIdentifier","getContractAndFunctionNamesForCall","code","calldata","isCreate","undefined","bytecode","getBytecodeForCall","contractName","contract","name","UNRECOGNIZED_CONTRACT_NAME","functionName","func","getFunctionFromSelector","slice","UNRECOGNIZED_FUNCTION_NAME","type","ContractFunctionType","FALLBACK","FALLBACK_FUNCTION_NAME","RECEIVE","RECEIVE_FUNCTION_NAME","tryToDecodeMessageTrace","messageTrace","isPrecompileTrace","isCreateTrace","steps","map","s","isEvmStep","addBytecode","exports","initializeVmTraceDecoder","vmTraceDecoder","tracingConfig","buildInfos","buildInfo","bytecodes","createModelsAndDecodeBytecodes","solcVersion","input","output","ignoreContracts","startsWith","error","console","warn","yellow","Error","Reporter","reportError"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\hardhat-network\\stack-traces\\vm-trace-decoder.ts"],"sourcesContent":["import chalk from \"chalk\";\nimport debug from \"debug\";\nimport { Reporter } from \"../../sentry/reporter\";\nimport { TracingConfig } from \"../provider/node-types\";\nimport { createModelsAndDecodeBytecodes } from \"./compiler-to-model\";\nimport { ContractsIdentifier } from \"./contracts-identifier\";\nimport {\n  isCreateTrace,\n  isEvmStep,\n  isPrecompileTrace,\n  MessageTrace,\n} from \"./message-trace\";\nimport { Bytecode, ContractFunctionType } from \"./model\";\nimport {\n  FALLBACK_FUNCTION_NAME,\n  RECEIVE_FUNCTION_NAME,\n  UNRECOGNIZED_CONTRACT_NAME,\n  UNRECOGNIZED_FUNCTION_NAME,\n} from \"./solidity-stack-trace\";\n\nconst log = debug(\"hardhat:core:hardhat-network:node\");\n\nexport class VmTraceDecoder {\n  constructor(private readonly _contractsIdentifier: ContractsIdentifier) {}\n\n  public getContractAndFunctionNamesForCall(\n    code: Buffer,\n    calldata?: Buffer\n  ): { contractName: string; functionName?: string } {\n    const isCreate = calldata === undefined;\n    const bytecode = this._contractsIdentifier.getBytecodeForCall(\n      code,\n      isCreate\n    );\n\n    const contractName = bytecode?.contract.name ?? UNRECOGNIZED_CONTRACT_NAME;\n\n    if (isCreate) {\n      return {\n        contractName,\n      };\n    } else {\n      if (bytecode === undefined) {\n        return {\n          contractName,\n          functionName: \"\",\n        };\n      } else {\n        const func = bytecode.contract.getFunctionFromSelector(\n          calldata.slice(0, 4)\n        );\n\n        const functionName: string =\n          func === undefined\n            ? UNRECOGNIZED_FUNCTION_NAME\n            : func.type === ContractFunctionType.FALLBACK\n            ? FALLBACK_FUNCTION_NAME\n            : func.type === ContractFunctionType.RECEIVE\n            ? RECEIVE_FUNCTION_NAME\n            : func.name;\n\n        return {\n          contractName,\n          functionName,\n        };\n      }\n    }\n  }\n\n  public tryToDecodeMessageTrace(messageTrace: MessageTrace): MessageTrace {\n    if (isPrecompileTrace(messageTrace)) {\n      return messageTrace;\n    }\n\n    return {\n      ...messageTrace,\n      bytecode: this._contractsIdentifier.getBytecodeForCall(\n        messageTrace.code,\n        isCreateTrace(messageTrace)\n      ),\n      steps: messageTrace.steps.map((s) =>\n        isEvmStep(s) ? s : this.tryToDecodeMessageTrace(s)\n      ),\n    };\n  }\n\n  public addBytecode(bytecode: Bytecode) {\n    this._contractsIdentifier.addBytecode(bytecode);\n  }\n}\n\nexport function initializeVmTraceDecoder(\n  vmTraceDecoder: VmTraceDecoder,\n  tracingConfig: TracingConfig\n) {\n  if (tracingConfig.buildInfos === undefined) {\n    return;\n  }\n\n  try {\n    for (const buildInfo of tracingConfig.buildInfos) {\n      const bytecodes = createModelsAndDecodeBytecodes(\n        buildInfo.solcVersion,\n        buildInfo.input,\n        buildInfo.output\n      );\n\n      for (const bytecode of bytecodes) {\n        if (\n          tracingConfig.ignoreContracts === true &&\n          bytecode.contract.name.startsWith(\"Ignored\")\n        ) {\n          continue;\n        }\n\n        vmTraceDecoder.addBytecode(bytecode);\n      }\n    }\n  } catch (error) {\n    console.warn(\n      chalk.yellow(\n        \"The Hardhat Network tracing engine could not be initialized. Run Hardhat with --verbose to learn more.\"\n      )\n    );\n\n    log(\n      \"Hardhat Network tracing disabled: ContractsIdentifier failed to be initialized. Please report this to help us improve Hardhat.\\n\",\n      error\n    );\n\n    if (error instanceof Error) {\n      Reporter.reportError(error);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}