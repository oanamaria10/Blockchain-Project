{"ast":null,"code":"import { Signer } from '@ucanto/principal';\nimport { Signer as EdSigner } from '@ucanto/principal/ed25519';\nimport { importDAG } from '@ucanto/core/delegation';\nimport * as Ucanto from '@ucanto/interface';\nimport { CID } from 'multiformats';\nimport { UCAN } from '@web3-storage/capabilities';\nimport { isExpired } from './delegations.js';\nimport { uint8ArrayToArrayBuffer } from './utils/buffers.js';\n/** @typedef {import('./types.js').AgentDataModel} AgentDataModel */\n/** @implements {AgentDataModel} */\nexport class AgentData {\n  /** @type {(data: import('./types.js').AgentDataExport) => Promise<void> | void} */\n  #save;\n  /**\n   * @param {import('./types.js').AgentDataModel} data\n   * @param {import('./types.js').AgentDataOptions} [options]\n   */\n  constructor(data, options = {}) {\n    this.meta = data.meta;\n    this.principal = data.principal;\n    this.spaces = data.spaces;\n    this.delegations = data.delegations;\n    this.currentSpace = data.currentSpace;\n    this.#save = data => options.store ? options.store.save(data) : undefined;\n  }\n  /**\n   * Create a new AgentData instance from the passed initialization data.\n   *\n   * @param {Partial<import('./types.js').AgentDataModel>} [init]\n   * @param {import('./types.js').AgentDataOptions} [options]\n   */\n  static async create(init = {}, options = {}) {\n    const agentData = new AgentData({\n      meta: {\n        name: 'agent',\n        type: 'device',\n        ...init.meta\n      },\n      principal: init.principal ?? (await EdSigner.generate()),\n      spaces: init.spaces ?? new Map(),\n      delegations: init.delegations ?? new Map(),\n      currentSpace: init.currentSpace\n    }, options);\n    if (options.store) {\n      await options.store.save(agentData.export());\n    }\n    return agentData;\n  }\n  /**\n   * Instantiate AgentData from previously exported data.\n   *\n   * @param {import('./types.js').AgentDataExport} raw\n   * @param {import('./types.js').AgentDataOptions} [options]\n   */\n  static fromExport(raw, options) {\n    /** @type {import('./types.js').AgentDataModel['delegations']} */\n    const dels = new Map();\n    for (const [key, value] of raw.delegations) {\n      dels.set(key, {\n        delegation: importDAG(value.delegation.map(d => ({\n          cid: CID.parse(d.cid).toV1(),\n          bytes: d.bytes instanceof Uint8Array ? d.bytes : new Uint8Array(d.bytes)\n        }))),\n        meta: value.meta\n      });\n    }\n    return new AgentData({\n      meta: raw.meta,\n      // @ts-expect-error for some reason TS thinks this is a EdSigner\n      principal: Signer.from(raw.principal),\n      currentSpace: raw.currentSpace,\n      spaces: raw.spaces,\n      delegations: dels\n    }, options);\n  }\n  /**\n   * Export data in a format safe to pass to `structuredClone()`.\n   */\n  export() {\n    /** @type {import('./types.js').AgentDataExport} */\n    const raw = {\n      meta: this.meta,\n      principal: this.principal.toArchive(),\n      currentSpace: this.currentSpace,\n      spaces: this.spaces,\n      delegations: new Map()\n    };\n    for (const [key, value] of this.delegations) {\n      raw.delegations.set(key, {\n        meta: value.meta,\n        delegation: [...value.delegation.export()].map(b => ({\n          cid: b.cid.toString(),\n          bytes: uint8ArrayToArrayBuffer(b.bytes)\n        }))\n      });\n    }\n    return raw;\n  }\n  /**\n   * @param {import('@ucanto/interface').DID} did\n   * @param {import('./types.js').SpaceMeta} meta\n   * @param {import('@ucanto/interface').Delegation} [proof]\n   */\n  async addSpace(did, meta, proof) {\n    this.spaces.set(did, meta);\n    await (proof ? this.addDelegation(proof) : this.#save(this.export()));\n  }\n  /**\n   * @deprecated\n   * @param {import('@ucanto/interface').DID<'key'>} did\n   */\n  async setCurrentSpace(did) {\n    this.currentSpace = did;\n    await this.#save(this.export());\n  }\n  /**\n   * @param {import('@ucanto/interface').Delegation} delegation\n   * @param {import('./types.js').DelegationMeta} [meta]\n   */\n  async addDelegation(delegation, meta) {\n    this.delegations.set(delegation.cid.toString(), {\n      delegation,\n      meta: meta ?? {}\n    });\n    await this.#save(this.export());\n  }\n  /**\n   * @param {import('@ucanto/interface').UCANLink} cid\n   */\n  async removeDelegation(cid) {\n    this.delegations.delete(cid.toString());\n    await this.#save(this.export());\n  }\n}\n/**\n * Is the given capability a session attestation?\n *\n * @param {Ucanto.Capability} cap\n * @returns {boolean}\n */\nconst isSessionCapability = cap => cap.can === UCAN.attest.can;\n/**\n * Is the given delegation a session proof?\n *\n * @param {Ucanto.Delegation} delegation\n * @returns {delegation is Ucanto.Delegation<[import('./types.js').UCANAttest]>}\n */\nexport const isSessionProof = delegation => delegation.capabilities.some(cap => isSessionCapability(cap));\n/**\n * @typedef {string} SessionProofAuthorizationCid - the nb.proof CID of the ucan/attest in the session proof\n * @typedef {Ucanto.DID} SessionProofIssuer - issuer of ucan/attest session proof\n * @typedef {Record<SessionProofAuthorizationCid, Record<SessionProofIssuer, [Ucanto.Delegation, ...Ucanto.Delegation[]]>>} SessionProofIndexedByAuthorizationAndIssuer\n */\n/**\n * Get a map from CIDs to the session proofs that reference them\n *\n * @param {AgentData} data\n * @returns {SessionProofIndexedByAuthorizationAndIssuer}\n */\nexport function getSessionProofs(data) {\n  /** @type {SessionProofIndexedByAuthorizationAndIssuer} */\n  const proofs = {};\n  for (const {\n    delegation\n  } of data.delegations.values()) {\n    if (isSessionProof(delegation)) {\n      const cap = delegation.capabilities[0];\n      if (cap && !isExpired(delegation)) {\n        const proof = cap.nb.proof;\n        if (proof) {\n          const proofCid = proof.toString();\n          const issuerDid = delegation.issuer.did();\n          proofs[proofCid] = proofs[proofCid] ?? {};\n          proofs[proofCid][issuerDid] = proofs[proofCid][issuerDid] ?? [];\n          proofs[proofCid][issuerDid].push(delegation);\n        }\n      }\n    }\n  }\n  return proofs;\n}","map":{"version":3,"names":["Signer","EdSigner","importDAG","Ucanto","CID","UCAN","isExpired","uint8ArrayToArrayBuffer","AgentData","save","constructor","data","options","meta","principal","spaces","delegations","currentSpace","store","undefined","create","init","agentData","name","type","generate","Map","export","fromExport","raw","dels","key","value","set","delegation","map","d","cid","parse","toV1","bytes","Uint8Array","from","toArchive","b","toString","addSpace","did","proof","addDelegation","setCurrentSpace","removeDelegation","delete","isSessionCapability","cap","can","attest","isSessionProof","capabilities","some","getSessionProofs","proofs","values","nb","proofCid","issuerDid","issuer","push"],"sources":["../../src/agent-data.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}