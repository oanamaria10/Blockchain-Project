{"ast":null,"code":"import { __assign, __extends, __read, __spread } from \"tslib\";\nimport { BaseClient } from '@sentry/core';\nimport { NodeBackend } from './backend';\nimport { SDK_NAME, SDK_VERSION } from './version';\n/**\n * The Sentry Node SDK Client.\n *\n * @see NodeOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nvar NodeClient = /** @class */function (_super) {\n  __extends(NodeClient, _super);\n  /**\n   * Creates a new Node SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  function NodeClient(options) {\n    return _super.call(this, NodeBackend, options) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n  NodeClient.prototype._prepareEvent = function (event, scope, hint) {\n    event.platform = event.platform || 'node';\n    event.sdk = __assign(__assign({}, event.sdk), {\n      name: SDK_NAME,\n      packages: __spread(event.sdk && event.sdk.packages || [], [{\n        name: 'npm:@sentry/node',\n        version: SDK_VERSION\n      }]),\n      version: SDK_VERSION\n    });\n    if (this.getOptions().serverName) {\n      event.server_name = this.getOptions().serverName;\n    }\n    return _super.prototype._prepareEvent.call(this, event, scope, hint);\n  };\n  return NodeClient;\n}(BaseClient);\nexport { NodeClient };","map":{"version":3,"names":["BaseClient","NodeBackend","SDK_NAME","SDK_VERSION","NodeClient","_super","__extends","options","call","prototype","_prepareEvent","event","scope","hint","platform","sdk","__assign","name","packages","__spread","version","getOptions","serverName","server_name"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\node\\src\\client.ts"],"sourcesContent":["import { BaseClient, Scope } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\n\nimport { NodeBackend, NodeOptions } from './backend';\nimport { SDK_NAME, SDK_VERSION } from './version';\n\n/**\n * The Sentry Node SDK Client.\n *\n * @see NodeOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n  /**\n   * Creates a new Node SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: NodeOptions) {\n    super(NodeBackend, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'node';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/node',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    if (this.getOptions().serverName) {\n      event.server_name = this.getOptions().serverName;\n    }\n\n    return super._prepareEvent(event, scope, hint);\n  }\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAe,cAAc;AAGhD,SAASC,WAAW,QAAqB,WAAW;AACpD,SAASC,QAAQ,EAAEC,WAAW,QAAQ,WAAW;AAEjD;;;;;;AAMA,IAAAC,UAAA,0BAAAC,MAAA;EAAgCC,SAAA,CAAAF,UAAA,EAAAC,MAAA;EAC9B;;;;EAIA,SAAAD,WAAmBG,OAAoB;WACrCF,MAAA,CAAAG,IAAA,OAAMP,WAAW,EAAEM,OAAO,CAAC;EAC7B;EAEA;;;EAGUH,UAAA,CAAAK,SAAA,CAAAC,aAAa,GAAvB,UAAwBC,KAAY,EAAEC,KAAa,EAAEC,IAAgB;IACnEF,KAAK,CAACG,QAAQ,GAAGH,KAAK,CAACG,QAAQ,IAAI,MAAM;IACzCH,KAAK,CAACI,GAAG,GAAAC,QAAA,CAAAA,QAAA,KACJL,KAAK,CAACI,GAAG;MACZE,IAAI,EAAEf,QAAQ;MACdgB,QAAQ,EAAAC,QAAA,CACDR,KAAK,CAACI,GAAG,IAAIJ,KAAK,CAACI,GAAG,CAACG,QAAQ,IAAK,EAAE,EAAC,CAC5C;QACED,IAAI,EAAE,kBAAkB;QACxBG,OAAO,EAAEjB;OACV,C;MAEHiB,OAAO,EAAEjB;IAAW,EACrB;IAED,IAAI,IAAI,CAACkB,UAAU,EAAE,CAACC,UAAU,EAAE;MAChCX,KAAK,CAACY,WAAW,GAAG,IAAI,CAACF,UAAU,EAAE,CAACC,UAAU;;IAGlD,OAAOjB,MAAA,CAAAI,SAAA,CAAMC,aAAa,CAAAF,IAAA,OAACG,KAAK,EAAEC,KAAK,EAAEC,IAAI,CAAC;EAChD,CAAC;EACH,OAAAT,UAAC;AAAD,CAAC,CAjC+BJ,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}