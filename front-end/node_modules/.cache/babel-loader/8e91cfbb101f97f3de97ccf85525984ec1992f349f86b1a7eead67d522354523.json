{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveProjectPaths = exports.resolveConfig = void 0;\nconst path_1 = __importDefault(require(\"path\"));\nconst semver_1 = __importDefault(require(\"semver\"));\nconst constants_1 = require(\"../../constants\");\nconst lang_1 = require(\"../../util/lang\");\nconst errors_1 = require(\"../errors\");\nconst fs_utils_1 = require(\"../../util/fs-utils\");\nconst default_config_1 = require(\"./default-config\");\n/**\n * This functions resolves the hardhat config, setting its defaults and\n * normalizing its types if necessary.\n *\n * @param userConfigPath the user config filepath\n * @param userConfig     the user config object\n *\n * @returns the resolved config\n */\nfunction resolveConfig(userConfigPath, userConfig) {\n  const cloneDeep = require(\"lodash/cloneDeep\");\n  userConfig = cloneDeep(userConfig);\n  return {\n    ...userConfig,\n    defaultNetwork: userConfig.defaultNetwork ?? default_config_1.defaultDefaultNetwork,\n    paths: resolveProjectPaths(userConfigPath, userConfig.paths),\n    networks: resolveNetworksConfig(userConfig.networks),\n    solidity: resolveSolidityConfig(userConfig),\n    mocha: resolveMochaConfig(userConfig)\n  };\n}\nexports.resolveConfig = resolveConfig;\nfunction resolveNetworksConfig(networksConfig = {}) {\n  const cloneDeep = require(\"lodash/cloneDeep\");\n  const hardhatNetworkConfig = networksConfig[constants_1.HARDHAT_NETWORK_NAME];\n  const localhostNetworkConfig = networksConfig.localhost ?? undefined;\n  const hardhat = resolveHardhatNetworkConfig(hardhatNetworkConfig);\n  const localhost = resolveHttpNetworkConfig({\n    ...cloneDeep(default_config_1.defaultLocalhostNetworkParams),\n    ...localhostNetworkConfig\n  });\n  const otherNetworks = (0, lang_1.fromEntries)(Object.entries(networksConfig).filter(([name, config]) => name !== \"localhost\" && name !== \"hardhat\" && config !== undefined && isHttpNetworkConfig(config)).map(([name, config]) => [name, resolveHttpNetworkConfig(config)]));\n  return {\n    hardhat,\n    localhost,\n    ...otherNetworks\n  };\n}\nfunction isHttpNetworkConfig(config) {\n  return \"url\" in config;\n}\nfunction normalizeHexString(str) {\n  const normalized = str.trim().toLowerCase();\n  if (normalized.startsWith(\"0x\")) {\n    return normalized;\n  }\n  return `0x${normalized}`;\n}\nfunction resolveHardhatNetworkConfig(hardhatNetworkConfig = {}) {\n  const cloneDeep = require(\"lodash/cloneDeep\");\n  const clonedDefaultHardhatNetworkParams = cloneDeep(default_config_1.defaultHardhatNetworkParams);\n  const accounts = hardhatNetworkConfig.accounts === undefined ? default_config_1.defaultHardhatNetworkHdAccountsConfigParams : Array.isArray(hardhatNetworkConfig.accounts) ? hardhatNetworkConfig.accounts.map(({\n    privateKey,\n    balance\n  }) => ({\n    privateKey: normalizeHexString(privateKey),\n    balance\n  })) : {\n    ...default_config_1.defaultHardhatNetworkHdAccountsConfigParams,\n    ...hardhatNetworkConfig.accounts\n  };\n  const forking = hardhatNetworkConfig.forking !== undefined ? {\n    url: hardhatNetworkConfig.forking.url,\n    enabled: hardhatNetworkConfig.forking.enabled ?? true,\n    httpHeaders: {}\n  } : undefined;\n  if (forking !== undefined) {\n    const blockNumber = hardhatNetworkConfig?.forking?.blockNumber;\n    if (blockNumber !== undefined) {\n      forking.blockNumber = hardhatNetworkConfig?.forking?.blockNumber;\n    }\n    const httpHeaders = hardhatNetworkConfig.forking?.httpHeaders;\n    if (httpHeaders !== undefined) {\n      forking.httpHeaders = httpHeaders;\n    }\n  }\n  const mining = resolveMiningConfig(hardhatNetworkConfig.mining);\n  const minGasPrice = BigInt(hardhatNetworkConfig.minGasPrice ?? clonedDefaultHardhatNetworkParams.minGasPrice);\n  const blockGasLimit = hardhatNetworkConfig.blockGasLimit ?? clonedDefaultHardhatNetworkParams.blockGasLimit;\n  const gas = hardhatNetworkConfig.gas ?? blockGasLimit;\n  const gasPrice = hardhatNetworkConfig.gasPrice ?? clonedDefaultHardhatNetworkParams.gasPrice;\n  const initialBaseFeePerGas = hardhatNetworkConfig.initialBaseFeePerGas ?? clonedDefaultHardhatNetworkParams.initialBaseFeePerGas;\n  const initialDate = hardhatNetworkConfig.initialDate ?? new Date().toISOString();\n  const chains = new Map(default_config_1.defaultHardhatNetworkParams.chains);\n  if (hardhatNetworkConfig.chains !== undefined) {\n    for (const [chainId, userChainConfig] of Object.entries(hardhatNetworkConfig.chains)) {\n      const chainConfig = {\n        hardforkHistory: new Map()\n      };\n      if (userChainConfig.hardforkHistory !== undefined) {\n        for (const [name, block] of Object.entries(userChainConfig.hardforkHistory)) {\n          chainConfig.hardforkHistory.set(name, block);\n        }\n      }\n      chains.set(parseInt(chainId, 10), chainConfig);\n    }\n  }\n  const config = {\n    ...clonedDefaultHardhatNetworkParams,\n    ...hardhatNetworkConfig,\n    accounts,\n    forking,\n    mining,\n    blockGasLimit,\n    gas,\n    gasPrice,\n    initialBaseFeePerGas,\n    initialDate,\n    minGasPrice,\n    chains\n  };\n  // We do it this way because ts gets lost otherwise\n  if (config.forking === undefined) {\n    delete config.forking;\n  }\n  if (config.initialBaseFeePerGas === undefined) {\n    delete config.initialBaseFeePerGas;\n  }\n  if (hardhatNetworkConfig.enableTransientStorage === true && hardhatNetworkConfig.hardfork === undefined) {\n    config.hardfork = \"cancun\";\n  }\n  if (hardhatNetworkConfig.enableTransientStorage === false && hardhatNetworkConfig.hardfork === undefined) {\n    config.hardfork = \"shanghai\";\n  }\n  return config;\n}\nfunction isHdAccountsConfig(accounts) {\n  return typeof accounts === \"object\" && !Array.isArray(accounts);\n}\nfunction resolveHttpNetworkConfig(networkConfig) {\n  const cloneDeep = require(\"lodash/cloneDeep\");\n  const accounts = networkConfig.accounts === undefined ? default_config_1.defaultHttpNetworkParams.accounts : isHdAccountsConfig(networkConfig.accounts) ? {\n    ...default_config_1.defaultHdAccountsConfigParams,\n    ...networkConfig.accounts\n  } : Array.isArray(networkConfig.accounts) ? networkConfig.accounts.map(normalizeHexString) : \"remote\";\n  const url = networkConfig.url;\n  (0, errors_1.assertHardhatInvariant)(url !== undefined, \"Invalid http network config provided. URL missing.\");\n  return {\n    ...cloneDeep(default_config_1.defaultHttpNetworkParams),\n    ...networkConfig,\n    accounts,\n    url,\n    gas: networkConfig.gas ?? default_config_1.defaultHttpNetworkParams.gas,\n    gasPrice: networkConfig.gasPrice ?? default_config_1.defaultHttpNetworkParams.gasPrice\n  };\n}\nfunction resolveMiningConfig(userConfig) {\n  const mempool = resolveMempoolConfig(userConfig?.mempool);\n  if (userConfig === undefined) {\n    return {\n      auto: true,\n      interval: 0,\n      mempool\n    };\n  }\n  const {\n    auto,\n    interval\n  } = userConfig;\n  if (auto === undefined && interval === undefined) {\n    return {\n      auto: true,\n      interval: 0,\n      mempool\n    };\n  }\n  if (auto === undefined && interval !== undefined) {\n    return {\n      auto: false,\n      interval,\n      mempool\n    };\n  }\n  if (auto !== undefined && interval === undefined) {\n    return {\n      auto,\n      interval: 0,\n      mempool\n    };\n  }\n  // ts can't infer it, but both values are defined here\n  return {\n    auto: auto,\n    interval: interval,\n    mempool\n  };\n}\nfunction resolveMempoolConfig(userConfig) {\n  if (userConfig === undefined) {\n    return {\n      order: \"priority\"\n    };\n  }\n  if (userConfig.order === undefined) {\n    return {\n      order: \"priority\"\n    };\n  }\n  return {\n    order: userConfig.order\n  };\n}\nfunction resolveSolidityConfig(userConfig) {\n  const userSolidityConfig = userConfig.solidity ?? default_config_1.DEFAULT_SOLC_VERSION;\n  const multiSolcConfig = normalizeSolidityConfig(userSolidityConfig);\n  const overrides = multiSolcConfig.overrides ?? {};\n  return {\n    compilers: multiSolcConfig.compilers.map(resolveCompiler),\n    overrides: (0, lang_1.fromEntries)(Object.entries(overrides).map(([name, config]) => [name, resolveCompiler(config)]))\n  };\n}\nfunction normalizeSolidityConfig(solidityConfig) {\n  if (typeof solidityConfig === \"string\") {\n    return {\n      compilers: [{\n        version: solidityConfig\n      }]\n    };\n  }\n  if (\"version\" in solidityConfig) {\n    return {\n      compilers: [solidityConfig]\n    };\n  }\n  return solidityConfig;\n}\nfunction resolveCompiler(compiler) {\n  const resolved = {\n    version: compiler.version,\n    settings: compiler.settings ?? {}\n  };\n  if (semver_1.default.gte(resolved.version, \"0.8.20\")) {\n    resolved.settings.evmVersion = compiler.settings?.evmVersion ?? \"paris\";\n  }\n  resolved.settings.optimizer = {\n    enabled: false,\n    runs: 200,\n    ...resolved.settings.optimizer\n  };\n  if (resolved.settings.outputSelection === undefined) {\n    resolved.settings.outputSelection = {};\n  }\n  for (const [file, contractSelection] of Object.entries(default_config_1.defaultSolcOutputSelection)) {\n    if (resolved.settings.outputSelection[file] === undefined) {\n      resolved.settings.outputSelection[file] = {};\n    }\n    for (const [contract, outputs] of Object.entries(contractSelection)) {\n      if (resolved.settings.outputSelection[file][contract] === undefined) {\n        resolved.settings.outputSelection[file][contract] = [];\n      }\n      for (const output of outputs) {\n        const includesOutput = resolved.settings.outputSelection[file][contract].includes(output);\n        if (!includesOutput) {\n          resolved.settings.outputSelection[file][contract].push(output);\n        }\n      }\n    }\n  }\n  return resolved;\n}\nfunction resolveMochaConfig(userConfig) {\n  const cloneDeep = require(\"lodash/cloneDeep\");\n  return {\n    ...cloneDeep(default_config_1.defaultMochaOptions),\n    ...userConfig.mocha\n  };\n}\n/**\n * This function resolves the ProjectPathsConfig object from the user-provided config\n * and its path. The logic of this is not obvious and should well be document.\n * The good thing is that most users will never use this.\n *\n * Explanation:\n *    - paths.configFile is not overridable\n *    - If a path is absolute it is used \"as is\".\n *    - If the root path is relative, it's resolved from paths.configFile's dir.\n *    - If any other path is relative, it's resolved from paths.root.\n *    - Plugin-defined paths are not resolved, but encouraged to follow the same pattern.\n */\nfunction resolveProjectPaths(userConfigPath, userPaths = {}) {\n  const configFile = (0, fs_utils_1.getRealPathSync)(userConfigPath);\n  const configDir = path_1.default.dirname(configFile);\n  const root = resolvePathFrom(configDir, \"\", userPaths.root);\n  return {\n    ...userPaths,\n    root,\n    configFile,\n    sources: resolvePathFrom(root, \"contracts\", userPaths.sources),\n    cache: resolvePathFrom(root, \"cache\", userPaths.cache),\n    artifacts: resolvePathFrom(root, \"artifacts\", userPaths.artifacts),\n    tests: resolvePathFrom(root, \"test\", userPaths.tests)\n  };\n}\nexports.resolveProjectPaths = resolveProjectPaths;\nfunction resolvePathFrom(from, defaultPath, relativeOrAbsolutePath = defaultPath) {\n  if (path_1.default.isAbsolute(relativeOrAbsolutePath)) {\n    return relativeOrAbsolutePath;\n  }\n  return path_1.default.join(from, relativeOrAbsolutePath);\n}","map":{"version":3,"names":["path_1","__importDefault","require","semver_1","constants_1","lang_1","errors_1","fs_utils_1","default_config_1","resolveConfig","userConfigPath","userConfig","cloneDeep","defaultNetwork","defaultDefaultNetwork","paths","resolveProjectPaths","networks","resolveNetworksConfig","solidity","resolveSolidityConfig","mocha","resolveMochaConfig","exports","networksConfig","hardhatNetworkConfig","HARDHAT_NETWORK_NAME","localhostNetworkConfig","localhost","undefined","hardhat","resolveHardhatNetworkConfig","resolveHttpNetworkConfig","defaultLocalhostNetworkParams","otherNetworks","fromEntries","Object","entries","filter","name","config","isHttpNetworkConfig","map","normalizeHexString","str","normalized","trim","toLowerCase","startsWith","clonedDefaultHardhatNetworkParams","defaultHardhatNetworkParams","accounts","defaultHardhatNetworkHdAccountsConfigParams","Array","isArray","privateKey","balance","forking","url","enabled","httpHeaders","blockNumber","mining","resolveMiningConfig","minGasPrice","BigInt","blockGasLimit","gas","gasPrice","initialBaseFeePerGas","initialDate","Date","toISOString","chains","Map","chainId","userChainConfig","chainConfig","hardforkHistory","block","set","parseInt","enableTransientStorage","hardfork","isHdAccountsConfig","networkConfig","defaultHttpNetworkParams","defaultHdAccountsConfigParams","assertHardhatInvariant","mempool","resolveMempoolConfig","auto","interval","order","userSolidityConfig","DEFAULT_SOLC_VERSION","multiSolcConfig","normalizeSolidityConfig","overrides","compilers","resolveCompiler","solidityConfig","version","compiler","resolved","settings","default","gte","evmVersion","optimizer","runs","outputSelection","file","contractSelection","defaultSolcOutputSelection","contract","outputs","output","includesOutput","includes","push","defaultMochaOptions","userPaths","configFile","getRealPathSync","configDir","dirname","root","resolvePathFrom","sources","cache","artifacts","tests","from","defaultPath","relativeOrAbsolutePath","isAbsolute","join"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\core\\config\\config-resolution.ts"],"sourcesContent":["import type { LoDashStatic } from \"lodash\";\n\nimport path from \"path\";\nimport semver from \"semver\";\n\nimport {\n  HardhatConfig,\n  HardhatNetworkAccountsConfig,\n  HardhatNetworkChainConfig,\n  HardhatNetworkChainsConfig,\n  HardhatNetworkConfig,\n  HardhatNetworkForkingConfig,\n  HardhatNetworkMiningConfig,\n  HardhatNetworkMiningUserConfig,\n  HardhatNetworkMempoolConfig,\n  HardhatNetworkMempoolUserConfig,\n  HardhatNetworkUserConfig,\n  HardhatUserConfig,\n  HDAccountsUserConfig,\n  HttpNetworkAccountsConfig,\n  HttpNetworkAccountsUserConfig,\n  HttpNetworkConfig,\n  HttpNetworkUserConfig,\n  MultiSolcUserConfig,\n  NetworksConfig,\n  NetworksUserConfig,\n  NetworkUserConfig,\n  ProjectPathsConfig,\n  ProjectPathsUserConfig,\n  SolcConfig,\n  SolcUserConfig,\n  SolidityConfig,\n  SolidityUserConfig,\n} from \"../../../types\";\nimport { HARDHAT_NETWORK_NAME } from \"../../constants\";\nimport { HardforkName } from \"../../util/hardforks\";\nimport { fromEntries } from \"../../util/lang\";\nimport { assertHardhatInvariant } from \"../errors\";\n\nimport { getRealPathSync } from \"../../util/fs-utils\";\nimport {\n  DEFAULT_SOLC_VERSION,\n  defaultDefaultNetwork,\n  defaultHardhatNetworkHdAccountsConfigParams,\n  defaultHardhatNetworkParams,\n  defaultHdAccountsConfigParams,\n  defaultHttpNetworkParams,\n  defaultLocalhostNetworkParams,\n  defaultMochaOptions,\n  defaultSolcOutputSelection,\n} from \"./default-config\";\n\n/**\n * This functions resolves the hardhat config, setting its defaults and\n * normalizing its types if necessary.\n *\n * @param userConfigPath the user config filepath\n * @param userConfig     the user config object\n *\n * @returns the resolved config\n */\nexport function resolveConfig(\n  userConfigPath: string,\n  userConfig: HardhatUserConfig\n): HardhatConfig {\n  const cloneDeep = require(\"lodash/cloneDeep\") as LoDashStatic[\"cloneDeep\"];\n  userConfig = cloneDeep(userConfig);\n\n  return {\n    ...userConfig,\n    defaultNetwork: userConfig.defaultNetwork ?? defaultDefaultNetwork,\n    paths: resolveProjectPaths(userConfigPath, userConfig.paths),\n    networks: resolveNetworksConfig(userConfig.networks),\n    solidity: resolveSolidityConfig(userConfig),\n    mocha: resolveMochaConfig(userConfig),\n  };\n}\n\nfunction resolveNetworksConfig(\n  networksConfig: NetworksUserConfig = {}\n): NetworksConfig {\n  const cloneDeep = require(\"lodash/cloneDeep\") as LoDashStatic[\"cloneDeep\"];\n  const hardhatNetworkConfig = networksConfig[HARDHAT_NETWORK_NAME];\n\n  const localhostNetworkConfig =\n    (networksConfig.localhost as HttpNetworkUserConfig) ?? undefined;\n\n  const hardhat = resolveHardhatNetworkConfig(hardhatNetworkConfig);\n  const localhost = resolveHttpNetworkConfig({\n    ...cloneDeep(defaultLocalhostNetworkParams),\n    ...localhostNetworkConfig,\n  });\n\n  const otherNetworks: { [name: string]: HttpNetworkConfig } = fromEntries(\n    Object.entries(networksConfig)\n      .filter(\n        ([name, config]) =>\n          name !== \"localhost\" &&\n          name !== \"hardhat\" &&\n          config !== undefined &&\n          isHttpNetworkConfig(config)\n      )\n      .map(([name, config]) => [\n        name,\n        resolveHttpNetworkConfig(config as HttpNetworkUserConfig),\n      ])\n  );\n\n  return {\n    hardhat,\n    localhost,\n    ...otherNetworks,\n  };\n}\n\nfunction isHttpNetworkConfig(\n  config: NetworkUserConfig\n): config is HttpNetworkUserConfig {\n  return \"url\" in config;\n}\n\nfunction normalizeHexString(str: string): string {\n  const normalized = str.trim().toLowerCase();\n  if (normalized.startsWith(\"0x\")) {\n    return normalized;\n  }\n\n  return `0x${normalized}`;\n}\n\nfunction resolveHardhatNetworkConfig(\n  hardhatNetworkConfig: HardhatNetworkUserConfig = {}\n): HardhatNetworkConfig {\n  const cloneDeep = require(\"lodash/cloneDeep\") as LoDashStatic[\"cloneDeep\"];\n  const clonedDefaultHardhatNetworkParams = cloneDeep(\n    defaultHardhatNetworkParams\n  );\n\n  const accounts: HardhatNetworkAccountsConfig =\n    hardhatNetworkConfig.accounts === undefined\n      ? defaultHardhatNetworkHdAccountsConfigParams\n      : Array.isArray(hardhatNetworkConfig.accounts)\n      ? hardhatNetworkConfig.accounts.map(({ privateKey, balance }) => ({\n          privateKey: normalizeHexString(privateKey),\n          balance,\n        }))\n      : {\n          ...defaultHardhatNetworkHdAccountsConfigParams,\n          ...hardhatNetworkConfig.accounts,\n        };\n\n  const forking: HardhatNetworkForkingConfig | undefined =\n    hardhatNetworkConfig.forking !== undefined\n      ? {\n          url: hardhatNetworkConfig.forking.url,\n          enabled: hardhatNetworkConfig.forking.enabled ?? true,\n          httpHeaders: {},\n        }\n      : undefined;\n\n  if (forking !== undefined) {\n    const blockNumber = hardhatNetworkConfig?.forking?.blockNumber;\n    if (blockNumber !== undefined) {\n      forking.blockNumber = hardhatNetworkConfig?.forking?.blockNumber;\n    }\n\n    const httpHeaders = hardhatNetworkConfig.forking?.httpHeaders;\n    if (httpHeaders !== undefined) {\n      forking.httpHeaders = httpHeaders;\n    }\n  }\n\n  const mining = resolveMiningConfig(hardhatNetworkConfig.mining);\n\n  const minGasPrice = BigInt(\n    hardhatNetworkConfig.minGasPrice ??\n      clonedDefaultHardhatNetworkParams.minGasPrice\n  );\n\n  const blockGasLimit =\n    hardhatNetworkConfig.blockGasLimit ??\n    clonedDefaultHardhatNetworkParams.blockGasLimit;\n\n  const gas = hardhatNetworkConfig.gas ?? blockGasLimit;\n  const gasPrice =\n    hardhatNetworkConfig.gasPrice ?? clonedDefaultHardhatNetworkParams.gasPrice;\n  const initialBaseFeePerGas =\n    hardhatNetworkConfig.initialBaseFeePerGas ??\n    clonedDefaultHardhatNetworkParams.initialBaseFeePerGas;\n\n  const initialDate =\n    hardhatNetworkConfig.initialDate ?? new Date().toISOString();\n\n  const chains: HardhatNetworkChainsConfig = new Map(\n    defaultHardhatNetworkParams.chains\n  );\n  if (hardhatNetworkConfig.chains !== undefined) {\n    for (const [chainId, userChainConfig] of Object.entries(\n      hardhatNetworkConfig.chains\n    )) {\n      const chainConfig: HardhatNetworkChainConfig = {\n        hardforkHistory: new Map(),\n      };\n      if (userChainConfig.hardforkHistory !== undefined) {\n        for (const [name, block] of Object.entries(\n          userChainConfig.hardforkHistory\n        )) {\n          chainConfig.hardforkHistory.set(\n            name as HardforkName,\n            block as number\n          );\n        }\n      }\n      chains.set(parseInt(chainId, 10), chainConfig);\n    }\n  }\n\n  const config: HardhatNetworkConfig = {\n    ...clonedDefaultHardhatNetworkParams,\n    ...hardhatNetworkConfig,\n    accounts,\n    forking,\n    mining,\n    blockGasLimit,\n    gas,\n    gasPrice,\n    initialBaseFeePerGas,\n    initialDate,\n    minGasPrice,\n    chains,\n  };\n\n  // We do it this way because ts gets lost otherwise\n  if (config.forking === undefined) {\n    delete config.forking;\n  }\n  if (config.initialBaseFeePerGas === undefined) {\n    delete config.initialBaseFeePerGas;\n  }\n\n  if (\n    hardhatNetworkConfig.enableTransientStorage === true &&\n    hardhatNetworkConfig.hardfork === undefined\n  ) {\n    config.hardfork = \"cancun\";\n  }\n  if (\n    hardhatNetworkConfig.enableTransientStorage === false &&\n    hardhatNetworkConfig.hardfork === undefined\n  ) {\n    config.hardfork = \"shanghai\";\n  }\n\n  return config;\n}\n\nfunction isHdAccountsConfig(\n  accounts: HttpNetworkAccountsUserConfig\n): accounts is HDAccountsUserConfig {\n  return typeof accounts === \"object\" && !Array.isArray(accounts);\n}\n\nfunction resolveHttpNetworkConfig(\n  networkConfig: HttpNetworkUserConfig\n): HttpNetworkConfig {\n  const cloneDeep = require(\"lodash/cloneDeep\") as LoDashStatic[\"cloneDeep\"];\n  const accounts: HttpNetworkAccountsConfig =\n    networkConfig.accounts === undefined\n      ? defaultHttpNetworkParams.accounts\n      : isHdAccountsConfig(networkConfig.accounts)\n      ? {\n          ...defaultHdAccountsConfigParams,\n          ...networkConfig.accounts,\n        }\n      : Array.isArray(networkConfig.accounts)\n      ? networkConfig.accounts.map(normalizeHexString)\n      : \"remote\";\n\n  const url = networkConfig.url;\n\n  assertHardhatInvariant(\n    url !== undefined,\n    \"Invalid http network config provided. URL missing.\"\n  );\n\n  return {\n    ...cloneDeep(defaultHttpNetworkParams),\n    ...networkConfig,\n    accounts,\n    url,\n    gas: networkConfig.gas ?? defaultHttpNetworkParams.gas,\n    gasPrice: networkConfig.gasPrice ?? defaultHttpNetworkParams.gasPrice,\n  };\n}\n\nfunction resolveMiningConfig(\n  userConfig: HardhatNetworkMiningUserConfig | undefined\n): HardhatNetworkMiningConfig {\n  const mempool = resolveMempoolConfig(userConfig?.mempool);\n  if (userConfig === undefined) {\n    return {\n      auto: true,\n      interval: 0,\n      mempool,\n    };\n  }\n\n  const { auto, interval } = userConfig;\n\n  if (auto === undefined && interval === undefined) {\n    return {\n      auto: true,\n      interval: 0,\n      mempool,\n    };\n  }\n\n  if (auto === undefined && interval !== undefined) {\n    return {\n      auto: false,\n      interval,\n      mempool,\n    };\n  }\n\n  if (auto !== undefined && interval === undefined) {\n    return {\n      auto,\n      interval: 0,\n      mempool,\n    };\n  }\n\n  // ts can't infer it, but both values are defined here\n  return {\n    auto: auto!,\n    interval: interval!,\n    mempool,\n  };\n}\n\nfunction resolveMempoolConfig(\n  userConfig: HardhatNetworkMempoolUserConfig | undefined\n): HardhatNetworkMempoolConfig {\n  if (userConfig === undefined) {\n    return {\n      order: \"priority\",\n    };\n  }\n\n  if (userConfig.order === undefined) {\n    return {\n      order: \"priority\",\n    };\n  }\n\n  return {\n    order: userConfig.order,\n  } as HardhatNetworkMempoolConfig;\n}\n\nfunction resolveSolidityConfig(userConfig: HardhatUserConfig): SolidityConfig {\n  const userSolidityConfig = userConfig.solidity ?? DEFAULT_SOLC_VERSION;\n\n  const multiSolcConfig: MultiSolcUserConfig =\n    normalizeSolidityConfig(userSolidityConfig);\n\n  const overrides = multiSolcConfig.overrides ?? {};\n\n  return {\n    compilers: multiSolcConfig.compilers.map(resolveCompiler),\n    overrides: fromEntries(\n      Object.entries(overrides).map(([name, config]) => [\n        name,\n        resolveCompiler(config),\n      ])\n    ),\n  };\n}\n\nfunction normalizeSolidityConfig(\n  solidityConfig: SolidityUserConfig\n): MultiSolcUserConfig {\n  if (typeof solidityConfig === \"string\") {\n    return {\n      compilers: [\n        {\n          version: solidityConfig,\n        },\n      ],\n    };\n  }\n\n  if (\"version\" in solidityConfig) {\n    return { compilers: [solidityConfig] };\n  }\n\n  return solidityConfig;\n}\n\nfunction resolveCompiler(compiler: SolcUserConfig): SolcConfig {\n  const resolved: SolcConfig = {\n    version: compiler.version,\n    settings: compiler.settings ?? {},\n  };\n\n  if (semver.gte(resolved.version, \"0.8.20\")) {\n    resolved.settings.evmVersion = compiler.settings?.evmVersion ?? \"paris\";\n  }\n\n  resolved.settings.optimizer = {\n    enabled: false,\n    runs: 200,\n    ...resolved.settings.optimizer,\n  };\n\n  if (resolved.settings.outputSelection === undefined) {\n    resolved.settings.outputSelection = {};\n  }\n\n  for (const [file, contractSelection] of Object.entries(\n    defaultSolcOutputSelection\n  )) {\n    if (resolved.settings.outputSelection[file] === undefined) {\n      resolved.settings.outputSelection[file] = {};\n    }\n\n    for (const [contract, outputs] of Object.entries(contractSelection)) {\n      if (resolved.settings.outputSelection[file][contract] === undefined) {\n        resolved.settings.outputSelection[file][contract] = [];\n      }\n\n      for (const output of outputs) {\n        const includesOutput: boolean =\n          resolved.settings.outputSelection[file][contract].includes(output);\n\n        if (!includesOutput) {\n          resolved.settings.outputSelection[file][contract].push(output);\n        }\n      }\n    }\n  }\n\n  return resolved;\n}\n\nfunction resolveMochaConfig(userConfig: HardhatUserConfig): Mocha.MochaOptions {\n  const cloneDeep = require(\"lodash/cloneDeep\") as LoDashStatic[\"cloneDeep\"];\n  return {\n    ...cloneDeep(defaultMochaOptions),\n    ...userConfig.mocha,\n  };\n}\n\n/**\n * This function resolves the ProjectPathsConfig object from the user-provided config\n * and its path. The logic of this is not obvious and should well be document.\n * The good thing is that most users will never use this.\n *\n * Explanation:\n *    - paths.configFile is not overridable\n *    - If a path is absolute it is used \"as is\".\n *    - If the root path is relative, it's resolved from paths.configFile's dir.\n *    - If any other path is relative, it's resolved from paths.root.\n *    - Plugin-defined paths are not resolved, but encouraged to follow the same pattern.\n */\nexport function resolveProjectPaths(\n  userConfigPath: string,\n  userPaths: ProjectPathsUserConfig = {}\n): ProjectPathsConfig {\n  const configFile = getRealPathSync(userConfigPath);\n  const configDir = path.dirname(configFile);\n\n  const root = resolvePathFrom(configDir, \"\", userPaths.root);\n\n  return {\n    ...userPaths,\n    root,\n    configFile,\n    sources: resolvePathFrom(root, \"contracts\", userPaths.sources),\n    cache: resolvePathFrom(root, \"cache\", userPaths.cache),\n    artifacts: resolvePathFrom(root, \"artifacts\", userPaths.artifacts),\n    tests: resolvePathFrom(root, \"test\", userPaths.tests),\n  };\n}\n\nfunction resolvePathFrom(\n  from: string,\n  defaultPath: string,\n  relativeOrAbsolutePath: string = defaultPath\n) {\n  if (path.isAbsolute(relativeOrAbsolutePath)) {\n    return relativeOrAbsolutePath;\n  }\n\n  return path.join(from, relativeOrAbsolutePath);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}