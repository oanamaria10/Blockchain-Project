{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getMainCarrier, setHubOnCarrier } from '@sentry/hub';\nimport { getGlobalObject } from '@sentry/utils';\nimport * as domain from 'domain';\nimport { NodeClient } from './client';\nimport { Console, Http, LinkedErrors, OnUncaughtException, OnUnhandledRejection } from './integrations';\nexport var defaultIntegrations = [\n// Common\nnew CoreIntegrations.InboundFilters(), new CoreIntegrations.FunctionToString(),\n// Native Wrappers\nnew Console(), new Http(),\n// Global Handlers\nnew OnUncaughtException(), new OnUnhandledRejection(),\n// Misc\nnew LinkedErrors()];\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * ```\n *\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { configureScope } = require('@sentry/node');\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { addBreadcrumb } = require('@sentry/node');\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link NodeOptions} for documentation on configuration options.\n */\nexport function init(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n  if (options.tracesSampleRate === undefined && process.env.SENTRY_TRACES_SAMPLE_RATE) {\n    var tracesSampleRate = parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE);\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n  if (options.release === undefined) {\n    var global_1 = getGlobalObject();\n    // Prefer env var over global\n    if (process.env.SENTRY_RELEASE) {\n      options.release = process.env.SENTRY_RELEASE;\n    }\n    // This supports the variable that sentry-webpack-plugin injects\n    else if (global_1.SENTRY_RELEASE && global_1.SENTRY_RELEASE.id) {\n      options.release = global_1.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.environment === undefined && process.env.SENTRY_ENVIRONMENT) {\n    options.environment = process.env.SENTRY_ENVIRONMENT;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n  if (domain.active) {\n    setHubOnCarrier(getMainCarrier(), getCurrentHub());\n  }\n  initAndBind(NodeClient, options);\n}\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId() {\n  return getCurrentHub().lastEventId();\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function flush(timeout) {\n  return __awaiter(this, void 0, void 0, function () {\n    var client;\n    return __generator(this, function (_a) {\n      client = getCurrentHub().getClient();\n      if (client) {\n        return [2 /*return*/, client.flush(timeout)];\n      }\n      return [2 /*return*/, Promise.reject(false)];\n    });\n  });\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function close(timeout) {\n  return __awaiter(this, void 0, void 0, function () {\n    var client;\n    return __generator(this, function (_a) {\n      client = getCurrentHub().getClient();\n      if (client) {\n        return [2 /*return*/, client.close(timeout)];\n      }\n      return [2 /*return*/, Promise.reject(false)];\n    });\n  });\n}","map":{"version":3,"names":["getCurrentHub","initAndBind","Integrations","CoreIntegrations","getMainCarrier","setHubOnCarrier","getGlobalObject","domain","NodeClient","Console","Http","LinkedErrors","OnUncaughtException","OnUnhandledRejection","defaultIntegrations","InboundFilters","FunctionToString","init","options","undefined","dsn","process","env","SENTRY_DSN","tracesSampleRate","SENTRY_TRACES_SAMPLE_RATE","parseFloat","isFinite","release","global_1","SENTRY_RELEASE","id","environment","SENTRY_ENVIRONMENT","active","lastEventId","flush","timeout","client","getClient","Promise","reject","close"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\node\\src\\sdk.ts"],"sourcesContent":["import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getMainCarrier, setHubOnCarrier } from '@sentry/hub';\nimport { getGlobalObject } from '@sentry/utils';\nimport * as domain from 'domain';\n\nimport { NodeOptions } from './backend';\nimport { NodeClient } from './client';\nimport { Console, Http, LinkedErrors, OnUncaughtException, OnUnhandledRejection } from './integrations';\n\nexport const defaultIntegrations = [\n  // Common\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  // Native Wrappers\n  new Console(),\n  new Http(),\n  // Global Handlers\n  new OnUncaughtException(),\n  new OnUnhandledRejection(),\n  // Misc\n  new LinkedErrors(),\n];\n\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * ```\n *\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { configureScope } = require('@sentry/node');\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { addBreadcrumb } = require('@sentry/node');\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link NodeOptions} for documentation on configuration options.\n */\nexport function init(options: NodeOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n\n  if (options.tracesSampleRate === undefined && process.env.SENTRY_TRACES_SAMPLE_RATE) {\n    const tracesSampleRate = parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE);\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n\n  if (options.release === undefined) {\n    const global = getGlobalObject<Window>();\n    // Prefer env var over global\n    if (process.env.SENTRY_RELEASE) {\n      options.release = process.env.SENTRY_RELEASE;\n    }\n    // This supports the variable that sentry-webpack-plugin injects\n    else if (global.SENTRY_RELEASE && global.SENTRY_RELEASE.id) {\n      options.release = global.SENTRY_RELEASE.id;\n    }\n  }\n\n  if (options.environment === undefined && process.env.SENTRY_ENVIRONMENT) {\n    options.environment = process.env.SENTRY_ENVIRONMENT;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n  if ((domain as any).active) {\n    setHubOnCarrier(getMainCarrier(), getCurrentHub());\n  }\n\n  initAndBind(NodeClient, options);\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport async function flush(timeout?: number): Promise<boolean> {\n  const client = getCurrentHub().getClient<NodeClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return Promise.reject(false);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport async function close(timeout?: number): Promise<boolean> {\n  const client = getCurrentHub().getClient<NodeClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  return Promise.reject(false);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}