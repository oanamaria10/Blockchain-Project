{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst errors_1 = require(\"../internal/core/errors\");\nconst config_env_1 = require(\"../internal/core/config/config-env\");\nconst errors_list_1 = require(\"../internal/core/errors-list\");\nconst varsScope = (0, config_env_1.scope)(\"vars\", \"Manage your configuration variables\");\nvarsScope.task(\"set\", \"Set the value of a configuration variable\").addPositionalParam(\"var\", \"The name of the variable\").addOptionalPositionalParam(\"value\", \"The value to store. Omit to be prompted for it.\").setAction(async () => {\n  throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n});\nvarsScope.task(\"get\", \"Get the value of a configuration variable\").addPositionalParam(\"var\", \"The name of the variable\").setAction(async () => {\n  throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n});\nvarsScope.task(\"list\", \"List all the configuration variables\").setAction(async () => {\n  throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n});\nvarsScope.task(\"delete\", \"Delete a configuration variable\").addPositionalParam(\"var\", \"The name of the variable\").setAction(async () => {\n  throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n});\nvarsScope.task(\"path\", \"Show the path of the file where all the configuration variables are stored\").setAction(async () => {\n  throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n});\nvarsScope.task(\"setup\", \"Show how to setup the configuration variables used by this project\").setAction(async () => {\n  throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n});","map":{"version":3,"names":["errors_1","require","config_env_1","errors_list_1","varsScope","scope","task","addPositionalParam","addOptionalPositionalParam","setAction","HardhatError","ERRORS","VARS","ONLY_MANAGED_IN_CLI"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\builtin-tasks\\vars.ts"],"sourcesContent":["import { HardhatError } from \"../internal/core/errors\";\nimport { scope } from \"../internal/core/config/config-env\";\nimport { ERRORS } from \"../internal/core/errors-list\";\n\nconst varsScope = scope(\"vars\", \"Manage your configuration variables\");\n\nvarsScope\n  .task(\"set\", \"Set the value of a configuration variable\")\n  .addPositionalParam(\"var\", \"The name of the variable\")\n  .addOptionalPositionalParam(\n    \"value\",\n    \"The value to store. Omit to be prompted for it.\"\n  )\n  .setAction(async () => {\n    throw new HardhatError(ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n  });\n\nvarsScope\n  .task(\"get\", \"Get the value of a configuration variable\")\n  .addPositionalParam(\"var\", \"The name of the variable\")\n  .setAction(async () => {\n    throw new HardhatError(ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n  });\n\nvarsScope\n  .task(\"list\", \"List all the configuration variables\")\n  .setAction(async () => {\n    throw new HardhatError(ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n  });\n\nvarsScope\n  .task(\"delete\", \"Delete a configuration variable\")\n  .addPositionalParam(\"var\", \"The name of the variable\")\n  .setAction(async () => {\n    throw new HardhatError(ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n  });\n\nvarsScope\n  .task(\n    \"path\",\n    \"Show the path of the file where all the configuration variables are stored\"\n  )\n  .setAction(async () => {\n    throw new HardhatError(ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n  });\n\nvarsScope\n  .task(\n    \"setup\",\n    \"Show how to setup the configuration variables used by this project\"\n  )\n  .setAction(async () => {\n    throw new HardhatError(ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n  });\n"],"mappings":";;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAD,OAAA;AACA,MAAAE,aAAA,GAAAF,OAAA;AAEA,MAAMG,SAAS,GAAG,IAAAF,YAAA,CAAAG,KAAK,EAAC,MAAM,EAAE,qCAAqC,CAAC;AAEtED,SAAS,CACNE,IAAI,CAAC,KAAK,EAAE,2CAA2C,CAAC,CACxDC,kBAAkB,CAAC,KAAK,EAAE,0BAA0B,CAAC,CACrDC,0BAA0B,CACzB,OAAO,EACP,iDAAiD,CAClD,CACAC,SAAS,CAAC,YAAW;EACpB,MAAM,IAAIT,QAAA,CAAAU,YAAY,CAACP,aAAA,CAAAQ,MAAM,CAACC,IAAI,CAACC,mBAAmB,CAAC;AACzD,CAAC,CAAC;AAEJT,SAAS,CACNE,IAAI,CAAC,KAAK,EAAE,2CAA2C,CAAC,CACxDC,kBAAkB,CAAC,KAAK,EAAE,0BAA0B,CAAC,CACrDE,SAAS,CAAC,YAAW;EACpB,MAAM,IAAIT,QAAA,CAAAU,YAAY,CAACP,aAAA,CAAAQ,MAAM,CAACC,IAAI,CAACC,mBAAmB,CAAC;AACzD,CAAC,CAAC;AAEJT,SAAS,CACNE,IAAI,CAAC,MAAM,EAAE,sCAAsC,CAAC,CACpDG,SAAS,CAAC,YAAW;EACpB,MAAM,IAAIT,QAAA,CAAAU,YAAY,CAACP,aAAA,CAAAQ,MAAM,CAACC,IAAI,CAACC,mBAAmB,CAAC;AACzD,CAAC,CAAC;AAEJT,SAAS,CACNE,IAAI,CAAC,QAAQ,EAAE,iCAAiC,CAAC,CACjDC,kBAAkB,CAAC,KAAK,EAAE,0BAA0B,CAAC,CACrDE,SAAS,CAAC,YAAW;EACpB,MAAM,IAAIT,QAAA,CAAAU,YAAY,CAACP,aAAA,CAAAQ,MAAM,CAACC,IAAI,CAACC,mBAAmB,CAAC;AACzD,CAAC,CAAC;AAEJT,SAAS,CACNE,IAAI,CACH,MAAM,EACN,4EAA4E,CAC7E,CACAG,SAAS,CAAC,YAAW;EACpB,MAAM,IAAIT,QAAA,CAAAU,YAAY,CAACP,aAAA,CAAAQ,MAAM,CAACC,IAAI,CAACC,mBAAmB,CAAC;AACzD,CAAC,CAAC;AAEJT,SAAS,CACNE,IAAI,CACH,OAAO,EACP,oEAAoE,CACrE,CACAG,SAAS,CAAC,YAAW;EACpB,MAAM,IAAIT,QAAA,CAAAU,YAAY,CAACP,aAAA,CAAAQ,MAAM,CAACC,IAAI,CAACC,mBAAmB,CAAC;AACzD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}