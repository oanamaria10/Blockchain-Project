{"ast":null,"code":"var assert = require('assert');\nvar keccak256 = require('js-sha3').keccak256;\nfunction libraryHashPlaceholder(input) {\n  return '$' + keccak256(input).slice(0, 34) + '$';\n}\nvar linkBytecode = function (bytecode, libraries) {\n  assert(typeof bytecode === 'string');\n  assert(typeof libraries === 'object');\n  // NOTE: for backwards compatibility support old compiler which didn't use file names\n  var librariesComplete = {};\n  for (var libraryName in libraries) {\n    if (typeof libraries[libraryName] === 'object') {\n      // API compatible with the standard JSON i/o\n      for (var lib in libraries[libraryName]) {\n        librariesComplete[lib] = libraries[libraryName][lib];\n        librariesComplete[libraryName + ':' + lib] = libraries[libraryName][lib];\n      }\n    } else {\n      // backwards compatible API for early solc-js versions\n      var parsed = libraryName.match(/^([^:]+):(.+)$/);\n      if (parsed) {\n        librariesComplete[parsed[2]] = libraries[libraryName];\n      }\n      librariesComplete[libraryName] = libraries[libraryName];\n    }\n  }\n  for (libraryName in librariesComplete) {\n    var hexAddress = librariesComplete[libraryName];\n    if (hexAddress.slice(0, 2) !== '0x' || hexAddress.length > 42) {\n      throw new Error('Invalid address specified for ' + libraryName);\n    }\n    // remove 0x prefix\n    hexAddress = hexAddress.slice(2);\n    hexAddress = Array(40 - hexAddress.length + 1).join('0') + hexAddress;\n\n    // Support old (library name) and new (hash of library name)\n    // placeholders.\n    var replace = function (name) {\n      // truncate to 37 characters\n      var truncatedName = name.slice(0, 36);\n      var libLabel = '__' + truncatedName + Array(37 - truncatedName.length).join('_') + '__';\n      while (bytecode.indexOf(libLabel) >= 0) {\n        bytecode = bytecode.replace(libLabel, hexAddress);\n      }\n    };\n    replace(libraryName);\n    replace(libraryHashPlaceholder(libraryName));\n  }\n  return bytecode;\n};\nvar findLinkReferences = function (bytecode) {\n  assert(typeof bytecode === 'string');\n  // find 40 bytes in the pattern of __...<36 digits>...__\n  // e.g. __Lib.sol:L_____________________________\n  var linkReferences = {};\n  var offset = 0;\n  while (true) {\n    var found = bytecode.match(/__(.{36})__/);\n    if (!found) {\n      break;\n    }\n    var start = found.index;\n    // trim trailing underscores\n    // NOTE: this has no way of knowing if the trailing underscore was part of the name\n    var libraryName = found[1].replace(/_+$/gm, '');\n    if (!linkReferences[libraryName]) {\n      linkReferences[libraryName] = [];\n    }\n    linkReferences[libraryName].push({\n      // offsets are in bytes in binary representation (and not hex)\n      start: (offset + start) / 2,\n      length: 20\n    });\n    offset += start + 20;\n    bytecode = bytecode.slice(start + 20);\n  }\n  return linkReferences;\n};\nmodule.exports = {\n  linkBytecode: linkBytecode,\n  findLinkReferences: findLinkReferences\n};","map":{"version":3,"names":["assert","require","keccak256","libraryHashPlaceholder","input","slice","linkBytecode","bytecode","libraries","librariesComplete","libraryName","lib","parsed","match","hexAddress","length","Error","Array","join","replace","name","truncatedName","libLabel","indexOf","findLinkReferences","linkReferences","offset","found","start","index","push","module","exports"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/solc/linker.js"],"sourcesContent":["var assert = require('assert');\nvar keccak256 = require('js-sha3').keccak256;\n\nfunction libraryHashPlaceholder (input) {\n  return '$' + keccak256(input).slice(0, 34) + '$';\n}\n\nvar linkBytecode = function (bytecode, libraries) {\n  assert(typeof bytecode === 'string');\n  assert(typeof libraries === 'object');\n  // NOTE: for backwards compatibility support old compiler which didn't use file names\n  var librariesComplete = {};\n  for (var libraryName in libraries) {\n    if (typeof libraries[libraryName] === 'object') {\n      // API compatible with the standard JSON i/o\n      for (var lib in libraries[libraryName]) {\n        librariesComplete[lib] = libraries[libraryName][lib];\n        librariesComplete[libraryName + ':' + lib] = libraries[libraryName][lib];\n      }\n    } else {\n      // backwards compatible API for early solc-js versions\n      var parsed = libraryName.match(/^([^:]+):(.+)$/);\n      if (parsed) {\n        librariesComplete[parsed[2]] = libraries[libraryName];\n      }\n      librariesComplete[libraryName] = libraries[libraryName];\n    }\n  }\n\n  for (libraryName in librariesComplete) {\n    var hexAddress = librariesComplete[libraryName];\n    if (hexAddress.slice(0, 2) !== '0x' || hexAddress.length > 42) {\n      throw new Error('Invalid address specified for ' + libraryName);\n    }\n    // remove 0x prefix\n    hexAddress = hexAddress.slice(2);\n    hexAddress = Array(40 - hexAddress.length + 1).join('0') + hexAddress;\n\n    // Support old (library name) and new (hash of library name)\n    // placeholders.\n    var replace = function (name) {\n      // truncate to 37 characters\n      var truncatedName = name.slice(0, 36);\n      var libLabel = '__' + truncatedName + Array(37 - truncatedName.length).join('_') + '__';\n      while (bytecode.indexOf(libLabel) >= 0) {\n        bytecode = bytecode.replace(libLabel, hexAddress);\n      }\n    };\n\n    replace(libraryName);\n    replace(libraryHashPlaceholder(libraryName));\n  }\n\n  return bytecode;\n};\n\nvar findLinkReferences = function (bytecode) {\n  assert(typeof bytecode === 'string');\n  // find 40 bytes in the pattern of __...<36 digits>...__\n  // e.g. __Lib.sol:L_____________________________\n  var linkReferences = {};\n  var offset = 0;\n  while (true) {\n    var found = bytecode.match(/__(.{36})__/);\n    if (!found) {\n      break;\n    }\n\n    var start = found.index;\n    // trim trailing underscores\n    // NOTE: this has no way of knowing if the trailing underscore was part of the name\n    var libraryName = found[1].replace(/_+$/gm, '');\n\n    if (!linkReferences[libraryName]) {\n      linkReferences[libraryName] = [];\n    }\n\n    linkReferences[libraryName].push({\n      // offsets are in bytes in binary representation (and not hex)\n      start: (offset + start) / 2,\n      length: 20\n    });\n\n    offset += start + 20;\n\n    bytecode = bytecode.slice(start + 20);\n  }\n  return linkReferences;\n};\n\nmodule.exports = {\n  linkBytecode: linkBytecode,\n  findLinkReferences: findLinkReferences\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}