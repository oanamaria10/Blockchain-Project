{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.consoleLogToString = exports.ConsoleLogger = void 0;\nconst ethereumjs_util_1 = require(\"@nomicfoundation/ethereumjs-util\");\nconst util_1 = __importDefault(require(\"util\"));\nconst logger_1 = require(\"./logger\");\nconst message_trace_1 = require(\"./message-trace\");\nconst CONSOLE_ADDRESS = \"0x000000000000000000636F6e736F6c652e6c6f67\"; // toHex(\"console.log\")\nconst REGISTER_SIZE = 32;\nclass ConsoleLogger {\n  constructor() {\n    this._consoleLogs = {};\n    this._consoleLogs = logger_1.ConsoleLogs;\n  }\n  getLogMessages(maybeDecodedMessageTrace) {\n    return this.getExecutionLogs(maybeDecodedMessageTrace).map(consoleLogToString);\n  }\n  getExecutionLogs(maybeDecodedMessageTrace) {\n    if ((0, message_trace_1.isPrecompileTrace)(maybeDecodedMessageTrace)) {\n      return [];\n    }\n    const logs = [];\n    this._collectExecutionLogs(maybeDecodedMessageTrace, logs);\n    return logs;\n  }\n  _collectExecutionLogs(trace, logs) {\n    for (const messageTrace of trace.steps) {\n      if ((0, message_trace_1.isEvmStep)(messageTrace) || (0, message_trace_1.isPrecompileTrace)(messageTrace)) {\n        continue;\n      }\n      if ((0, message_trace_1.isCallTrace)(messageTrace) && (0, ethereumjs_util_1.bytesToHex)(messageTrace.address) === CONSOLE_ADDRESS.toLowerCase()) {\n        const log = this._maybeConsoleLog(Buffer.from(messageTrace.calldata));\n        if (log !== undefined) {\n          logs.push(log);\n        }\n        continue;\n      }\n      this._collectExecutionLogs(messageTrace, logs);\n    }\n  }\n  /**\n   * Temporary code to print console.sol messages that come from EDR\n   */\n  getDecodedLogs(messages) {\n    const logs = [];\n    for (const message of messages) {\n      const log = this._maybeConsoleLog(message);\n      if (log !== undefined) {\n        logs.push(consoleLogToString(log));\n      }\n    }\n    return logs;\n  }\n  _maybeConsoleLog(calldata) {\n    const sig = (0, ethereumjs_util_1.bytesToInt)(calldata.slice(0, 4));\n    const parameters = calldata.slice(4);\n    const types = this._consoleLogs[sig];\n    if (types === undefined) {\n      return;\n    }\n    const consoleLogs = this._decode(parameters, types);\n    this._replaceNumberFormatSpecifiers(consoleLogs);\n    return consoleLogs;\n  }\n  _replaceNumberFormatSpecifiers(consoleLogs) {\n    /**\n     * Replace the occurrences of %d and %i with %s. This is necessary because if the arguments passed are numbers,\n     * they could be too large to be formatted as a Number or an Integer, so it is safer to use a String.\n     * %d and %i are replaced only if there is an odd number of % before the d or i.\n     * If there is an even number of % then it is assumed that the % is escaped and should not be replaced.\n     * The regex matches a '%d' or an '%i' that has an even number of\n     * '%' behind it (including 0). This group of pairs of '%' is captured\n     * and preserved, while the '%[di]' is replaced with '%s'.\n     * Naively doing (%%)* is not enough; we also have to use the\n     * (?<!%) negative look-behind to make this work.\n     * The (?:) is just to avoid capturing that inner group.\n     */\n    if (consoleLogs.length > 0 && typeof consoleLogs[0] === \"string\") {\n      consoleLogs[0] = consoleLogs[0].replace(/((?<!%)(?:%%)*)(%[di])/g, \"$1%s\");\n    }\n  }\n  _decode(data, types) {\n    return types.map((type, i) => {\n      const position = i * 32;\n      switch (types[i]) {\n        case logger_1.Uint256Ty:\n          return (0, ethereumjs_util_1.bytesToBigInt)(data.slice(position, position + REGISTER_SIZE)).toString(10);\n        case logger_1.Int256Ty:\n          return (0, ethereumjs_util_1.fromSigned)(data.slice(position, position + REGISTER_SIZE)).toString();\n        case logger_1.BoolTy:\n          if (data[position + 31] !== 0) {\n            return \"true\";\n          }\n          return \"false\";\n        case logger_1.StringTy:\n          const sStart = (0, ethereumjs_util_1.bytesToInt)(data.slice(position, position + REGISTER_SIZE));\n          const sLen = (0, ethereumjs_util_1.bytesToInt)(data.slice(sStart, sStart + REGISTER_SIZE));\n          return data.slice(sStart + REGISTER_SIZE, sStart + REGISTER_SIZE + sLen).toString();\n        case logger_1.AddressTy:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position + 12, position + REGISTER_SIZE));\n        case logger_1.BytesTy:\n          const bStart = (0, ethereumjs_util_1.bytesToInt)(data.slice(position, position + REGISTER_SIZE));\n          const bLen = (0, ethereumjs_util_1.bytesToInt)(data.slice(bStart, bStart + REGISTER_SIZE));\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(bStart + REGISTER_SIZE, bStart + REGISTER_SIZE + bLen));\n        case logger_1.Bytes1Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 1));\n        case logger_1.Bytes2Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 2));\n        case logger_1.Bytes3Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 3));\n        case logger_1.Bytes4Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 4));\n        case logger_1.Bytes5Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 5));\n        case logger_1.Bytes6Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 6));\n        case logger_1.Bytes7Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 7));\n        case logger_1.Bytes8Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 8));\n        case logger_1.Bytes9Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 9));\n        case logger_1.Bytes10Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 10));\n        case logger_1.Bytes11Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 11));\n        case logger_1.Bytes12Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 12));\n        case logger_1.Bytes13Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 13));\n        case logger_1.Bytes14Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 14));\n        case logger_1.Bytes15Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 15));\n        case logger_1.Bytes16Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 16));\n        case logger_1.Bytes17Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 17));\n        case logger_1.Bytes18Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 18));\n        case logger_1.Bytes19Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 19));\n        case logger_1.Bytes20Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 20));\n        case logger_1.Bytes21Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 21));\n        case logger_1.Bytes22Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 22));\n        case logger_1.Bytes23Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 23));\n        case logger_1.Bytes24Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 24));\n        case logger_1.Bytes25Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 25));\n        case logger_1.Bytes26Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 26));\n        case logger_1.Bytes27Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 27));\n        case logger_1.Bytes28Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 28));\n        case logger_1.Bytes29Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 29));\n        case logger_1.Bytes30Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 30));\n        case logger_1.Bytes31Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 31));\n        case logger_1.Bytes32Ty:\n          return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 32));\n        default:\n          return \"\";\n      }\n    });\n  }\n}\nexports.ConsoleLogger = ConsoleLogger;\nfunction consoleLogToString(log) {\n  if (log === undefined) {\n    return \"\";\n  }\n  // special case for console.log()\n  if (log.length === 0) {\n    return \"\";\n  }\n  return util_1.default.format(log[0], ...log.slice(1));\n}\nexports.consoleLogToString = consoleLogToString;","map":{"version":3,"names":["ethereumjs_util_1","require","util_1","__importDefault","logger_1","message_trace_1","CONSOLE_ADDRESS","REGISTER_SIZE","ConsoleLogger","constructor","_consoleLogs","ConsoleLogs","getLogMessages","maybeDecodedMessageTrace","getExecutionLogs","map","consoleLogToString","isPrecompileTrace","logs","_collectExecutionLogs","trace","messageTrace","steps","isEvmStep","isCallTrace","bytesToHex","address","toLowerCase","log","_maybeConsoleLog","Buffer","from","calldata","undefined","push","getDecodedLogs","messages","message","sig","bytesToInt","slice","parameters","types","consoleLogs","_decode","_replaceNumberFormatSpecifiers","length","replace","data","type","i","position","Uint256Ty","bytesToBigInt","toString","Int256Ty","fromSigned","BoolTy","StringTy","sStart","sLen","AddressTy","BytesTy","bStart","bLen","Bytes1Ty","Bytes2Ty","Bytes3Ty","Bytes4Ty","Bytes5Ty","Bytes6Ty","Bytes7Ty","Bytes8Ty","Bytes9Ty","Bytes10Ty","Bytes11Ty","Bytes12Ty","Bytes13Ty","Bytes14Ty","Bytes15Ty","Bytes16Ty","Bytes17Ty","Bytes18Ty","Bytes19Ty","Bytes20Ty","Bytes21Ty","Bytes22Ty","Bytes23Ty","Bytes24Ty","Bytes25Ty","Bytes26Ty","Bytes27Ty","Bytes28Ty","Bytes29Ty","Bytes30Ty","Bytes31Ty","Bytes32Ty","exports","default","format"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\hardhat-network\\stack-traces\\consoleLogger.ts"],"sourcesContent":["import {\n  bytesToBigInt,\n  bytesToHex as bufferToHex,\n  bytesToInt,\n  fromSigned,\n} from \"@nomicfoundation/ethereumjs-util\";\nimport util from \"util\";\n\nimport {\n  AddressTy,\n  BoolTy,\n  Bytes10Ty,\n  Bytes11Ty,\n  Bytes12Ty,\n  Bytes13Ty,\n  Bytes14Ty,\n  Bytes15Ty,\n  Bytes16Ty,\n  Bytes17Ty,\n  Bytes18Ty,\n  Bytes19Ty,\n  Bytes1Ty,\n  Bytes20Ty,\n  Bytes21Ty,\n  Bytes22Ty,\n  Bytes23Ty,\n  Bytes24Ty,\n  Bytes25Ty,\n  Bytes26Ty,\n  Bytes27Ty,\n  Bytes28Ty,\n  Bytes29Ty,\n  Bytes2Ty,\n  Bytes30Ty,\n  Bytes31Ty,\n  Bytes32Ty,\n  Bytes3Ty,\n  Bytes4Ty,\n  Bytes5Ty,\n  Bytes6Ty,\n  Bytes7Ty,\n  Bytes8Ty,\n  Bytes9Ty,\n  BytesTy,\n  ConsoleLogs,\n  Int256Ty,\n  StringTy,\n  Uint256Ty,\n} from \"./logger\";\nimport {\n  EvmMessageTrace,\n  isCallTrace,\n  isEvmStep,\n  isPrecompileTrace,\n  MessageTrace,\n} from \"./message-trace\";\n\nconst CONSOLE_ADDRESS = \"0x000000000000000000636F6e736F6c652e6c6f67\"; // toHex(\"console.log\")\nconst REGISTER_SIZE = 32;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface ConsoleLogArray extends Array<ConsoleLogEntry> {}\n\nexport type ConsoleLogEntry = string | ConsoleLogArray;\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type ConsoleLogs = ConsoleLogEntry[];\n\nexport class ConsoleLogger {\n  private readonly _consoleLogs: {\n    [key: number]: string[];\n  } = {};\n\n  constructor() {\n    this._consoleLogs = ConsoleLogs;\n  }\n\n  public getLogMessages(maybeDecodedMessageTrace: MessageTrace): string[] {\n    return this.getExecutionLogs(maybeDecodedMessageTrace).map(\n      consoleLogToString\n    );\n  }\n\n  public getExecutionLogs(\n    maybeDecodedMessageTrace: MessageTrace\n  ): ConsoleLogs[] {\n    if (isPrecompileTrace(maybeDecodedMessageTrace)) {\n      return [];\n    }\n\n    const logs: ConsoleLogs[] = [];\n    this._collectExecutionLogs(maybeDecodedMessageTrace, logs);\n    return logs;\n  }\n\n  private _collectExecutionLogs(trace: EvmMessageTrace, logs: ConsoleLogs) {\n    for (const messageTrace of trace.steps) {\n      if (isEvmStep(messageTrace) || isPrecompileTrace(messageTrace)) {\n        continue;\n      }\n\n      if (\n        isCallTrace(messageTrace) &&\n        bufferToHex(messageTrace.address) === CONSOLE_ADDRESS.toLowerCase()\n      ) {\n        const log = this._maybeConsoleLog(Buffer.from(messageTrace.calldata));\n        if (log !== undefined) {\n          logs.push(log);\n        }\n\n        continue;\n      }\n\n      this._collectExecutionLogs(messageTrace, logs);\n    }\n  }\n\n  /**\n   * Temporary code to print console.sol messages that come from EDR\n   */\n  public getDecodedLogs(messages: Buffer[]): string[] {\n    const logs: string[] = [];\n\n    for (const message of messages) {\n      const log = this._maybeConsoleLog(message);\n      if (log !== undefined) {\n        logs.push(consoleLogToString(log));\n      }\n    }\n\n    return logs;\n  }\n\n  private _maybeConsoleLog(calldata: Buffer): ConsoleLogs | undefined {\n    const sig = bytesToInt(calldata.slice(0, 4));\n    const parameters = calldata.slice(4);\n\n    const types = this._consoleLogs[sig];\n    if (types === undefined) {\n      return;\n    }\n\n    const consoleLogs = this._decode(parameters, types);\n\n    this._replaceNumberFormatSpecifiers(consoleLogs);\n\n    return consoleLogs;\n  }\n\n  private _replaceNumberFormatSpecifiers(consoleLogs: ConsoleLogs) {\n    /**\n     * Replace the occurrences of %d and %i with %s. This is necessary because if the arguments passed are numbers,\n     * they could be too large to be formatted as a Number or an Integer, so it is safer to use a String.\n     * %d and %i are replaced only if there is an odd number of % before the d or i.\n     * If there is an even number of % then it is assumed that the % is escaped and should not be replaced.\n     * The regex matches a '%d' or an '%i' that has an even number of\n     * '%' behind it (including 0). This group of pairs of '%' is captured\n     * and preserved, while the '%[di]' is replaced with '%s'.\n     * Naively doing (%%)* is not enough; we also have to use the\n     * (?<!%) negative look-behind to make this work.\n     * The (?:) is just to avoid capturing that inner group.\n     */\n    if (consoleLogs.length > 0 && typeof consoleLogs[0] === \"string\") {\n      consoleLogs[0] = consoleLogs[0].replace(\n        /((?<!%)(?:%%)*)(%[di])/g,\n        \"$1%s\"\n      );\n    }\n  }\n\n  private _decode(data: Buffer, types: string[]): ConsoleLogs {\n    return types.map((type, i) => {\n      const position: number = i * 32;\n      switch (types[i]) {\n        case Uint256Ty:\n          return bytesToBigInt(\n            data.slice(position, position + REGISTER_SIZE)\n          ).toString(10);\n\n        case Int256Ty:\n          return fromSigned(\n            data.slice(position, position + REGISTER_SIZE)\n          ).toString();\n\n        case BoolTy:\n          if (data[position + 31] !== 0) {\n            return \"true\";\n          }\n          return \"false\";\n\n        case StringTy:\n          const sStart = bytesToInt(\n            data.slice(position, position + REGISTER_SIZE)\n          );\n          const sLen = bytesToInt(data.slice(sStart, sStart + REGISTER_SIZE));\n          return data\n            .slice(sStart + REGISTER_SIZE, sStart + REGISTER_SIZE + sLen)\n            .toString();\n\n        case AddressTy:\n          return bufferToHex(\n            data.slice(position + 12, position + REGISTER_SIZE)\n          );\n\n        case BytesTy:\n          const bStart = bytesToInt(\n            data.slice(position, position + REGISTER_SIZE)\n          );\n          const bLen = bytesToInt(data.slice(bStart, bStart + REGISTER_SIZE));\n          return bufferToHex(\n            data.slice(bStart + REGISTER_SIZE, bStart + REGISTER_SIZE + bLen)\n          );\n\n        case Bytes1Ty:\n          return bufferToHex(data.slice(position, position + 1));\n        case Bytes2Ty:\n          return bufferToHex(data.slice(position, position + 2));\n        case Bytes3Ty:\n          return bufferToHex(data.slice(position, position + 3));\n        case Bytes4Ty:\n          return bufferToHex(data.slice(position, position + 4));\n        case Bytes5Ty:\n          return bufferToHex(data.slice(position, position + 5));\n        case Bytes6Ty:\n          return bufferToHex(data.slice(position, position + 6));\n        case Bytes7Ty:\n          return bufferToHex(data.slice(position, position + 7));\n        case Bytes8Ty:\n          return bufferToHex(data.slice(position, position + 8));\n        case Bytes9Ty:\n          return bufferToHex(data.slice(position, position + 9));\n        case Bytes10Ty:\n          return bufferToHex(data.slice(position, position + 10));\n        case Bytes11Ty:\n          return bufferToHex(data.slice(position, position + 11));\n        case Bytes12Ty:\n          return bufferToHex(data.slice(position, position + 12));\n        case Bytes13Ty:\n          return bufferToHex(data.slice(position, position + 13));\n        case Bytes14Ty:\n          return bufferToHex(data.slice(position, position + 14));\n        case Bytes15Ty:\n          return bufferToHex(data.slice(position, position + 15));\n        case Bytes16Ty:\n          return bufferToHex(data.slice(position, position + 16));\n        case Bytes17Ty:\n          return bufferToHex(data.slice(position, position + 17));\n        case Bytes18Ty:\n          return bufferToHex(data.slice(position, position + 18));\n        case Bytes19Ty:\n          return bufferToHex(data.slice(position, position + 19));\n        case Bytes20Ty:\n          return bufferToHex(data.slice(position, position + 20));\n        case Bytes21Ty:\n          return bufferToHex(data.slice(position, position + 21));\n        case Bytes22Ty:\n          return bufferToHex(data.slice(position, position + 22));\n        case Bytes23Ty:\n          return bufferToHex(data.slice(position, position + 23));\n        case Bytes24Ty:\n          return bufferToHex(data.slice(position, position + 24));\n        case Bytes25Ty:\n          return bufferToHex(data.slice(position, position + 25));\n        case Bytes26Ty:\n          return bufferToHex(data.slice(position, position + 26));\n        case Bytes27Ty:\n          return bufferToHex(data.slice(position, position + 27));\n        case Bytes28Ty:\n          return bufferToHex(data.slice(position, position + 28));\n        case Bytes29Ty:\n          return bufferToHex(data.slice(position, position + 29));\n        case Bytes30Ty:\n          return bufferToHex(data.slice(position, position + 30));\n        case Bytes31Ty:\n          return bufferToHex(data.slice(position, position + 31));\n        case Bytes32Ty:\n          return bufferToHex(data.slice(position, position + 32));\n\n        default:\n          return \"\";\n      }\n    });\n  }\n}\n\nexport function consoleLogToString(log: ConsoleLogs): string {\n  if (log === undefined) {\n    return \"\";\n  }\n\n  // special case for console.log()\n  if (log.length === 0) {\n    return \"\";\n  }\n\n  return util.format(log[0], ...log.slice(1));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}