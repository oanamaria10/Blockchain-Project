{"ast":null,"code":"import * as UploadCapabilities from '@web3-storage/capabilities/upload';\nimport { SpaceDID } from '@web3-storage/capabilities/utils';\nimport retry from 'p-retry';\nimport { servicePrincipal, connection } from '../service.js';\nimport { REQUEST_RETRIES } from '../constants.js';\n/**\n * Get details of an \"upload\".\n *\n * Required delegated capability proofs: `upload/get`\n *\n * @param {import('../types.js').InvocationConfig} conf Configuration\n * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.\n *\n * The `issuer` is the signing authority that is issuing the UCAN\n * invocation(s). It is typically the user _agent_.\n *\n * The `with` is the resource the invocation applies to. It is typically the\n * DID of a space.\n *\n * The `proofs` are a set of capability delegations that prove the issuer\n * has the capability to perform the action.\n *\n * The issuer needs the `upload/get` delegated capability.\n * @param {import('multiformats/link').UnknownLink} root Root data CID for the DAG that was stored.\n * @param {import('../types.js').RequestOptions} [options]\n * @returns {Promise<import('../types.js').UploadGetSuccess>}\n */\nexport async function get({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, root, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const result = await retry(async () => {\n    return await UploadCapabilities.get.invoke({\n      issuer,\n      /* c8 ignore next */\n      audience: audience ?? servicePrincipal,\n      with: SpaceDID.from(resource),\n      nb: input(root),\n      proofs,\n      nonce: options.nonce\n    }).execute(conn);\n  }, {\n    onFailedAttempt: console.warn,\n    retries: options.retries ?? REQUEST_RETRIES\n  });\n  if (!result.out.ok) {\n    throw new Error(`failed ${UploadCapabilities.get.can} invocation`, {\n      cause: result.out.error\n    });\n  }\n  return result.out.ok;\n}\n/** Returns the ability used by an invocation. */\nexport const ability = UploadCapabilities.get.can;\n/**\n * Returns required input to the invocation.\n *\n * @param {import('multiformats/link').UnknownLink} root\n */\nexport const input = root => ({\n  root\n});","map":{"version":3,"names":["UploadCapabilities","SpaceDID","retry","servicePrincipal","connection","REQUEST_RETRIES","get","issuer","with","resource","proofs","audience","root","options","conn","result","invoke","from","nb","input","nonce","execute","onFailedAttempt","console","warn","retries","out","ok","Error","can","cause","error","ability"],"sources":["../../../src/upload/get.js"],"sourcesContent":[null],"mappings":"AAAA,OAAO,KAAKA,kBAAkB,MAAM,mCAAmC;AACvE,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,gBAAgB,EAAEC,UAAU,QAAQ,eAAe;AAC5D,SAASC,eAAe,QAAQ,iBAAiB;AAEjD;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,eAAeC,GAAGA,CACvB;EAAEC,MAAM;EAAEC,IAAI,EAAEC,QAAQ;EAAEC,MAAM;EAAEC;AAAQ,CAAE,EAC5CC,IAAI,EACJC,OAAO,GAAG,EAAE;EAEZ;EACA,MAAMC,IAAI,GAAGD,OAAO,CAACT,UAAU,IAAIA,UAAU;EAC7C,MAAMW,MAAM,GAAG,MAAMb,KAAK,CACxB,YAAW;IACT,OAAO,MAAMF,kBAAkB,CAACM,GAAG,CAChCU,MAAM,CAAC;MACNT,MAAM;MACN;MACAI,QAAQ,EAAEA,QAAQ,IAAIR,gBAAgB;MACtCK,IAAI,EAAEP,QAAQ,CAACgB,IAAI,CAACR,QAAQ,CAAC;MAC7BS,EAAE,EAAEC,KAAK,CAACP,IAAI,CAAC;MACfF,MAAM;MACNU,KAAK,EAAEP,OAAO,CAACO;KAChB,CAAC,CACDC,OAAO,CAACP,IAAI,CAAC;EAClB,CAAC,EACD;IACEQ,eAAe,EAAEC,OAAO,CAACC,IAAI;IAC7BC,OAAO,EAAEZ,OAAO,CAACY,OAAO,IAAIpB;GAC7B,CACF;EAED,IAAI,CAACU,MAAM,CAACW,GAAG,CAACC,EAAE,EAAE;IAClB,MAAM,IAAIC,KAAK,CAAC,UAAU5B,kBAAkB,CAACM,GAAG,CAACuB,GAAG,aAAa,EAAE;MACjEC,KAAK,EAAEf,MAAM,CAACW,GAAG,CAACK;KACnB,CAAC;;EAGJ,OAAOhB,MAAM,CAACW,GAAG,CAACC,EAAE;AACtB;AAEA;AACA,OAAO,MAAMK,OAAO,GAAGhC,kBAAkB,CAACM,GAAG,CAACuB,GAAG;AAEjD;;;;;AAKA,OAAO,MAAMV,KAAK,GAAIP,IAAI,KAAM;EAAEA;AAAI,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}