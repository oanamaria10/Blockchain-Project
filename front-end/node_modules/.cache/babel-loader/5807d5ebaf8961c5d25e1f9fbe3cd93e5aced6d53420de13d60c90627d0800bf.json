{"ast":null,"code":"import * as BlobCapabilities from '@web3-storage/capabilities/blob';\nimport { SpaceDID } from '@web3-storage/capabilities/utils';\nimport { servicePrincipal, connection } from '../service.js';\n/**\n * List Blobs stored in the space.\n *\n * @param {import('../types.js').InvocationConfig} conf Configuration\n * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.\n *\n * The `issuer` is the signing authority that is issuing the UCAN\n * invocation(s). It is typically the user _agent_.\n *\n * The `with` is the resource the invocation applies to. It is typically the\n * DID of a space.\n *\n * The `proofs` are a set of capability delegations that prove the issuer\n * has the capability to perform the action.\n *\n * The issuer needs the `blob/list` delegated capability.\n * @param {import('../types.js').ListRequestOptions} [options]\n * @returns {Promise<import('../types.js').BlobListSuccess>}\n */\nexport async function list({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const result = await BlobCapabilities.list.invoke({\n    issuer,\n    /* c8 ignore next */\n    audience: audience ?? servicePrincipal,\n    with: SpaceDID.from(resource),\n    proofs,\n    nb: input(options.cursor, options.size),\n    nonce: options.nonce\n  }).execute(conn);\n  if (!result.out.ok) {\n    throw new Error(`failed ${BlobCapabilities.list.can} invocation`, {\n      cause: result.out.error\n    });\n  }\n  return result.out.ok;\n}\n/** Returns the ability used by an invocation. */\nexport const ability = BlobCapabilities.list.can;\n/**\n * Returns required input to the invocation.\n *\n * @param {string} [cursor]\n * @param {number} [size]\n */\nexport const input = (cursor, size) => ({\n  cursor,\n  size\n});","map":{"version":3,"names":["BlobCapabilities","SpaceDID","servicePrincipal","connection","list","issuer","with","resource","proofs","audience","options","conn","result","invoke","from","nb","input","cursor","size","nonce","execute","out","ok","Error","can","cause","error","ability"],"sources":["../../../src/blob/list.js"],"sourcesContent":[null],"mappings":"AAAA,OAAO,KAAKA,gBAAgB,MAAM,iCAAiC;AACnE,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,SAASC,gBAAgB,EAAEC,UAAU,QAAQ,eAAe;AAE5D;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,eAAeC,IAAIA,CACxB;EAAEC,MAAM;EAAEC,IAAI,EAAEC,QAAQ;EAAEC,MAAM;EAAEC;AAAQ,CAAE,EAC5CC,OAAO,GAAG,EAAE;EAEZ;EACA,MAAMC,IAAI,GAAGD,OAAO,CAACP,UAAU,IAAIA,UAAU;EAC7C,MAAMS,MAAM,GAAG,MAAMZ,gBAAgB,CAACI,IAAI,CACvCS,MAAM,CAAC;IACNR,MAAM;IACN;IACAI,QAAQ,EAAEA,QAAQ,IAAIP,gBAAgB;IACtCI,IAAI,EAAEL,QAAQ,CAACa,IAAI,CAACP,QAAQ,CAAC;IAC7BC,MAAM;IACNO,EAAE,EAAEC,KAAK,CAACN,OAAO,CAACO,MAAM,EAAEP,OAAO,CAACQ,IAAI,CAAC;IACvCC,KAAK,EAAET,OAAO,CAACS;GAChB,CAAC,CACDC,OAAO,CAACT,IAAI,CAAC;EAEhB,IAAI,CAACC,MAAM,CAACS,GAAG,CAACC,EAAE,EAAE;IAClB,MAAM,IAAIC,KAAK,CAAC,UAAUvB,gBAAgB,CAACI,IAAI,CAACoB,GAAG,aAAa,EAAE;MAChEC,KAAK,EAAEb,MAAM,CAACS,GAAG,CAACK;KACnB,CAAC;;EAGJ,OAAOd,MAAM,CAACS,GAAG,CAACC,EAAE;AACtB;AAEA;AACA,OAAO,MAAMK,OAAO,GAAG3B,gBAAgB,CAACI,IAAI,CAACoB,GAAG;AAEhD;;;;;;AAMA,OAAO,MAAMR,KAAK,GAAGA,CAACC,MAAM,EAAEC,IAAI,MAAM;EAAED,MAAM;EAAEC;AAAI,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}