{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProviderWrapper = void 0;\nconst event_emitter_1 = require(\"../../util/event-emitter\");\nconst errors_1 = require(\"./errors\");\n/**\n * A wrapper class that makes it easy to implement the EIP1193 (Javascript Ethereum Provider) standard.\n * It comes baked in with all EventEmitter methods needed,\n * which will be added to the provider supplied in the constructor.\n * It also provides the interface for the standard .request() method as an abstract method.\n */\nclass ProviderWrapper extends event_emitter_1.EventEmitterWrapper {\n  constructor(_wrappedProvider) {\n    super(_wrappedProvider);\n    this._wrappedProvider = _wrappedProvider;\n  }\n  /**\n   * Extract the params from RequestArguments and optionally type them.\n   * It defaults to an empty array if no params are found.\n   */\n  _getParams(args) {\n    const params = args.params;\n    if (params === undefined) {\n      return [];\n    }\n    if (!Array.isArray(params)) {\n      // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n      throw new errors_1.InvalidInputError(\"Hardhat Network doesn't support JSON-RPC params sent as an object\");\n    }\n    return params;\n  }\n}\nexports.ProviderWrapper = ProviderWrapper;","map":{"version":3,"names":["event_emitter_1","require","errors_1","ProviderWrapper","EventEmitterWrapper","constructor","_wrappedProvider","_getParams","args","params","undefined","Array","isArray","InvalidInputError","exports"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\core\\providers\\wrapper.ts"],"sourcesContent":["import { EIP1193Provider, RequestArguments } from \"../../../types\";\nimport { EventEmitterWrapper } from \"../../util/event-emitter\";\n\nimport { InvalidInputError } from \"./errors\";\n\n/**\n * A wrapper class that makes it easy to implement the EIP1193 (Javascript Ethereum Provider) standard.\n * It comes baked in with all EventEmitter methods needed,\n * which will be added to the provider supplied in the constructor.\n * It also provides the interface for the standard .request() method as an abstract method.\n */\nexport abstract class ProviderWrapper\n  extends EventEmitterWrapper\n  implements EIP1193Provider\n{\n  constructor(protected readonly _wrappedProvider: EIP1193Provider) {\n    super(_wrappedProvider);\n  }\n\n  public abstract request(args: RequestArguments): Promise<unknown>;\n\n  /**\n   * Extract the params from RequestArguments and optionally type them.\n   * It defaults to an empty array if no params are found.\n   */\n  protected _getParams<ParamsT extends any[] = any[]>(\n    args: RequestArguments\n  ): ParamsT | [] {\n    const params = args.params;\n\n    if (params === undefined) {\n      return [];\n    }\n\n    if (!Array.isArray(params)) {\n      // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n      throw new InvalidInputError(\n        \"Hardhat Network doesn't support JSON-RPC params sent as an object\"\n      );\n    }\n\n    return params as ParamsT;\n  }\n}\n"],"mappings":";;;;;;AACA,MAAAA,eAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AAEA;;;;;;AAMA,MAAsBE,eACpB,SAAQH,eAAA,CAAAI,mBAAmB;EAG3BC,YAA+BC,gBAAiC;IAC9D,KAAK,CAACA,gBAAgB,CAAC;IADM,KAAAA,gBAAgB,GAAhBA,gBAAgB;EAE/C;EAIA;;;;EAIUC,UAAUA,CAClBC,IAAsB;IAEtB,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAM;IAE1B,IAAIA,MAAM,KAAKC,SAAS,EAAE;MACxB,OAAO,EAAE;;IAGX,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,EAAE;MAC1B;MACA,MAAM,IAAIP,QAAA,CAAAW,iBAAiB,CACzB,mEAAmE,CACpE;;IAGH,OAAOJ,MAAiB;EAC1B;;AA/BFK,OAAA,CAAAX,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}