{"ast":null,"code":"/**\n *  [Base64 encoding](link-wiki-base64) using 6-bit words to encode\n *  arbitrary bytes into a string using 65 printable symbols, the\n *  upper-case and lower-case alphabet, the digits ``0`` through ``9``,\n *  ``\"+\"`` and ``\"/\"`` with the ``\"=\"`` used for padding.\n *\n *  @_subsection: api/utils:Base64 Encoding  [about-base64]\n */\nimport { getBytes, getBytesCopy } from \"./data.js\";\n/**\n *  Decodes the base-64 encoded %%value%%.\n *\n *  @example:\n *    // The decoded value is always binary data...\n *    result = decodeBase64(\"SGVsbG8gV29ybGQhIQ==\")\n *    //_result:\n *\n *    // ...use toUtf8String to convert it to a string.\n *    toUtf8String(result)\n *    //_result:\n *\n *    // Decoding binary data\n *    decodeBase64(\"EjQ=\")\n *    //_result:\n */\nexport function decodeBase64(value) {\n  return getBytesCopy(Buffer.from(value, \"base64\"));\n}\n;\n/**\n *  Encodes %%data%% as a base-64 encoded string.\n *\n *  @example:\n *    // Encoding binary data as a hexstring\n *    encodeBase64(\"0x1234\")\n *    //_result:\n *\n *    // Encoding binary data as a Uint8Array\n *    encodeBase64(new Uint8Array([ 0x12, 0x34 ]))\n *    //_result:\n *\n *    // The input MUST be data...\n *    encodeBase64(\"Hello World!!\")\n *    //_error:\n *\n *    // ...use toUtf8Bytes for this.\n *    encodeBase64(toUtf8Bytes(\"Hello World!!\"))\n *    //_result:\n */\nexport function encodeBase64(data) {\n  return Buffer.from(getBytes(data)).toString(\"base64\");\n}","map":{"version":3,"names":["getBytes","getBytesCopy","decodeBase64","value","Buffer","from","encodeBase64","data","toString"],"sources":["../../src.ts/utils/base64.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;AAQA,SAASA,QAAQ,EAAEC,YAAY,QAAQ,WAAW;AAKlD;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUC,YAAYA,CAACC,KAAa;EACtC,OAAOF,YAAY,CAACG,MAAM,CAACC,IAAI,CAACF,KAAK,EAAE,QAAQ,CAAC,CAAC;AACrD;AAAC;AAED;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,SAAUG,YAAYA,CAACC,IAAe;EACxC,OAAOH,MAAM,CAACC,IAAI,CAACL,QAAQ,CAACO,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC;AACzD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}