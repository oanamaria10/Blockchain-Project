{"ast":null,"code":"import { connect } from '@ucanto/client';\nimport { CAR, HTTP } from '@ucanto/transport';\nimport * as Aggregator from '@web3-storage/capabilities/filecoin/aggregator';\nimport { services } from './service.js';\n/**\n * @typedef {import('./types.js').AggregatorService} AggregatorService\n * @typedef {import('@ucanto/interface').ConnectionView<AggregatorService>} ConnectionView\n */\n/** @type {ConnectionView} */\nexport const connection = connect({\n  id: services.AGGREGATOR.principal,\n  codec: CAR.outbound,\n  channel: HTTP.open({\n    url: services.AGGREGATOR.url,\n    method: 'POST'\n  })\n});\n/**\n * The `piece/offer` task can be executed to request that a piece be aggregated\n * for inclusion in an upcoming an Filecoin deal. It issues a signed receipt\n * of the execution result. It is _also_ an effect linked from successful\n * execution of a `filecoin/submit` task.\n *\n * A receipt for successful execution will contain an effect, linking to a\n * `piece/accept` task that will complete asynchronously.\n *\n * Otherwise the task is failed and the receipt will contain details of the\n * reason behind the failure.\n *\n * @see https://github.com/storacha/specs/blob/main/w3-filecoin.md#pieceoffer\n *\n * @param {import('./types.js').InvocationConfig} conf - Configuration\n * @param {import('@web3-storage/data-segment').PieceLink} piece\n * @param {string} group\n * @param {import('./types.js').RequestOptions<AggregatorService>} [options]\n */\nexport async function pieceOffer({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, piece, group, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const invocation = Aggregator.pieceOffer.invoke({\n    issuer,\n    /* c8 ignore next */\n    audience: audience ?? services.AGGREGATOR.principal,\n    with: resource,\n    nb: {\n      piece,\n      group\n    },\n    proofs,\n    expiration: Infinity\n  });\n  return await invocation.execute(conn);\n}\n/**\n * The `piece/accept` task is an _effect_ linked from successful execution of a\n * `piece/offer` task, it is executed to issue a receipt for the success or\n * failure of the task.\n *\n * A receipt for successful execution indicates that the offered piece was\n * included in an aggregate. In this case the receipt will contain the\n * aggregate piece CID and a proof that the piece was included in the\n * aggregate. It also includes an effect, linking to an `aggregate/offer` task\n * that will complete asynchronously.\n *\n * Otherwise the task is failed and the receipt will contain details of the\n * reason behind the failure.\n *\n * @see https://github.com/storacha/specs/blob/main/w3-filecoin.md#pieceaccept\n *\n * @param {import('./types.js').InvocationConfig} conf - Configuration\n * @param {import('@web3-storage/data-segment').PieceLink} piece\n * @param {string} group\n * @param {import('./types.js').RequestOptions<AggregatorService>} [options]\n */\nexport async function pieceAccept({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, piece, group, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const invocation = Aggregator.pieceAccept.invoke({\n    issuer,\n    /* c8 ignore next */\n    audience: audience ?? services.AGGREGATOR.principal,\n    with: resource,\n    nb: {\n      piece,\n      group\n    },\n    proofs,\n    expiration: Infinity\n  });\n  return await invocation.execute(conn);\n}","map":{"version":3,"names":["connect","CAR","HTTP","Aggregator","services","connection","id","AGGREGATOR","principal","codec","outbound","channel","open","url","method","pieceOffer","issuer","with","resource","proofs","audience","piece","group","options","conn","invocation","invoke","nb","expiration","Infinity","execute","pieceAccept"],"sources":["../../src/aggregator.js"],"sourcesContent":[null],"mappings":"AAAA,SAASA,OAAO,QAAQ,gBAAgB;AACxC,SAASC,GAAG,EAAEC,IAAI,QAAQ,mBAAmB;AAC7C,OAAO,KAAKC,UAAU,MAAM,gDAAgD;AAC5E,SAASC,QAAQ,QAAQ,cAAc;AAEvC;;;;AAKA;AACA,OAAO,MAAMC,UAAU,GAAGL,OAAO,CAAC;EAChCM,EAAE,EAAEF,QAAQ,CAACG,UAAU,CAACC,SAAS;EACjCC,KAAK,EAAER,GAAG,CAACS,QAAQ;EACnBC,OAAO,EAAET,IAAI,CAACU,IAAI,CAAC;IACjBC,GAAG,EAAET,QAAQ,CAACG,UAAU,CAACM,GAAG;IAC5BC,MAAM,EAAE;GACT;CACF,CAAC;AAEF;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,eAAeC,UAAUA,CAC9B;EAAEC,MAAM;EAAEC,IAAI,EAAEC,QAAQ;EAAEC,MAAM;EAAEC;AAAQ,CAAE,EAC5CC,KAAK,EACLC,KAAK,EACLC,OAAO,GAAG,EAAE;EAEZ;EACA,MAAMC,IAAI,GAAGD,OAAO,CAAClB,UAAU,IAAIA,UAAU;EAE7C,MAAMoB,UAAU,GAAGtB,UAAU,CAACY,UAAU,CAACW,MAAM,CAAC;IAC9CV,MAAM;IACN;IACAI,QAAQ,EAAEA,QAAQ,IAAIhB,QAAQ,CAACG,UAAU,CAACC,SAAS;IACnDS,IAAI,EAAEC,QAAQ;IACdS,EAAE,EAAE;MACFN,KAAK;MACLC;KACD;IACDH,MAAM;IACNS,UAAU,EAAEC;GACb,CAAC;EAEF,OAAO,MAAMJ,UAAU,CAACK,OAAO,CAACN,IAAI,CAAC;AACvC;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,eAAeO,WAAWA,CAC/B;EAAEf,MAAM;EAAEC,IAAI,EAAEC,QAAQ;EAAEC,MAAM;EAAEC;AAAQ,CAAE,EAC5CC,KAAK,EACLC,KAAK,EACLC,OAAO,GAAG,EAAE;EAEZ;EACA,MAAMC,IAAI,GAAGD,OAAO,CAAClB,UAAU,IAAIA,UAAU;EAE7C,MAAMoB,UAAU,GAAGtB,UAAU,CAAC4B,WAAW,CAACL,MAAM,CAAC;IAC/CV,MAAM;IACN;IACAI,QAAQ,EAAEA,QAAQ,IAAIhB,QAAQ,CAACG,UAAU,CAACC,SAAS;IACnDS,IAAI,EAAEC,QAAQ;IACdS,EAAE,EAAE;MACFN,KAAK;MACLC;KACD;IACDH,MAAM;IACNS,UAAU,EAAEC;GACb,CAAC;EAEF,OAAO,MAAMJ,UAAU,CAACK,OAAO,CAACN,IAAI,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}