{"ast":null,"code":"/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nfunction isBytes(a) {\n  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array';\n}\nfunction isArrayOf(isString, arr) {\n  if (!Array.isArray(arr)) return false;\n  if (arr.length === 0) return true;\n  if (isString) {\n    return arr.every(item => typeof item === 'string');\n  } else {\n    return arr.every(item => Number.isSafeInteger(item));\n  }\n}\n// no abytes: seems to have 10% slowdown. Why?!\nfunction afn(input) {\n  if (typeof input !== 'function') throw new Error('function expected');\n  return true;\n}\nfunction astr(label, input) {\n  if (typeof input !== 'string') throw new Error(`${label}: string expected`);\n  return true;\n}\nfunction anumber(n) {\n  if (!Number.isSafeInteger(n)) throw new Error(`invalid integer: ${n}`);\n}\nexport const assertNumber = anumber;\nfunction aArr(input) {\n  if (!Array.isArray(input)) throw new Error('array expected');\n}\nfunction astrArr(label, input) {\n  if (!isArrayOf(true, input)) throw new Error(`${label}: array of strings expected`);\n}\nfunction anumArr(label, input) {\n  if (!isArrayOf(false, input)) throw new Error(`${label}: array of numbers expected`);\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain(...args) {\n  const id = a => a;\n  // Wrap call in closure so JIT can inline calls\n  const wrap = (a, b) => c => a(b(c));\n  // Construct chain of args[-1].encode(args[-2].encode([...]))\n  const encode = args.map(x => x.encode).reduceRight(wrap, id);\n  // Construct chain of args[0].decode(args[1].decode(...))\n  const decode = args.map(x => x.decode).reduce(wrap, id);\n  return {\n    encode,\n    decode\n  };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back.\n * Could also be array of strings.\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(letters) {\n  // mapping 1 to \"b\"\n  const lettersA = typeof letters === 'string' ? letters.split('') : letters;\n  const len = lettersA.length;\n  astrArr('alphabet', lettersA);\n  // mapping \"b\" to 1\n  const indexes = new Map(lettersA.map((l, i) => [l, i]));\n  return {\n    encode: digits => {\n      aArr(digits);\n      return digits.map(i => {\n        if (!Number.isSafeInteger(i) || i < 0 || i >= len) throw new Error(`alphabet.encode: digit index outside alphabet \"${i}\". Allowed: ${letters}`);\n        return lettersA[i];\n      });\n    },\n    decode: input => {\n      aArr(input);\n      return input.map(letter => {\n        astr('alphabet.decode', letter);\n        const i = indexes.get(letter);\n        if (i === undefined) throw new Error(`Unknown letter: \"${letter}\". Allowed: ${letters}`);\n        return i;\n      });\n    }\n  };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = '') {\n  astr('join', separator);\n  return {\n    encode: from => {\n      astrArr('join.decode', from);\n      return from.join(separator);\n    },\n    decode: to => {\n      astr('join.decode', to);\n      return to.split(separator);\n    }\n  };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits, chr = '=') {\n  anumber(bits);\n  astr('padding', chr);\n  return {\n    encode(data) {\n      astrArr('padding.encode', data);\n      while (data.length * bits % 8) data.push(chr);\n      return data;\n    },\n    decode(input) {\n      astrArr('padding.decode', input);\n      let end = input.length;\n      if (end * bits % 8) throw new Error('padding: invalid, string should have whole number of bytes');\n      for (; end > 0 && input[end - 1] === chr; end--) {\n        const last = end - 1;\n        const byte = last * bits;\n        if (byte % 8 === 0) throw new Error('padding: invalid, string has too much padding');\n      }\n      return input.slice(0, end);\n    }\n  };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize(fn) {\n  afn(fn);\n  return {\n    encode: from => from,\n    decode: to => fn(to)\n  };\n}\n/**\n * Slow: O(n^2) time complexity\n */\nfunction convertRadix(data, from, to) {\n  // base 1 is impossible\n  if (from < 2) throw new Error(`convertRadix: invalid from=${from}, base cannot be less than 2`);\n  if (to < 2) throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);\n  aArr(data);\n  if (!data.length) return [];\n  let pos = 0;\n  const res = [];\n  const digits = Array.from(data, d => {\n    anumber(d);\n    if (d < 0 || d >= from) throw new Error(`invalid integer: ${d}`);\n    return d;\n  });\n  const dlen = digits.length;\n  while (true) {\n    let carry = 0;\n    let done = true;\n    for (let i = pos; i < dlen; i++) {\n      const digit = digits[i];\n      const fromCarry = from * carry;\n      const digitBase = fromCarry + digit;\n      if (!Number.isSafeInteger(digitBase) || fromCarry / from !== carry || digitBase - digit !== fromCarry) {\n        throw new Error('convertRadix: carry overflow');\n      }\n      const div = digitBase / to;\n      carry = digitBase % to;\n      const rounded = Math.floor(div);\n      digits[i] = rounded;\n      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase) throw new Error('convertRadix: carry overflow');\n      if (!done) continue;else if (!rounded) pos = i;else done = false;\n    }\n    res.push(carry);\n    if (done) break;\n  }\n  for (let i = 0; i < data.length - 1 && data[i] === 0; i++) res.push(0);\n  return res.reverse();\n}\nconst gcd = (a, b) => b === 0 ? a : gcd(b, a % b);\nconst radix2carry = /* @__NO_SIDE_EFFECTS__ */(from, to) => from + (to - gcd(from, to));\nconst powers = /* @__PURE__ */(() => {\n  let res = [];\n  for (let i = 0; i < 40; i++) res.push(2 ** i);\n  return res;\n})();\n/**\n * Implemented with numbers, because BigInt is 5x slower\n */\nfunction convertRadix2(data, from, to, padding) {\n  aArr(data);\n  if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);\n  if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);\n  if (radix2carry(from, to) > 32) {\n    throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n  }\n  let carry = 0;\n  let pos = 0; // bitwise position in current element\n  const max = powers[from];\n  const mask = powers[to] - 1;\n  const res = [];\n  for (const n of data) {\n    anumber(n);\n    if (n >= max) throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n    carry = carry << from | n;\n    if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n    pos += from;\n    for (; pos >= to; pos -= to) res.push((carry >> pos - to & mask) >>> 0);\n    const pow = powers[pos];\n    if (pow === undefined) throw new Error('invalid carry');\n    carry &= pow - 1; // clean carry, otherwise it will cause overflow\n  }\n  carry = carry << to - pos & mask;\n  if (!padding && pos >= from) throw new Error('Excess padding');\n  if (!padding && carry > 0) throw new Error(`Non-zero padding: ${carry}`);\n  if (padding && pos > 0) res.push(carry >>> 0);\n  return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n  anumber(num);\n  const _256 = 2 ** 8;\n  return {\n    encode: bytes => {\n      if (!isBytes(bytes)) throw new Error('radix.encode input should be Uint8Array');\n      return convertRadix(Array.from(bytes), _256, num);\n    },\n    decode: digits => {\n      anumArr('radix.decode', digits);\n      return Uint8Array.from(convertRadix(digits, num, _256));\n    }\n  };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits, revPadding = false) {\n  anumber(bits);\n  if (bits <= 0 || bits > 32) throw new Error('radix2: bits should be in (0..32]');\n  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32) throw new Error('radix2: carry overflow');\n  return {\n    encode: bytes => {\n      if (!isBytes(bytes)) throw new Error('radix2.encode input should be Uint8Array');\n      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n    },\n    decode: digits => {\n      anumArr('radix2.decode', digits);\n      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n    }\n  };\n}\nfunction unsafeWrapper(fn) {\n  afn(fn);\n  return function (...args) {\n    try {\n      return fn.apply(null, args);\n    } catch (e) {}\n  };\n}\nfunction checksum(len, fn) {\n  anumber(len);\n  afn(fn);\n  return {\n    encode(data) {\n      if (!isBytes(data)) throw new Error('checksum.encode: input should be Uint8Array');\n      const sum = fn(data).slice(0, len);\n      const res = new Uint8Array(data.length + len);\n      res.set(data);\n      res.set(sum, data.length);\n      return res;\n    },\n    decode(data) {\n      if (!isBytes(data)) throw new Error('checksum.decode: input should be Uint8Array');\n      const payload = data.slice(0, -len);\n      const oldChecksum = data.slice(-len);\n      const newChecksum = fn(payload).slice(0, len);\n      for (let i = 0; i < len; i++) if (newChecksum[i] !== oldChecksum[i]) throw new Error('Invalid checksum');\n      return payload;\n    }\n  };\n}\n// prettier-ignore\nexport const utils = {\n  alphabet,\n  chain,\n  checksum,\n  convertRadix,\n  convertRadix2,\n  radix,\n  radix2,\n  join,\n  padding\n};\n// RFC 4648 aka RFC 3548\n// ---------------------\n/**\n * base16 encoding.\n */\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32nopad = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32hexnopad = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize(s => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\n/**\n * base64 with padding. For no padding, use `base64nopad`.\n * @example\n * const b = base64.decode('A951'); // Uint8Array.from([ 3, 222, 117 ])\n * base64.encode(b); // 'A951'\n */\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\n/**\n * base64 without padding.\n */\nexport const base64nopad = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nexport const base64urlnopad = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\n// base58 code\n// -----------\nconst genBase58 = /* @__NO_SIDE_EFFECTS__ */abc => chain(radix(58), alphabet(abc), join(''));\n/**\n * Base58: base64 without characters +, /, 0, O, I, l.\n * Quadratic (O(n^2)) - so, can't be used on large inputs.\n */\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\n/**\n * XMR version of base58.\n * Done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n * Block encoding significantly reduces quadratic complexity of base58.\n */\nexport const base58xmr = {\n  encode(data) {\n    let res = '';\n    for (let i = 0; i < data.length; i += 8) {\n      const block = data.subarray(i, i + 8);\n      res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n    }\n    return res;\n  },\n  decode(str) {\n    let res = [];\n    for (let i = 0; i < str.length; i += 11) {\n      const slice = str.slice(i, i + 11);\n      const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n      const block = base58.decode(slice);\n      for (let j = 0; j < block.length - blockLen; j++) {\n        if (block[j] !== 0) throw new Error('base58xmr: wrong padding');\n      }\n      res = res.concat(Array.from(block.slice(block.length - blockLen)));\n    }\n    return Uint8Array.from(res);\n  }\n};\nexport const createBase58check = sha256 => chain(checksum(4, data => sha256(sha256(data))), base58);\n/**\n * Use `createBase58check` instead.\n * @deprecated\n */\nexport const base58check = createBase58check;\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n  const b = pre >> 25;\n  let chk = (pre & 0x1ffffff) << 5;\n  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n    if ((b >> i & 1) === 1) chk ^= POLYMOD_GENERATORS[i];\n  }\n  return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n  const len = prefix.length;\n  let chk = 1;\n  for (let i = 0; i < len; i++) {\n    const c = prefix.charCodeAt(i);\n    if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);\n    chk = bech32Polymod(chk) ^ c >> 5;\n  }\n  chk = bech32Polymod(chk);\n  for (let i = 0; i < len; i++) chk = bech32Polymod(chk) ^ prefix.charCodeAt(i) & 0x1f;\n  for (let v of words) chk = bech32Polymod(chk) ^ v;\n  for (let i = 0; i < 6; i++) chk = bech32Polymod(chk);\n  chk ^= encodingConst;\n  return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n  const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n  const _words = radix2(5);\n  const fromWords = _words.decode;\n  const toWords = _words.encode;\n  const fromWordsUnsafe = unsafeWrapper(fromWords);\n  function encode(prefix, words, limit = 90) {\n    astr('bech32.encode prefix', prefix);\n    if (isBytes(words)) words = Array.from(words);\n    anumArr('bech32.encode', words);\n    const plen = prefix.length;\n    if (plen === 0) throw new TypeError(`Invalid prefix length ${plen}`);\n    const actualLength = plen + 7 + words.length;\n    if (limit !== false && actualLength > limit) throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n    const lowered = prefix.toLowerCase();\n    const sum = bechChecksum(lowered, words, ENCODING_CONST);\n    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\n  }\n  function decode(str, limit = 90) {\n    astr('bech32.decode input', str);\n    const slen = str.length;\n    if (slen < 8 || limit !== false && slen > limit) throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);\n    // don't allow mixed case\n    const lowered = str.toLowerCase();\n    if (str !== lowered && str !== str.toUpperCase()) throw new Error(`String must be lowercase or uppercase`);\n    const sepIndex = lowered.lastIndexOf('1');\n    if (sepIndex === 0 || sepIndex === -1) throw new Error(`Letter \"1\" must be present between prefix and data only`);\n    const prefix = lowered.slice(0, sepIndex);\n    const data = lowered.slice(sepIndex + 1);\n    if (data.length < 6) throw new Error('Data must be at least 6 characters long');\n    const words = BECH_ALPHABET.decode(data).slice(0, -6);\n    const sum = bechChecksum(prefix, words, ENCODING_CONST);\n    if (!data.endsWith(sum)) throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n    return {\n      prefix,\n      words\n    };\n  }\n  const decodeUnsafe = unsafeWrapper(decode);\n  function decodeToBytes(str) {\n    const {\n      prefix,\n      words\n    } = decode(str, false);\n    return {\n      prefix,\n      words,\n      bytes: fromWords(words)\n    };\n  }\n  function encodeFromBytes(prefix, bytes) {\n    return encode(prefix, toWords(bytes));\n  }\n  return {\n    encode,\n    decode,\n    encodeFromBytes,\n    decodeToBytes,\n    decodeUnsafe,\n    fromWords,\n    fromWordsUnsafe,\n    toWords\n  };\n}\n/**\n * Low-level bech32 operations. Operates on words.\n */\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\n/**\n * UTF-8-to-byte decoder. Uses built-in TextDecoder / TextEncoder.\n * @example\n * const b = utf8.decode(\"hey\"); // => new Uint8Array([ 104, 101, 121 ])\n * const str = utf8.encode(b); // \"hey\"\n */\nexport const utf8 = {\n  encode: data => new TextDecoder().decode(data),\n  decode: str => new TextEncoder().encode(str)\n};\n/**\n * hex string decoder.\n * @example\n * const b = hex.decode(\"0102ff\"); // => new Uint8Array([ 1, 2, 255 ])\n * const str = hex.encode(b); // \"0102ff\"\n */\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize(s => {\n  if (typeof s !== 'string' || s.length % 2 !== 0) throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n  return s.toLowerCase();\n}));\n// prettier-ignore\nconst CODERS = {\n  utf8,\n  hex,\n  base16,\n  base32,\n  base64,\n  base64url,\n  base58,\n  base58xmr\n};\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\nexport const bytesToString = (type, bytes) => {\n  if (typeof type !== 'string' || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (!isBytes(bytes)) throw new TypeError('bytesToString() expects Uint8Array');\n  return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString; // as in python, but for bytes only\nexport const stringToBytes = (type, str) => {\n  if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (typeof str !== 'string') throw new TypeError('stringToBytes() expects string');\n  return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;","map":{"version":3,"names":["isBytes","a","Uint8Array","ArrayBuffer","isView","constructor","name","isArrayOf","isString","arr","Array","isArray","length","every","item","Number","isSafeInteger","afn","input","Error","astr","label","anumber","n","assertNumber","aArr","astrArr","anumArr","chain","args","id","wrap","b","c","encode","map","x","reduceRight","decode","reduce","alphabet","letters","lettersA","split","len","indexes","Map","l","i","digits","letter","get","undefined","join","separator","from","to","padding","bits","chr","data","push","end","last","byte","slice","normalize","fn","convertRadix","pos","res","d","dlen","carry","done","digit","fromCarry","digitBase","div","rounded","Math","floor","reverse","gcd","radix2carry","powers","convertRadix2","max","mask","pow","radix","num","_256","bytes","radix2","revPadding","unsafeWrapper","apply","e","checksum","sum","set","payload","oldChecksum","newChecksum","utils","base16","base32","base32nopad","base32hex","base32hexnopad","base32crockford","s","toUpperCase","replace","base64","base64nopad","base64url","base64urlnopad","genBase58","abc","base58","base58flickr","base58xrp","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","str","blockLen","indexOf","j","concat","createBase58check","sha256","base58check","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","charCodeAt","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","plen","TypeError","actualLength","lowered","toLowerCase","slen","sepIndex","lastIndexOf","endsWith","decodeUnsafe","decodeToBytes","encodeFromBytes","bech32","bech32m","utf8","TextDecoder","TextEncoder","hex","CODERS","coderTypeError","bytesToString","type","hasOwnProperty","stringToBytes"],"sources":["C:\\FACULTATE\\Proiect\\node_modules\\@web3-storage\\access\\node_modules\\@scure\\base\\index.ts"],"sourcesContent":["/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\nexport interface Coder<F, T> {\n  encode(from: F): T;\n  decode(to: T): F;\n}\n\nexport interface BytesCoder extends Coder<Uint8Array, string> {\n  encode: (data: Uint8Array) => string;\n  decode: (str: string) => Uint8Array;\n}\n\nfunction isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\nfunction isArrayOf(isString: boolean, arr: any[]) {\n  if (!Array.isArray(arr)) return false;\n  if (arr.length === 0) return true;\n  if (isString) {\n    return arr.every((item) => typeof item === 'string');\n  } else {\n    return arr.every((item) => Number.isSafeInteger(item));\n  }\n}\n\n// no abytes: seems to have 10% slowdown. Why?!\n\nfunction afn(input: Function): input is Function {\n  if (typeof input !== 'function') throw new Error('function expected');\n  return true;\n}\n\nfunction astr(label: string, input: unknown): input is string {\n  if (typeof input !== 'string') throw new Error(`${label}: string expected`);\n  return true;\n}\n\nfunction anumber(n: number) {\n  if (!Number.isSafeInteger(n)) throw new Error(`invalid integer: ${n}`);\n}\nexport const assertNumber = anumber;\n\nfunction aArr(input: any[]) {\n  if (!Array.isArray(input)) throw new Error('array expected');\n}\nfunction astrArr(label: string, input: string[]) {\n  if (!isArrayOf(true, input)) throw new Error(`${label}: array of strings expected`);\n}\nfunction anumArr(label: string, input: number[]) {\n  if (!isArrayOf(false, input)) throw new Error(`${label}: array of numbers expected`);\n}\n\n// TODO: some recusive type inference so it would check correct order of input/output inside rest?\n// like <string, number>, <number, bytes>, <bytes, float>\ntype Chain = [Coder<any, any>, ...Coder<any, any>[]];\n// Extract info from Coder type\ntype Input<F> = F extends Coder<infer T, any> ? T : never;\ntype Output<F> = F extends Coder<any, infer T> ? T : never;\n// Generic function for arrays\ntype First<T> = T extends [infer U, ...any[]] ? U : never;\ntype Last<T> = T extends [...any[], infer U] ? U : never;\ntype Tail<T> = T extends [any, ...infer U] ? U : never;\n\ntype AsChain<C extends Chain, Rest = Tail<C>> = {\n  // C[K] = Coder<Input<C[K]>, Input<Rest[k]>>\n  [K in keyof C]: Coder<Input<C[K]>, Input<K extends keyof Rest ? Rest[K] : any>>;\n};\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain<T extends Chain & AsChain<T>>(...args: T): Coder<Input<First<T>>, Output<Last<T>>> {\n  const id = (a: any) => a;\n  // Wrap call in closure so JIT can inline calls\n  const wrap = (a: any, b: any) => (c: any) => a(b(c));\n  // Construct chain of args[-1].encode(args[-2].encode([...]))\n  const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n  // Construct chain of args[0].decode(args[1].decode(...))\n  const decode = args.map((x) => x.decode).reduce(wrap, id);\n  return { encode, decode };\n}\n\n/**\n * Encodes integer radix representation to array of strings using alphabet and back.\n * Could also be array of strings.\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(letters: string | string[]): Coder<number[], string[]> {\n  // mapping 1 to \"b\"\n  const lettersA = typeof letters === 'string' ? letters.split('') : letters;\n  const len = lettersA.length;\n  astrArr('alphabet', lettersA);\n\n  // mapping \"b\" to 1\n  const indexes = new Map(lettersA.map((l, i) => [l, i]));\n  return {\n    encode: (digits: number[]) => {\n      aArr(digits);\n      return digits.map((i) => {\n        if (!Number.isSafeInteger(i) || i < 0 || i >= len)\n          throw new Error(\n            `alphabet.encode: digit index outside alphabet \"${i}\". Allowed: ${letters}`\n          );\n        return lettersA[i]!;\n      });\n    },\n    decode: (input: string[]): number[] => {\n      aArr(input);\n      return input.map((letter) => {\n        astr('alphabet.decode', letter);\n        const i = indexes.get(letter);\n        if (i === undefined) throw new Error(`Unknown letter: \"${letter}\". Allowed: ${letters}`);\n        return i;\n      });\n    },\n  };\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = ''): Coder<string[], string> {\n  astr('join', separator);\n  return {\n    encode: (from) => {\n      astrArr('join.decode', from);\n      return from.join(separator);\n    },\n    decode: (to) => {\n      astr('join.decode', to);\n      return to.split(separator);\n    },\n  };\n}\n\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits: number, chr = '='): Coder<string[], string[]> {\n  anumber(bits);\n  astr('padding', chr);\n  return {\n    encode(data: string[]): string[] {\n      astrArr('padding.encode', data);\n      while ((data.length * bits) % 8) data.push(chr);\n      return data;\n    },\n    decode(input: string[]): string[] {\n      astrArr('padding.decode', input);\n      let end = input.length;\n      if ((end * bits) % 8)\n        throw new Error('padding: invalid, string should have whole number of bytes');\n      for (; end > 0 && input[end - 1] === chr; end--) {\n        const last = end - 1;\n        const byte = last * bits;\n        if (byte % 8 === 0) throw new Error('padding: invalid, string has too much padding');\n      }\n      return input.slice(0, end);\n    },\n  };\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize<T>(fn: (val: T) => T): Coder<T, T> {\n  afn(fn);\n  return { encode: (from: T) => from, decode: (to: T) => fn(to) };\n}\n\n/**\n * Slow: O(n^2) time complexity\n */\nfunction convertRadix(data: number[], from: number, to: number): number[] {\n  // base 1 is impossible\n  if (from < 2) throw new Error(`convertRadix: invalid from=${from}, base cannot be less than 2`);\n  if (to < 2) throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);\n  aArr(data);\n  if (!data.length) return [];\n  let pos = 0;\n  const res = [];\n  const digits = Array.from(data, (d) => {\n    anumber(d);\n    if (d < 0 || d >= from) throw new Error(`invalid integer: ${d}`);\n    return d;\n  });\n  const dlen = digits.length;\n  while (true) {\n    let carry = 0;\n    let done = true;\n    for (let i = pos; i < dlen; i++) {\n      const digit = digits[i]!;\n      const fromCarry = from * carry;\n      const digitBase = fromCarry + digit;\n      if (\n        !Number.isSafeInteger(digitBase) ||\n        fromCarry / from !== carry ||\n        digitBase - digit !== fromCarry\n      ) {\n        throw new Error('convertRadix: carry overflow');\n      }\n      const div = digitBase / to;\n      carry = digitBase % to;\n      const rounded = Math.floor(div);\n      digits[i] = rounded;\n      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n        throw new Error('convertRadix: carry overflow');\n      if (!done) continue;\n      else if (!rounded) pos = i;\n      else done = false;\n    }\n    res.push(carry);\n    if (done) break;\n  }\n  for (let i = 0; i < data.length - 1 && data[i] === 0; i++) res.push(0);\n  return res.reverse();\n}\n\nconst gcd = (a: number, b: number): number => (b === 0 ? a : gcd(b, a % b));\nconst radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from: number, to: number) =>\n  from + (to - gcd(from, to));\nconst powers: number[] = /* @__PURE__ */ (() => {\n  let res = [];\n  for (let i = 0; i < 40; i++) res.push(2 ** i);\n  return res;\n})();\n/**\n * Implemented with numbers, because BigInt is 5x slower\n */\nfunction convertRadix2(data: number[], from: number, to: number, padding: boolean): number[] {\n  aArr(data);\n  if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);\n  if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);\n  if (radix2carry(from, to) > 32) {\n    throw new Error(\n      `convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`\n    );\n  }\n  let carry = 0;\n  let pos = 0; // bitwise position in current element\n  const max = powers[from]!;\n  const mask = powers[to]! - 1;\n  const res: number[] = [];\n  for (const n of data) {\n    anumber(n);\n    if (n >= max) throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n    carry = (carry << from) | n;\n    if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n    pos += from;\n    for (; pos >= to; pos -= to) res.push(((carry >> (pos - to)) & mask) >>> 0);\n    const pow = powers[pos];\n    if (pow === undefined) throw new Error('invalid carry');\n    carry &= pow - 1; // clean carry, otherwise it will cause overflow\n  }\n  carry = (carry << (to - pos)) & mask;\n  if (!padding && pos >= from) throw new Error('Excess padding');\n  if (!padding && carry > 0) throw new Error(`Non-zero padding: ${carry}`);\n  if (padding && pos > 0) res.push(carry >>> 0);\n  return res;\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num: number): Coder<Uint8Array, number[]> {\n  anumber(num);\n  const _256 = 2 ** 8;\n  return {\n    encode: (bytes: Uint8Array) => {\n      if (!isBytes(bytes)) throw new Error('radix.encode input should be Uint8Array');\n      return convertRadix(Array.from(bytes), _256, num);\n    },\n    decode: (digits: number[]) => {\n      anumArr('radix.decode', digits);\n      return Uint8Array.from(convertRadix(digits, num, _256));\n    },\n  };\n}\n\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits: number, revPadding = false): Coder<Uint8Array, number[]> {\n  anumber(bits);\n  if (bits <= 0 || bits > 32) throw new Error('radix2: bits should be in (0..32]');\n  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n    throw new Error('radix2: carry overflow');\n  return {\n    encode: (bytes: Uint8Array) => {\n      if (!isBytes(bytes)) throw new Error('radix2.encode input should be Uint8Array');\n      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n    },\n    decode: (digits: number[]) => {\n      anumArr('radix2.decode', digits);\n      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n    },\n  };\n}\n\ntype ArgumentTypes<F extends Function> = F extends (...args: infer A) => any ? A : never;\nfunction unsafeWrapper<T extends (...args: any) => any>(fn: T) {\n  afn(fn);\n  return function (...args: ArgumentTypes<T>): ReturnType<T> | void {\n    try {\n      return fn.apply(null, args);\n    } catch (e) {}\n  };\n}\n\nfunction checksum(\n  len: number,\n  fn: (data: Uint8Array) => Uint8Array\n): Coder<Uint8Array, Uint8Array> {\n  anumber(len);\n  afn(fn);\n  return {\n    encode(data: Uint8Array) {\n      if (!isBytes(data)) throw new Error('checksum.encode: input should be Uint8Array');\n      const sum = fn(data).slice(0, len);\n      const res = new Uint8Array(data.length + len);\n      res.set(data);\n      res.set(sum, data.length);\n      return res;\n    },\n    decode(data: Uint8Array) {\n      if (!isBytes(data)) throw new Error('checksum.decode: input should be Uint8Array');\n      const payload = data.slice(0, -len);\n      const oldChecksum = data.slice(-len);\n      const newChecksum = fn(payload).slice(0, len);\n      for (let i = 0; i < len; i++)\n        if (newChecksum[i] !== oldChecksum[i]) throw new Error('Invalid checksum');\n      return payload;\n    },\n  };\n}\n\n// prettier-ignore\nexport const utils = {\n  alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n\n// RFC 4648 aka RFC 3548\n// ---------------------\n\n/**\n * base16 encoding.\n */\nexport const base16: BytesCoder = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32: BytesCoder = chain(\n  radix2(5),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'),\n  padding(5),\n  join('')\n);\nexport const base32nopad: BytesCoder = chain(\n  radix2(5),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'),\n  join('')\n);\nexport const base32hex: BytesCoder = chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'),\n  padding(5),\n  join('')\n);\nexport const base32hexnopad: BytesCoder = chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'),\n  join('')\n);\nexport const base32crockford: BytesCoder = chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'),\n  join(''),\n  normalize((s: string) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1'))\n);\n/**\n * base64 with padding. For no padding, use `base64nopad`.\n * @example\n * const b = base64.decode('A951'); // Uint8Array.from([ 3, 222, 117 ])\n * base64.encode(b); // 'A951'\n */\nexport const base64: BytesCoder = chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),\n  padding(6),\n  join('')\n);\n/**\n * base64 without padding.\n */\nexport const base64nopad: BytesCoder = chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),\n  join('')\n);\nexport const base64url: BytesCoder = chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),\n  padding(6),\n  join('')\n);\nexport const base64urlnopad: BytesCoder = chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),\n  join('')\n);\n\n// base58 code\n// -----------\nconst genBase58 = /* @__NO_SIDE_EFFECTS__ */ (abc: string) =>\n  chain(radix(58), alphabet(abc), join(''));\n\n/**\n * Base58: base64 without characters +, /, 0, O, I, l.\n * Quadratic (O(n^2)) - so, can't be used on large inputs.\n */\nexport const base58: BytesCoder = genBase58(\n  '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n);\nexport const base58flickr: BytesCoder = genBase58(\n  '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n);\nexport const base58xrp: BytesCoder = genBase58(\n  'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz'\n);\n\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\n\n/**\n * XMR version of base58.\n * Done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n * Block encoding significantly reduces quadratic complexity of base58.\n */\nexport const base58xmr: BytesCoder = {\n  encode(data: Uint8Array) {\n    let res = '';\n    for (let i = 0; i < data.length; i += 8) {\n      const block = data.subarray(i, i + 8);\n      res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length]!, '1');\n    }\n    return res;\n  },\n  decode(str: string) {\n    let res: number[] = [];\n    for (let i = 0; i < str.length; i += 11) {\n      const slice = str.slice(i, i + 11);\n      const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n      const block = base58.decode(slice);\n      for (let j = 0; j < block.length - blockLen; j++) {\n        if (block[j] !== 0) throw new Error('base58xmr: wrong padding');\n      }\n      res = res.concat(Array.from(block.slice(block.length - blockLen)));\n    }\n    return Uint8Array.from(res);\n  },\n};\n\nexport const createBase58check = (sha256: (data: Uint8Array) => Uint8Array): BytesCoder =>\n  chain(\n    checksum(4, (data) => sha256(sha256(data))),\n    base58\n  );\n\n/**\n * Use `createBase58check` instead.\n * @deprecated\n */\nexport const base58check = createBase58check;\n\n// Bech32 code\n// -----------\nexport interface Bech32Decoded<Prefix extends string = string> {\n  prefix: Prefix;\n  words: number[];\n}\nexport interface Bech32DecodedWithArray<Prefix extends string = string> {\n  prefix: Prefix;\n  words: number[];\n  bytes: Uint8Array;\n}\n\nconst BECH_ALPHABET: Coder<number[], string> = chain(\n  alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'),\n  join('')\n);\n\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre: number): number {\n  const b = pre >> 25;\n  let chk = (pre & 0x1ffffff) << 5;\n  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n    if (((b >> i) & 1) === 1) chk ^= POLYMOD_GENERATORS[i]!;\n  }\n  return chk;\n}\n\nfunction bechChecksum(prefix: string, words: number[], encodingConst = 1): string {\n  const len = prefix.length;\n  let chk = 1;\n  for (let i = 0; i < len; i++) {\n    const c = prefix.charCodeAt(i);\n    if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);\n    chk = bech32Polymod(chk) ^ (c >> 5);\n  }\n  chk = bech32Polymod(chk);\n  for (let i = 0; i < len; i++) chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n  for (let v of words) chk = bech32Polymod(chk) ^ v;\n  for (let i = 0; i < 6; i++) chk = bech32Polymod(chk);\n  chk ^= encodingConst;\n  return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]!], 30, 5, false));\n}\n\nexport interface Bech32 {\n  encode<Prefix extends string>(\n    prefix: Prefix,\n    words: number[] | Uint8Array,\n    limit?: number | false\n  ): `${Lowercase<Prefix>}1${string}`;\n  decode<Prefix extends string>(\n    str: `${Prefix}1${string}`,\n    limit?: number | false\n  ): Bech32Decoded<Prefix>;\n  encodeFromBytes(prefix: string, bytes: Uint8Array): string;\n  decodeToBytes(str: string): Bech32DecodedWithArray;\n  decodeUnsafe(str: string, limit?: number | false): void | Bech32Decoded<string>;\n  fromWords(to: number[]): Uint8Array;\n  fromWordsUnsafe(to: number[]): void | Uint8Array;\n  toWords(from: Uint8Array): number[];\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding: 'bech32' | 'bech32m'): Bech32 {\n  const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n  const _words = radix2(5);\n  const fromWords = _words.decode;\n  const toWords = _words.encode;\n  const fromWordsUnsafe = unsafeWrapper(fromWords);\n\n  function encode<Prefix extends string>(\n    prefix: Prefix,\n    words: number[] | Uint8Array,\n    limit: number | false = 90\n  ): `${Lowercase<Prefix>}1${string}` {\n    astr('bech32.encode prefix', prefix);\n    if (isBytes(words)) words = Array.from(words);\n    anumArr('bech32.encode', words);\n    const plen = prefix.length;\n    if (plen === 0) throw new TypeError(`Invalid prefix length ${plen}`);\n    const actualLength = plen + 7 + words.length;\n    if (limit !== false && actualLength > limit)\n      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n    const lowered = prefix.toLowerCase();\n    const sum = bechChecksum(lowered, words, ENCODING_CONST);\n    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}` as `${Lowercase<Prefix>}1${string}`;\n  }\n\n  function decode<Prefix extends string>(\n    str: `${Prefix}1${string}`,\n    limit?: number | false\n  ): Bech32Decoded<Prefix>;\n  function decode(str: string, limit?: number | false): Bech32Decoded;\n  function decode(str: string, limit: number | false = 90): Bech32Decoded {\n    astr('bech32.decode input', str);\n    const slen = str.length;\n    if (slen < 8 || (limit !== false && slen > limit))\n      throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);\n    // don't allow mixed case\n    const lowered = str.toLowerCase();\n    if (str !== lowered && str !== str.toUpperCase())\n      throw new Error(`String must be lowercase or uppercase`);\n    const sepIndex = lowered.lastIndexOf('1');\n    if (sepIndex === 0 || sepIndex === -1)\n      throw new Error(`Letter \"1\" must be present between prefix and data only`);\n    const prefix = lowered.slice(0, sepIndex);\n    const data = lowered.slice(sepIndex + 1);\n    if (data.length < 6) throw new Error('Data must be at least 6 characters long');\n    const words = BECH_ALPHABET.decode(data).slice(0, -6);\n    const sum = bechChecksum(prefix, words, ENCODING_CONST);\n    if (!data.endsWith(sum)) throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n    return { prefix, words };\n  }\n\n  const decodeUnsafe = unsafeWrapper(decode);\n\n  function decodeToBytes(str: string): Bech32DecodedWithArray {\n    const { prefix, words } = decode(str, false);\n    return { prefix, words, bytes: fromWords(words) };\n  }\n\n  function encodeFromBytes(prefix: string, bytes: Uint8Array) {\n    return encode(prefix, toWords(bytes));\n  }\n\n  return {\n    encode,\n    decode,\n    encodeFromBytes,\n    decodeToBytes,\n    decodeUnsafe,\n    fromWords,\n    fromWordsUnsafe,\n    toWords,\n  };\n}\n\n/**\n * Low-level bech32 operations. Operates on words.\n */\nexport const bech32: Bech32 = genBech32('bech32');\nexport const bech32m: Bech32 = genBech32('bech32m');\n\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * UTF-8-to-byte decoder. Uses built-in TextDecoder / TextEncoder.\n * @example\n * const b = utf8.decode(\"hey\"); // => new Uint8Array([ 104, 101, 121 ])\n * const str = utf8.encode(b); // \"hey\"\n */\nexport const utf8: BytesCoder = {\n  encode: (data) => new TextDecoder().decode(data),\n  decode: (str) => new TextEncoder().encode(str),\n};\n\n/**\n * hex string decoder.\n * @example\n * const b = hex.decode(\"0102ff\"); // => new Uint8Array([ 1, 2, 255 ])\n * const str = hex.encode(b); // \"0102ff\"\n */\nexport const hex: BytesCoder = chain(\n  radix2(4),\n  alphabet('0123456789abcdef'),\n  join(''),\n  normalize((s: string) => {\n    if (typeof s !== 'string' || s.length % 2 !== 0)\n      throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n  })\n);\n\n// prettier-ignore\nconst CODERS = {\n  utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\ntype CoderType = keyof typeof CODERS;\nconst coderTypeError =\n  'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\n\nexport const bytesToString = (type: CoderType, bytes: Uint8Array): string => {\n  if (typeof type !== 'string' || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (!isBytes(bytes)) throw new TypeError('bytesToString() expects Uint8Array');\n  return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString; // as in python, but for bytes only\n\nexport const stringToBytes = (type: CoderType, str: string): Uint8Array => {\n  if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (typeof str !== 'string') throw new TypeError('stringToBytes() expects string');\n  return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}