{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.selectHardfork = exports.hardforkGte = exports.getHardforkName = exports.HardforkName = void 0;\nconst constants_1 = require(\"../constants\");\nconst errors_1 = require(\"../core/errors\");\nconst errors_2 = require(\"../core/providers/errors\");\n/* eslint-disable @nomicfoundation/hardhat-internal-rules/only-hardhat-error */\nvar HardforkName;\n(function (HardforkName) {\n  HardforkName[\"FRONTIER\"] = \"chainstart\";\n  HardforkName[\"HOMESTEAD\"] = \"homestead\";\n  HardforkName[\"DAO\"] = \"dao\";\n  HardforkName[\"TANGERINE_WHISTLE\"] = \"tangerineWhistle\";\n  HardforkName[\"SPURIOUS_DRAGON\"] = \"spuriousDragon\";\n  HardforkName[\"BYZANTIUM\"] = \"byzantium\";\n  HardforkName[\"CONSTANTINOPLE\"] = \"constantinople\";\n  HardforkName[\"PETERSBURG\"] = \"petersburg\";\n  HardforkName[\"ISTANBUL\"] = \"istanbul\";\n  HardforkName[\"MUIR_GLACIER\"] = \"muirGlacier\";\n  HardforkName[\"BERLIN\"] = \"berlin\";\n  HardforkName[\"LONDON\"] = \"london\";\n  HardforkName[\"ARROW_GLACIER\"] = \"arrowGlacier\";\n  HardforkName[\"GRAY_GLACIER\"] = \"grayGlacier\";\n  HardforkName[\"MERGE\"] = \"merge\";\n  HardforkName[\"SHANGHAI\"] = \"shanghai\";\n  HardforkName[\"CANCUN\"] = \"cancun\";\n})(HardforkName = exports.HardforkName || (exports.HardforkName = {}));\nconst HARDFORKS_ORDER = [HardforkName.FRONTIER, HardforkName.HOMESTEAD, HardforkName.DAO, HardforkName.TANGERINE_WHISTLE, HardforkName.SPURIOUS_DRAGON, HardforkName.BYZANTIUM, HardforkName.CONSTANTINOPLE, HardforkName.PETERSBURG, HardforkName.ISTANBUL, HardforkName.MUIR_GLACIER, HardforkName.BERLIN, HardforkName.LONDON, HardforkName.ARROW_GLACIER, HardforkName.GRAY_GLACIER, HardforkName.MERGE, HardforkName.SHANGHAI, HardforkName.CANCUN];\nfunction getHardforkName(name) {\n  const hardforkName = Object.values(HardforkName)[Object.values(HardforkName).indexOf(name)];\n  (0, errors_1.assertHardhatInvariant)(hardforkName !== undefined, `Invalid harfork name ${name}`);\n  return hardforkName;\n}\nexports.getHardforkName = getHardforkName;\n/**\n * Check if `hardforkA` is greater than or equal to `hardforkB`,\n * that is, if it includes all its changes.\n */\nfunction hardforkGte(hardforkA, hardforkB) {\n  // This function should not load any ethereumjs library, as it's used during\n  // the Hardhat initialization, and that would make it too slow.\n  const indexA = HARDFORKS_ORDER.lastIndexOf(hardforkA);\n  const indexB = HARDFORKS_ORDER.lastIndexOf(hardforkB);\n  return indexA >= indexB;\n}\nexports.hardforkGte = hardforkGte;\nfunction selectHardfork(forkBlockNumber, currentHardfork, hardforkActivations, blockNumber) {\n  if (forkBlockNumber === undefined || blockNumber > forkBlockNumber) {\n    return currentHardfork;\n  }\n  if (hardforkActivations === undefined || hardforkActivations.size === 0) {\n    throw new errors_2.InternalError(`No known hardfork for execution on historical block ${blockNumber.toString()} (relative to fork block number ${forkBlockNumber}). The node was not configured with a hardfork activation history.  See http://hardhat.org/custom-hardfork-history`);\n  }\n  /** search this._hardforkActivations for the highest block number that\n   * isn't higher than blockNumber, and then return that found block number's\n   * associated hardfork name. */\n  const hardforkHistory = Array.from(hardforkActivations.entries());\n  const [hardfork, activationBlock] = hardforkHistory.reduce(([highestHardfork, highestBlock], [thisHardfork, thisBlock]) => thisBlock > highestBlock && thisBlock <= blockNumber ? [thisHardfork, thisBlock] : [highestHardfork, highestBlock]);\n  if (hardfork === undefined || blockNumber < activationBlock) {\n    throw new errors_2.InternalError(`Could not find a hardfork to run for block ${blockNumber.toString()}, after having looked for one in the hardfork activation history, which was: ${JSON.stringify(hardforkHistory)}. For more information, see https://hardhat.org/hardhat-network/reference/#config`);\n  }\n  if (!constants_1.HARDHAT_NETWORK_SUPPORTED_HARDFORKS.includes(hardfork)) {\n    throw new errors_2.InternalError(`Tried to run a call or transaction in the context of a block whose hardfork is \"${hardfork}\", but Hardhat Network only supports the following hardforks: ${constants_1.HARDHAT_NETWORK_SUPPORTED_HARDFORKS.join(\", \")}`);\n  }\n  return hardfork;\n}\nexports.selectHardfork = selectHardfork;","map":{"version":3,"names":["constants_1","require","errors_1","errors_2","HardforkName","exports","HARDFORKS_ORDER","FRONTIER","HOMESTEAD","DAO","TANGERINE_WHISTLE","SPURIOUS_DRAGON","BYZANTIUM","CONSTANTINOPLE","PETERSBURG","ISTANBUL","MUIR_GLACIER","BERLIN","LONDON","ARROW_GLACIER","GRAY_GLACIER","MERGE","SHANGHAI","CANCUN","getHardforkName","name","hardforkName","Object","values","indexOf","assertHardhatInvariant","undefined","hardforkGte","hardforkA","hardforkB","indexA","lastIndexOf","indexB","selectHardfork","forkBlockNumber","currentHardfork","hardforkActivations","blockNumber","size","InternalError","toString","hardforkHistory","Array","from","entries","hardfork","activationBlock","reduce","highestHardfork","highestBlock","thisHardfork","thisBlock","JSON","stringify","HARDHAT_NETWORK_SUPPORTED_HARDFORKS","includes","join"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\util\\hardforks.ts"],"sourcesContent":["import { HardforkHistoryConfig } from \"../../types/config\";\nimport { HARDHAT_NETWORK_SUPPORTED_HARDFORKS } from \"../constants\";\nimport { assertHardhatInvariant } from \"../core/errors\";\nimport { InternalError } from \"../core/providers/errors\";\n\n/* eslint-disable @nomicfoundation/hardhat-internal-rules/only-hardhat-error */\n\nexport enum HardforkName {\n  FRONTIER = \"chainstart\",\n  HOMESTEAD = \"homestead\",\n  DAO = \"dao\",\n  TANGERINE_WHISTLE = \"tangerineWhistle\",\n  SPURIOUS_DRAGON = \"spuriousDragon\",\n  BYZANTIUM = \"byzantium\",\n  CONSTANTINOPLE = \"constantinople\",\n  PETERSBURG = \"petersburg\",\n  ISTANBUL = \"istanbul\",\n  MUIR_GLACIER = \"muirGlacier\",\n  BERLIN = \"berlin\",\n  LONDON = \"london\",\n  ARROW_GLACIER = \"arrowGlacier\",\n  GRAY_GLACIER = \"grayGlacier\",\n  MERGE = \"merge\",\n  SHANGHAI = \"shanghai\",\n  CANCUN = \"cancun\",\n}\n\nconst HARDFORKS_ORDER: HardforkName[] = [\n  HardforkName.FRONTIER,\n  HardforkName.HOMESTEAD,\n  HardforkName.DAO,\n  HardforkName.TANGERINE_WHISTLE,\n  HardforkName.SPURIOUS_DRAGON,\n  HardforkName.BYZANTIUM,\n  HardforkName.CONSTANTINOPLE,\n  HardforkName.PETERSBURG,\n  HardforkName.ISTANBUL,\n  HardforkName.MUIR_GLACIER,\n  HardforkName.BERLIN,\n  HardforkName.LONDON,\n  HardforkName.ARROW_GLACIER,\n  HardforkName.GRAY_GLACIER,\n  HardforkName.MERGE,\n  HardforkName.SHANGHAI,\n  HardforkName.CANCUN,\n];\n\nexport function getHardforkName(name: string): HardforkName {\n  const hardforkName =\n    Object.values(HardforkName)[\n      Object.values<string>(HardforkName).indexOf(name)\n    ];\n\n  assertHardhatInvariant(\n    hardforkName !== undefined,\n    `Invalid harfork name ${name}`\n  );\n\n  return hardforkName;\n}\n\n/**\n * Check if `hardforkA` is greater than or equal to `hardforkB`,\n * that is, if it includes all its changes.\n */\nexport function hardforkGte(\n  hardforkA: HardforkName,\n  hardforkB: HardforkName\n): boolean {\n  // This function should not load any ethereumjs library, as it's used during\n  // the Hardhat initialization, and that would make it too slow.\n  const indexA = HARDFORKS_ORDER.lastIndexOf(hardforkA);\n  const indexB = HARDFORKS_ORDER.lastIndexOf(hardforkB);\n\n  return indexA >= indexB;\n}\n\nexport function selectHardfork(\n  forkBlockNumber: bigint | undefined,\n  currentHardfork: string,\n  hardforkActivations: HardforkHistoryConfig | undefined,\n  blockNumber: bigint\n): string {\n  if (forkBlockNumber === undefined || blockNumber > forkBlockNumber) {\n    return currentHardfork;\n  }\n\n  if (hardforkActivations === undefined || hardforkActivations.size === 0) {\n    throw new InternalError(\n      `No known hardfork for execution on historical block ${blockNumber.toString()} (relative to fork block number ${forkBlockNumber}). The node was not configured with a hardfork activation history.  See http://hardhat.org/custom-hardfork-history`\n    );\n  }\n\n  /** search this._hardforkActivations for the highest block number that\n   * isn't higher than blockNumber, and then return that found block number's\n   * associated hardfork name. */\n  const hardforkHistory: Array<[name: string, block: number]> = Array.from(\n    hardforkActivations.entries()\n  );\n  const [hardfork, activationBlock] = hardforkHistory.reduce(\n    ([highestHardfork, highestBlock], [thisHardfork, thisBlock]) =>\n      thisBlock > highestBlock && thisBlock <= blockNumber\n        ? [thisHardfork, thisBlock]\n        : [highestHardfork, highestBlock]\n  );\n  if (hardfork === undefined || blockNumber < activationBlock) {\n    throw new InternalError(\n      `Could not find a hardfork to run for block ${blockNumber.toString()}, after having looked for one in the hardfork activation history, which was: ${JSON.stringify(\n        hardforkHistory\n      )}. For more information, see https://hardhat.org/hardhat-network/reference/#config`\n    );\n  }\n\n  if (!HARDHAT_NETWORK_SUPPORTED_HARDFORKS.includes(hardfork)) {\n    throw new InternalError(\n      `Tried to run a call or transaction in the context of a block whose hardfork is \"${hardfork}\", but Hardhat Network only supports the following hardforks: ${HARDHAT_NETWORK_SUPPORTED_HARDFORKS.join(\n        \", \"\n      )}`\n    );\n  }\n\n  return hardfork;\n}\n"],"mappings":";;;;;;AACA,MAAAA,WAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AACA,MAAAE,QAAA,GAAAF,OAAA;AAEA;AAEA,IAAYG,YAkBX;AAlBD,WAAYA,YAAY;EACtBA,YAAA,2BAAuB;EACvBA,YAAA,2BAAuB;EACvBA,YAAA,eAAW;EACXA,YAAA,0CAAsC;EACtCA,YAAA,sCAAkC;EAClCA,YAAA,2BAAuB;EACvBA,YAAA,qCAAiC;EACjCA,YAAA,6BAAyB;EACzBA,YAAA,yBAAqB;EACrBA,YAAA,gCAA4B;EAC5BA,YAAA,qBAAiB;EACjBA,YAAA,qBAAiB;EACjBA,YAAA,kCAA8B;EAC9BA,YAAA,gCAA4B;EAC5BA,YAAA,mBAAe;EACfA,YAAA,yBAAqB;EACrBA,YAAA,qBAAiB;AACnB,CAAC,EAlBWA,YAAY,GAAZC,OAAA,CAAAD,YAAY,KAAZC,OAAA,CAAAD,YAAY;AAoBxB,MAAME,eAAe,GAAmB,CACtCF,YAAY,CAACG,QAAQ,EACrBH,YAAY,CAACI,SAAS,EACtBJ,YAAY,CAACK,GAAG,EAChBL,YAAY,CAACM,iBAAiB,EAC9BN,YAAY,CAACO,eAAe,EAC5BP,YAAY,CAACQ,SAAS,EACtBR,YAAY,CAACS,cAAc,EAC3BT,YAAY,CAACU,UAAU,EACvBV,YAAY,CAACW,QAAQ,EACrBX,YAAY,CAACY,YAAY,EACzBZ,YAAY,CAACa,MAAM,EACnBb,YAAY,CAACc,MAAM,EACnBd,YAAY,CAACe,aAAa,EAC1Bf,YAAY,CAACgB,YAAY,EACzBhB,YAAY,CAACiB,KAAK,EAClBjB,YAAY,CAACkB,QAAQ,EACrBlB,YAAY,CAACmB,MAAM,CACpB;AAED,SAAgBC,eAAeA,CAACC,IAAY;EAC1C,MAAMC,YAAY,GAChBC,MAAM,CAACC,MAAM,CAACxB,YAAY,CAAC,CACzBuB,MAAM,CAACC,MAAM,CAASxB,YAAY,CAAC,CAACyB,OAAO,CAACJ,IAAI,CAAC,CAClD;EAEH,IAAAvB,QAAA,CAAA4B,sBAAsB,EACpBJ,YAAY,KAAKK,SAAS,EAC1B,wBAAwBN,IAAI,EAAE,CAC/B;EAED,OAAOC,YAAY;AACrB;AAZArB,OAAA,CAAAmB,eAAA,GAAAA,eAAA;AAcA;;;;AAIA,SAAgBQ,WAAWA,CACzBC,SAAuB,EACvBC,SAAuB;EAEvB;EACA;EACA,MAAMC,MAAM,GAAG7B,eAAe,CAAC8B,WAAW,CAACH,SAAS,CAAC;EACrD,MAAMI,MAAM,GAAG/B,eAAe,CAAC8B,WAAW,CAACF,SAAS,CAAC;EAErD,OAAOC,MAAM,IAAIE,MAAM;AACzB;AAVAhC,OAAA,CAAA2B,WAAA,GAAAA,WAAA;AAYA,SAAgBM,cAAcA,CAC5BC,eAAmC,EACnCC,eAAuB,EACvBC,mBAAsD,EACtDC,WAAmB;EAEnB,IAAIH,eAAe,KAAKR,SAAS,IAAIW,WAAW,GAAGH,eAAe,EAAE;IAClE,OAAOC,eAAe;;EAGxB,IAAIC,mBAAmB,KAAKV,SAAS,IAAIU,mBAAmB,CAACE,IAAI,KAAK,CAAC,EAAE;IACvE,MAAM,IAAIxC,QAAA,CAAAyC,aAAa,CACrB,uDAAuDF,WAAW,CAACG,QAAQ,EAAE,mCAAmCN,eAAe,oHAAoH,CACpP;;EAGH;;;EAGA,MAAMO,eAAe,GAAyCC,KAAK,CAACC,IAAI,CACtEP,mBAAmB,CAACQ,OAAO,EAAE,CAC9B;EACD,MAAM,CAACC,QAAQ,EAAEC,eAAe,CAAC,GAAGL,eAAe,CAACM,MAAM,CACxD,CAAC,CAACC,eAAe,EAAEC,YAAY,CAAC,EAAE,CAACC,YAAY,EAAEC,SAAS,CAAC,KACzDA,SAAS,GAAGF,YAAY,IAAIE,SAAS,IAAId,WAAW,GAChD,CAACa,YAAY,EAAEC,SAAS,CAAC,GACzB,CAACH,eAAe,EAAEC,YAAY,CAAC,CACtC;EACD,IAAIJ,QAAQ,KAAKnB,SAAS,IAAIW,WAAW,GAAGS,eAAe,EAAE;IAC3D,MAAM,IAAIhD,QAAA,CAAAyC,aAAa,CACrB,8CAA8CF,WAAW,CAACG,QAAQ,EAAE,gFAAgFY,IAAI,CAACC,SAAS,CAChKZ,eAAe,CAChB,mFAAmF,CACrF;;EAGH,IAAI,CAAC9C,WAAA,CAAA2D,mCAAmC,CAACC,QAAQ,CAACV,QAAQ,CAAC,EAAE;IAC3D,MAAM,IAAI/C,QAAA,CAAAyC,aAAa,CACrB,mFAAmFM,QAAQ,iEAAiElD,WAAA,CAAA2D,mCAAmC,CAACE,IAAI,CAClM,IAAI,CACL,EAAE,CACJ;;EAGH,OAAOX,QAAQ;AACjB;AA7CA7C,OAAA,CAAAiC,cAAA,GAAAA,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}