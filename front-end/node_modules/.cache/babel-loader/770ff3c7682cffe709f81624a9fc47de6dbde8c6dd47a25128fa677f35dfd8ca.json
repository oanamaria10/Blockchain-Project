{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HDKey = exports.HARDENED_OFFSET = void 0;\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst ripemd160_1 = require(\"@noble/hashes/ripemd160\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst _assert_1 = require(\"@noble/hashes/_assert\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst secp = require(\"@noble/secp256k1\");\nconst base_1 = require(\"@scure/base\");\nsecp.utils.hmacSha256Sync = (key, ...msgs) => (0, hmac_1.hmac)(sha256_1.sha256, key, secp.utils.concatBytes(...msgs));\nconst base58check = (0, base_1.base58check)(sha256_1.sha256);\nfunction bytesToNumber(bytes) {\n  return BigInt(`0x${(0, utils_1.bytesToHex)(bytes)}`);\n}\nfunction numberToBytes(num) {\n  return (0, utils_1.hexToBytes)(num.toString(16).padStart(64, '0'));\n}\nconst MASTER_SECRET = (0, utils_1.utf8ToBytes)('Bitcoin seed');\nconst BITCOIN_VERSIONS = {\n  private: 0x0488ade4,\n  public: 0x0488b21e\n};\nexports.HARDENED_OFFSET = 0x80000000;\nconst hash160 = data => (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(data));\nconst fromU32 = data => (0, utils_1.createView)(data).getUint32(0, false);\nconst toU32 = n => {\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n    throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n  }\n  const buf = new Uint8Array(4);\n  (0, utils_1.createView)(buf).setUint32(0, n, false);\n  return buf;\n};\nclass HDKey {\n  constructor(opt) {\n    this.depth = 0;\n    this.index = 0;\n    this.chainCode = null;\n    this.parentFingerprint = 0;\n    if (!opt || typeof opt !== 'object') {\n      throw new Error('HDKey.constructor must not be called directly');\n    }\n    this.versions = opt.versions || BITCOIN_VERSIONS;\n    this.depth = opt.depth || 0;\n    this.chainCode = opt.chainCode;\n    this.index = opt.index || 0;\n    this.parentFingerprint = opt.parentFingerprint || 0;\n    if (!this.depth) {\n      if (this.parentFingerprint || this.index) {\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n      }\n    }\n    if (opt.publicKey && opt.privateKey) {\n      throw new Error('HDKey: publicKey and privateKey at same time.');\n    }\n    if (opt.privateKey) {\n      if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\n        throw new Error('Invalid private key');\n      }\n      this.privKey = typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n      this.privKeyBytes = numberToBytes(this.privKey);\n      this.pubKey = secp.getPublicKey(opt.privateKey, true);\n    } else if (opt.publicKey) {\n      this.pubKey = secp.Point.fromHex(opt.publicKey).toRawBytes(true);\n    } else {\n      throw new Error('HDKey: no public or private key provided');\n    }\n    this.pubHash = hash160(this.pubKey);\n  }\n  get fingerprint() {\n    if (!this.pubHash) {\n      throw new Error('No publicKey set!');\n    }\n    return fromU32(this.pubHash);\n  }\n  get identifier() {\n    return this.pubHash;\n  }\n  get pubKeyHash() {\n    return this.pubHash;\n  }\n  get privateKey() {\n    return this.privKeyBytes || null;\n  }\n  get publicKey() {\n    return this.pubKey || null;\n  }\n  get privateExtendedKey() {\n    const priv = this.privateKey;\n    if (!priv) {\n      throw new Error('No private key');\n    }\n    return base58check.encode(this.serialize(this.versions.private, (0, utils_1.concatBytes)(new Uint8Array([0]), priv)));\n  }\n  get publicExtendedKey() {\n    if (!this.pubKey) {\n      throw new Error('No public key');\n    }\n    return base58check.encode(this.serialize(this.versions.public, this.pubKey));\n  }\n  static fromMasterSeed(seed, versions = BITCOIN_VERSIONS) {\n    (0, _assert_1.bytes)(seed);\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\n      throw new Error(`HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`);\n    }\n    const I = (0, hmac_1.hmac)(sha512_1.sha512, MASTER_SECRET, seed);\n    return new HDKey({\n      versions,\n      chainCode: I.slice(32),\n      privateKey: I.slice(0, 32)\n    });\n  }\n  static fromExtendedKey(base58key, versions = BITCOIN_VERSIONS) {\n    const keyBuffer = base58check.decode(base58key);\n    const keyView = (0, utils_1.createView)(keyBuffer);\n    const version = keyView.getUint32(0, false);\n    const opt = {\n      versions,\n      depth: keyBuffer[4],\n      parentFingerprint: keyView.getUint32(5, false),\n      index: keyView.getUint32(9, false),\n      chainCode: keyBuffer.slice(13, 45)\n    };\n    const key = keyBuffer.slice(45);\n    const isPriv = key[0] === 0;\n    if (version !== versions[isPriv ? 'private' : 'public']) {\n      throw new Error('Version mismatch');\n    }\n    if (isPriv) {\n      return new HDKey({\n        ...opt,\n        privateKey: key.slice(1)\n      });\n    } else {\n      return new HDKey({\n        ...opt,\n        publicKey: key\n      });\n    }\n  }\n  static fromJSON(json) {\n    return HDKey.fromExtendedKey(json.xpriv);\n  }\n  derive(path) {\n    if (!/^[mM]'?/.test(path)) {\n      throw new Error('Path must start with \"m\" or \"M\"');\n    }\n    if (/^[mM]'?$/.test(path)) {\n      return this;\n    }\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\n    let child = this;\n    for (const c of parts) {\n      const m = /^(\\d+)('?)$/.exec(c);\n      if (!m || m.length !== 3) {\n        throw new Error(`Invalid child index: ${c}`);\n      }\n      let idx = +m[1];\n      if (!Number.isSafeInteger(idx) || idx >= exports.HARDENED_OFFSET) {\n        throw new Error('Invalid index');\n      }\n      if (m[2] === \"'\") {\n        idx += exports.HARDENED_OFFSET;\n      }\n      child = child.deriveChild(idx);\n    }\n    return child;\n  }\n  deriveChild(index) {\n    if (!this.pubKey || !this.chainCode) {\n      throw new Error('No publicKey or chainCode set');\n    }\n    let data = toU32(index);\n    if (index >= exports.HARDENED_OFFSET) {\n      const priv = this.privateKey;\n      if (!priv) {\n        throw new Error('Could not derive hardened child key');\n      }\n      data = (0, utils_1.concatBytes)(new Uint8Array([0]), priv, data);\n    } else {\n      data = (0, utils_1.concatBytes)(this.pubKey, data);\n    }\n    const I = (0, hmac_1.hmac)(sha512_1.sha512, this.chainCode, data);\n    const childTweak = bytesToNumber(I.slice(0, 32));\n    const chainCode = I.slice(32);\n    if (!secp.utils.isValidPrivateKey(childTweak)) {\n      throw new Error('Tweak bigger than curve order');\n    }\n    const opt = {\n      versions: this.versions,\n      chainCode,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n      index\n    };\n    try {\n      if (this.privateKey) {\n        const added = secp.utils.mod(this.privKey + childTweak, secp.CURVE.n);\n        if (!secp.utils.isValidPrivateKey(added)) {\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\n        }\n        opt.privateKey = added;\n      } else {\n        const added = secp.Point.fromHex(this.pubKey).add(secp.Point.fromPrivateKey(childTweak));\n        if (added.equals(secp.Point.ZERO)) {\n          throw new Error('The tweak was equal to negative P, which made the result key invalid');\n        }\n        opt.publicKey = added.toRawBytes(true);\n      }\n      return new HDKey(opt);\n    } catch (err) {\n      return this.deriveChild(index + 1);\n    }\n  }\n  sign(hash) {\n    if (!this.privateKey) {\n      throw new Error('No privateKey set!');\n    }\n    (0, _assert_1.bytes)(hash, 32);\n    return secp.signSync(hash, this.privKey, {\n      canonical: true,\n      der: false\n    });\n  }\n  verify(hash, signature) {\n    (0, _assert_1.bytes)(hash, 32);\n    (0, _assert_1.bytes)(signature, 64);\n    if (!this.publicKey) {\n      throw new Error('No publicKey set!');\n    }\n    let sig;\n    try {\n      sig = secp.Signature.fromCompact(signature);\n    } catch (error) {\n      return false;\n    }\n    return secp.verify(sig, hash, this.publicKey);\n  }\n  wipePrivateData() {\n    this.privKey = undefined;\n    if (this.privKeyBytes) {\n      this.privKeyBytes.fill(0);\n      this.privKeyBytes = undefined;\n    }\n    return this;\n  }\n  toJSON() {\n    return {\n      xpriv: this.privateExtendedKey,\n      xpub: this.publicExtendedKey\n    };\n  }\n  serialize(version, key) {\n    if (!this.chainCode) {\n      throw new Error('No chainCode set');\n    }\n    (0, _assert_1.bytes)(key, 33);\n    return (0, utils_1.concatBytes)(toU32(version), new Uint8Array([this.depth]), toU32(this.parentFingerprint), toU32(this.index), this.chainCode, key);\n  }\n}\nexports.HDKey = HDKey;","map":{"version":3,"names":["hmac_1","require","ripemd160_1","sha256_1","sha512_1","_assert_1","utils_1","secp","base_1","utils","hmacSha256Sync","key","msgs","hmac","sha256","concatBytes","base58check","bytesToNumber","bytes","BigInt","bytesToHex","numberToBytes","num","hexToBytes","toString","padStart","MASTER_SECRET","utf8ToBytes","BITCOIN_VERSIONS","private","public","exports","HARDENED_OFFSET","hash160","data","ripemd160","fromU32","createView","getUint32","toU32","n","Number","isSafeInteger","Error","buf","Uint8Array","setUint32","HDKey","constructor","opt","depth","index","chainCode","parentFingerprint","versions","publicKey","privateKey","isValidPrivateKey","privKey","privKeyBytes","pubKey","getPublicKey","Point","fromHex","toRawBytes","pubHash","fingerprint","identifier","pubKeyHash","privateExtendedKey","priv","encode","serialize","publicExtendedKey","fromMasterSeed","seed","length","I","sha512","slice","fromExtendedKey","base58key","keyBuffer","decode","keyView","version","isPriv","fromJSON","json","xpriv","derive","path","test","parts","replace","split","child","c","m","exec","idx","deriveChild","childTweak","added","mod","CURVE","add","fromPrivateKey","equals","ZERO","err","sign","hash","signSync","canonical","der","verify","signature","sig","Signature","fromCompact","error","wipePrivateData","undefined","fill","toJSON","xpub"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@scure\\bip32\\index.ts"],"sourcesContent":["/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { bytes as assertBytes } from '@noble/hashes/_assert';\nimport { bytesToHex, concatBytes, createView, hexToBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport * as secp from '@noble/secp256k1';\nimport { base58check as base58checker } from '@scure/base';\n\n// Enable sync API for noble-secp256k1\nsecp.utils.hmacSha256Sync = (key, ...msgs) => hmac(sha256, key, secp.utils.concatBytes(...msgs));\nconst base58check = base58checker(sha256);\n\nfunction bytesToNumber(bytes: Uint8Array): bigint {\n  return BigInt(`0x${bytesToHex(bytes)}`);\n}\n\nfunction numberToBytes(num: bigint): Uint8Array {\n  return hexToBytes(num.toString(16).padStart(64, '0'));\n}\n\nconst MASTER_SECRET = utf8ToBytes('Bitcoin seed');\n// Bitcoin hardcoded by default\nconst BITCOIN_VERSIONS: Versions = { private: 0x0488ade4, public: 0x0488b21e };\nexport const HARDENED_OFFSET: number = 0x80000000;\n\nexport interface Versions {\n  private: number;\n  public: number;\n}\n\nconst hash160 = (data: Uint8Array) => ripemd160(sha256(data));\nconst fromU32 = (data: Uint8Array) => createView(data).getUint32(0, false);\nconst toU32 = (n: number) => {\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n    throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n  }\n  const buf = new Uint8Array(4);\n  createView(buf).setUint32(0, n, false);\n  return buf;\n};\n\ninterface HDKeyOpt {\n  versions: Versions;\n  depth?: number;\n  index?: number;\n  parentFingerprint?: number;\n  chainCode: Uint8Array;\n  publicKey?: Uint8Array;\n  privateKey?: Uint8Array | bigint;\n}\n\nexport class HDKey {\n  get fingerprint(): number {\n    if (!this.pubHash) {\n      throw new Error('No publicKey set!');\n    }\n    return fromU32(this.pubHash);\n  }\n  get identifier(): Uint8Array | undefined {\n    return this.pubHash;\n  }\n  get pubKeyHash(): Uint8Array | undefined {\n    return this.pubHash;\n  }\n  get privateKey(): Uint8Array | null {\n    return this.privKeyBytes || null;\n  }\n  get publicKey(): Uint8Array | null {\n    return this.pubKey || null;\n  }\n  get privateExtendedKey(): string {\n    const priv = this.privateKey;\n    if (!priv) {\n      throw new Error('No private key');\n    }\n    return base58check.encode(\n      this.serialize(this.versions.private, concatBytes(new Uint8Array([0]), priv))\n    );\n  }\n  get publicExtendedKey(): string {\n    if (!this.pubKey) {\n      throw new Error('No public key');\n    }\n    return base58check.encode(this.serialize(this.versions.public, this.pubKey));\n  }\n\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions = BITCOIN_VERSIONS): HDKey {\n    assertBytes(seed);\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\n      throw new Error(\n        `HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`\n      );\n    }\n    const I = hmac(sha512, MASTER_SECRET, seed);\n    return new HDKey({\n      versions,\n      chainCode: I.slice(32),\n      privateKey: I.slice(0, 32),\n    });\n  }\n\n  public static fromExtendedKey(base58key: string, versions: Versions = BITCOIN_VERSIONS): HDKey {\n    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    const keyBuffer: Uint8Array = base58check.decode(base58key);\n    const keyView = createView(keyBuffer);\n    const version = keyView.getUint32(0, false);\n    const opt = {\n      versions,\n      depth: keyBuffer[4],\n      parentFingerprint: keyView.getUint32(5, false),\n      index: keyView.getUint32(9, false),\n      chainCode: keyBuffer.slice(13, 45),\n    };\n    const key = keyBuffer.slice(45);\n    const isPriv = key[0] === 0;\n    if (version !== versions[isPriv ? 'private' : 'public']) {\n      throw new Error('Version mismatch');\n    }\n    if (isPriv) {\n      return new HDKey({ ...opt, privateKey: key.slice(1) });\n    } else {\n      return new HDKey({ ...opt, publicKey: key });\n    }\n  }\n\n  public static fromJSON(json: { xpriv: string }): HDKey {\n    return HDKey.fromExtendedKey(json.xpriv);\n  }\n  public readonly versions: Versions;\n  public readonly depth: number = 0;\n  public readonly index: number = 0;\n  public readonly chainCode: Uint8Array | null = null;\n  public readonly parentFingerprint: number = 0;\n  private privKey?: bigint;\n  private privKeyBytes?: Uint8Array;\n  private pubKey?: Uint8Array;\n  private pubHash: Uint8Array | undefined;\n\n  constructor(opt: HDKeyOpt) {\n    if (!opt || typeof opt !== 'object') {\n      throw new Error('HDKey.constructor must not be called directly');\n    }\n    this.versions = opt.versions || BITCOIN_VERSIONS;\n    this.depth = opt.depth || 0;\n    this.chainCode = opt.chainCode;\n    this.index = opt.index || 0;\n    this.parentFingerprint = opt.parentFingerprint || 0;\n    if (!this.depth) {\n      if (this.parentFingerprint || this.index) {\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n      }\n    }\n    if (opt.publicKey && opt.privateKey) {\n      throw new Error('HDKey: publicKey and privateKey at same time.');\n    }\n    if (opt.privateKey) {\n      if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\n        throw new Error('Invalid private key');\n      }\n      this.privKey =\n        typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n      this.privKeyBytes = numberToBytes(this.privKey);\n      this.pubKey = secp.getPublicKey(opt.privateKey, true);\n    } else if (opt.publicKey) {\n      this.pubKey = secp.Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point\n    } else {\n      throw new Error('HDKey: no public or private key provided');\n    }\n    this.pubHash = hash160(this.pubKey);\n  }\n\n  public derive(path: string): HDKey {\n    if (!/^[mM]'?/.test(path)) {\n      throw new Error('Path must start with \"m\" or \"M\"');\n    }\n    if (/^[mM]'?$/.test(path)) {\n      return this;\n    }\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\n    // tslint:disable-next-line\n    let child: HDKey = this;\n    for (const c of parts) {\n      const m = /^(\\d+)('?)$/.exec(c);\n      if (!m || m.length !== 3) {\n        throw new Error(`Invalid child index: ${c}`);\n      }\n      let idx = +m[1];\n      if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) {\n        throw new Error('Invalid index');\n      }\n      // hardened key\n      if (m[2] === \"'\") {\n        idx += HARDENED_OFFSET;\n      }\n      child = child.deriveChild(idx);\n    }\n    return child;\n  }\n\n  public deriveChild(index: number): HDKey {\n    if (!this.pubKey || !this.chainCode) {\n      throw new Error('No publicKey or chainCode set');\n    }\n    let data = toU32(index);\n    if (index >= HARDENED_OFFSET) {\n      // Hardened\n      const priv = this.privateKey;\n      if (!priv) {\n        throw new Error('Could not derive hardened child key');\n      }\n      // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n      data = concatBytes(new Uint8Array([0]), priv, data);\n    } else {\n      // Normal child: serP(point(kpar)) || ser32(index)\n      data = concatBytes(this.pubKey, data);\n    }\n    const I = hmac(sha512, this.chainCode, data);\n    const childTweak = bytesToNumber(I.slice(0, 32));\n    const chainCode = I.slice(32);\n    if (!secp.utils.isValidPrivateKey(childTweak)) {\n      throw new Error('Tweak bigger than curve order');\n    }\n    const opt: HDKeyOpt = {\n      versions: this.versions,\n      chainCode,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n      index,\n    };\n    try {\n      // Private parent key -> private child key\n      if (this.privateKey) {\n        const added = secp.utils.mod(this.privKey! + childTweak, secp.CURVE.n);\n        if (!secp.utils.isValidPrivateKey(added)) {\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\n        }\n        opt.privateKey = added;\n      } else {\n        const added = secp.Point.fromHex(this.pubKey).add(secp.Point.fromPrivateKey(childTweak));\n        // Cryptographically impossible: hmac-sha512 preimage would need to be found\n        if (added.equals(secp.Point.ZERO)) {\n          throw new Error('The tweak was equal to negative P, which made the result key invalid');\n        }\n        opt.publicKey = added.toRawBytes(true);\n      }\n      return new HDKey(opt);\n    } catch (err) {\n      return this.deriveChild(index + 1);\n    }\n  }\n\n  public sign(hash: Uint8Array): Uint8Array {\n    if (!this.privateKey) {\n      throw new Error('No privateKey set!');\n    }\n    assertBytes(hash, 32);\n    return secp.signSync(hash, this.privKey!, {\n      canonical: true,\n      der: false,\n    });\n  }\n\n  public verify(hash: Uint8Array, signature: Uint8Array): boolean {\n    assertBytes(hash, 32);\n    assertBytes(signature, 64);\n    if (!this.publicKey) {\n      throw new Error('No publicKey set!');\n    }\n    let sig;\n    try {\n      sig = secp.Signature.fromCompact(signature);\n    } catch (error) {\n      return false;\n    }\n    return secp.verify(sig, hash, this.publicKey);\n  }\n\n  public wipePrivateData(): this {\n    this.privKey = undefined;\n    if (this.privKeyBytes) {\n      this.privKeyBytes.fill(0);\n      this.privKeyBytes = undefined;\n    }\n    return this;\n  }\n  public toJSON(): { xpriv: string; xpub: string } {\n    return {\n      xpriv: this.privateExtendedKey,\n      xpub: this.publicExtendedKey,\n    };\n  }\n\n  private serialize(version: number, key: Uint8Array) {\n    if (!this.chainCode) {\n      throw new Error('No chainCode set');\n    }\n    assertBytes(key, 33);\n    // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    return concatBytes(\n      toU32(version),\n      new Uint8Array([this.depth]),\n      toU32(this.parentFingerprint),\n      toU32(this.index),\n      this.chainCode,\n      key\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}