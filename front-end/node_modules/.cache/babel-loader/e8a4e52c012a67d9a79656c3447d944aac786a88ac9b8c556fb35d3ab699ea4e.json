{"ast":null,"code":"'use strict';\n\nconst {\n  Transform\n} = require('stream');\nconst {\n  Console\n} = require('console');\n\n/**\n * Gets the output of `console.table(…)` as a string.\n */\nmodule.exports = class PendingInterceptorsFormatter {\n  constructor({\n    disableColors\n  } = {}) {\n    this.transform = new Transform({\n      transform(chunk, _enc, cb) {\n        cb(null, chunk);\n      }\n    });\n    this.logger = new Console({\n      stdout: this.transform,\n      inspectOptions: {\n        colors: !disableColors && !process.env.CI\n      }\n    });\n  }\n  format(pendingInterceptors) {\n    const withPrettyHeaders = pendingInterceptors.map(({\n      method,\n      path,\n      data: {\n        statusCode\n      },\n      persist,\n      times,\n      timesInvoked,\n      origin\n    }) => ({\n      Method: method,\n      Origin: origin,\n      Path: path,\n      'Status code': statusCode,\n      Persistent: persist ? '✅' : '❌',\n      Invocations: timesInvoked,\n      Remaining: persist ? Infinity : times - timesInvoked\n    }));\n    this.logger.table(withPrettyHeaders);\n    return this.transform.read().toString();\n  }\n};","map":{"version":3,"names":["Transform","require","Console","module","exports","PendingInterceptorsFormatter","constructor","disableColors","transform","chunk","_enc","cb","logger","stdout","inspectOptions","colors","process","env","CI","format","pendingInterceptors","withPrettyHeaders","map","method","path","data","statusCode","persist","times","timesInvoked","origin","Method","Origin","Path","Persistent","Invocations","Remaining","Infinity","table","read","toString"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/undici/lib/mock/pending-interceptors-formatter.js"],"sourcesContent":["'use strict'\n\nconst { Transform } = require('stream')\nconst { Console } = require('console')\n\n/**\n * Gets the output of `console.table(…)` as a string.\n */\nmodule.exports = class PendingInterceptorsFormatter {\n  constructor ({ disableColors } = {}) {\n    this.transform = new Transform({\n      transform (chunk, _enc, cb) {\n        cb(null, chunk)\n      }\n    })\n\n    this.logger = new Console({\n      stdout: this.transform,\n      inspectOptions: {\n        colors: !disableColors && !process.env.CI\n      }\n    })\n  }\n\n  format (pendingInterceptors) {\n    const withPrettyHeaders = pendingInterceptors.map(\n      ({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({\n        Method: method,\n        Origin: origin,\n        Path: path,\n        'Status code': statusCode,\n        Persistent: persist ? '✅' : '❌',\n        Invocations: timesInvoked,\n        Remaining: persist ? Infinity : times - timesInvoked\n      }))\n\n    this.logger.table(withPrettyHeaders)\n    return this.transform.read().toString()\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACvC,MAAM;EAAEC;AAAQ,CAAC,GAAGD,OAAO,CAAC,SAAS,CAAC;;AAEtC;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,MAAMC,4BAA4B,CAAC;EAClDC,WAAWA,CAAE;IAAEC;EAAc,CAAC,GAAG,CAAC,CAAC,EAAE;IACnC,IAAI,CAACC,SAAS,GAAG,IAAIR,SAAS,CAAC;MAC7BQ,SAASA,CAAEC,KAAK,EAAEC,IAAI,EAAEC,EAAE,EAAE;QAC1BA,EAAE,CAAC,IAAI,EAAEF,KAAK,CAAC;MACjB;IACF,CAAC,CAAC;IAEF,IAAI,CAACG,MAAM,GAAG,IAAIV,OAAO,CAAC;MACxBW,MAAM,EAAE,IAAI,CAACL,SAAS;MACtBM,cAAc,EAAE;QACdC,MAAM,EAAE,CAACR,aAAa,IAAI,CAACS,OAAO,CAACC,GAAG,CAACC;MACzC;IACF,CAAC,CAAC;EACJ;EAEAC,MAAMA,CAAEC,mBAAmB,EAAE;IAC3B,MAAMC,iBAAiB,GAAGD,mBAAmB,CAACE,GAAG,CAC/C,CAAC;MAAEC,MAAM;MAAEC,IAAI;MAAEC,IAAI,EAAE;QAAEC;MAAW,CAAC;MAAEC,OAAO;MAAEC,KAAK;MAAEC,YAAY;MAAEC;IAAO,CAAC,MAAM;MACjFC,MAAM,EAAER,MAAM;MACdS,MAAM,EAAEF,MAAM;MACdG,IAAI,EAAET,IAAI;MACV,aAAa,EAAEE,UAAU;MACzBQ,UAAU,EAAEP,OAAO,GAAG,GAAG,GAAG,GAAG;MAC/BQ,WAAW,EAAEN,YAAY;MACzBO,SAAS,EAAET,OAAO,GAAGU,QAAQ,GAAGT,KAAK,GAAGC;IAC1C,CAAC,CAAC,CAAC;IAEL,IAAI,CAACjB,MAAM,CAAC0B,KAAK,CAACjB,iBAAiB,CAAC;IACpC,OAAO,IAAI,CAACb,SAAS,CAAC+B,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EACzC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}