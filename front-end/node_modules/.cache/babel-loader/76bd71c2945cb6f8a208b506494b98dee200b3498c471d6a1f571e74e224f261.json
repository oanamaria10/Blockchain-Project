{"ast":null,"code":"import { connect } from '@ucanto/client';\nimport { CAR, HTTP } from '@ucanto/transport';\nimport { CBOR } from '@ucanto/core';\nimport * as Dealer from '@web3-storage/capabilities/filecoin/dealer';\nimport { services } from './service.js';\n/**\n * @typedef {import('./types.js').DealerService} DealerService\n * @typedef {import('@ucanto/interface').ConnectionView<DealerService>} ConnectionView\n */\n/** @type {ConnectionView} */\nexport const connection = connect({\n  id: services.DEALER.principal,\n  codec: CAR.outbound,\n  channel: HTTP.open({\n    url: services.DEALER.url,\n    method: 'POST'\n  })\n});\n/**\n * The `aggregate/offer` task can be executed to request an aggregate be added\n * to a deal with a Storage Provider. It issues a signed receipt of the\n * execution result. It is _also_ an effect linked from successful execution of\n * a `piece/accept` task.\n *\n * A receipt for successful execution will contain an effect, linking to an\n * `aggregate/accept` task that will complete asynchronously.\n *\n * Otherwise the task is failed and the receipt will contain details of the\n * reason behind the failure.\n *\n * @see https://github.com/storacha/specs/blob/main/w3-filecoin.md#aggregateoffer\n *\n * @param {import('./types.js').InvocationConfig} conf - Configuration\n * @param {import('@web3-storage/data-segment').PieceLink} aggregate\n * @param {import('@web3-storage/data-segment').PieceLink[]} pieces\n * @param {import('./types.js').RequestOptions<DealerService>} [options]\n */\nexport async function aggregateOffer({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, aggregate, pieces, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const block = await CBOR.write(pieces);\n  const invocation = Dealer.aggregateOffer.invoke({\n    issuer,\n    /* c8 ignore next */\n    audience: audience ?? services.AGGREGATOR.principal,\n    with: resource,\n    nb: {\n      aggregate,\n      pieces: block.cid\n    },\n    proofs,\n    expiration: Infinity\n  });\n  invocation.attach(block);\n  return await invocation.execute(conn);\n}\n/**\n * The `aggregate/accept` task is an _effect_ linked from successful execution\n * of a `aggregate/offer` task, it is executed to issue a receipt for the\n * success or failure of the task.\n *\n * A receipt for successful execution indicates that an aggregate has been\n * accepted for inclusion in a Filecoin deal. In this case the receipt will\n * contain proofs that the piece was included in an aggregate and deal.\n *\n * Otherwise the task is failed and the receipt will contain details of the\n * reason behind the failure, as well as multiple effects, linking to\n * `piece/offer` tasks that will retry _valid_ pieces and complete\n * asynchronously.\n *\n * @see https://github.com/storacha/specs/blob/main/w3-filecoin.md#aggregateaccept\n *\n * @param {import('./types.js').InvocationConfig} conf - Configuration\n * @param {import('@web3-storage/data-segment').PieceLink} aggregate\n * @param {import('@ucanto/interface').Link} pieces\n * @param {import('./types.js').RequestOptions<DealerService>} [options]\n */\nexport async function aggregateAccept({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, aggregate, pieces, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const invocation = Dealer.aggregateAccept.invoke({\n    issuer,\n    /* c8 ignore next */\n    audience: audience ?? services.AGGREGATOR.principal,\n    with: resource,\n    nb: {\n      aggregate,\n      pieces\n    },\n    proofs,\n    expiration: Infinity\n  });\n  return await invocation.execute(conn);\n}","map":{"version":3,"names":["connect","CAR","HTTP","CBOR","Dealer","services","connection","id","DEALER","principal","codec","outbound","channel","open","url","method","aggregateOffer","issuer","with","resource","proofs","audience","aggregate","pieces","options","conn","block","write","invocation","invoke","AGGREGATOR","nb","cid","expiration","Infinity","attach","execute","aggregateAccept"],"sources":["../../src/dealer.js"],"sourcesContent":[null],"mappings":"AAAA,SAASA,OAAO,QAAQ,gBAAgB;AACxC,SAASC,GAAG,EAAEC,IAAI,QAAQ,mBAAmB;AAC7C,SAASC,IAAI,QAAQ,cAAc;AACnC,OAAO,KAAKC,MAAM,MAAM,4CAA4C;AACpE,SAASC,QAAQ,QAAQ,cAAc;AAEvC;;;;AAKA;AACA,OAAO,MAAMC,UAAU,GAAGN,OAAO,CAAC;EAChCO,EAAE,EAAEF,QAAQ,CAACG,MAAM,CAACC,SAAS;EAC7BC,KAAK,EAAET,GAAG,CAACU,QAAQ;EACnBC,OAAO,EAAEV,IAAI,CAACW,IAAI,CAAC;IACjBC,GAAG,EAAET,QAAQ,CAACG,MAAM,CAACM,GAAG;IACxBC,MAAM,EAAE;GACT;CACF,CAAC;AAEF;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,eAAeC,cAAcA,CAClC;EAAEC,MAAM;EAAEC,IAAI,EAAEC,QAAQ;EAAEC,MAAM;EAAEC;AAAQ,CAAE,EAC5CC,SAAS,EACTC,MAAM,EACNC,OAAO,GAAG,EAAE;EAEZ;EACA,MAAMC,IAAI,GAAGD,OAAO,CAAClB,UAAU,IAAIA,UAAU;EAE7C,MAAMoB,KAAK,GAAG,MAAMvB,IAAI,CAACwB,KAAK,CAACJ,MAAM,CAAC;EACtC,MAAMK,UAAU,GAAGxB,MAAM,CAACY,cAAc,CAACa,MAAM,CAAC;IAC9CZ,MAAM;IACN;IACAI,QAAQ,EAAEA,QAAQ,IAAIhB,QAAQ,CAACyB,UAAU,CAACrB,SAAS;IACnDS,IAAI,EAAEC,QAAQ;IACdY,EAAE,EAAE;MACFT,SAAS;MACTC,MAAM,EAAEG,KAAK,CAACM;KACf;IACDZ,MAAM;IACNa,UAAU,EAAEC;GACb,CAAC;EACFN,UAAU,CAACO,MAAM,CAACT,KAAK,CAAC;EAExB,OAAO,MAAME,UAAU,CAACQ,OAAO,CAACX,IAAI,CAAC;AACvC;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,eAAeY,eAAeA,CACnC;EAAEpB,MAAM;EAAEC,IAAI,EAAEC,QAAQ;EAAEC,MAAM;EAAEC;AAAQ,CAAE,EAC5CC,SAAS,EACTC,MAAM,EACNC,OAAO,GAAG,EAAE;EAEZ;EACA,MAAMC,IAAI,GAAGD,OAAO,CAAClB,UAAU,IAAIA,UAAU;EAC7C,MAAMsB,UAAU,GAAGxB,MAAM,CAACiC,eAAe,CAACR,MAAM,CAAC;IAC/CZ,MAAM;IACN;IACAI,QAAQ,EAAEA,QAAQ,IAAIhB,QAAQ,CAACyB,UAAU,CAACrB,SAAS;IACnDS,IAAI,EAAEC,QAAQ;IACdY,EAAE,EAAE;MACFT,SAAS;MACTC;KACD;IACDH,MAAM;IACNa,UAAU,EAAEC;GACb,CAAC;EAEF,OAAO,MAAMN,UAAU,CAACQ,OAAO,CAACX,IAAI,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}