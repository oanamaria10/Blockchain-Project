{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\nconst config_env_1 = require(\"../internal/core/config/config-env\");\nconst errors_1 = require(\"../internal/core/errors\");\nconst errors_list_1 = require(\"../internal/core/errors-list\");\nconst scripts_runner_1 = require(\"../internal/util/scripts-runner\");\nconst task_names_1 = require(\"./task-names\");\nconst log = (0, debug_1.default)(\"hardhat:core:tasks:run\");\n(0, config_env_1.task)(task_names_1.TASK_RUN, \"Runs a user-defined script after compiling the project\").addPositionalParam(\"script\", \"A js file to be run within hardhat's environment\").addFlag(\"noCompile\", \"Don't compile before running this task\").setAction(async ({\n  script,\n  noCompile\n}, {\n  run,\n  hardhatArguments\n}) => {\n  if (!(await fs_extra_1.default.pathExists(script))) {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.RUN_FILE_NOT_FOUND, {\n      script\n    });\n  }\n  if (!noCompile) {\n    await run(task_names_1.TASK_COMPILE, {\n      quiet: true\n    });\n  }\n  log(`Running script ${script} in a subprocess so we can wait for it to complete`);\n  try {\n    process.exitCode = await (0, scripts_runner_1.runScriptWithHardhat)(hardhatArguments, script);\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.RUN_SCRIPT_ERROR, {\n        script,\n        error: error.message\n      }, error);\n    }\n    // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n    throw error;\n  }\n});","map":{"version":3,"names":["debug_1","__importDefault","require","fs_extra_1","config_env_1","errors_1","errors_list_1","scripts_runner_1","task_names_1","log","default","task","TASK_RUN","addPositionalParam","addFlag","setAction","script","noCompile","run","hardhatArguments","pathExists","HardhatError","ERRORS","BUILTIN_TASKS","RUN_FILE_NOT_FOUND","TASK_COMPILE","quiet","process","exitCode","runScriptWithHardhat","error","Error","RUN_SCRIPT_ERROR","message"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\builtin-tasks\\run.ts"],"sourcesContent":["import debug from \"debug\";\nimport fsExtra from \"fs-extra\";\n\nimport { task } from \"../internal/core/config/config-env\";\nimport { HardhatError } from \"../internal/core/errors\";\nimport { ERRORS } from \"../internal/core/errors-list\";\nimport { runScriptWithHardhat } from \"../internal/util/scripts-runner\";\n\nimport { TASK_COMPILE, TASK_RUN } from \"./task-names\";\n\nconst log = debug(\"hardhat:core:tasks:run\");\n\ntask(TASK_RUN, \"Runs a user-defined script after compiling the project\")\n  .addPositionalParam(\n    \"script\",\n    \"A js file to be run within hardhat's environment\"\n  )\n  .addFlag(\"noCompile\", \"Don't compile before running this task\")\n  .setAction(\n    async (\n      { script, noCompile }: { script: string; noCompile: boolean },\n      { run, hardhatArguments }\n    ) => {\n      if (!(await fsExtra.pathExists(script))) {\n        throw new HardhatError(ERRORS.BUILTIN_TASKS.RUN_FILE_NOT_FOUND, {\n          script,\n        });\n      }\n\n      if (!noCompile) {\n        await run(TASK_COMPILE, { quiet: true });\n      }\n\n      log(\n        `Running script ${script} in a subprocess so we can wait for it to complete`\n      );\n\n      try {\n        process.exitCode = await runScriptWithHardhat(hardhatArguments, script);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new HardhatError(\n            ERRORS.BUILTIN_TASKS.RUN_SCRIPT_ERROR,\n            {\n              script,\n              error: error.message,\n            },\n            error\n          );\n        }\n\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw error;\n      }\n    }\n  );\n"],"mappings":";;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,UAAA,GAAAF,eAAA,CAAAC,OAAA;AAEA,MAAAE,YAAA,GAAAF,OAAA;AACA,MAAAG,QAAA,GAAAH,OAAA;AACA,MAAAI,aAAA,GAAAJ,OAAA;AACA,MAAAK,gBAAA,GAAAL,OAAA;AAEA,MAAAM,YAAA,GAAAN,OAAA;AAEA,MAAMO,GAAG,GAAG,IAAAT,OAAA,CAAAU,OAAK,EAAC,wBAAwB,CAAC;AAE3C,IAAAN,YAAA,CAAAO,IAAI,EAACH,YAAA,CAAAI,QAAQ,EAAE,wDAAwD,CAAC,CACrEC,kBAAkB,CACjB,QAAQ,EACR,kDAAkD,CACnD,CACAC,OAAO,CAAC,WAAW,EAAE,wCAAwC,CAAC,CAC9DC,SAAS,CACR,OACE;EAAEC,MAAM;EAAEC;AAAS,CAA0C,EAC7D;EAAEC,GAAG;EAAEC;AAAgB,CAAE,KACvB;EACF,IAAI,EAAE,MAAMhB,UAAA,CAAAO,OAAO,CAACU,UAAU,CAACJ,MAAM,CAAC,CAAC,EAAE;IACvC,MAAM,IAAIX,QAAA,CAAAgB,YAAY,CAACf,aAAA,CAAAgB,MAAM,CAACC,aAAa,CAACC,kBAAkB,EAAE;MAC9DR;KACD,CAAC;;EAGJ,IAAI,CAACC,SAAS,EAAE;IACd,MAAMC,GAAG,CAACV,YAAA,CAAAiB,YAAY,EAAE;MAAEC,KAAK,EAAE;IAAI,CAAE,CAAC;;EAG1CjB,GAAG,CACD,kBAAkBO,MAAM,oDAAoD,CAC7E;EAED,IAAI;IACFW,OAAO,CAACC,QAAQ,GAAG,MAAM,IAAArB,gBAAA,CAAAsB,oBAAoB,EAACV,gBAAgB,EAAEH,MAAM,CAAC;GACxE,CAAC,OAAOc,KAAK,EAAE;IACd,IAAIA,KAAK,YAAYC,KAAK,EAAE;MAC1B,MAAM,IAAI1B,QAAA,CAAAgB,YAAY,CACpBf,aAAA,CAAAgB,MAAM,CAACC,aAAa,CAACS,gBAAgB,EACrC;QACEhB,MAAM;QACNc,KAAK,EAAEA,KAAK,CAACG;OACd,EACDH,KAAK,CACN;;IAGH;IACA,MAAMA,KAAK;;AAEf,CAAC,CACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}