{"ast":null,"code":"import { abilitiesAsStrings } from '@web3-storage/capabilities';\nconst setOfAbilities = new Set(abilitiesAsStrings);\n/**\n * Verify and return Abilities.\n *\n * Given a list of strings representing capability names (Abilities),\n * verify that all the strings are valid Abilities and return Abilities[].\n *\n * Abilities[] is still just a list of strings, but this helps us play\n * nice with Typescript.\n *\n * @param {string[]} abilities\n * @returns {import('@web3-storage/capabilities/types').ServiceAbility[]}\n */\nexport function asAbilities(abilities) {\n  for (const ability of abilities) {\n    if (!setOfAbilities.has( /** @type {import('@web3-storage/capabilities/types').ServiceAbility} */ability)) {\n      throw new Error(`${ability} is not a supported capability`);\n    }\n  }\n  return /** @type {import('@web3-storage/capabilities/types').ServiceAbility[]} */abilities;\n}","map":{"version":3,"names":["abilitiesAsStrings","setOfAbilities","Set","asAbilities","abilities","ability","has","Error"],"sources":["../../src/ability.js"],"sourcesContent":[null],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,4BAA4B;AAE/D,MAAMC,cAAc,GAAG,IAAIC,GAAG,CAACF,kBAAkB,CAAC;AAElD;;;;;;;;;;;;AAYA,OAAM,SAAUG,WAAWA,CAACC,SAAS;EACnC,KAAK,MAAMC,OAAO,IAAID,SAAS,EAAE;IAC/B,IACE,CAACH,cAAc,CAACK,GAAG,EACjB,wEACED,OACD,CACF,EACD;MACA,MAAM,IAAIE,KAAK,CAAC,GAAGF,OAAO,gCAAgC,CAAC;;;EAG/D,OAAO,0EACLD,SAAS;AAEb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}