{"ast":null,"code":"import * as Access from '@web3-storage/capabilities/access';\nimport * as API from './types.js';\nimport { Failure, fail, DID } from '@ucanto/core';\nimport { Agent, importAuthorization } from './agent.js';\nimport { bytesToDelegations } from './encoding.js';\n/**\n * Takes array of delegations and propagates them to their respective audiences\n * through a given space (or the current space if none is provided).\n *\n * Returns error result if agent has no current space and no space was provided.\n * Also returns error result if invocation fails.\n *\n * @param {Agent} agent - Agent connected to the w3up service.\n * @param {object} input\n * @param {API.Delegation[]} input.delegations - Delegations to propagate.\n * @param {API.SpaceDID} [input.space] - Space to propagate through.\n * @param {API.Delegation[]} [input.proofs] - Optional set of proofs to be\n * included in the invocation.\n */\nexport const delegate = async (agent, {\n  delegations,\n  proofs = [],\n  space = agent.currentSpace()\n}) => {\n  if (!space) {\n    return fail('Space must be specified');\n  }\n  const entries = Object.values(delegations).map(proof => [proof.cid.toString(), proof.cid]);\n  const {\n    out\n  } = await agent.invokeAndExecute(Access.delegate, {\n    with: space,\n    nb: {\n      delegations: Object.fromEntries(entries)\n    },\n    // must be embedded here because it's referenced by cid in .nb.delegations\n    proofs: [...delegations, ...proofs]\n  });\n  return out;\n};\n/**\n * Requests specified `access` level from specified `account`. It invokes\n * `access/authorize` capability, if invocation succeeds it will return a\n * `PendingAccessRequest` object that can be used to poll for the requested\n * delegation through `access/claim` capability.\n *\n * @param {API.Agent} agent\n * @param {object} input\n * @param {API.AccountDID} input.account - Account from which access is requested.\n * @param {API.ProviderDID} [input.provider] - Provider that will receive the invocation.\n * @param {API.DID} [input.audience] - Principal requesting an access.\n * @param {API.Access} [input.access] - Access been requested.\n * @returns {Promise<API.Result<PendingAccessRequest, API.AccessAuthorizeFailure|API.InvocationError>>}\n */\nexport const request = async (agent, {\n  account,\n  provider = ( /** @type {API.ProviderDID} */agent.connection.id.did()),\n  audience = agent.did(),\n  access = spaceAccess\n}) => {\n  // Request access from the account.\n  const {\n    out: result\n  } = await agent.invokeAndExecute(Access.authorize, {\n    audience: DID.parse(provider),\n    with: audience,\n    nb: {\n      iss: account,\n      // New ucan spec moved to recap style layout for capabilities and new\n      // `access/request` will use similar format as opposed to legacy one,\n      // in the meantime we translate new format to legacy format here.\n      att: [...toCapabilities(access)]\n    }\n  });\n  return result.error ? result : {\n    ok: new PendingAccessRequest({\n      ...result.ok,\n      agent,\n      audience,\n      provider\n    })\n  };\n};\n/**\n * Claims access that has been delegated to the given audience, which by\n * default is the agent's DID.\n *\n * @param {API.Agent} agent\n * @param {object} input\n * @param {API.DID} [input.audience] - Principal requesting an access.\n * @param {API.ProviderDID} [input.provider] - Provider handling the invocation.\n * @returns {Promise<API.Result<GrantedAccess, API.AccessClaimFailure|API.InvocationError>>}\n */\nexport const claim = async (agent, {\n  provider = ( /** @type {API.ProviderDID} */agent.connection.id.did()),\n  audience = agent.did()\n} = {}) => {\n  const {\n    out: result\n  } = await agent.invokeAndExecute(Access.claim, {\n    audience: DID.parse(provider),\n    with: audience\n  });\n  if (result.error) {\n    return result;\n  } else {\n    const delegations = Object.values(result.ok.delegations);\n    const proofs = /** @type {API.Tuple<API.Delegation>} */delegations.flatMap(proof => bytesToDelegations(proof));\n    return {\n      ok: new GrantedAccess({\n        agent,\n        proofs\n      })\n    };\n  }\n};\n/**\n * Represents a pending access request. It can be used to poll for the requested\n * delegation.\n */\nclass PendingAccessRequest {\n  /**\n   * @typedef {object} PendingAccessRequestModel\n   * @property {API.Agent} agent - Agent handling interaction.\n   * @property {API.DID} audience - Principal requesting an access.\n   * @property {API.ProviderDID} provider - Provider handling request.\n   * @property {API.UTCUnixTimestamp} expiration - Seconds in UTC.\n   * @property {API.Link} request - Link to the `access/authorize` invocation.\n   *\n   * @param {PendingAccessRequestModel} model\n   */\n  constructor(model) {\n    this.model = model;\n  }\n  get agent() {\n    return this.model.agent;\n  }\n  get audience() {\n    return this.model.audience;\n  }\n  get expiration() {\n    return new Date(this.model.expiration * 1000);\n  }\n  get request() {\n    return this.model.request;\n  }\n  get provider() {\n    return this.model.provider;\n  }\n  /**\n   * Low level method and most likely you want to use `.claim` instead. This method will poll\n   * fetch delegations **just once** and will return proofs matching to this request. Please note\n   * that there may not be any matches in which case result will be `{ ok: [] }`.\n   *\n   * If you do want to continuously poll until request is approved or expired, you should use\n   * `.claim` method instead.\n   *\n   * @returns {Promise<API.Result<API.Delegation[], API.InvocationError|API.AccessClaimFailure|RequestExpired>>}\n   */\n  async poll() {\n    const {\n      agent,\n      audience,\n      provider,\n      expiration\n    } = this.model;\n    const timeout = expiration * 1000 - Date.now();\n    if (timeout <= 0) {\n      return {\n        error: new RequestExpired(this.model)\n      };\n    } else {\n      const result = await claim(agent, {\n        audience,\n        provider\n      });\n      return result.error ? result : {\n        ok: result.ok.proofs.filter(proof => isRequestedAccess(proof, this.model))\n      };\n    }\n  }\n  /**\n   * Continuously polls delegations until this request is approved or expired. Returns\n   * a `GrantedAccess` object (view over the delegations) that can be used in the\n   * invocations or can be saved in the agent (store) using `.save()` method.\n   *\n   * @param {object} options\n   * @param {number} [options.interval]\n   * @param {AbortSignal} [options.signal]\n   * @returns {Promise<API.Result<GrantedAccess, Error>>}\n   */\n  async claim({\n    signal,\n    interval = 250\n  } = {}) {\n    while (signal?.aborted !== true) {\n      const result = await this.poll();\n      // If polling failed, return the error.\n      if (result.error) {\n        return result;\n      }\n      // If we got some matching proofs, return them.\n      else if (result.ok.length > 0) {\n        return {\n          ok: new GrantedAccess({\n            agent: this.agent,\n            proofs: ( /** @type {API.Tuple<API.Delegation>} */result.ok)\n          })\n        };\n      }\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    return {\n      error: Object.assign(new Error('Aborted'), {\n        reason: signal.reason\n      })\n    };\n  }\n}\n/**\n * Error returned when pending access request expires.\n */\nclass RequestExpired extends Failure {\n  /**\n   * @param {PendingAccessRequestModel} model\n   */\n  constructor(model) {\n    super();\n    this.model = model;\n  }\n  get name() {\n    return 'RequestExpired';\n  }\n  get request() {\n    return this.model.request;\n  }\n  get expiredAt() {\n    return new Date(this.model.expiration * 1000);\n  }\n  describe() {\n    return `Access request expired at ${this.expiredAt} for ${this.request} request.`;\n  }\n}\n/**\n * View over the UCAN Delegations that grant access to a specific principal.\n */\nexport class GrantedAccess {\n  /**\n   * @typedef {object} GrantedAccessModel\n   * @property {API.Agent} agent - Agent that processed the request.\n   * @property {API.Tuple<API.Delegation>} proofs - Delegations that grant access.\n   *\n   * @param {GrantedAccessModel} model\n   */\n  constructor(model) {\n    this.model = model;\n  }\n  get proofs() {\n    return this.model.proofs;\n  }\n  /**\n   * Saves access into the agents proofs store so that it can be retained\n   * between sessions.\n   *\n   * @param {object} input\n   * @param {API.Agent} [input.agent]\n   */\n  save({\n    agent = this.model.agent\n  } = {}) {\n    return importAuthorization(agent, this);\n  }\n}\n/**\n * Checks if the given delegation is caused by the passed `request` for access.\n *\n * @param {API.Delegation} delegation\n * @param {object} selector\n * @param {API.Link} selector.request\n * @returns\n */\nconst isRequestedAccess = (delegation, {\n  request\n}) =>\n// `access/confirm` handler adds facts to the delegation issued by the account\n// so that principal requesting access can identify correct delegation when\n// access is granted.\ndelegation.facts.some(fact => `${fact['access/request']}` === `${request}`);\n/**\n * Maps access object that uses UCAN 0.10 capabilities format as opposed\n * to legacy UCAN 0.9 format used by w3up  which predates new format.\n *\n * @param {API.Access} access\n * @returns {{ can: API.Ability }[]}\n */\nexport const toCapabilities = access => {\n  const abilities = [];\n  const entries = /** @type {[API.Ability, API.Unit][]} */Object.entries(access);\n  for (const [can, details] of entries) {\n    if (details) {\n      abilities.push({\n        can\n      });\n    }\n  }\n  return abilities;\n};\n/**\n * Set of capabilities required by the agent to manage a space.\n */\nexport const spaceAccess = {\n  'space/*': {},\n  'blob/*': {},\n  'index/*': {},\n  'store/*': {},\n  'upload/*': {},\n  'access/*': {},\n  'filecoin/*': {},\n  'usage/*': {}\n};\n/**\n * Set of capabilities required for by the agent to manage an account.\n */\nexport const accountAccess = {\n  '*': {}\n};","map":{"version":3,"names":["Access","API","Failure","fail","DID","Agent","importAuthorization","bytesToDelegations","delegate","agent","delegations","proofs","space","currentSpace","entries","Object","values","map","proof","cid","toString","out","invokeAndExecute","with","nb","fromEntries","request","account","provider","connection","id","did","audience","access","spaceAccess","result","authorize","parse","iss","att","toCapabilities","error","ok","PendingAccessRequest","claim","flatMap","GrantedAccess","constructor","model","expiration","Date","poll","timeout","now","RequestExpired","filter","isRequestedAccess","signal","interval","aborted","length","Promise","resolve","setTimeout","assign","Error","reason","name","expiredAt","describe","save","delegation","facts","some","fact","abilities","can","details","push","accountAccess"],"sources":["../../src/access.js"],"sourcesContent":[null],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,mCAAmC;AAC3D,OAAO,KAAKC,GAAG,MAAM,YAAY;AACjC,SAASC,OAAO,EAAEC,IAAI,EAAEC,GAAG,QAAQ,cAAc;AACjD,SAASC,KAAK,EAAEC,mBAAmB,QAAQ,YAAY;AACvD,SAASC,kBAAkB,QAAQ,eAAe;AAElD;;;;;;;;;;;;;;AAcA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CACtBC,KAAK,EACL;EAAEC,WAAW;EAAEC,MAAM,GAAG,EAAE;EAAEC,KAAK,GAAGH,KAAK,CAACI,YAAY;AAAE,CAAE,KACxD;EACF,IAAI,CAACD,KAAK,EAAE;IACV,OAAOT,IAAI,CAAC,yBAAyB,CAAC;;EAGxC,MAAMW,OAAO,GAAGC,MAAM,CAACC,MAAM,CAACN,WAAW,CAAC,CAACO,GAAG,CAAEC,KAAK,IAAK,CACxDA,KAAK,CAACC,GAAG,CAACC,QAAQ,EAAE,EACpBF,KAAK,CAACC,GAAG,CACV,CAAC;EAEF,MAAM;IAAEE;EAAG,CAAE,GAAG,MAAMZ,KAAK,CAACa,gBAAgB,CAACtB,MAAM,CAACQ,QAAQ,EAAE;IAC5De,IAAI,EAAEX,KAAK;IACXY,EAAE,EAAE;MACFd,WAAW,EAAEK,MAAM,CAACU,WAAW,CAACX,OAAO;KACxC;IACD;IACAH,MAAM,EAAE,CAAC,GAAGD,WAAW,EAAE,GAAGC,MAAM;GACnC,CAAC;EAEF,OAAOU,GAAG;AACZ,CAAC;AAED;;;;;;;;;;;;;;AAcA,OAAO,MAAMK,OAAO,GAAG,MAAAA,CACrBjB,KAAK,EACL;EACEkB,OAAO;EACPC,QAAQ,KAAG,8BAAgCnB,KAAK,CAACoB,UAAU,CAACC,EAAE,CAACC,GAAG,EAAE,CAAC;EAC3DC,QAAQ,GAAGvB,KAAK,CAACsB,GAAG,EAAE;EAChCE,MAAM,GAAGC;AAAW,CACrB,KACC;EACF;EACA,MAAM;IAAEb,GAAG,EAAEc;EAAM,CAAE,GAAG,MAAM1B,KAAK,CAACa,gBAAgB,CAACtB,MAAM,CAACoC,SAAS,EAAE;IACrEJ,QAAQ,EAAE5B,GAAG,CAACiC,KAAK,CAACT,QAAQ,CAAC;IAC7BL,IAAI,EAAES,QAAQ;IACdR,EAAE,EAAE;MACFc,GAAG,EAAEX,OAAO;MACZ;MACA;MACA;MACAY,GAAG,EAAE,CAAC,GAAGC,cAAc,CAACP,MAAM,CAAC;;GAElC,CAAC;EAEF,OAAOE,MAAM,CAACM,KAAK,GACfN,MAAM,GACN;IACEO,EAAE,EAAE,IAAIC,oBAAoB,CAAC;MAC3B,GAAGR,MAAM,CAACO,EAAE;MACZjC,KAAK;MACLuB,QAAQ;MACRJ;KACD;GACF;AACP,CAAC;AAED;;;;;;;;;;AAUA,OAAO,MAAMgB,KAAK,GAAG,MAAAA,CACnBnC,KAAK,EACL;EACEmB,QAAQ,KAAG,8BAAgCnB,KAAK,CAACoB,UAAU,CAACC,EAAE,CAACC,GAAG,EAAE,CAAC;EACrEC,QAAQ,GAAGvB,KAAK,CAACsB,GAAG;AAAE,CACvB,GAAG,EAAE,KACJ;EACF,MAAM;IAAEV,GAAG,EAAEc;EAAM,CAAE,GAAG,MAAM1B,KAAK,CAACa,gBAAgB,CAACtB,MAAM,CAAC4C,KAAK,EAAE;IACjEZ,QAAQ,EAAE5B,GAAG,CAACiC,KAAK,CAACT,QAAQ,CAAC;IAC7BL,IAAI,EAAES;GACP,CAAC;EAEF,IAAIG,MAAM,CAACM,KAAK,EAAE;IAChB,OAAON,MAAM;GACd,MAAM;IACL,MAAMzB,WAAW,GAAGK,MAAM,CAACC,MAAM,CAACmB,MAAM,CAACO,EAAE,CAAChC,WAAW,CAAC;IAExD,MAAMC,MAAM,GAAG,wCACbD,WAAW,CAACmC,OAAO,CAAE3B,KAAK,IAAKX,kBAAkB,CAACW,KAAK,CAAC,CACzD;IAED,OAAO;MAAEwB,EAAE,EAAE,IAAII,aAAa,CAAC;QAAErC,KAAK;QAAEE;MAAM,CAAE;IAAC,CAAE;;AAEvD,CAAC;AAED;;;;AAIA,MAAMgC,oBAAoB;EACxB;;;;;;;;;;EAUAI,YAAYC,KAAK;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEA,IAAIvC,KAAKA,CAAA;IACP,OAAO,IAAI,CAACuC,KAAK,CAACvC,KAAK;EACzB;EACA,IAAIuB,QAAQA,CAAA;IACV,OAAO,IAAI,CAACgB,KAAK,CAAChB,QAAQ;EAC5B;EACA,IAAIiB,UAAUA,CAAA;IACZ,OAAO,IAAIC,IAAI,CAAC,IAAI,CAACF,KAAK,CAACC,UAAU,GAAG,IAAI,CAAC;EAC/C;EAEA,IAAIvB,OAAOA,CAAA;IACT,OAAO,IAAI,CAACsB,KAAK,CAACtB,OAAO;EAC3B;EAEA,IAAIE,QAAQA,CAAA;IACV,OAAO,IAAI,CAACoB,KAAK,CAACpB,QAAQ;EAC5B;EAEA;;;;;;;;;;EAUA,MAAMuB,IAAIA,CAAA;IACR,MAAM;MAAE1C,KAAK;MAAEuB,QAAQ;MAAEJ,QAAQ;MAAEqB;IAAU,CAAE,GAAG,IAAI,CAACD,KAAK;IAC5D,MAAMI,OAAO,GAAGH,UAAU,GAAG,IAAI,GAAGC,IAAI,CAACG,GAAG,EAAE;IAC9C,IAAID,OAAO,IAAI,CAAC,EAAE;MAChB,OAAO;QAAEX,KAAK,EAAE,IAAIa,cAAc,CAAC,IAAI,CAACN,KAAK;MAAC,CAAE;KACjD,MAAM;MACL,MAAMb,MAAM,GAAG,MAAMS,KAAK,CAACnC,KAAK,EAAE;QAAEuB,QAAQ;QAAEJ;MAAQ,CAAE,CAAC;MACzD,OAAOO,MAAM,CAACM,KAAK,GACfN,MAAM,GACN;QACEO,EAAE,EAAEP,MAAM,CAACO,EAAE,CAAC/B,MAAM,CAAC4C,MAAM,CAAErC,KAAK,IAChCsC,iBAAiB,CAACtC,KAAK,EAAE,IAAI,CAAC8B,KAAK,CAAC;OAEvC;;EAET;EAEA;;;;;;;;;;EAUA,MAAMJ,KAAKA,CAAC;IAAEa,MAAM;IAAEC,QAAQ,GAAG;EAAG,CAAE,GAAG,EAAE;IACzC,OAAOD,MAAM,EAAEE,OAAO,KAAK,IAAI,EAAE;MAC/B,MAAMxB,MAAM,GAAG,MAAM,IAAI,CAACgB,IAAI,EAAE;MAChC;MACA,IAAIhB,MAAM,CAACM,KAAK,EAAE;QAChB,OAAON,MAAM;;MAEf;MAAA,KACK,IAAIA,MAAM,CAACO,EAAE,CAACkB,MAAM,GAAG,CAAC,EAAE;QAC7B,OAAO;UACLlB,EAAE,EAAE,IAAII,aAAa,CAAC;YACpBrC,KAAK,EAAE,IAAI,CAACA,KAAK;YACjBE,MAAM,IAAE,wCAA0CwB,MAAM,CAACO,EAAE;WAC5D;SACF;;MAGH,MAAM,IAAImB,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAEJ,QAAQ,CAAC,CAAC;;IAG/D,OAAO;MACLjB,KAAK,EAAE1B,MAAM,CAACiD,MAAM,CAAC,IAAIC,KAAK,CAAC,SAAS,CAAC,EAAE;QAAEC,MAAM,EAAET,MAAM,CAACS;MAAM,CAAE;KACrE;EACH;;AAGF;;;AAGA,MAAMZ,cAAe,SAAQpD,OAAO;EAClC;;;EAGA6C,YAAYC,KAAK;IACf,KAAK,EAAE;IACP,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEA,IAAImB,IAAIA,CAAA;IACN,OAAO,gBAAgB;EACzB;EAEA,IAAIzC,OAAOA,CAAA;IACT,OAAO,IAAI,CAACsB,KAAK,CAACtB,OAAO;EAC3B;EACA,IAAI0C,SAASA,CAAA;IACX,OAAO,IAAIlB,IAAI,CAAC,IAAI,CAACF,KAAK,CAACC,UAAU,GAAG,IAAI,CAAC;EAC/C;EAEAoB,QAAQA,CAAA;IACN,OAAO,6BAA6B,IAAI,CAACD,SAAS,QAAQ,IAAI,CAAC1C,OAAO,WAAW;EACnF;;AAGF;;;AAGA,OAAM,MAAOoB,aAAa;EACxB;;;;;;;EAOAC,YAAYC,KAAK;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EACA,IAAIrC,MAAMA,CAAA;IACR,OAAO,IAAI,CAACqC,KAAK,CAACrC,MAAM;EAC1B;EAEA;;;;;;;EAOA2D,IAAIA,CAAC;IAAE7D,KAAK,GAAG,IAAI,CAACuC,KAAK,CAACvC;EAAK,CAAE,GAAG,EAAE;IACpC,OAAOH,mBAAmB,CAACG,KAAK,EAAE,IAAI,CAAC;EACzC;;AAGF;;;;;;;;AAQA,MAAM+C,iBAAiB,GAAGA,CAACe,UAAU,EAAE;EAAE7C;AAAO,CAAE;AAChD;AACA;AACA;AACA6C,UAAU,CAACC,KAAK,CAACC,IAAI,CAAEC,IAAI,IAAK,GAAGA,IAAI,CAAC,gBAAgB,CAAC,EAAE,KAAK,GAAGhD,OAAO,EAAE,CAAC;AAE/E;;;;;;;AAOA,OAAO,MAAMc,cAAc,GAAIP,MAAM,IAAI;EACvC,MAAM0C,SAAS,GAAG,EAAE;EACpB,MAAM7D,OAAO,GAAG,wCACdC,MAAM,CAACD,OAAO,CAACmB,MAAM,CACtB;EAED,KAAK,MAAM,CAAC2C,GAAG,EAAEC,OAAO,CAAC,IAAI/D,OAAO,EAAE;IACpC,IAAI+D,OAAO,EAAE;MACXF,SAAS,CAACG,IAAI,CAAC;QAAEF;MAAG,CAAE,CAAC;;;EAG3B,OAAOD,SAAS;AAClB,CAAC;AAED;;;AAGA,OAAO,MAAMzC,WAAW,GAAG;EACzB,SAAS,EAAE,EAAE;EACb,QAAQ,EAAE,EAAE;EACZ,SAAS,EAAE,EAAE;EACb,SAAS,EAAE,EAAE;EACb,UAAU,EAAE,EAAE;EACd,UAAU,EAAE,EAAE;EACd,YAAY,EAAE,EAAE;EAChB,SAAS,EAAE;CACZ;AAED;;;AAGA,OAAO,MAAM6C,aAAa,GAAG;EAC3B,GAAG,EAAE;CACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}