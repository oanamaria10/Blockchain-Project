{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMinimalEthereumJsVm = exports.MinimalEthereumJsVmEventEmitter = void 0;\nconst ethereumjs_util_1 = require(\"@nomicfoundation/ethereumjs-util\");\nclass MinimalEthereumJsVmEventEmitter extends ethereumjs_util_1.AsyncEventEmitter {}\nexports.MinimalEthereumJsVmEventEmitter = MinimalEthereumJsVmEventEmitter;\nfunction getMinimalEthereumJsVm(provider) {\n  const minimalEthereumJsVm = {\n    evm: {\n      events: new MinimalEthereumJsVmEventEmitter()\n    },\n    stateManager: {\n      putContractCode: async (address, code) => {\n        await provider.handleRequest(JSON.stringify({\n          method: \"hardhat_setCode\",\n          params: [address.toString(), `0x${code.toString(\"hex\")}`]\n        }));\n      },\n      getContractStorage: async (address, slotHash) => {\n        const responseObject = await provider.handleRequest(JSON.stringify({\n          method: \"eth_getStorageAt\",\n          params: [address.toString(), `0x${slotHash.toString(\"hex\")}`]\n        }));\n        const response = JSON.parse(responseObject.json);\n        return Buffer.from(response.result.slice(2), \"hex\");\n      },\n      putContractStorage: async (address, slotHash, slotValue) => {\n        await provider.handleRequest(JSON.stringify({\n          method: \"hardhat_setStorageAt\",\n          params: [address.toString(), `0x${slotHash.toString(\"hex\")}`, `0x${slotValue.toString(\"hex\")}`]\n        }));\n      }\n    }\n  };\n  return minimalEthereumJsVm;\n}\nexports.getMinimalEthereumJsVm = getMinimalEthereumJsVm;","map":{"version":3,"names":["ethereumjs_util_1","require","MinimalEthereumJsVmEventEmitter","AsyncEventEmitter","exports","getMinimalEthereumJsVm","provider","minimalEthereumJsVm","evm","events","stateManager","putContractCode","address","code","handleRequest","JSON","stringify","method","params","toString","getContractStorage","slotHash","responseObject","response","parse","json","Buffer","from","result","slice","putContractStorage","slotValue"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\hardhat-network\\provider\\vm\\minimal-vm.ts"],"sourcesContent":["import type { Provider as EdrProviderT } from \"@nomicfoundation/edr\";\nimport type { Address } from \"@nomicfoundation/ethereumjs-util\";\nimport type {\n  MinimalEVMResult,\n  MinimalInterpreterStep,\n  MinimalMessage,\n} from \"./types\";\n\nimport { AsyncEventEmitter } from \"@nomicfoundation/ethereumjs-util\";\n\n/**\n * Used by the provider to keep the `_vm` variable used by some plugins. This\n * interface only has the things used by those plugins.\n */\nexport interface MinimalEthereumJsVm {\n  evm: {\n    events: AsyncEventEmitter<MinimalEthereumJsVmEvents>;\n  };\n  stateManager: {\n    putContractCode: (address: Address, code: Buffer) => Promise<void>;\n    getContractStorage: (address: Address, slotHash: Buffer) => Promise<Buffer>;\n    putContractStorage: (\n      address: Address,\n      slotHash: Buffer,\n      slotValue: Buffer\n    ) => Promise<void>;\n  };\n}\n\n// we need to use a type instead of an interface to satisfy the type constarint\n// of the AsyncEventEmitter type param\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ntype MinimalEthereumJsVmEvents = {\n  beforeMessage: (\n    data: MinimalMessage,\n    resolve?: (result?: any) => void\n  ) => void;\n  afterMessage: (\n    data: MinimalEVMResult,\n    resolve?: (result?: any) => void\n  ) => void;\n  step: (\n    data: MinimalInterpreterStep,\n    resolve?: (result?: any) => void\n  ) => void;\n};\n\nexport class MinimalEthereumJsVmEventEmitter extends AsyncEventEmitter<MinimalEthereumJsVmEvents> {}\n\nexport function getMinimalEthereumJsVm(\n  provider: EdrProviderT\n): MinimalEthereumJsVm {\n  const minimalEthereumJsVm: MinimalEthereumJsVm = {\n    evm: {\n      events: new MinimalEthereumJsVmEventEmitter(),\n    },\n    stateManager: {\n      putContractCode: async (address: Address, code: Buffer) => {\n        await provider.handleRequest(\n          JSON.stringify({\n            method: \"hardhat_setCode\",\n            params: [address.toString(), `0x${code.toString(\"hex\")}`],\n          })\n        );\n      },\n      getContractStorage: async (address: Address, slotHash: Buffer) => {\n        const responseObject = await provider.handleRequest(\n          JSON.stringify({\n            method: \"eth_getStorageAt\",\n            params: [address.toString(), `0x${slotHash.toString(\"hex\")}`],\n          })\n        );\n\n        const response = JSON.parse(responseObject.json);\n\n        return Buffer.from(response.result.slice(2), \"hex\");\n      },\n      putContractStorage: async (\n        address: Address,\n        slotHash: Buffer,\n        slotValue: Buffer\n      ) => {\n        await provider.handleRequest(\n          JSON.stringify({\n            method: \"hardhat_setStorageAt\",\n            params: [\n              address.toString(),\n              `0x${slotHash.toString(\"hex\")}`,\n              `0x${slotValue.toString(\"hex\")}`,\n            ],\n          })\n        );\n      },\n    },\n  };\n\n  return minimalEthereumJsVm;\n}\n"],"mappings":";;;;;;AAQA,MAAAA,iBAAA,GAAAC,OAAA;AAuCA,MAAaC,+BAAgC,SAAQF,iBAAA,CAAAG,iBAA4C;AAAjGC,OAAA,CAAAF,+BAAA,GAAAA,+BAAA;AAEA,SAAgBG,sBAAsBA,CACpCC,QAAsB;EAEtB,MAAMC,mBAAmB,GAAwB;IAC/CC,GAAG,EAAE;MACHC,MAAM,EAAE,IAAIP,+BAA+B;KAC5C;IACDQ,YAAY,EAAE;MACZC,eAAe,EAAE,MAAAA,CAAOC,OAAgB,EAAEC,IAAY,KAAI;QACxD,MAAMP,QAAQ,CAACQ,aAAa,CAC1BC,IAAI,CAACC,SAAS,CAAC;UACbC,MAAM,EAAE,iBAAiB;UACzBC,MAAM,EAAE,CAACN,OAAO,CAACO,QAAQ,EAAE,EAAE,KAAKN,IAAI,CAACM,QAAQ,CAAC,KAAK,CAAC,EAAE;SACzD,CAAC,CACH;MACH,CAAC;MACDC,kBAAkB,EAAE,MAAAA,CAAOR,OAAgB,EAAES,QAAgB,KAAI;QAC/D,MAAMC,cAAc,GAAG,MAAMhB,QAAQ,CAACQ,aAAa,CACjDC,IAAI,CAACC,SAAS,CAAC;UACbC,MAAM,EAAE,kBAAkB;UAC1BC,MAAM,EAAE,CAACN,OAAO,CAACO,QAAQ,EAAE,EAAE,KAAKE,QAAQ,CAACF,QAAQ,CAAC,KAAK,CAAC,EAAE;SAC7D,CAAC,CACH;QAED,MAAMI,QAAQ,GAAGR,IAAI,CAACS,KAAK,CAACF,cAAc,CAACG,IAAI,CAAC;QAEhD,OAAOC,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAACK,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;MACrD,CAAC;MACDC,kBAAkB,EAAE,MAAAA,CAClBlB,OAAgB,EAChBS,QAAgB,EAChBU,SAAiB,KACf;QACF,MAAMzB,QAAQ,CAACQ,aAAa,CAC1BC,IAAI,CAACC,SAAS,CAAC;UACbC,MAAM,EAAE,sBAAsB;UAC9BC,MAAM,EAAE,CACNN,OAAO,CAACO,QAAQ,EAAE,EAClB,KAAKE,QAAQ,CAACF,QAAQ,CAAC,KAAK,CAAC,EAAE,EAC/B,KAAKY,SAAS,CAACZ,QAAQ,CAAC,KAAK,CAAC,EAAE;SAEnC,CAAC,CACH;MACH;;GAEH;EAED,OAAOZ,mBAAmB;AAC5B;AAhDAH,OAAA,CAAAC,sBAAA,GAAAA,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}