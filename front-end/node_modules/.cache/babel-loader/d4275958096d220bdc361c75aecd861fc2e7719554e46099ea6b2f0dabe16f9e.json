{"ast":null,"code":"'use strict';\n\nvar errCode = require('err-code');\nvar ipfsUnixfs = require('ipfs-unixfs');\nvar persist = require('../../utils/persist.js');\nvar dagPb = require('@ipld/dag-pb');\nvar parallelBatch = require('it-parallel-batch');\nvar rawCodec = require('multiformats/codecs/raw');\nvar flat = require('./flat.js');\nvar balanced = require('./balanced.js');\nvar trickle = require('./trickle.js');\nvar bufferImporter = require('./buffer-importer.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\nvar rawCodec__namespace = /*#__PURE__*/_interopNamespace(rawCodec);\nconst dagBuilders = {\n  flat: flat,\n  balanced: balanced,\n  trickle: trickle\n};\nasync function* buildFileBatch(file, blockstore, options) {\n  let count = -1;\n  let previous;\n  let bufferImporter$1;\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter$1 = options.bufferImporter;\n  } else {\n    bufferImporter$1 = bufferImporter;\n  }\n  for await (const entry of parallelBatch__default[\"default\"](bufferImporter$1(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++;\n    if (count === 0) {\n      previous = entry;\n      continue;\n    } else if (count === 1 && previous) {\n      yield previous;\n      previous = null;\n    }\n    yield entry;\n  }\n  if (previous) {\n    previous.single = true;\n    yield previous;\n  }\n}\nconst reduce = (file, blockstore, options) => {\n  async function reducer(leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0];\n      if (file.mtime !== undefined || file.mode !== undefined) {\n        let buffer = await blockstore.get(leaf.cid);\n        leaf.unixfs = new ipfsUnixfs.UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        });\n        buffer = dagPb.encode(dagPb.prepare({\n          Data: leaf.unixfs.marshal()\n        }));\n        leaf.cid = await persist(buffer, blockstore, {\n          ...options,\n          codec: dagPb__namespace,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        });\n        leaf.size = buffer.length;\n      }\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      };\n    }\n    const f = new ipfsUnixfs.UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    });\n    const links = leaves.filter(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code && leaf.size) {\n        return true;\n      }\n      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n        return true;\n      }\n      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n    }).map(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code) {\n        f.addBlockSize(leaf.size);\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        };\n      }\n      if (!leaf.unixfs || !leaf.unixfs.data) {\n        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n      } else {\n        f.addBlockSize(leaf.unixfs.data.length);\n      }\n      return {\n        Name: '',\n        Tsize: leaf.size,\n        Hash: leaf.cid\n      };\n    });\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    };\n    const buffer = dagPb.encode(dagPb.prepare(node));\n    const cid = await persist(buffer, blockstore, options);\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    };\n  }\n  return reducer;\n};\nfunction fileBuilder(file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy];\n  if (!dagBuilder) {\n    throw errCode__default[\"default\"](new Error(`Unknown importer build strategy name: ${options.strategy}`), 'ERR_BAD_STRATEGY');\n  }\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\nmodule.exports = fileBuilder;","map":{"version":3,"names":["errCode","require","ipfsUnixfs","persist","dagPb","parallelBatch","rawCodec","flat","balanced","trickle","bufferImporter","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","Object","create","keys","forEach","k","d","getOwnPropertyDescriptor","defineProperty","get","enumerable","freeze","errCode__default","dagPb__namespace","parallelBatch__default","rawCodec__namespace","dagBuilders","buildFileBatch","file","blockstore","options","count","previous","bufferImporter$1","entry","blockWriteConcurrency","single","reduce","reducer","leaves","length","reduceSingleLeafToSelf","leaf","mtime","undefined","mode","buffer","cid","unixfs","UnixFS","type","data","encode","prepare","Data","marshal","codec","hasher","cidVersion","size","path","f","links","filter","code","fileSize","Boolean","map","addBlockSize","Name","Tsize","Hash","node","Links","acc","curr","fileBuilder","block","dagBuilder","strategy","Error","module","exports"],"sources":["C:/FACULTATE/Proiect/node_modules/ipfs-unixfs-importer/cjs/src/dag-builder/file/index.js"],"sourcesContent":["'use strict';\n\nvar errCode = require('err-code');\nvar ipfsUnixfs = require('ipfs-unixfs');\nvar persist = require('../../utils/persist.js');\nvar dagPb = require('@ipld/dag-pb');\nvar parallelBatch = require('it-parallel-batch');\nvar rawCodec = require('multiformats/codecs/raw');\nvar flat = require('./flat.js');\nvar balanced = require('./balanced.js');\nvar trickle = require('./trickle.js');\nvar bufferImporter = require('./buffer-importer.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\nvar rawCodec__namespace = /*#__PURE__*/_interopNamespace(rawCodec);\n\nconst dagBuilders = {\n  flat: flat,\n  balanced: balanced,\n  trickle: trickle\n};\nasync function* buildFileBatch(file, blockstore, options) {\n  let count = -1;\n  let previous;\n  let bufferImporter$1;\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter$1 = options.bufferImporter;\n  } else {\n    bufferImporter$1 = bufferImporter;\n  }\n  for await (const entry of parallelBatch__default[\"default\"](bufferImporter$1(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++;\n    if (count === 0) {\n      previous = entry;\n      continue;\n    } else if (count === 1 && previous) {\n      yield previous;\n      previous = null;\n    }\n    yield entry;\n  }\n  if (previous) {\n    previous.single = true;\n    yield previous;\n  }\n}\nconst reduce = (file, blockstore, options) => {\n  async function reducer(leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0];\n      if (file.mtime !== undefined || file.mode !== undefined) {\n        let buffer = await blockstore.get(leaf.cid);\n        leaf.unixfs = new ipfsUnixfs.UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        });\n        buffer = dagPb.encode(dagPb.prepare({ Data: leaf.unixfs.marshal() }));\n        leaf.cid = await persist(buffer, blockstore, {\n          ...options,\n          codec: dagPb__namespace,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        });\n        leaf.size = buffer.length;\n      }\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      };\n    }\n    const f = new ipfsUnixfs.UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    });\n    const links = leaves.filter(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code && leaf.size) {\n        return true;\n      }\n      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n        return true;\n      }\n      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n    }).map(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code) {\n        f.addBlockSize(leaf.size);\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        };\n      }\n      if (!leaf.unixfs || !leaf.unixfs.data) {\n        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n      } else {\n        f.addBlockSize(leaf.unixfs.data.length);\n      }\n      return {\n        Name: '',\n        Tsize: leaf.size,\n        Hash: leaf.cid\n      };\n    });\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    };\n    const buffer = dagPb.encode(dagPb.prepare(node));\n    const cid = await persist(buffer, blockstore, options);\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    };\n  }\n  return reducer;\n};\nfunction fileBuilder(file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy];\n  if (!dagBuilder) {\n    throw errCode__default[\"default\"](new Error(`Unknown importer build strategy name: ${ options.strategy }`), 'ERR_BAD_STRATEGY');\n  }\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\n\nmodule.exports = fileBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}