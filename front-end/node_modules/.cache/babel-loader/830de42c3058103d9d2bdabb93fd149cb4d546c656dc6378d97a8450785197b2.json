{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { logger } from '@sentry/utils';\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework as well as tracing capabilities\n */\nvar Express = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function Express(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = Express.id;\n    this._router = options.router || options.app;\n    this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use');\n  }\n  /**\n   * @inheritDoc\n   */\n  Express.prototype.setupOnce = function () {\n    if (!this._router) {\n      logger.error('ExpressIntegration is missing an Express instance');\n      return;\n    }\n    instrumentMiddlewares(this._router, this._methods);\n  };\n  /**\n   * @inheritDoc\n   */\n  Express.id = 'Express';\n  return Express;\n}();\nexport { Express };\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n *\n * They all internally delegate to the `router[method]` of the given application instance.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\nfunction wrap(fn, method) {\n  var arity = fn.length;\n  switch (arity) {\n    case 2:\n      {\n        return function (req, res) {\n          var transaction = res.__sentry_transaction;\n          if (transaction) {\n            var span_1 = transaction.startChild({\n              description: fn.name,\n              op: \"middleware.\" + method\n            });\n            res.once('finish', function () {\n              span_1.finish();\n            });\n          }\n          return fn.call(this, req, res);\n        };\n      }\n    case 3:\n      {\n        return function (req, res, next) {\n          var _a;\n          var transaction = res.__sentry_transaction;\n          var span = (_a = transaction) === null || _a === void 0 ? void 0 : _a.startChild({\n            description: fn.name,\n            op: \"middleware.\" + method\n          });\n          fn.call(this, req, res, function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n            var _a;\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            next.call.apply(next, __spread([this], args));\n          });\n        };\n      }\n    case 4:\n      {\n        return function (err, req, res, next) {\n          var _a;\n          var transaction = res.__sentry_transaction;\n          var span = (_a = transaction) === null || _a === void 0 ? void 0 : _a.startChild({\n            description: fn.name,\n            op: \"middleware.\" + method\n          });\n          fn.call(this, err, req, res, function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n            var _a;\n            (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n            next.call.apply(next, __spread([this], args));\n          });\n        };\n      }\n    default:\n      {\n        throw new Error(\"Express middleware takes 2-4 arguments. Got: \" + arity);\n      }\n  }\n}\n/**\n * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\nfunction wrapMiddlewareArgs(args, method) {\n  return args.map(function (arg) {\n    if (typeof arg === 'function') {\n      return wrap(arg, method);\n    }\n    if (Array.isArray(arg)) {\n      return arg.map(function (a) {\n        if (typeof a === 'function') {\n          return wrap(a, method);\n        }\n        return a;\n      });\n    }\n    return arg;\n  });\n}\n/**\n * Patches original router to utilize our tracing functionality\n */\nfunction patchMiddleware(router, method) {\n  var originalCallback = router[method];\n  router[method] = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return originalCallback.call.apply(originalCallback, __spread([this], wrapMiddlewareArgs(args, method)));\n  };\n  return router;\n}\n/**\n * Patches original router methods\n */\nfunction instrumentMiddlewares(router, methods) {\n  if (methods === void 0) {\n    methods = [];\n  }\n  methods.forEach(function (method) {\n    return patchMiddleware(router, method);\n  });\n}","map":{"version":3,"names":["logger","Express","options","name","id","_router","router","app","_methods","Array","isArray","methods","concat","prototype","setupOnce","error","instrumentMiddlewares","wrap","fn","method","arity","length","req","res","transaction","__sentry_transaction","span_1","startChild","description","op","once","finish","call","next","span","_a","args","_i","arguments","apply","__spread","err","Error","wrapMiddlewareArgs","map","arg","a","patchMiddleware","originalCallback","forEach"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\tracing\\src\\integrations\\express.ts"],"sourcesContent":["import { Integration, Transaction } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\ntype Method =\n  | 'all'\n  | 'get'\n  | 'post'\n  | 'put'\n  | 'delete'\n  | 'patch'\n  | 'options'\n  | 'head'\n  | 'checkout'\n  | 'copy'\n  | 'lock'\n  | 'merge'\n  | 'mkactivity'\n  | 'mkcol'\n  | 'move'\n  | 'm-search'\n  | 'notify'\n  | 'purge'\n  | 'report'\n  | 'search'\n  | 'subscribe'\n  | 'trace'\n  | 'unlock'\n  | 'unsubscribe'\n  | 'use';\n\ntype Router = {\n  [method in Method]: (...args: any) => any; // eslint-disable-line @typescript-eslint/no-explicit-any\n};\n\ninterface ExpressResponse {\n  once(name: string, callback: () => void): void;\n}\n\n/**\n * Internal helper for `__sentry_transaction`\n * @hidden\n */\ninterface SentryTracingResponse {\n  __sentry_transaction?: Transaction;\n}\n\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework as well as tracing capabilities\n */\nexport class Express implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Express';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Express.id;\n\n  /**\n   * Express App instance\n   */\n  private readonly _router?: Router;\n  private readonly _methods?: Method[];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { app?: Router; router?: Router; methods?: Method[] } = {}) {\n    this._router = options.router || options.app;\n    this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    if (!this._router) {\n      logger.error('ExpressIntegration is missing an Express instance');\n      return;\n    }\n    instrumentMiddlewares(this._router, this._methods);\n  }\n}\n\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n *\n * They all internally delegate to the `router[method]` of the given application instance.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\nfunction wrap(fn: Function, method: Method): (...args: any[]) => void {\n  const arity = fn.length;\n\n  switch (arity) {\n    case 2: {\n      return function(this: NodeJS.Global, req: unknown, res: ExpressResponse & SentryTracingResponse): void {\n        const transaction = res.__sentry_transaction;\n        if (transaction) {\n          const span = transaction.startChild({\n            description: fn.name,\n            op: `middleware.${method}`,\n          });\n          res.once('finish', () => {\n            span.finish();\n          });\n        }\n        return fn.call(this, req, res);\n      };\n    }\n    case 3: {\n      return function(\n        this: NodeJS.Global,\n        req: unknown,\n        res: ExpressResponse & SentryTracingResponse,\n        next: () => void,\n      ): void {\n        const transaction = res.__sentry_transaction;\n        const span = transaction?.startChild({\n          description: fn.name,\n          op: `middleware.${method}`,\n        });\n        fn.call(this, req, res, function(this: NodeJS.Global, ...args: unknown[]): void {\n          span?.finish();\n          next.call(this, ...args);\n        });\n      };\n    }\n    case 4: {\n      return function(\n        this: NodeJS.Global,\n        err: Error,\n        req: Request,\n        res: Response & SentryTracingResponse,\n        next: () => void,\n      ): void {\n        const transaction = res.__sentry_transaction;\n        const span = transaction?.startChild({\n          description: fn.name,\n          op: `middleware.${method}`,\n        });\n        fn.call(this, err, req, res, function(this: NodeJS.Global, ...args: unknown[]): void {\n          span?.finish();\n          next.call(this, ...args);\n        });\n      };\n    }\n    default: {\n      throw new Error(`Express middleware takes 2-4 arguments. Got: ${arity}`);\n    }\n  }\n}\n\n/**\n * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\nfunction wrapMiddlewareArgs(args: unknown[], method: Method): unknown[] {\n  return args.map((arg: unknown) => {\n    if (typeof arg === 'function') {\n      return wrap(arg, method);\n    }\n\n    if (Array.isArray(arg)) {\n      return arg.map((a: unknown) => {\n        if (typeof a === 'function') {\n          return wrap(a, method);\n        }\n        return a;\n      });\n    }\n\n    return arg;\n  });\n}\n\n/**\n * Patches original router to utilize our tracing functionality\n */\nfunction patchMiddleware(router: Router, method: Method): Router {\n  const originalCallback = router[method];\n\n  router[method] = function(...args: unknown[]): void {\n    return originalCallback.call(this, ...wrapMiddlewareArgs(args, method));\n  };\n\n  return router;\n}\n\n/**\n * Patches original router methods\n */\nfunction instrumentMiddlewares(router: Router, methods: Method[] = []): void {\n  methods.forEach((method: Method) => patchMiddleware(router, method));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}