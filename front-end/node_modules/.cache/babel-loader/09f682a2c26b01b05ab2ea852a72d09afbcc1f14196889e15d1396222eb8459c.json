{"ast":null,"code":"'use strict';\n\nconst {\n  Blob,\n  File: NativeFile\n} = require('buffer');\nconst {\n  types\n} = require('util');\nconst {\n  kState\n} = require('./symbols');\nconst {\n  isBlobLike\n} = require('./util');\nconst {\n  webidl\n} = require('./webidl');\nconst {\n  parseMIMEType,\n  serializeAMimeType\n} = require('./dataURL');\nconst {\n  kEnumerableProperty\n} = require('../core/util');\nconst encoder = new TextEncoder();\nclass File extends Blob {\n  constructor(fileBits, fileName, options = {}) {\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n    webidl.argumentLengthCheck(arguments, 2, {\n      header: 'File constructor'\n    });\n    fileBits = webidl.converters['sequence<BlobPart>'](fileBits);\n    fileName = webidl.converters.USVString(fileName);\n    options = webidl.converters.FilePropertyBag(options);\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n    // Note: Blob handles this for us\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName;\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    2. Convert every character in t to ASCII lowercase.\n    let t = options.type;\n    let d;\n\n    // eslint-disable-next-line no-labels\n    substep: {\n      if (t) {\n        t = parseMIMEType(t);\n        if (t === 'failure') {\n          t = '';\n          // eslint-disable-next-line no-labels\n          break substep;\n        }\n        t = serializeAMimeType(t).toLowerCase();\n      }\n\n      //    3. If the lastModified member is provided, let d be set to the\n      //    lastModified dictionary member. If it is not provided, set d to the\n      //    current date and time represented as the number of milliseconds since\n      //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n      d = options.lastModified;\n    }\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    super(processBlobParts(fileBits, options), {\n      type: t\n    });\n    this[kState] = {\n      name: n,\n      lastModified: d,\n      type: t\n    };\n  }\n  get name() {\n    webidl.brandCheck(this, File);\n    return this[kState].name;\n  }\n  get lastModified() {\n    webidl.brandCheck(this, File);\n    return this[kState].lastModified;\n  }\n  get type() {\n    webidl.brandCheck(this, File);\n    return this[kState].type;\n  }\n}\nclass FileLike {\n  constructor(blobLike, fileName, options = {}) {\n    // TODO: argument idl type check\n\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName;\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    TODO\n    const t = options.type;\n\n    //    2. Convert every character in t to ASCII lowercase.\n    //    TODO\n\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n    const d = options.lastModified ?? Date.now();\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    this[kState] = {\n      blobLike,\n      name: n,\n      type: t,\n      lastModified: d\n    };\n  }\n  stream(...args) {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].blobLike.stream(...args);\n  }\n  arrayBuffer(...args) {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].blobLike.arrayBuffer(...args);\n  }\n  slice(...args) {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].blobLike.slice(...args);\n  }\n  text(...args) {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].blobLike.text(...args);\n  }\n  get size() {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].blobLike.size;\n  }\n  get type() {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].blobLike.type;\n  }\n  get name() {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].name;\n  }\n  get lastModified() {\n    webidl.brandCheck(this, FileLike);\n    return this[kState].lastModified;\n  }\n  get [Symbol.toStringTag]() {\n    return 'File';\n  }\n}\nObject.defineProperties(File.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'File',\n    configurable: true\n  },\n  name: kEnumerableProperty,\n  lastModified: kEnumerableProperty\n});\nwebidl.converters.Blob = webidl.interfaceConverter(Blob);\nwebidl.converters.BlobPart = function (V, opts) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (isBlobLike(V)) {\n      return webidl.converters.Blob(V, {\n        strict: false\n      });\n    }\n    if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {\n      return webidl.converters.BufferSource(V, opts);\n    }\n  }\n  return webidl.converters.USVString(V, opts);\n};\nwebidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(webidl.converters.BlobPart);\n\n// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag\nwebidl.converters.FilePropertyBag = webidl.dictionaryConverter([{\n  key: 'lastModified',\n  converter: webidl.converters['long long'],\n  get defaultValue() {\n    return Date.now();\n  }\n}, {\n  key: 'type',\n  converter: webidl.converters.DOMString,\n  defaultValue: ''\n}, {\n  key: 'endings',\n  converter: value => {\n    value = webidl.converters.DOMString(value);\n    value = value.toLowerCase();\n    if (value !== 'native') {\n      value = 'transparent';\n    }\n    return value;\n  },\n  defaultValue: 'transparent'\n}]);\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#process-blob-parts\n * @param {(NodeJS.TypedArray|Blob|string)[]} parts\n * @param {{ type: string, endings: string }} options\n */\nfunction processBlobParts(parts, options) {\n  // 1. Let bytes be an empty sequence of bytes.\n  /** @type {NodeJS.TypedArray[]} */\n  const bytes = [];\n\n  // 2. For each element in parts:\n  for (const element of parts) {\n    // 1. If element is a USVString, run the following substeps:\n    if (typeof element === 'string') {\n      // 1. Let s be element.\n      let s = element;\n\n      // 2. If the endings member of options is \"native\", set s\n      //    to the result of converting line endings to native\n      //    of element.\n      if (options.endings === 'native') {\n        s = convertLineEndingsNative(s);\n      }\n\n      // 3. Append the result of UTF-8 encoding s to bytes.\n      bytes.push(encoder.encode(s));\n    } else if (types.isAnyArrayBuffer(element) || types.isTypedArray(element)) {\n      // 2. If element is a BufferSource, get a copy of the\n      //    bytes held by the buffer source, and append those\n      //    bytes to bytes.\n      if (!element.buffer) {\n        // ArrayBuffer\n        bytes.push(new Uint8Array(element));\n      } else {\n        bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength));\n      }\n    } else if (isBlobLike(element)) {\n      // 3. If element is a Blob, append the bytes it represents\n      //    to bytes.\n      bytes.push(element);\n    }\n  }\n\n  // 3. Return bytes.\n  return bytes;\n}\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native\n * @param {string} s\n */\nfunction convertLineEndingsNative(s) {\n  // 1. Let native line ending be be the code point U+000A LF.\n  let nativeLineEnding = '\\n';\n\n  // 2. If the underlying platformâ€™s conventions are to\n  //    represent newlines as a carriage return and line feed\n  //    sequence, set native line ending to the code point\n  //    U+000D CR followed by the code point U+000A LF.\n  if (process.platform === 'win32') {\n    nativeLineEnding = '\\r\\n';\n  }\n  return s.replace(/\\r?\\n/g, nativeLineEnding);\n}\n\n// If this function is moved to ./util.js, some tools (such as\n// rollup) will warn about circular dependencies. See:\n// https://github.com/nodejs/undici/issues/1629\nfunction isFileLike(object) {\n  return NativeFile && object instanceof NativeFile || object instanceof File || object && (typeof object.stream === 'function' || typeof object.arrayBuffer === 'function') && object[Symbol.toStringTag] === 'File';\n}\nmodule.exports = {\n  File,\n  FileLike,\n  isFileLike\n};","map":{"version":3,"names":["Blob","File","NativeFile","require","types","kState","isBlobLike","webidl","parseMIMEType","serializeAMimeType","kEnumerableProperty","encoder","TextEncoder","constructor","fileBits","fileName","options","argumentLengthCheck","arguments","header","converters","USVString","FilePropertyBag","n","t","type","d","substep","toLowerCase","lastModified","processBlobParts","name","brandCheck","FileLike","blobLike","Date","now","stream","args","arrayBuffer","slice","text","size","Symbol","toStringTag","Object","defineProperties","prototype","value","configurable","interfaceConverter","BlobPart","V","opts","util","Type","strict","ArrayBuffer","isView","isAnyArrayBuffer","BufferSource","sequenceConverter","dictionaryConverter","key","converter","defaultValue","DOMString","parts","bytes","element","s","endings","convertLineEndingsNative","push","encode","isTypedArray","buffer","Uint8Array","byteOffset","byteLength","nativeLineEnding","process","platform","replace","isFileLike","object","module","exports"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/undici/lib/fetch/file.js"],"sourcesContent":["'use strict'\n\nconst { Blob, File: NativeFile } = require('buffer')\nconst { types } = require('util')\nconst { kState } = require('./symbols')\nconst { isBlobLike } = require('./util')\nconst { webidl } = require('./webidl')\nconst { parseMIMEType, serializeAMimeType } = require('./dataURL')\nconst { kEnumerableProperty } = require('../core/util')\nconst encoder = new TextEncoder()\n\nclass File extends Blob {\n  constructor (fileBits, fileName, options = {}) {\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n    webidl.argumentLengthCheck(arguments, 2, { header: 'File constructor' })\n\n    fileBits = webidl.converters['sequence<BlobPart>'](fileBits)\n    fileName = webidl.converters.USVString(fileName)\n    options = webidl.converters.FilePropertyBag(options)\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n    // Note: Blob handles this for us\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    2. Convert every character in t to ASCII lowercase.\n    let t = options.type\n    let d\n\n    // eslint-disable-next-line no-labels\n    substep: {\n      if (t) {\n        t = parseMIMEType(t)\n\n        if (t === 'failure') {\n          t = ''\n          // eslint-disable-next-line no-labels\n          break substep\n        }\n\n        t = serializeAMimeType(t).toLowerCase()\n      }\n\n      //    3. If the lastModified member is provided, let d be set to the\n      //    lastModified dictionary member. If it is not provided, set d to the\n      //    current date and time represented as the number of milliseconds since\n      //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n      d = options.lastModified\n    }\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    super(processBlobParts(fileBits, options), { type: t })\n    this[kState] = {\n      name: n,\n      lastModified: d,\n      type: t\n    }\n  }\n\n  get name () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].lastModified\n  }\n\n  get type () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].type\n  }\n}\n\nclass FileLike {\n  constructor (blobLike, fileName, options = {}) {\n    // TODO: argument idl type check\n\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    TODO\n    const t = options.type\n\n    //    2. Convert every character in t to ASCII lowercase.\n    //    TODO\n\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n    const d = options.lastModified ?? Date.now()\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    this[kState] = {\n      blobLike,\n      name: n,\n      type: t,\n      lastModified: d\n    }\n  }\n\n  stream (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.stream(...args)\n  }\n\n  arrayBuffer (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.arrayBuffer(...args)\n  }\n\n  slice (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.slice(...args)\n  }\n\n  text (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.text(...args)\n  }\n\n  get size () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.size\n  }\n\n  get type () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.type\n  }\n\n  get name () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'File'\n  }\n}\n\nObject.defineProperties(File.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'File',\n    configurable: true\n  },\n  name: kEnumerableProperty,\n  lastModified: kEnumerableProperty\n})\n\nwebidl.converters.Blob = webidl.interfaceConverter(Blob)\n\nwebidl.converters.BlobPart = function (V, opts) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (isBlobLike(V)) {\n      return webidl.converters.Blob(V, { strict: false })\n    }\n\n    if (\n      ArrayBuffer.isView(V) ||\n      types.isAnyArrayBuffer(V)\n    ) {\n      return webidl.converters.BufferSource(V, opts)\n    }\n  }\n\n  return webidl.converters.USVString(V, opts)\n}\n\nwebidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(\n  webidl.converters.BlobPart\n)\n\n// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag\nwebidl.converters.FilePropertyBag = webidl.dictionaryConverter([\n  {\n    key: 'lastModified',\n    converter: webidl.converters['long long'],\n    get defaultValue () {\n      return Date.now()\n    }\n  },\n  {\n    key: 'type',\n    converter: webidl.converters.DOMString,\n    defaultValue: ''\n  },\n  {\n    key: 'endings',\n    converter: (value) => {\n      value = webidl.converters.DOMString(value)\n      value = value.toLowerCase()\n\n      if (value !== 'native') {\n        value = 'transparent'\n      }\n\n      return value\n    },\n    defaultValue: 'transparent'\n  }\n])\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#process-blob-parts\n * @param {(NodeJS.TypedArray|Blob|string)[]} parts\n * @param {{ type: string, endings: string }} options\n */\nfunction processBlobParts (parts, options) {\n  // 1. Let bytes be an empty sequence of bytes.\n  /** @type {NodeJS.TypedArray[]} */\n  const bytes = []\n\n  // 2. For each element in parts:\n  for (const element of parts) {\n    // 1. If element is a USVString, run the following substeps:\n    if (typeof element === 'string') {\n      // 1. Let s be element.\n      let s = element\n\n      // 2. If the endings member of options is \"native\", set s\n      //    to the result of converting line endings to native\n      //    of element.\n      if (options.endings === 'native') {\n        s = convertLineEndingsNative(s)\n      }\n\n      // 3. Append the result of UTF-8 encoding s to bytes.\n      bytes.push(encoder.encode(s))\n    } else if (\n      types.isAnyArrayBuffer(element) ||\n      types.isTypedArray(element)\n    ) {\n      // 2. If element is a BufferSource, get a copy of the\n      //    bytes held by the buffer source, and append those\n      //    bytes to bytes.\n      if (!element.buffer) { // ArrayBuffer\n        bytes.push(new Uint8Array(element))\n      } else {\n        bytes.push(\n          new Uint8Array(element.buffer, element.byteOffset, element.byteLength)\n        )\n      }\n    } else if (isBlobLike(element)) {\n      // 3. If element is a Blob, append the bytes it represents\n      //    to bytes.\n      bytes.push(element)\n    }\n  }\n\n  // 3. Return bytes.\n  return bytes\n}\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native\n * @param {string} s\n */\nfunction convertLineEndingsNative (s) {\n  // 1. Let native line ending be be the code point U+000A LF.\n  let nativeLineEnding = '\\n'\n\n  // 2. If the underlying platformâ€™s conventions are to\n  //    represent newlines as a carriage return and line feed\n  //    sequence, set native line ending to the code point\n  //    U+000D CR followed by the code point U+000A LF.\n  if (process.platform === 'win32') {\n    nativeLineEnding = '\\r\\n'\n  }\n\n  return s.replace(/\\r?\\n/g, nativeLineEnding)\n}\n\n// If this function is moved to ./util.js, some tools (such as\n// rollup) will warn about circular dependencies. See:\n// https://github.com/nodejs/undici/issues/1629\nfunction isFileLike (object) {\n  return (\n    (NativeFile && object instanceof NativeFile) ||\n    object instanceof File || (\n      object &&\n      (typeof object.stream === 'function' ||\n      typeof object.arrayBuffer === 'function') &&\n      object[Symbol.toStringTag] === 'File'\n    )\n  )\n}\n\nmodule.exports = { File, FileLike, isFileLike }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}