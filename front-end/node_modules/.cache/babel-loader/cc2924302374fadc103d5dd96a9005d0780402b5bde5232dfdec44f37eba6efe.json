{"ast":null,"code":"import * as API from '@ucanto/interface';\nimport * as Schema from './schema.js';\n\n/**\n * @template {API.Protocol} [P=API.Protocol]\n * @typedef {{protocol: P}} Options\n */\n\n/**\n * @template {Options} O\n * @extends {Schema.API<API.URI<O['protocol']>, unknown, Partial<O>>}\n */\nclass URISchema extends Schema.API {\n  /**\n   * @param {unknown} input\n   * @param {Partial<O>} options\n   * @returns {Schema.ReadResult<API.URI<O['protocol']>>}\n   */\n  readWith(input, {\n    protocol\n  } = {}) {\n    if (typeof input !== 'string' && !(input instanceof URL)) {\n      return Schema.error(`Expected URI but got ${input === null ? 'null' : typeof input}`);\n    }\n    try {\n      const url = new URL(String(input));\n      if (protocol != null && url.protocol !== protocol) {\n        return Schema.error(`Expected ${protocol} URI instead got ${url.href}`);\n      } else {\n        return {\n          ok: ( /** @type {API.URI<O['protocol']>} */url.href)\n        };\n      }\n    } catch (_) {\n      return Schema.error(`Invalid URI`);\n    }\n  }\n}\nconst schema = new URISchema({});\n\n/**\n * @returns {Schema.Schema<API.URI, unknown>}\n */\nexport const uri = () => schema;\n\n/**\n * @param {unknown} input\n */\nexport const read = input => schema.read(input);\n\n/**\n * @template {API.Protocol} P\n * @template {Options<P>} O\n * @param {O} options\n * @returns {Schema.Schema<API.URI<O['protocol']>, unknown>}\n */\nexport const match = options => new URISchema(options);\n\n/**\n * @template {string} [Scheme=string]\n * @param {`${Scheme}:${string}`} input\n */\nexport const from = input => ( /** @type {API.URI<`${Scheme}:`>} */schema.from(input));","map":{"version":3,"names":["API","Schema","URISchema","readWith","input","protocol","URL","error","url","String","href","ok","_","schema","uri","read","match","options","from"],"sources":["C:/FACULTATE/Proiect/node_modules/@ucanto/core/src/schema/uri.js"],"sourcesContent":["import * as API from '@ucanto/interface'\nimport * as Schema from './schema.js'\n\n/**\n * @template {API.Protocol} [P=API.Protocol]\n * @typedef {{protocol: P}} Options\n */\n\n/**\n * @template {Options} O\n * @extends {Schema.API<API.URI<O['protocol']>, unknown, Partial<O>>}\n */\nclass URISchema extends Schema.API {\n  /**\n   * @param {unknown} input\n   * @param {Partial<O>} options\n   * @returns {Schema.ReadResult<API.URI<O['protocol']>>}\n   */\n  readWith(input, { protocol } = {}) {\n    if (typeof input !== 'string' && !(input instanceof URL)) {\n      return Schema.error(\n        `Expected URI but got ${input === null ? 'null' : typeof input}`\n      )\n    }\n\n    try {\n      const url = new URL(String(input))\n      if (protocol != null && url.protocol !== protocol) {\n        return Schema.error(`Expected ${protocol} URI instead got ${url.href}`)\n      } else {\n        return { ok: /** @type {API.URI<O['protocol']>} */ (url.href) }\n      }\n    } catch (_) {\n      return Schema.error(`Invalid URI`)\n    }\n  }\n}\n\nconst schema = new URISchema({})\n\n/**\n * @returns {Schema.Schema<API.URI, unknown>}\n */\nexport const uri = () => schema\n\n/**\n * @param {unknown} input\n */\nexport const read = input => schema.read(input)\n\n/**\n * @template {API.Protocol} P\n * @template {Options<P>} O\n * @param {O} options\n * @returns {Schema.Schema<API.URI<O['protocol']>, unknown>}\n */\nexport const match = options => new URISchema(options)\n\n/**\n * @template {string} [Scheme=string]\n * @param {`${Scheme}:${string}`} input\n */\nexport const from = input =>\n  /** @type {API.URI<`${Scheme}:`>} */ (schema.from(input))\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,mBAAmB;AACxC,OAAO,KAAKC,MAAM,MAAM,aAAa;;AAErC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMC,SAAS,SAASD,MAAM,CAACD,GAAG,CAAC;EACjC;AACF;AACA;AACA;AACA;EACEG,QAAQA,CAACC,KAAK,EAAE;IAAEC;EAAS,CAAC,GAAG,CAAC,CAAC,EAAE;IACjC,IAAI,OAAOD,KAAK,KAAK,QAAQ,IAAI,EAAEA,KAAK,YAAYE,GAAG,CAAC,EAAE;MACxD,OAAOL,MAAM,CAACM,KAAK,CAChB,wBAAuBH,KAAK,KAAK,IAAI,GAAG,MAAM,GAAG,OAAOA,KAAM,EACjE,CAAC;IACH;IAEA,IAAI;MACF,MAAMI,GAAG,GAAG,IAAIF,GAAG,CAACG,MAAM,CAACL,KAAK,CAAC,CAAC;MAClC,IAAIC,QAAQ,IAAI,IAAI,IAAIG,GAAG,CAACH,QAAQ,KAAKA,QAAQ,EAAE;QACjD,OAAOJ,MAAM,CAACM,KAAK,CAAE,YAAWF,QAAS,oBAAmBG,GAAG,CAACE,IAAK,EAAC,CAAC;MACzE,CAAC,MAAM;QACL,OAAO;UAAEC,EAAE,IAAE,qCAAuCH,GAAG,CAACE,IAAI;QAAE,CAAC;MACjE;IACF,CAAC,CAAC,OAAOE,CAAC,EAAE;MACV,OAAOX,MAAM,CAACM,KAAK,CAAE,aAAY,CAAC;IACpC;EACF;AACF;AAEA,MAAMM,MAAM,GAAG,IAAIX,SAAS,CAAC,CAAC,CAAC,CAAC;;AAEhC;AACA;AACA;AACA,OAAO,MAAMY,GAAG,GAAGA,CAAA,KAAMD,MAAM;;AAE/B;AACA;AACA;AACA,OAAO,MAAME,IAAI,GAAGX,KAAK,IAAIS,MAAM,CAACE,IAAI,CAACX,KAAK,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMY,KAAK,GAAGC,OAAO,IAAI,IAAIf,SAAS,CAACe,OAAO,CAAC;;AAEtD;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAI,GAAGd,KAAK,MACvB,oCAAsCS,MAAM,CAACK,IAAI,CAACd,KAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}