{"ast":null,"code":"'use strict';\n\n/*!\n * mocha\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\nvar escapeRe = require('escape-string-regexp');\nvar path = require('path');\nvar builtinReporters = require('./reporters');\nvar utils = require('./utils');\nvar mocharc = require('./mocharc.json');\nvar Suite = require('./suite');\nvar esmUtils = require('./nodejs/esm-utils');\nvar createStatsCollector = require('./stats-collector');\nconst {\n  createInvalidReporterError,\n  createInvalidInterfaceError,\n  createMochaInstanceAlreadyDisposedError,\n  createMochaInstanceAlreadyRunningError,\n  createUnsupportedError\n} = require('./errors');\nconst {\n  EVENT_FILE_PRE_REQUIRE,\n  EVENT_FILE_POST_REQUIRE,\n  EVENT_FILE_REQUIRE\n} = Suite.constants;\nvar debug = require('debug')('mocha:mocha');\nexports = module.exports = Mocha;\n\n/**\n * A Mocha instance is a finite state machine.\n * These are the states it can be in.\n * @private\n */\nvar mochaStates = utils.defineConstants({\n  /**\n   * Initial state of the mocha instance\n   * @private\n   */\n  INIT: 'init',\n  /**\n   * Mocha instance is running tests\n   * @private\n   */\n  RUNNING: 'running',\n  /**\n   * Mocha instance is done running tests and references to test functions and hooks are cleaned.\n   * You can reset this state by unloading the test files.\n   * @private\n   */\n  REFERENCES_CLEANED: 'referencesCleaned',\n  /**\n   * Mocha instance is disposed and can no longer be used.\n   * @private\n   */\n  DISPOSED: 'disposed'\n});\n\n/**\n * To require local UIs and reporters when running in node.\n */\n\nif (!utils.isBrowser() && typeof module.paths !== 'undefined') {\n  var cwd = utils.cwd();\n  module.paths.push(cwd, path.join(cwd, 'node_modules'));\n}\n\n/**\n * Expose internals.\n * @private\n */\n\nexports.utils = utils;\nexports.interfaces = require('./interfaces');\n/**\n * @public\n * @memberof Mocha\n */\nexports.reporters = builtinReporters;\nexports.Runnable = require('./runnable');\nexports.Context = require('./context');\n/**\n *\n * @memberof Mocha\n */\nexports.Runner = require('./runner');\nexports.Suite = Suite;\nexports.Hook = require('./hook');\nexports.Test = require('./test');\nlet currentContext;\nexports.afterEach = function (...args) {\n  return (currentContext.afterEach || currentContext.teardown).apply(this, args);\n};\nexports.after = function (...args) {\n  return (currentContext.after || currentContext.suiteTeardown).apply(this, args);\n};\nexports.beforeEach = function (...args) {\n  return (currentContext.beforeEach || currentContext.setup).apply(this, args);\n};\nexports.before = function (...args) {\n  return (currentContext.before || currentContext.suiteSetup).apply(this, args);\n};\nexports.describe = function (...args) {\n  return (currentContext.describe || currentContext.suite).apply(this, args);\n};\nexports.describe.only = function (...args) {\n  return (currentContext.describe || currentContext.suite).only.apply(this, args);\n};\nexports.describe.skip = function (...args) {\n  return (currentContext.describe || currentContext.suite).skip.apply(this, args);\n};\nexports.it = function (...args) {\n  return (currentContext.it || currentContext.test).apply(this, args);\n};\nexports.it.only = function (...args) {\n  return (currentContext.it || currentContext.test).only.apply(this, args);\n};\nexports.it.skip = function (...args) {\n  return (currentContext.it || currentContext.test).skip.apply(this, args);\n};\nexports.xdescribe = exports.describe.skip;\nexports.xit = exports.it.skip;\nexports.setup = exports.beforeEach;\nexports.suiteSetup = exports.before;\nexports.suiteTeardown = exports.after;\nexports.suite = exports.describe;\nexports.teardown = exports.afterEach;\nexports.test = exports.it;\nexports.run = function (...args) {\n  return currentContext.run.apply(this, args);\n};\n\n/**\n * Constructs a new Mocha instance with `options`.\n *\n * @public\n * @class Mocha\n * @param {Object} [options] - Settings object.\n * @param {boolean} [options.allowUncaught] - Propagate uncaught errors?\n * @param {boolean} [options.asyncOnly] - Force `done` callback or promise?\n * @param {boolean} [options.bail] - Bail after first test failure?\n * @param {boolean} [options.checkLeaks] - Check for global variable leaks?\n * @param {boolean} [options.color] - Color TTY output from reporter?\n * @param {boolean} [options.delay] - Delay root suite execution?\n * @param {boolean} [options.diff] - Show diff on failure?\n * @param {boolean} [options.dryRun] - Report tests without running them?\n * @param {boolean} [options.failZero] - Fail test run if zero tests?\n * @param {string} [options.fgrep] - Test filter given string.\n * @param {boolean} [options.forbidOnly] - Tests marked `only` fail the suite?\n * @param {boolean} [options.forbidPending] - Pending tests fail the suite?\n * @param {boolean} [options.fullTrace] - Full stacktrace upon failure?\n * @param {string[]} [options.global] - Variables expected in global scope.\n * @param {RegExp|string} [options.grep] - Test filter given regular expression.\n * @param {boolean} [options.inlineDiffs] - Display inline diffs?\n * @param {boolean} [options.invert] - Invert test filter matches?\n * @param {boolean} [options.noHighlighting] - Disable syntax highlighting?\n * @param {string|constructor} [options.reporter] - Reporter name or constructor.\n * @param {Object} [options.reporterOption] - Reporter settings object.\n * @param {number} [options.retries] - Number of times to retry failed tests.\n * @param {number} [options.slow] - Slow threshold value.\n * @param {number|string} [options.timeout] - Timeout threshold value.\n * @param {string} [options.ui] - Interface name.\n * @param {boolean} [options.parallel] - Run jobs in parallel.\n * @param {number} [options.jobs] - Max number of worker processes for parallel runs.\n * @param {MochaRootHookObject} [options.rootHooks] - Hooks to bootstrap the root suite with.\n * @param {string[]} [options.require] - Pathname of `rootHooks` plugin for parallel runs.\n * @param {boolean} [options.isWorker] - Should be `true` if `Mocha` process is running in a worker process.\n */\nfunction Mocha(options = {}) {\n  options = {\n    ...mocharc,\n    ...options\n  };\n  this.files = [];\n  this.options = options;\n  // root suite\n  this.suite = new exports.Suite('', new exports.Context(), true);\n  this._cleanReferencesAfterRun = true;\n  this._state = mochaStates.INIT;\n  this.grep(options.grep).fgrep(options.fgrep).ui(options.ui).reporter(options.reporter, options.reporterOption || options.reporterOptions // for backwards compatibility\n  ).slow(options.slow).global(options.global);\n\n  // this guard exists because Suite#timeout does not consider `undefined` to be valid input\n  if (typeof options.timeout !== 'undefined') {\n    this.timeout(options.timeout === false ? 0 : options.timeout);\n  }\n  if ('retries' in options) {\n    this.retries(options.retries);\n  }\n  ['allowUncaught', 'asyncOnly', 'bail', 'checkLeaks', 'color', 'delay', 'diff', 'dryRun', 'failZero', 'forbidOnly', 'forbidPending', 'fullTrace', 'inlineDiffs', 'invert'].forEach(function (opt) {\n    if (options[opt]) {\n      this[opt]();\n    }\n  }, this);\n  if (options.rootHooks) {\n    this.rootHooks(options.rootHooks);\n  }\n\n  /**\n   * The class which we'll instantiate in {@link Mocha#run}.  Defaults to\n   * {@link Runner} in serial mode; changes in parallel mode.\n   * @memberof Mocha\n   * @private\n   */\n  this._runnerClass = exports.Runner;\n\n  /**\n   * Whether or not to call {@link Mocha#loadFiles} implicitly when calling\n   * {@link Mocha#run}.  If this is `true`, then it's up to the consumer to call\n   * {@link Mocha#loadFiles} _or_ {@link Mocha#loadFilesAsync}.\n   * @private\n   * @memberof Mocha\n   */\n  this._lazyLoadFiles = false;\n\n  /**\n   * It's useful for a Mocha instance to know if it's running in a worker process.\n   * We could derive this via other means, but it's helpful to have a flag to refer to.\n   * @memberof Mocha\n   * @private\n   */\n  this.isWorker = Boolean(options.isWorker);\n  this.globalSetup(options.globalSetup).globalTeardown(options.globalTeardown).enableGlobalSetup(options.enableGlobalSetup).enableGlobalTeardown(options.enableGlobalTeardown);\n  if (options.parallel && (typeof options.jobs === 'undefined' || options.jobs > 1)) {\n    debug('attempting to enable parallel mode');\n    this.parallelMode(true);\n  }\n}\n\n/**\n * Enables or disables bailing on the first failure.\n *\n * @public\n * @see [CLI option](../#-bail-b)\n * @param {boolean} [bail=true] - Whether to bail on first error.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.bail = function (bail) {\n  this.suite.bail(bail !== false);\n  return this;\n};\n\n/**\n * @summary\n * Adds `file` to be loaded for execution.\n *\n * @description\n * Useful for generic setup code that must be included within test suite.\n *\n * @public\n * @see [CLI option](../#-file-filedirectoryglob)\n * @param {string} file - Pathname of file to be loaded.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.addFile = function (file) {\n  this.files.push(file);\n  return this;\n};\n\n/**\n * Sets reporter to `reporter`, defaults to \"spec\".\n *\n * @public\n * @see [CLI option](../#-reporter-name-r-name)\n * @see [Reporters](../#reporters)\n * @param {String|Function} reporterName - Reporter name or constructor.\n * @param {Object} [reporterOptions] - Options used to configure the reporter.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested reporter cannot be loaded\n * @example\n *\n * // Use XUnit reporter and direct its output to file\n * mocha.reporter('xunit', { output: '/path/to/testspec.xunit.xml' });\n */\nMocha.prototype.reporter = function (reporterName, reporterOptions) {\n  if (typeof reporterName === 'function') {\n    this._reporter = reporterName;\n  } else {\n    reporterName = reporterName || 'spec';\n    var reporter;\n    // Try to load a built-in reporter.\n    if (builtinReporters[reporterName]) {\n      reporter = builtinReporters[reporterName];\n    }\n    // Try to load reporters from process.cwd() and node_modules\n    if (!reporter) {\n      let foundReporter;\n      try {\n        foundReporter = require.resolve(reporterName);\n        reporter = require(foundReporter);\n      } catch (err) {\n        if (foundReporter) {\n          throw createInvalidReporterError(err.message, foundReporter);\n        }\n        // Try to load reporters from a cwd-relative path\n        try {\n          reporter = require(path.resolve(reporterName));\n        } catch (e) {\n          throw createInvalidReporterError(e.message, reporterName);\n        }\n      }\n    }\n    this._reporter = reporter;\n  }\n  this.options.reporterOption = reporterOptions;\n  // alias option name is used in built-in reporters xunit/tap/progress\n  this.options.reporterOptions = reporterOptions;\n  return this;\n};\n\n/**\n * Sets test UI `name`, defaults to \"bdd\".\n *\n * @public\n * @see [CLI option](../#-ui-name-u-name)\n * @see [Interface DSLs](../#interfaces)\n * @param {string|Function} [ui=bdd] - Interface name or class.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested interface cannot be loaded\n */\nMocha.prototype.ui = function (ui) {\n  var bindInterface;\n  if (typeof ui === 'function') {\n    bindInterface = ui;\n  } else {\n    ui = ui || 'bdd';\n    bindInterface = exports.interfaces[ui];\n    if (!bindInterface) {\n      try {\n        bindInterface = require(ui);\n      } catch (err) {\n        throw createInvalidInterfaceError(`invalid interface '${ui}'`, ui);\n      }\n    }\n  }\n  bindInterface(this.suite);\n  this.suite.on(EVENT_FILE_PRE_REQUIRE, function (context) {\n    currentContext = context;\n  });\n  return this;\n};\n\n/**\n * Loads `files` prior to execution. Does not support ES Modules.\n *\n * @description\n * The implementation relies on Node's `require` to execute\n * the test interface functions and will be subject to its cache.\n * Supports only CommonJS modules. To load ES modules, use Mocha#loadFilesAsync.\n *\n * @private\n * @see {@link Mocha#addFile}\n * @see {@link Mocha#run}\n * @see {@link Mocha#unloadFiles}\n * @see {@link Mocha#loadFilesAsync}\n * @param {Function} [fn] - Callback invoked upon completion.\n */\nMocha.prototype.loadFiles = function (fn) {\n  var self = this;\n  var suite = this.suite;\n  this.files.forEach(function (file) {\n    file = path.resolve(file);\n    suite.emit(EVENT_FILE_PRE_REQUIRE, global, file, self);\n    suite.emit(EVENT_FILE_REQUIRE, require(file), file, self);\n    suite.emit(EVENT_FILE_POST_REQUIRE, global, file, self);\n  });\n  fn && fn();\n};\n\n/**\n * Loads `files` prior to execution. Supports Node ES Modules.\n *\n * @description\n * The implementation relies on Node's `require` and `import` to execute\n * the test interface functions and will be subject to its cache.\n * Supports both CJS and ESM modules.\n *\n * @public\n * @see {@link Mocha#addFile}\n * @see {@link Mocha#run}\n * @see {@link Mocha#unloadFiles}\n * @param {Object} [options] - Settings object.\n * @param {Function} [options.esmDecorator] - Function invoked on esm module name right before importing it. By default will passthrough as is.\n * @returns {Promise}\n * @example\n *\n * // loads ESM (and CJS) test files asynchronously, then runs root suite\n * mocha.loadFilesAsync()\n *   .then(() => mocha.run(failures => process.exitCode = failures ? 1 : 0))\n *   .catch(() => process.exitCode = 1);\n */\nMocha.prototype.loadFilesAsync = function ({\n  esmDecorator\n} = {}) {\n  var self = this;\n  var suite = this.suite;\n  this.lazyLoadFiles(true);\n  return esmUtils.loadFilesAsync(this.files, function (file) {\n    suite.emit(EVENT_FILE_PRE_REQUIRE, global, file, self);\n  }, function (file, resultModule) {\n    suite.emit(EVENT_FILE_REQUIRE, resultModule, file, self);\n    suite.emit(EVENT_FILE_POST_REQUIRE, global, file, self);\n  }, esmDecorator);\n};\n\n/**\n * Removes a previously loaded file from Node's `require` cache.\n *\n * @private\n * @static\n * @see {@link Mocha#unloadFiles}\n * @param {string} file - Pathname of file to be unloaded.\n */\nMocha.unloadFile = function (file) {\n  if (utils.isBrowser()) {\n    throw createUnsupportedError('unloadFile() is only supported in a Node.js environment');\n  }\n  return require('./nodejs/file-unloader').unloadFile(file);\n};\n\n/**\n * Unloads `files` from Node's `require` cache.\n *\n * @description\n * This allows required files to be \"freshly\" reloaded, providing the ability\n * to reuse a Mocha instance programmatically.\n * Note: does not clear ESM module files from the cache\n *\n * <strong>Intended for consumers &mdash; not used internally</strong>\n *\n * @public\n * @see {@link Mocha#run}\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.unloadFiles = function () {\n  if (this._state === mochaStates.DISPOSED) {\n    throw createMochaInstanceAlreadyDisposedError('Mocha instance is already disposed, it cannot be used again.', this._cleanReferencesAfterRun, this);\n  }\n  this.files.forEach(function (file) {\n    Mocha.unloadFile(file);\n  });\n  this._state = mochaStates.INIT;\n  return this;\n};\n\n/**\n * Sets `grep` filter after escaping RegExp special characters.\n *\n * @public\n * @see {@link Mocha#grep}\n * @param {string} str - Value to be converted to a regexp.\n * @returns {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title begins with `\"foo\"` followed by a period\n * mocha.fgrep('foo.');\n */\nMocha.prototype.fgrep = function (str) {\n  if (!str) {\n    return this;\n  }\n  return this.grep(new RegExp(escapeRe(str)));\n};\n\n/**\n * @summary\n * Sets `grep` filter used to select specific tests for execution.\n *\n * @description\n * If `re` is a regexp-like string, it will be converted to regexp.\n * The regexp is tested against the full title of each test (i.e., the\n * name of the test preceded by titles of each its ancestral suites).\n * As such, using an <em>exact-match</em> fixed pattern against the\n * test name itself will not yield any matches.\n * <br>\n * <strong>Previous filter value will be overwritten on each call!</strong>\n *\n * @public\n * @see [CLI option](../#-grep-regexp-g-regexp)\n * @see {@link Mocha#fgrep}\n * @see {@link Mocha#invert}\n * @param {RegExp|String} re - Regular expression used to select tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title contains `\"match\"`, ignoring case\n * mocha.grep(/match/i);\n * @example\n *\n * // Same as above but with regexp-like string argument\n * mocha.grep('/match/i');\n * @example\n *\n * // ## Anti-example\n * // Given embedded test `it('only-this-test')`...\n * mocha.grep('/^only-this-test$/');    // NO! Use `.only()` to do this!\n */\nMocha.prototype.grep = function (re) {\n  if (utils.isString(re)) {\n    // extract args if it's regex-like, i.e: [string, pattern, flag]\n    var arg = re.match(/^\\/(.*)\\/([gimy]{0,4})$|.*/);\n    this.options.grep = new RegExp(arg[1] || arg[0], arg[2]);\n  } else {\n    this.options.grep = re;\n  }\n  return this;\n};\n\n/**\n * Inverts `grep` matches.\n *\n * @public\n * @see {@link Mocha#grep}\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title does *not* contain `\"match\"`, ignoring case\n * mocha.grep(/match/i).invert();\n */\nMocha.prototype.invert = function () {\n  this.options.invert = true;\n  return this;\n};\n\n/**\n * Enables or disables checking for global variables leaked while running tests.\n *\n * @public\n * @see [CLI option](../#-check-leaks)\n * @param {boolean} [checkLeaks=true] - Whether to check for global variable leaks.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.checkLeaks = function (checkLeaks) {\n  this.options.checkLeaks = checkLeaks !== false;\n  return this;\n};\n\n/**\n * Enables or disables whether or not to dispose after each test run.\n * Disable this to ensure you can run the test suite multiple times.\n * If disabled, be sure to dispose mocha when you're done to prevent memory leaks.\n * @public\n * @see {@link Mocha#dispose}\n * @param {boolean} cleanReferencesAfterRun\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.cleanReferencesAfterRun = function (cleanReferencesAfterRun) {\n  this._cleanReferencesAfterRun = cleanReferencesAfterRun !== false;\n  return this;\n};\n\n/**\n * Manually dispose this mocha instance. Mark this instance as `disposed` and unable to run more tests.\n * It also removes function references to tests functions and hooks, so variables trapped in closures can be cleaned by the garbage collector.\n * @public\n */\nMocha.prototype.dispose = function () {\n  if (this._state === mochaStates.RUNNING) {\n    throw createMochaInstanceAlreadyRunningError('Cannot dispose while the mocha instance is still running tests.');\n  }\n  this.unloadFiles();\n  this._previousRunner && this._previousRunner.dispose();\n  this.suite.dispose();\n  this._state = mochaStates.DISPOSED;\n};\n\n/**\n * Displays full stack trace upon test failure.\n *\n * @public\n * @see [CLI option](../#-full-trace)\n * @param {boolean} [fullTrace=true] - Whether to print full stacktrace upon failure.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.fullTrace = function (fullTrace) {\n  this.options.fullTrace = fullTrace !== false;\n  return this;\n};\n\n/**\n * Specifies whitelist of variable names to be expected in global scope.\n *\n * @public\n * @see [CLI option](../#-global-variable-name)\n * @see {@link Mocha#checkLeaks}\n * @param {String[]|String} global - Accepted global variable name(s).\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Specify variables to be expected in global scope\n * mocha.global(['jQuery', 'MyLib']);\n */\nMocha.prototype.global = function (global) {\n  this.options.global = (this.options.global || []).concat(global).filter(Boolean).filter(function (elt, idx, arr) {\n    return arr.indexOf(elt) === idx;\n  });\n  return this;\n};\n// for backwards compatibility, 'globals' is an alias of 'global'\nMocha.prototype.globals = Mocha.prototype.global;\n\n/**\n * Enables or disables TTY color output by screen-oriented reporters.\n *\n * @public\n * @see [CLI option](../#-color-c-colors)\n * @param {boolean} [color=true] - Whether to enable color output.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.color = function (color) {\n  this.options.color = color !== false;\n  return this;\n};\n\n/**\n * Enables or disables reporter to use inline diffs (rather than +/-)\n * in test failure output.\n *\n * @public\n * @see [CLI option](../#-inline-diffs)\n * @param {boolean} [inlineDiffs=true] - Whether to use inline diffs.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.inlineDiffs = function (inlineDiffs) {\n  this.options.inlineDiffs = inlineDiffs !== false;\n  return this;\n};\n\n/**\n * Enables or disables reporter to include diff in test failure output.\n *\n * @public\n * @see [CLI option](../#-diff)\n * @param {boolean} [diff=true] - Whether to show diff on failure.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.diff = function (diff) {\n  this.options.diff = diff !== false;\n  return this;\n};\n\n/**\n * @summary\n * Sets timeout threshold value.\n *\n * @description\n * A string argument can use shorthand (such as \"2s\") and will be converted.\n * If the value is `0`, timeouts will be disabled.\n *\n * @public\n * @see [CLI option](../#-timeout-ms-t-ms)\n * @see [Timeouts](../#timeouts)\n * @param {number|string} msecs - Timeout threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets timeout to one second\n * mocha.timeout(1000);\n * @example\n *\n * // Same as above but using string argument\n * mocha.timeout('1s');\n */\nMocha.prototype.timeout = function (msecs) {\n  this.suite.timeout(msecs);\n  return this;\n};\n\n/**\n * Sets the number of times to retry failed tests.\n *\n * @public\n * @see [CLI option](../#-retries-n)\n * @see [Retry Tests](../#retry-tests)\n * @param {number} retry - Number of times to retry failed tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Allow any failed test to retry one more time\n * mocha.retries(1);\n */\nMocha.prototype.retries = function (retry) {\n  this.suite.retries(retry);\n  return this;\n};\n\n/**\n * Sets slowness threshold value.\n *\n * @public\n * @see [CLI option](../#-slow-ms-s-ms)\n * @param {number} msecs - Slowness threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets \"slow\" threshold to half a second\n * mocha.slow(500);\n * @example\n *\n * // Same as above but using string argument\n * mocha.slow('0.5s');\n */\nMocha.prototype.slow = function (msecs) {\n  this.suite.slow(msecs);\n  return this;\n};\n\n/**\n * Forces all tests to either accept a `done` callback or return a promise.\n *\n * @public\n * @see [CLI option](../#-async-only-a)\n * @param {boolean} [asyncOnly=true] - Whether to force `done` callback or promise.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.asyncOnly = function (asyncOnly) {\n  this.options.asyncOnly = asyncOnly !== false;\n  return this;\n};\n\n/**\n * Disables syntax highlighting (in browser).\n *\n * @public\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.noHighlighting = function () {\n  this.options.noHighlighting = true;\n  return this;\n};\n\n/**\n * Enables or disables uncaught errors to propagate.\n *\n * @public\n * @see [CLI option](../#-allow-uncaught)\n * @param {boolean} [allowUncaught=true] - Whether to propagate uncaught errors.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.allowUncaught = function (allowUncaught) {\n  this.options.allowUncaught = allowUncaught !== false;\n  return this;\n};\n\n/**\n * @summary\n * Delays root suite execution.\n *\n * @description\n * Used to perform async operations before any suites are run.\n *\n * @public\n * @see [delayed root suite](../#delayed-root-suite)\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.delay = function delay() {\n  this.options.delay = true;\n  return this;\n};\n\n/**\n * Enables or disables running tests in dry-run mode.\n *\n * @public\n * @see [CLI option](../#-dry-run)\n * @param {boolean} [dryRun=true] - Whether to activate dry-run mode.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.dryRun = function (dryRun) {\n  this.options.dryRun = dryRun !== false;\n  return this;\n};\n\n/**\n * Fails test run if no tests encountered with exit-code 1.\n *\n * @public\n * @see [CLI option](../#-fail-zero)\n * @param {boolean} [failZero=true] - Whether to fail test run.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.failZero = function (failZero) {\n  this.options.failZero = failZero !== false;\n  return this;\n};\n\n/**\n * Causes tests marked `only` to fail the suite.\n *\n * @public\n * @see [CLI option](../#-forbid-only)\n * @param {boolean} [forbidOnly=true] - Whether tests marked `only` fail the suite.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.forbidOnly = function (forbidOnly) {\n  this.options.forbidOnly = forbidOnly !== false;\n  return this;\n};\n\n/**\n * Causes pending tests and tests marked `skip` to fail the suite.\n *\n * @public\n * @see [CLI option](../#-forbid-pending)\n * @param {boolean} [forbidPending=true] - Whether pending tests fail the suite.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.forbidPending = function (forbidPending) {\n  this.options.forbidPending = forbidPending !== false;\n  return this;\n};\n\n/**\n * Throws an error if mocha is in the wrong state to be able to transition to a \"running\" state.\n * @private\n */\nMocha.prototype._guardRunningStateTransition = function () {\n  if (this._state === mochaStates.RUNNING) {\n    throw createMochaInstanceAlreadyRunningError('Mocha instance is currently running tests, cannot start a next test run until this one is done', this);\n  }\n  if (this._state === mochaStates.DISPOSED || this._state === mochaStates.REFERENCES_CLEANED) {\n    throw createMochaInstanceAlreadyDisposedError('Mocha instance is already disposed, cannot start a new test run. Please create a new mocha instance. Be sure to set disable `cleanReferencesAfterRun` when you want to reuse the same mocha instance for multiple test runs.', this._cleanReferencesAfterRun, this);\n  }\n};\n\n/**\n * Mocha version as specified by \"package.json\".\n *\n * @name Mocha#version\n * @type string\n * @readonly\n */\nObject.defineProperty(Mocha.prototype, 'version', {\n  value: require('../package.json').version,\n  configurable: false,\n  enumerable: true,\n  writable: false\n});\n\n/**\n * Callback to be invoked when test execution is complete.\n *\n * @private\n * @callback DoneCB\n * @param {number} failures - Number of failures that occurred.\n */\n\n/**\n * Runs root suite and invokes `fn()` when complete.\n *\n * @description\n * To run tests multiple times (or to run tests in files that are\n * already in the `require` cache), make sure to clear them from\n * the cache first!\n *\n * @public\n * @see {@link Mocha#unloadFiles}\n * @see {@link Runner#run}\n * @param {DoneCB} [fn] - Callback invoked when test execution completed.\n * @returns {Runner} runner instance\n * @example\n *\n * // exit with non-zero status if there were test failures\n * mocha.run(failures => process.exitCode = failures ? 1 : 0);\n */\nMocha.prototype.run = function (fn) {\n  this._guardRunningStateTransition();\n  this._state = mochaStates.RUNNING;\n  if (this._previousRunner) {\n    this._previousRunner.dispose();\n    this.suite.reset();\n  }\n  if (this.files.length && !this._lazyLoadFiles) {\n    this.loadFiles();\n  }\n  var suite = this.suite;\n  var options = this.options;\n  options.files = this.files;\n  const runner = new this._runnerClass(suite, {\n    cleanReferencesAfterRun: this._cleanReferencesAfterRun,\n    delay: options.delay,\n    dryRun: options.dryRun,\n    failZero: options.failZero\n  });\n  createStatsCollector(runner);\n  var reporter = new this._reporter(runner, options);\n  runner.checkLeaks = options.checkLeaks === true;\n  runner.fullStackTrace = options.fullTrace;\n  runner.asyncOnly = options.asyncOnly;\n  runner.allowUncaught = options.allowUncaught;\n  runner.forbidOnly = options.forbidOnly;\n  runner.forbidPending = options.forbidPending;\n  if (options.grep) {\n    runner.grep(options.grep, options.invert);\n  }\n  if (options.global) {\n    runner.globals(options.global);\n  }\n  if (options.color !== undefined) {\n    exports.reporters.Base.useColors = options.color;\n  }\n  exports.reporters.Base.inlineDiffs = options.inlineDiffs;\n  exports.reporters.Base.hideDiff = !options.diff;\n  const done = failures => {\n    this._previousRunner = runner;\n    this._state = this._cleanReferencesAfterRun ? mochaStates.REFERENCES_CLEANED : mochaStates.INIT;\n    fn = fn || utils.noop;\n    if (typeof reporter.done === 'function') {\n      reporter.done(failures, fn);\n    } else {\n      fn(failures);\n    }\n  };\n  const runAsync = async runner => {\n    const context = this.options.enableGlobalSetup && this.hasGlobalSetupFixtures() ? await this.runGlobalSetup(runner) : {};\n    const failureCount = await runner.runAsync({\n      files: this.files,\n      options\n    });\n    if (this.options.enableGlobalTeardown && this.hasGlobalTeardownFixtures()) {\n      await this.runGlobalTeardown(runner, {\n        context\n      });\n    }\n    return failureCount;\n  };\n\n  // no \"catch\" here is intentional. errors coming out of\n  // Runner#run are considered uncaught/unhandled and caught\n  // by the `process` event listeners.\n  // also: returning anything other than `runner` would be a breaking\n  // change\n  runAsync(runner).then(done);\n  return runner;\n};\n\n/**\n * Assigns hooks to the root suite\n * @param {MochaRootHookObject} [hooks] - Hooks to assign to root suite\n * @chainable\n */\nMocha.prototype.rootHooks = function rootHooks({\n  beforeAll = [],\n  beforeEach = [],\n  afterAll = [],\n  afterEach = []\n} = {}) {\n  beforeAll = utils.castArray(beforeAll);\n  beforeEach = utils.castArray(beforeEach);\n  afterAll = utils.castArray(afterAll);\n  afterEach = utils.castArray(afterEach);\n  beforeAll.forEach(hook => {\n    this.suite.beforeAll(hook);\n  });\n  beforeEach.forEach(hook => {\n    this.suite.beforeEach(hook);\n  });\n  afterAll.forEach(hook => {\n    this.suite.afterAll(hook);\n  });\n  afterEach.forEach(hook => {\n    this.suite.afterEach(hook);\n  });\n  return this;\n};\n\n/**\n * Toggles parallel mode.\n *\n * Must be run before calling {@link Mocha#run}. Changes the `Runner` class to\n * use; also enables lazy file loading if not already done so.\n *\n * Warning: when passed `false` and lazy loading has been enabled _via any means_ (including calling `parallelMode(true)`), this method will _not_ disable lazy loading. Lazy loading is a prerequisite for parallel\n * mode, but parallel mode is _not_ a prerequisite for lazy loading!\n * @param {boolean} [enable] - If `true`, enable; otherwise disable.\n * @throws If run in browser\n * @throws If Mocha not in `INIT` state\n * @returns {Mocha}\n * @chainable\n * @public\n */\nMocha.prototype.parallelMode = function parallelMode(enable = true) {\n  if (utils.isBrowser()) {\n    throw createUnsupportedError('parallel mode is only supported in Node.js');\n  }\n  const parallel = Boolean(enable);\n  if (parallel === this.options.parallel && this._lazyLoadFiles && this._runnerClass !== exports.Runner) {\n    return this;\n  }\n  if (this._state !== mochaStates.INIT) {\n    throw createUnsupportedError('cannot change parallel mode after having called run()');\n  }\n  this.options.parallel = parallel;\n\n  // swap Runner class\n  this._runnerClass = parallel ? require('./nodejs/parallel-buffered-runner') : exports.Runner;\n\n  // lazyLoadFiles may have been set `true` otherwise (for ESM loading),\n  // so keep `true` if so.\n  return this.lazyLoadFiles(this._lazyLoadFiles || parallel);\n};\n\n/**\n * Disables implicit call to {@link Mocha#loadFiles} in {@link Mocha#run}. This\n * setting is used by watch mode, parallel mode, and for loading ESM files.\n * @todo This should throw if we've already loaded files; such behavior\n * necessitates adding a new state.\n * @param {boolean} [enable] - If `true`, disable eager loading of files in\n * {@link Mocha#run}\n * @chainable\n * @public\n */\nMocha.prototype.lazyLoadFiles = function lazyLoadFiles(enable) {\n  this._lazyLoadFiles = enable === true;\n  debug('set lazy load to %s', enable);\n  return this;\n};\n\n/**\n * Configures one or more global setup fixtures.\n *\n * If given no parameters, _unsets_ any previously-set fixtures.\n * @chainable\n * @public\n * @param {MochaGlobalFixture|MochaGlobalFixture[]} [setupFns] - Global setup fixture(s)\n * @returns {Mocha}\n */\nMocha.prototype.globalSetup = function globalSetup(setupFns = []) {\n  setupFns = utils.castArray(setupFns);\n  this.options.globalSetup = setupFns;\n  debug('configured %d global setup functions', setupFns.length);\n  return this;\n};\n\n/**\n * Configures one or more global teardown fixtures.\n *\n * If given no parameters, _unsets_ any previously-set fixtures.\n * @chainable\n * @public\n * @param {MochaGlobalFixture|MochaGlobalFixture[]} [teardownFns] - Global teardown fixture(s)\n * @returns {Mocha}\n */\nMocha.prototype.globalTeardown = function globalTeardown(teardownFns = []) {\n  teardownFns = utils.castArray(teardownFns);\n  this.options.globalTeardown = teardownFns;\n  debug('configured %d global teardown functions', teardownFns.length);\n  return this;\n};\n\n/**\n * Run any global setup fixtures sequentially, if any.\n *\n * This is _automatically called_ by {@link Mocha#run} _unless_ the `runGlobalSetup` option is `false`; see {@link Mocha#enableGlobalSetup}.\n *\n * The context object this function resolves with should be consumed by {@link Mocha#runGlobalTeardown}.\n * @param {object} [context] - Context object if already have one\n * @public\n * @returns {Promise<object>} Context object\n */\nMocha.prototype.runGlobalSetup = async function runGlobalSetup(context = {}) {\n  const {\n    globalSetup\n  } = this.options;\n  if (globalSetup && globalSetup.length) {\n    debug('run(): global setup starting');\n    await this._runGlobalFixtures(globalSetup, context);\n    debug('run(): global setup complete');\n  }\n  return context;\n};\n\n/**\n * Run any global teardown fixtures sequentially, if any.\n *\n * This is _automatically called_ by {@link Mocha#run} _unless_ the `runGlobalTeardown` option is `false`; see {@link Mocha#enableGlobalTeardown}.\n *\n * Should be called with context object returned by {@link Mocha#runGlobalSetup}, if applicable.\n * @param {object} [context] - Context object if already have one\n * @public\n * @returns {Promise<object>} Context object\n */\nMocha.prototype.runGlobalTeardown = async function runGlobalTeardown(context = {}) {\n  const {\n    globalTeardown\n  } = this.options;\n  if (globalTeardown && globalTeardown.length) {\n    debug('run(): global teardown starting');\n    await this._runGlobalFixtures(globalTeardown, context);\n  }\n  debug('run(): global teardown complete');\n  return context;\n};\n\n/**\n * Run global fixtures sequentially with context `context`\n * @private\n * @param {MochaGlobalFixture[]} [fixtureFns] - Fixtures to run\n * @param {object} [context] - context object\n * @returns {Promise<object>} context object\n */\nMocha.prototype._runGlobalFixtures = async function _runGlobalFixtures(fixtureFns = [], context = {}) {\n  for await (const fixtureFn of fixtureFns) {\n    await fixtureFn.call(context);\n  }\n  return context;\n};\n\n/**\n * Toggle execution of any global setup fixture(s)\n *\n * @chainable\n * @public\n * @param {boolean } [enabled=true] - If `false`, do not run global setup fixture\n * @returns {Mocha}\n */\nMocha.prototype.enableGlobalSetup = function enableGlobalSetup(enabled = true) {\n  this.options.enableGlobalSetup = Boolean(enabled);\n  return this;\n};\n\n/**\n * Toggle execution of any global teardown fixture(s)\n *\n * @chainable\n * @public\n * @param {boolean } [enabled=true] - If `false`, do not run global teardown fixture\n * @returns {Mocha}\n */\nMocha.prototype.enableGlobalTeardown = function enableGlobalTeardown(enabled = true) {\n  this.options.enableGlobalTeardown = Boolean(enabled);\n  return this;\n};\n\n/**\n * Returns `true` if one or more global setup fixtures have been supplied.\n * @public\n * @returns {boolean}\n */\nMocha.prototype.hasGlobalSetupFixtures = function hasGlobalSetupFixtures() {\n  return Boolean(this.options.globalSetup.length);\n};\n\n/**\n * Returns `true` if one or more global teardown fixtures have been supplied.\n * @public\n * @returns {boolean}\n */\nMocha.prototype.hasGlobalTeardownFixtures = function hasGlobalTeardownFixtures() {\n  return Boolean(this.options.globalTeardown.length);\n};\n\n/**\n * An alternative way to define root hooks that works with parallel runs.\n * @typedef {Object} MochaRootHookObject\n * @property {Function|Function[]} [beforeAll] - \"Before all\" hook(s)\n * @property {Function|Function[]} [beforeEach] - \"Before each\" hook(s)\n * @property {Function|Function[]} [afterAll] - \"After all\" hook(s)\n * @property {Function|Function[]} [afterEach] - \"After each\" hook(s)\n */\n\n/**\n * An function that returns a {@link MochaRootHookObject}, either sync or async.\n   @callback MochaRootHookFunction\n * @returns {MochaRootHookObject|Promise<MochaRootHookObject>}\n */\n\n/**\n * A function that's invoked _once_ which is either sync or async.\n * Can be a \"teardown\" or \"setup\".  These will all share the same context.\n * @callback MochaGlobalFixture\n * @returns {void|Promise<void>}\n */\n\n/**\n * An object making up all necessary parts of a plugin loader and aggregator\n * @typedef {Object} PluginDefinition\n * @property {string} exportName - Named export to use\n * @property {string} [optionName] - Option name for Mocha constructor (use `exportName` if omitted)\n * @property {PluginValidator} [validate] - Validator function\n * @property {PluginFinalizer} [finalize] - Finalizer/aggregator function\n */\n\n/**\n * A (sync) function to assert a user-supplied plugin implementation is valid.\n *\n * Defined in a {@link PluginDefinition}.\n\n * @callback PluginValidator\n * @param {*} value - Value to check\n * @this {PluginDefinition}\n * @returns {void}\n */\n\n/**\n * A function to finalize plugins impls of a particular ilk\n * @callback PluginFinalizer\n * @param {Array<*>} impls - User-supplied implementations\n * @returns {Promise<*>|*}\n */","map":{"version":3,"names":["escapeRe","require","path","builtinReporters","utils","mocharc","Suite","esmUtils","createStatsCollector","createInvalidReporterError","createInvalidInterfaceError","createMochaInstanceAlreadyDisposedError","createMochaInstanceAlreadyRunningError","createUnsupportedError","EVENT_FILE_PRE_REQUIRE","EVENT_FILE_POST_REQUIRE","EVENT_FILE_REQUIRE","constants","debug","exports","module","Mocha","mochaStates","defineConstants","INIT","RUNNING","REFERENCES_CLEANED","DISPOSED","isBrowser","paths","cwd","push","join","interfaces","reporters","Runnable","Context","Runner","Hook","Test","currentContext","afterEach","args","teardown","apply","after","suiteTeardown","beforeEach","setup","before","suiteSetup","describe","suite","only","skip","it","test","xdescribe","xit","run","options","files","_cleanReferencesAfterRun","_state","grep","fgrep","ui","reporter","reporterOption","reporterOptions","slow","global","timeout","retries","forEach","opt","rootHooks","_runnerClass","_lazyLoadFiles","isWorker","Boolean","globalSetup","globalTeardown","enableGlobalSetup","enableGlobalTeardown","parallel","jobs","parallelMode","prototype","bail","addFile","file","reporterName","_reporter","foundReporter","resolve","err","message","e","bindInterface","on","context","loadFiles","fn","self","emit","loadFilesAsync","esmDecorator","lazyLoadFiles","resultModule","unloadFile","unloadFiles","str","RegExp","re","isString","arg","match","invert","checkLeaks","cleanReferencesAfterRun","dispose","_previousRunner","fullTrace","concat","filter","elt","idx","arr","indexOf","globals","color","inlineDiffs","diff","msecs","retry","asyncOnly","noHighlighting","allowUncaught","delay","dryRun","failZero","forbidOnly","forbidPending","_guardRunningStateTransition","Object","defineProperty","value","version","configurable","enumerable","writable","reset","length","runner","fullStackTrace","undefined","Base","useColors","hideDiff","done","failures","noop","runAsync","hasGlobalSetupFixtures","runGlobalSetup","failureCount","hasGlobalTeardownFixtures","runGlobalTeardown","then","beforeAll","afterAll","castArray","hook","enable","setupFns","teardownFns","_runGlobalFixtures","fixtureFns","fixtureFn","call","enabled"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/mocha/lib/mocha.js"],"sourcesContent":["'use strict';\n\n/*!\n * mocha\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar escapeRe = require('escape-string-regexp');\nvar path = require('path');\nvar builtinReporters = require('./reporters');\nvar utils = require('./utils');\nvar mocharc = require('./mocharc.json');\nvar Suite = require('./suite');\nvar esmUtils = require('./nodejs/esm-utils');\nvar createStatsCollector = require('./stats-collector');\nconst {\n  createInvalidReporterError,\n  createInvalidInterfaceError,\n  createMochaInstanceAlreadyDisposedError,\n  createMochaInstanceAlreadyRunningError,\n  createUnsupportedError\n} = require('./errors');\nconst {EVENT_FILE_PRE_REQUIRE, EVENT_FILE_POST_REQUIRE, EVENT_FILE_REQUIRE} =\n  Suite.constants;\nvar debug = require('debug')('mocha:mocha');\n\nexports = module.exports = Mocha;\n\n/**\n * A Mocha instance is a finite state machine.\n * These are the states it can be in.\n * @private\n */\nvar mochaStates = utils.defineConstants({\n  /**\n   * Initial state of the mocha instance\n   * @private\n   */\n  INIT: 'init',\n  /**\n   * Mocha instance is running tests\n   * @private\n   */\n  RUNNING: 'running',\n  /**\n   * Mocha instance is done running tests and references to test functions and hooks are cleaned.\n   * You can reset this state by unloading the test files.\n   * @private\n   */\n  REFERENCES_CLEANED: 'referencesCleaned',\n  /**\n   * Mocha instance is disposed and can no longer be used.\n   * @private\n   */\n  DISPOSED: 'disposed'\n});\n\n/**\n * To require local UIs and reporters when running in node.\n */\n\nif (!utils.isBrowser() && typeof module.paths !== 'undefined') {\n  var cwd = utils.cwd();\n  module.paths.push(cwd, path.join(cwd, 'node_modules'));\n}\n\n/**\n * Expose internals.\n * @private\n */\n\nexports.utils = utils;\nexports.interfaces = require('./interfaces');\n/**\n * @public\n * @memberof Mocha\n */\nexports.reporters = builtinReporters;\nexports.Runnable = require('./runnable');\nexports.Context = require('./context');\n/**\n *\n * @memberof Mocha\n */\nexports.Runner = require('./runner');\nexports.Suite = Suite;\nexports.Hook = require('./hook');\nexports.Test = require('./test');\n\nlet currentContext;\nexports.afterEach = function (...args) {\n  return (currentContext.afterEach || currentContext.teardown).apply(\n    this,\n    args\n  );\n};\nexports.after = function (...args) {\n  return (currentContext.after || currentContext.suiteTeardown).apply(\n    this,\n    args\n  );\n};\nexports.beforeEach = function (...args) {\n  return (currentContext.beforeEach || currentContext.setup).apply(this, args);\n};\nexports.before = function (...args) {\n  return (currentContext.before || currentContext.suiteSetup).apply(this, args);\n};\nexports.describe = function (...args) {\n  return (currentContext.describe || currentContext.suite).apply(this, args);\n};\nexports.describe.only = function (...args) {\n  return (currentContext.describe || currentContext.suite).only.apply(\n    this,\n    args\n  );\n};\nexports.describe.skip = function (...args) {\n  return (currentContext.describe || currentContext.suite).skip.apply(\n    this,\n    args\n  );\n};\nexports.it = function (...args) {\n  return (currentContext.it || currentContext.test).apply(this, args);\n};\nexports.it.only = function (...args) {\n  return (currentContext.it || currentContext.test).only.apply(this, args);\n};\nexports.it.skip = function (...args) {\n  return (currentContext.it || currentContext.test).skip.apply(this, args);\n};\nexports.xdescribe = exports.describe.skip;\nexports.xit = exports.it.skip;\nexports.setup = exports.beforeEach;\nexports.suiteSetup = exports.before;\nexports.suiteTeardown = exports.after;\nexports.suite = exports.describe;\nexports.teardown = exports.afterEach;\nexports.test = exports.it;\nexports.run = function (...args) {\n  return currentContext.run.apply(this, args);\n};\n\n/**\n * Constructs a new Mocha instance with `options`.\n *\n * @public\n * @class Mocha\n * @param {Object} [options] - Settings object.\n * @param {boolean} [options.allowUncaught] - Propagate uncaught errors?\n * @param {boolean} [options.asyncOnly] - Force `done` callback or promise?\n * @param {boolean} [options.bail] - Bail after first test failure?\n * @param {boolean} [options.checkLeaks] - Check for global variable leaks?\n * @param {boolean} [options.color] - Color TTY output from reporter?\n * @param {boolean} [options.delay] - Delay root suite execution?\n * @param {boolean} [options.diff] - Show diff on failure?\n * @param {boolean} [options.dryRun] - Report tests without running them?\n * @param {boolean} [options.failZero] - Fail test run if zero tests?\n * @param {string} [options.fgrep] - Test filter given string.\n * @param {boolean} [options.forbidOnly] - Tests marked `only` fail the suite?\n * @param {boolean} [options.forbidPending] - Pending tests fail the suite?\n * @param {boolean} [options.fullTrace] - Full stacktrace upon failure?\n * @param {string[]} [options.global] - Variables expected in global scope.\n * @param {RegExp|string} [options.grep] - Test filter given regular expression.\n * @param {boolean} [options.inlineDiffs] - Display inline diffs?\n * @param {boolean} [options.invert] - Invert test filter matches?\n * @param {boolean} [options.noHighlighting] - Disable syntax highlighting?\n * @param {string|constructor} [options.reporter] - Reporter name or constructor.\n * @param {Object} [options.reporterOption] - Reporter settings object.\n * @param {number} [options.retries] - Number of times to retry failed tests.\n * @param {number} [options.slow] - Slow threshold value.\n * @param {number|string} [options.timeout] - Timeout threshold value.\n * @param {string} [options.ui] - Interface name.\n * @param {boolean} [options.parallel] - Run jobs in parallel.\n * @param {number} [options.jobs] - Max number of worker processes for parallel runs.\n * @param {MochaRootHookObject} [options.rootHooks] - Hooks to bootstrap the root suite with.\n * @param {string[]} [options.require] - Pathname of `rootHooks` plugin for parallel runs.\n * @param {boolean} [options.isWorker] - Should be `true` if `Mocha` process is running in a worker process.\n */\nfunction Mocha(options = {}) {\n  options = {...mocharc, ...options};\n  this.files = [];\n  this.options = options;\n  // root suite\n  this.suite = new exports.Suite('', new exports.Context(), true);\n  this._cleanReferencesAfterRun = true;\n  this._state = mochaStates.INIT;\n\n  this.grep(options.grep)\n    .fgrep(options.fgrep)\n    .ui(options.ui)\n    .reporter(\n      options.reporter,\n      options.reporterOption || options.reporterOptions // for backwards compatibility\n    )\n    .slow(options.slow)\n    .global(options.global);\n\n  // this guard exists because Suite#timeout does not consider `undefined` to be valid input\n  if (typeof options.timeout !== 'undefined') {\n    this.timeout(options.timeout === false ? 0 : options.timeout);\n  }\n\n  if ('retries' in options) {\n    this.retries(options.retries);\n  }\n\n  [\n    'allowUncaught',\n    'asyncOnly',\n    'bail',\n    'checkLeaks',\n    'color',\n    'delay',\n    'diff',\n    'dryRun',\n    'failZero',\n    'forbidOnly',\n    'forbidPending',\n    'fullTrace',\n    'inlineDiffs',\n    'invert'\n  ].forEach(function (opt) {\n    if (options[opt]) {\n      this[opt]();\n    }\n  }, this);\n\n  if (options.rootHooks) {\n    this.rootHooks(options.rootHooks);\n  }\n\n  /**\n   * The class which we'll instantiate in {@link Mocha#run}.  Defaults to\n   * {@link Runner} in serial mode; changes in parallel mode.\n   * @memberof Mocha\n   * @private\n   */\n  this._runnerClass = exports.Runner;\n\n  /**\n   * Whether or not to call {@link Mocha#loadFiles} implicitly when calling\n   * {@link Mocha#run}.  If this is `true`, then it's up to the consumer to call\n   * {@link Mocha#loadFiles} _or_ {@link Mocha#loadFilesAsync}.\n   * @private\n   * @memberof Mocha\n   */\n  this._lazyLoadFiles = false;\n\n  /**\n   * It's useful for a Mocha instance to know if it's running in a worker process.\n   * We could derive this via other means, but it's helpful to have a flag to refer to.\n   * @memberof Mocha\n   * @private\n   */\n  this.isWorker = Boolean(options.isWorker);\n\n  this.globalSetup(options.globalSetup)\n    .globalTeardown(options.globalTeardown)\n    .enableGlobalSetup(options.enableGlobalSetup)\n    .enableGlobalTeardown(options.enableGlobalTeardown);\n\n  if (\n    options.parallel &&\n    (typeof options.jobs === 'undefined' || options.jobs > 1)\n  ) {\n    debug('attempting to enable parallel mode');\n    this.parallelMode(true);\n  }\n}\n\n/**\n * Enables or disables bailing on the first failure.\n *\n * @public\n * @see [CLI option](../#-bail-b)\n * @param {boolean} [bail=true] - Whether to bail on first error.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.bail = function (bail) {\n  this.suite.bail(bail !== false);\n  return this;\n};\n\n/**\n * @summary\n * Adds `file` to be loaded for execution.\n *\n * @description\n * Useful for generic setup code that must be included within test suite.\n *\n * @public\n * @see [CLI option](../#-file-filedirectoryglob)\n * @param {string} file - Pathname of file to be loaded.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.addFile = function (file) {\n  this.files.push(file);\n  return this;\n};\n\n/**\n * Sets reporter to `reporter`, defaults to \"spec\".\n *\n * @public\n * @see [CLI option](../#-reporter-name-r-name)\n * @see [Reporters](../#reporters)\n * @param {String|Function} reporterName - Reporter name or constructor.\n * @param {Object} [reporterOptions] - Options used to configure the reporter.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested reporter cannot be loaded\n * @example\n *\n * // Use XUnit reporter and direct its output to file\n * mocha.reporter('xunit', { output: '/path/to/testspec.xunit.xml' });\n */\nMocha.prototype.reporter = function (reporterName, reporterOptions) {\n  if (typeof reporterName === 'function') {\n    this._reporter = reporterName;\n  } else {\n    reporterName = reporterName || 'spec';\n    var reporter;\n    // Try to load a built-in reporter.\n    if (builtinReporters[reporterName]) {\n      reporter = builtinReporters[reporterName];\n    }\n    // Try to load reporters from process.cwd() and node_modules\n    if (!reporter) {\n      let foundReporter;\n      try {\n        foundReporter = require.resolve(reporterName);\n        reporter = require(foundReporter);\n      } catch (err) {\n        if (foundReporter) {\n          throw createInvalidReporterError(err.message, foundReporter);\n        }\n        // Try to load reporters from a cwd-relative path\n        try {\n          reporter = require(path.resolve(reporterName));\n        } catch (e) {\n          throw createInvalidReporterError(e.message, reporterName);\n        }\n      }\n    }\n    this._reporter = reporter;\n  }\n  this.options.reporterOption = reporterOptions;\n  // alias option name is used in built-in reporters xunit/tap/progress\n  this.options.reporterOptions = reporterOptions;\n  return this;\n};\n\n/**\n * Sets test UI `name`, defaults to \"bdd\".\n *\n * @public\n * @see [CLI option](../#-ui-name-u-name)\n * @see [Interface DSLs](../#interfaces)\n * @param {string|Function} [ui=bdd] - Interface name or class.\n * @returns {Mocha} this\n * @chainable\n * @throws {Error} if requested interface cannot be loaded\n */\nMocha.prototype.ui = function (ui) {\n  var bindInterface;\n  if (typeof ui === 'function') {\n    bindInterface = ui;\n  } else {\n    ui = ui || 'bdd';\n    bindInterface = exports.interfaces[ui];\n    if (!bindInterface) {\n      try {\n        bindInterface = require(ui);\n      } catch (err) {\n        throw createInvalidInterfaceError(`invalid interface '${ui}'`, ui);\n      }\n    }\n  }\n  bindInterface(this.suite);\n\n  this.suite.on(EVENT_FILE_PRE_REQUIRE, function (context) {\n    currentContext = context;\n  });\n\n  return this;\n};\n\n/**\n * Loads `files` prior to execution. Does not support ES Modules.\n *\n * @description\n * The implementation relies on Node's `require` to execute\n * the test interface functions and will be subject to its cache.\n * Supports only CommonJS modules. To load ES modules, use Mocha#loadFilesAsync.\n *\n * @private\n * @see {@link Mocha#addFile}\n * @see {@link Mocha#run}\n * @see {@link Mocha#unloadFiles}\n * @see {@link Mocha#loadFilesAsync}\n * @param {Function} [fn] - Callback invoked upon completion.\n */\nMocha.prototype.loadFiles = function (fn) {\n  var self = this;\n  var suite = this.suite;\n  this.files.forEach(function (file) {\n    file = path.resolve(file);\n    suite.emit(EVENT_FILE_PRE_REQUIRE, global, file, self);\n    suite.emit(EVENT_FILE_REQUIRE, require(file), file, self);\n    suite.emit(EVENT_FILE_POST_REQUIRE, global, file, self);\n  });\n  fn && fn();\n};\n\n/**\n * Loads `files` prior to execution. Supports Node ES Modules.\n *\n * @description\n * The implementation relies on Node's `require` and `import` to execute\n * the test interface functions and will be subject to its cache.\n * Supports both CJS and ESM modules.\n *\n * @public\n * @see {@link Mocha#addFile}\n * @see {@link Mocha#run}\n * @see {@link Mocha#unloadFiles}\n * @param {Object} [options] - Settings object.\n * @param {Function} [options.esmDecorator] - Function invoked on esm module name right before importing it. By default will passthrough as is.\n * @returns {Promise}\n * @example\n *\n * // loads ESM (and CJS) test files asynchronously, then runs root suite\n * mocha.loadFilesAsync()\n *   .then(() => mocha.run(failures => process.exitCode = failures ? 1 : 0))\n *   .catch(() => process.exitCode = 1);\n */\nMocha.prototype.loadFilesAsync = function ({esmDecorator} = {}) {\n  var self = this;\n  var suite = this.suite;\n  this.lazyLoadFiles(true);\n\n  return esmUtils.loadFilesAsync(\n    this.files,\n    function (file) {\n      suite.emit(EVENT_FILE_PRE_REQUIRE, global, file, self);\n    },\n    function (file, resultModule) {\n      suite.emit(EVENT_FILE_REQUIRE, resultModule, file, self);\n      suite.emit(EVENT_FILE_POST_REQUIRE, global, file, self);\n    },\n    esmDecorator\n  );\n};\n\n/**\n * Removes a previously loaded file from Node's `require` cache.\n *\n * @private\n * @static\n * @see {@link Mocha#unloadFiles}\n * @param {string} file - Pathname of file to be unloaded.\n */\nMocha.unloadFile = function (file) {\n  if (utils.isBrowser()) {\n    throw createUnsupportedError(\n      'unloadFile() is only supported in a Node.js environment'\n    );\n  }\n  return require('./nodejs/file-unloader').unloadFile(file);\n};\n\n/**\n * Unloads `files` from Node's `require` cache.\n *\n * @description\n * This allows required files to be \"freshly\" reloaded, providing the ability\n * to reuse a Mocha instance programmatically.\n * Note: does not clear ESM module files from the cache\n *\n * <strong>Intended for consumers &mdash; not used internally</strong>\n *\n * @public\n * @see {@link Mocha#run}\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.unloadFiles = function () {\n  if (this._state === mochaStates.DISPOSED) {\n    throw createMochaInstanceAlreadyDisposedError(\n      'Mocha instance is already disposed, it cannot be used again.',\n      this._cleanReferencesAfterRun,\n      this\n    );\n  }\n\n  this.files.forEach(function (file) {\n    Mocha.unloadFile(file);\n  });\n  this._state = mochaStates.INIT;\n  return this;\n};\n\n/**\n * Sets `grep` filter after escaping RegExp special characters.\n *\n * @public\n * @see {@link Mocha#grep}\n * @param {string} str - Value to be converted to a regexp.\n * @returns {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title begins with `\"foo\"` followed by a period\n * mocha.fgrep('foo.');\n */\nMocha.prototype.fgrep = function (str) {\n  if (!str) {\n    return this;\n  }\n  return this.grep(new RegExp(escapeRe(str)));\n};\n\n/**\n * @summary\n * Sets `grep` filter used to select specific tests for execution.\n *\n * @description\n * If `re` is a regexp-like string, it will be converted to regexp.\n * The regexp is tested against the full title of each test (i.e., the\n * name of the test preceded by titles of each its ancestral suites).\n * As such, using an <em>exact-match</em> fixed pattern against the\n * test name itself will not yield any matches.\n * <br>\n * <strong>Previous filter value will be overwritten on each call!</strong>\n *\n * @public\n * @see [CLI option](../#-grep-regexp-g-regexp)\n * @see {@link Mocha#fgrep}\n * @see {@link Mocha#invert}\n * @param {RegExp|String} re - Regular expression used to select tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title contains `\"match\"`, ignoring case\n * mocha.grep(/match/i);\n * @example\n *\n * // Same as above but with regexp-like string argument\n * mocha.grep('/match/i');\n * @example\n *\n * // ## Anti-example\n * // Given embedded test `it('only-this-test')`...\n * mocha.grep('/^only-this-test$/');    // NO! Use `.only()` to do this!\n */\nMocha.prototype.grep = function (re) {\n  if (utils.isString(re)) {\n    // extract args if it's regex-like, i.e: [string, pattern, flag]\n    var arg = re.match(/^\\/(.*)\\/([gimy]{0,4})$|.*/);\n    this.options.grep = new RegExp(arg[1] || arg[0], arg[2]);\n  } else {\n    this.options.grep = re;\n  }\n  return this;\n};\n\n/**\n * Inverts `grep` matches.\n *\n * @public\n * @see {@link Mocha#grep}\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Select tests whose full title does *not* contain `\"match\"`, ignoring case\n * mocha.grep(/match/i).invert();\n */\nMocha.prototype.invert = function () {\n  this.options.invert = true;\n  return this;\n};\n\n/**\n * Enables or disables checking for global variables leaked while running tests.\n *\n * @public\n * @see [CLI option](../#-check-leaks)\n * @param {boolean} [checkLeaks=true] - Whether to check for global variable leaks.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.checkLeaks = function (checkLeaks) {\n  this.options.checkLeaks = checkLeaks !== false;\n  return this;\n};\n\n/**\n * Enables or disables whether or not to dispose after each test run.\n * Disable this to ensure you can run the test suite multiple times.\n * If disabled, be sure to dispose mocha when you're done to prevent memory leaks.\n * @public\n * @see {@link Mocha#dispose}\n * @param {boolean} cleanReferencesAfterRun\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.cleanReferencesAfterRun = function (cleanReferencesAfterRun) {\n  this._cleanReferencesAfterRun = cleanReferencesAfterRun !== false;\n  return this;\n};\n\n/**\n * Manually dispose this mocha instance. Mark this instance as `disposed` and unable to run more tests.\n * It also removes function references to tests functions and hooks, so variables trapped in closures can be cleaned by the garbage collector.\n * @public\n */\nMocha.prototype.dispose = function () {\n  if (this._state === mochaStates.RUNNING) {\n    throw createMochaInstanceAlreadyRunningError(\n      'Cannot dispose while the mocha instance is still running tests.'\n    );\n  }\n  this.unloadFiles();\n  this._previousRunner && this._previousRunner.dispose();\n  this.suite.dispose();\n  this._state = mochaStates.DISPOSED;\n};\n\n/**\n * Displays full stack trace upon test failure.\n *\n * @public\n * @see [CLI option](../#-full-trace)\n * @param {boolean} [fullTrace=true] - Whether to print full stacktrace upon failure.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.fullTrace = function (fullTrace) {\n  this.options.fullTrace = fullTrace !== false;\n  return this;\n};\n\n/**\n * Specifies whitelist of variable names to be expected in global scope.\n *\n * @public\n * @see [CLI option](../#-global-variable-name)\n * @see {@link Mocha#checkLeaks}\n * @param {String[]|String} global - Accepted global variable name(s).\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Specify variables to be expected in global scope\n * mocha.global(['jQuery', 'MyLib']);\n */\nMocha.prototype.global = function (global) {\n  this.options.global = (this.options.global || [])\n    .concat(global)\n    .filter(Boolean)\n    .filter(function (elt, idx, arr) {\n      return arr.indexOf(elt) === idx;\n    });\n  return this;\n};\n// for backwards compatibility, 'globals' is an alias of 'global'\nMocha.prototype.globals = Mocha.prototype.global;\n\n/**\n * Enables or disables TTY color output by screen-oriented reporters.\n *\n * @public\n * @see [CLI option](../#-color-c-colors)\n * @param {boolean} [color=true] - Whether to enable color output.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.color = function (color) {\n  this.options.color = color !== false;\n  return this;\n};\n\n/**\n * Enables or disables reporter to use inline diffs (rather than +/-)\n * in test failure output.\n *\n * @public\n * @see [CLI option](../#-inline-diffs)\n * @param {boolean} [inlineDiffs=true] - Whether to use inline diffs.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.inlineDiffs = function (inlineDiffs) {\n  this.options.inlineDiffs = inlineDiffs !== false;\n  return this;\n};\n\n/**\n * Enables or disables reporter to include diff in test failure output.\n *\n * @public\n * @see [CLI option](../#-diff)\n * @param {boolean} [diff=true] - Whether to show diff on failure.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.diff = function (diff) {\n  this.options.diff = diff !== false;\n  return this;\n};\n\n/**\n * @summary\n * Sets timeout threshold value.\n *\n * @description\n * A string argument can use shorthand (such as \"2s\") and will be converted.\n * If the value is `0`, timeouts will be disabled.\n *\n * @public\n * @see [CLI option](../#-timeout-ms-t-ms)\n * @see [Timeouts](../#timeouts)\n * @param {number|string} msecs - Timeout threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets timeout to one second\n * mocha.timeout(1000);\n * @example\n *\n * // Same as above but using string argument\n * mocha.timeout('1s');\n */\nMocha.prototype.timeout = function (msecs) {\n  this.suite.timeout(msecs);\n  return this;\n};\n\n/**\n * Sets the number of times to retry failed tests.\n *\n * @public\n * @see [CLI option](../#-retries-n)\n * @see [Retry Tests](../#retry-tests)\n * @param {number} retry - Number of times to retry failed tests.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Allow any failed test to retry one more time\n * mocha.retries(1);\n */\nMocha.prototype.retries = function (retry) {\n  this.suite.retries(retry);\n  return this;\n};\n\n/**\n * Sets slowness threshold value.\n *\n * @public\n * @see [CLI option](../#-slow-ms-s-ms)\n * @param {number} msecs - Slowness threshold value.\n * @return {Mocha} this\n * @chainable\n * @example\n *\n * // Sets \"slow\" threshold to half a second\n * mocha.slow(500);\n * @example\n *\n * // Same as above but using string argument\n * mocha.slow('0.5s');\n */\nMocha.prototype.slow = function (msecs) {\n  this.suite.slow(msecs);\n  return this;\n};\n\n/**\n * Forces all tests to either accept a `done` callback or return a promise.\n *\n * @public\n * @see [CLI option](../#-async-only-a)\n * @param {boolean} [asyncOnly=true] - Whether to force `done` callback or promise.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.asyncOnly = function (asyncOnly) {\n  this.options.asyncOnly = asyncOnly !== false;\n  return this;\n};\n\n/**\n * Disables syntax highlighting (in browser).\n *\n * @public\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.noHighlighting = function () {\n  this.options.noHighlighting = true;\n  return this;\n};\n\n/**\n * Enables or disables uncaught errors to propagate.\n *\n * @public\n * @see [CLI option](../#-allow-uncaught)\n * @param {boolean} [allowUncaught=true] - Whether to propagate uncaught errors.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.allowUncaught = function (allowUncaught) {\n  this.options.allowUncaught = allowUncaught !== false;\n  return this;\n};\n\n/**\n * @summary\n * Delays root suite execution.\n *\n * @description\n * Used to perform async operations before any suites are run.\n *\n * @public\n * @see [delayed root suite](../#delayed-root-suite)\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.delay = function delay() {\n  this.options.delay = true;\n  return this;\n};\n\n/**\n * Enables or disables running tests in dry-run mode.\n *\n * @public\n * @see [CLI option](../#-dry-run)\n * @param {boolean} [dryRun=true] - Whether to activate dry-run mode.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.dryRun = function (dryRun) {\n  this.options.dryRun = dryRun !== false;\n  return this;\n};\n\n/**\n * Fails test run if no tests encountered with exit-code 1.\n *\n * @public\n * @see [CLI option](../#-fail-zero)\n * @param {boolean} [failZero=true] - Whether to fail test run.\n * @return {Mocha} this\n * @chainable\n */\nMocha.prototype.failZero = function (failZero) {\n  this.options.failZero = failZero !== false;\n  return this;\n};\n\n/**\n * Causes tests marked `only` to fail the suite.\n *\n * @public\n * @see [CLI option](../#-forbid-only)\n * @param {boolean} [forbidOnly=true] - Whether tests marked `only` fail the suite.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.forbidOnly = function (forbidOnly) {\n  this.options.forbidOnly = forbidOnly !== false;\n  return this;\n};\n\n/**\n * Causes pending tests and tests marked `skip` to fail the suite.\n *\n * @public\n * @see [CLI option](../#-forbid-pending)\n * @param {boolean} [forbidPending=true] - Whether pending tests fail the suite.\n * @returns {Mocha} this\n * @chainable\n */\nMocha.prototype.forbidPending = function (forbidPending) {\n  this.options.forbidPending = forbidPending !== false;\n  return this;\n};\n\n/**\n * Throws an error if mocha is in the wrong state to be able to transition to a \"running\" state.\n * @private\n */\nMocha.prototype._guardRunningStateTransition = function () {\n  if (this._state === mochaStates.RUNNING) {\n    throw createMochaInstanceAlreadyRunningError(\n      'Mocha instance is currently running tests, cannot start a next test run until this one is done',\n      this\n    );\n  }\n  if (\n    this._state === mochaStates.DISPOSED ||\n    this._state === mochaStates.REFERENCES_CLEANED\n  ) {\n    throw createMochaInstanceAlreadyDisposedError(\n      'Mocha instance is already disposed, cannot start a new test run. Please create a new mocha instance. Be sure to set disable `cleanReferencesAfterRun` when you want to reuse the same mocha instance for multiple test runs.',\n      this._cleanReferencesAfterRun,\n      this\n    );\n  }\n};\n\n/**\n * Mocha version as specified by \"package.json\".\n *\n * @name Mocha#version\n * @type string\n * @readonly\n */\nObject.defineProperty(Mocha.prototype, 'version', {\n  value: require('../package.json').version,\n  configurable: false,\n  enumerable: true,\n  writable: false\n});\n\n/**\n * Callback to be invoked when test execution is complete.\n *\n * @private\n * @callback DoneCB\n * @param {number} failures - Number of failures that occurred.\n */\n\n/**\n * Runs root suite and invokes `fn()` when complete.\n *\n * @description\n * To run tests multiple times (or to run tests in files that are\n * already in the `require` cache), make sure to clear them from\n * the cache first!\n *\n * @public\n * @see {@link Mocha#unloadFiles}\n * @see {@link Runner#run}\n * @param {DoneCB} [fn] - Callback invoked when test execution completed.\n * @returns {Runner} runner instance\n * @example\n *\n * // exit with non-zero status if there were test failures\n * mocha.run(failures => process.exitCode = failures ? 1 : 0);\n */\nMocha.prototype.run = function (fn) {\n  this._guardRunningStateTransition();\n  this._state = mochaStates.RUNNING;\n  if (this._previousRunner) {\n    this._previousRunner.dispose();\n    this.suite.reset();\n  }\n  if (this.files.length && !this._lazyLoadFiles) {\n    this.loadFiles();\n  }\n  var suite = this.suite;\n  var options = this.options;\n  options.files = this.files;\n  const runner = new this._runnerClass(suite, {\n    cleanReferencesAfterRun: this._cleanReferencesAfterRun,\n    delay: options.delay,\n    dryRun: options.dryRun,\n    failZero: options.failZero\n  });\n  createStatsCollector(runner);\n  var reporter = new this._reporter(runner, options);\n  runner.checkLeaks = options.checkLeaks === true;\n  runner.fullStackTrace = options.fullTrace;\n  runner.asyncOnly = options.asyncOnly;\n  runner.allowUncaught = options.allowUncaught;\n  runner.forbidOnly = options.forbidOnly;\n  runner.forbidPending = options.forbidPending;\n  if (options.grep) {\n    runner.grep(options.grep, options.invert);\n  }\n  if (options.global) {\n    runner.globals(options.global);\n  }\n  if (options.color !== undefined) {\n    exports.reporters.Base.useColors = options.color;\n  }\n  exports.reporters.Base.inlineDiffs = options.inlineDiffs;\n  exports.reporters.Base.hideDiff = !options.diff;\n\n  const done = failures => {\n    this._previousRunner = runner;\n    this._state = this._cleanReferencesAfterRun\n      ? mochaStates.REFERENCES_CLEANED\n      : mochaStates.INIT;\n    fn = fn || utils.noop;\n    if (typeof reporter.done === 'function') {\n      reporter.done(failures, fn);\n    } else {\n      fn(failures);\n    }\n  };\n\n  const runAsync = async runner => {\n    const context =\n      this.options.enableGlobalSetup && this.hasGlobalSetupFixtures()\n        ? await this.runGlobalSetup(runner)\n        : {};\n    const failureCount = await runner.runAsync({\n      files: this.files,\n      options\n    });\n    if (this.options.enableGlobalTeardown && this.hasGlobalTeardownFixtures()) {\n      await this.runGlobalTeardown(runner, {context});\n    }\n    return failureCount;\n  };\n\n  // no \"catch\" here is intentional. errors coming out of\n  // Runner#run are considered uncaught/unhandled and caught\n  // by the `process` event listeners.\n  // also: returning anything other than `runner` would be a breaking\n  // change\n  runAsync(runner).then(done);\n\n  return runner;\n};\n\n/**\n * Assigns hooks to the root suite\n * @param {MochaRootHookObject} [hooks] - Hooks to assign to root suite\n * @chainable\n */\nMocha.prototype.rootHooks = function rootHooks({\n  beforeAll = [],\n  beforeEach = [],\n  afterAll = [],\n  afterEach = []\n} = {}) {\n  beforeAll = utils.castArray(beforeAll);\n  beforeEach = utils.castArray(beforeEach);\n  afterAll = utils.castArray(afterAll);\n  afterEach = utils.castArray(afterEach);\n  beforeAll.forEach(hook => {\n    this.suite.beforeAll(hook);\n  });\n  beforeEach.forEach(hook => {\n    this.suite.beforeEach(hook);\n  });\n  afterAll.forEach(hook => {\n    this.suite.afterAll(hook);\n  });\n  afterEach.forEach(hook => {\n    this.suite.afterEach(hook);\n  });\n  return this;\n};\n\n/**\n * Toggles parallel mode.\n *\n * Must be run before calling {@link Mocha#run}. Changes the `Runner` class to\n * use; also enables lazy file loading if not already done so.\n *\n * Warning: when passed `false` and lazy loading has been enabled _via any means_ (including calling `parallelMode(true)`), this method will _not_ disable lazy loading. Lazy loading is a prerequisite for parallel\n * mode, but parallel mode is _not_ a prerequisite for lazy loading!\n * @param {boolean} [enable] - If `true`, enable; otherwise disable.\n * @throws If run in browser\n * @throws If Mocha not in `INIT` state\n * @returns {Mocha}\n * @chainable\n * @public\n */\nMocha.prototype.parallelMode = function parallelMode(enable = true) {\n  if (utils.isBrowser()) {\n    throw createUnsupportedError('parallel mode is only supported in Node.js');\n  }\n  const parallel = Boolean(enable);\n  if (\n    parallel === this.options.parallel &&\n    this._lazyLoadFiles &&\n    this._runnerClass !== exports.Runner\n  ) {\n    return this;\n  }\n  if (this._state !== mochaStates.INIT) {\n    throw createUnsupportedError(\n      'cannot change parallel mode after having called run()'\n    );\n  }\n  this.options.parallel = parallel;\n\n  // swap Runner class\n  this._runnerClass = parallel\n    ? require('./nodejs/parallel-buffered-runner')\n    : exports.Runner;\n\n  // lazyLoadFiles may have been set `true` otherwise (for ESM loading),\n  // so keep `true` if so.\n  return this.lazyLoadFiles(this._lazyLoadFiles || parallel);\n};\n\n/**\n * Disables implicit call to {@link Mocha#loadFiles} in {@link Mocha#run}. This\n * setting is used by watch mode, parallel mode, and for loading ESM files.\n * @todo This should throw if we've already loaded files; such behavior\n * necessitates adding a new state.\n * @param {boolean} [enable] - If `true`, disable eager loading of files in\n * {@link Mocha#run}\n * @chainable\n * @public\n */\nMocha.prototype.lazyLoadFiles = function lazyLoadFiles(enable) {\n  this._lazyLoadFiles = enable === true;\n  debug('set lazy load to %s', enable);\n  return this;\n};\n\n/**\n * Configures one or more global setup fixtures.\n *\n * If given no parameters, _unsets_ any previously-set fixtures.\n * @chainable\n * @public\n * @param {MochaGlobalFixture|MochaGlobalFixture[]} [setupFns] - Global setup fixture(s)\n * @returns {Mocha}\n */\nMocha.prototype.globalSetup = function globalSetup(setupFns = []) {\n  setupFns = utils.castArray(setupFns);\n  this.options.globalSetup = setupFns;\n  debug('configured %d global setup functions', setupFns.length);\n  return this;\n};\n\n/**\n * Configures one or more global teardown fixtures.\n *\n * If given no parameters, _unsets_ any previously-set fixtures.\n * @chainable\n * @public\n * @param {MochaGlobalFixture|MochaGlobalFixture[]} [teardownFns] - Global teardown fixture(s)\n * @returns {Mocha}\n */\nMocha.prototype.globalTeardown = function globalTeardown(teardownFns = []) {\n  teardownFns = utils.castArray(teardownFns);\n  this.options.globalTeardown = teardownFns;\n  debug('configured %d global teardown functions', teardownFns.length);\n  return this;\n};\n\n/**\n * Run any global setup fixtures sequentially, if any.\n *\n * This is _automatically called_ by {@link Mocha#run} _unless_ the `runGlobalSetup` option is `false`; see {@link Mocha#enableGlobalSetup}.\n *\n * The context object this function resolves with should be consumed by {@link Mocha#runGlobalTeardown}.\n * @param {object} [context] - Context object if already have one\n * @public\n * @returns {Promise<object>} Context object\n */\nMocha.prototype.runGlobalSetup = async function runGlobalSetup(context = {}) {\n  const {globalSetup} = this.options;\n  if (globalSetup && globalSetup.length) {\n    debug('run(): global setup starting');\n    await this._runGlobalFixtures(globalSetup, context);\n    debug('run(): global setup complete');\n  }\n  return context;\n};\n\n/**\n * Run any global teardown fixtures sequentially, if any.\n *\n * This is _automatically called_ by {@link Mocha#run} _unless_ the `runGlobalTeardown` option is `false`; see {@link Mocha#enableGlobalTeardown}.\n *\n * Should be called with context object returned by {@link Mocha#runGlobalSetup}, if applicable.\n * @param {object} [context] - Context object if already have one\n * @public\n * @returns {Promise<object>} Context object\n */\nMocha.prototype.runGlobalTeardown = async function runGlobalTeardown(\n  context = {}\n) {\n  const {globalTeardown} = this.options;\n  if (globalTeardown && globalTeardown.length) {\n    debug('run(): global teardown starting');\n    await this._runGlobalFixtures(globalTeardown, context);\n  }\n  debug('run(): global teardown complete');\n  return context;\n};\n\n/**\n * Run global fixtures sequentially with context `context`\n * @private\n * @param {MochaGlobalFixture[]} [fixtureFns] - Fixtures to run\n * @param {object} [context] - context object\n * @returns {Promise<object>} context object\n */\nMocha.prototype._runGlobalFixtures = async function _runGlobalFixtures(\n  fixtureFns = [],\n  context = {}\n) {\n  for await (const fixtureFn of fixtureFns) {\n    await fixtureFn.call(context);\n  }\n  return context;\n};\n\n/**\n * Toggle execution of any global setup fixture(s)\n *\n * @chainable\n * @public\n * @param {boolean } [enabled=true] - If `false`, do not run global setup fixture\n * @returns {Mocha}\n */\nMocha.prototype.enableGlobalSetup = function enableGlobalSetup(enabled = true) {\n  this.options.enableGlobalSetup = Boolean(enabled);\n  return this;\n};\n\n/**\n * Toggle execution of any global teardown fixture(s)\n *\n * @chainable\n * @public\n * @param {boolean } [enabled=true] - If `false`, do not run global teardown fixture\n * @returns {Mocha}\n */\nMocha.prototype.enableGlobalTeardown = function enableGlobalTeardown(\n  enabled = true\n) {\n  this.options.enableGlobalTeardown = Boolean(enabled);\n  return this;\n};\n\n/**\n * Returns `true` if one or more global setup fixtures have been supplied.\n * @public\n * @returns {boolean}\n */\nMocha.prototype.hasGlobalSetupFixtures = function hasGlobalSetupFixtures() {\n  return Boolean(this.options.globalSetup.length);\n};\n\n/**\n * Returns `true` if one or more global teardown fixtures have been supplied.\n * @public\n * @returns {boolean}\n */\nMocha.prototype.hasGlobalTeardownFixtures =\n  function hasGlobalTeardownFixtures() {\n    return Boolean(this.options.globalTeardown.length);\n  };\n\n/**\n * An alternative way to define root hooks that works with parallel runs.\n * @typedef {Object} MochaRootHookObject\n * @property {Function|Function[]} [beforeAll] - \"Before all\" hook(s)\n * @property {Function|Function[]} [beforeEach] - \"Before each\" hook(s)\n * @property {Function|Function[]} [afterAll] - \"After all\" hook(s)\n * @property {Function|Function[]} [afterEach] - \"After each\" hook(s)\n */\n\n/**\n * An function that returns a {@link MochaRootHookObject}, either sync or async.\n   @callback MochaRootHookFunction\n * @returns {MochaRootHookObject|Promise<MochaRootHookObject>}\n */\n\n/**\n * A function that's invoked _once_ which is either sync or async.\n * Can be a \"teardown\" or \"setup\".  These will all share the same context.\n * @callback MochaGlobalFixture\n * @returns {void|Promise<void>}\n */\n\n/**\n * An object making up all necessary parts of a plugin loader and aggregator\n * @typedef {Object} PluginDefinition\n * @property {string} exportName - Named export to use\n * @property {string} [optionName] - Option name for Mocha constructor (use `exportName` if omitted)\n * @property {PluginValidator} [validate] - Validator function\n * @property {PluginFinalizer} [finalize] - Finalizer/aggregator function\n */\n\n/**\n * A (sync) function to assert a user-supplied plugin implementation is valid.\n *\n * Defined in a {@link PluginDefinition}.\n\n * @callback PluginValidator\n * @param {*} value - Value to check\n * @this {PluginDefinition}\n * @returns {void}\n */\n\n/**\n * A function to finalize plugins impls of a particular ilk\n * @callback PluginFinalizer\n * @param {Array<*>} impls - User-supplied implementations\n * @returns {Promise<*>|*}\n */\n"],"mappings":"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Cb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjH,KAAK,CAACmE,SAAS,CAACf,OAAO,GAAG,UAAU8D,KAAK,EAAE;EACzC,IAAI,CAACnF,KAAK,CAACqB,OAAO,CAAC8D,KAAK,CAAC;EACzB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlH,KAAK,CAACmE,SAAS,CAAClB,IAAI,GAAG,UAAUgE,KAAK,EAAE;EACtC,IAAI,CAAClF,KAAK,CAACkB,IAAI,CAACgE,KAAK,CAAC;EACtB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjH,KAAK,CAACmE,SAAS,CAACgD,SAAS,GAAG,UAAUA,SAAS,EAAE;EAC/C,IAAI,CAAC5E,OAAO,CAAC4E,SAAS,GAAGA,SAAS,KAAK,KAAK;EAC5C,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAnH,KAAK,CAACmE,SAAS,CAACiD,cAAc,GAAG,YAAY;EAC3C,IAAI,CAAC7E,OAAO,CAAC6E,cAAc,GAAG,IAAI;EAClC,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApH,KAAK,CAACmE,SAAS,CAACkD,aAAa,GAAG,UAAUA,aAAa,EAAE;EACvD,IAAI,CAAC9E,OAAO,CAAC8E,aAAa,GAAGA,aAAa,KAAK,KAAK;EACpD,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArH,KAAK,CAACmE,SAAS,CAACmD,KAAK,GAAG,SAASA,KAAKA,CAAA,EAAG;EACvC,IAAI,CAAC/E,OAAO,CAAC+E,KAAK,GAAG,IAAI;EACzB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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AAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAhF,KAAK,CAACmE,SAAS,CAACyF,kBAAkB,GAAG,eAAeA,kBAAkBA,CACpEC,UAAU,GAAG,EAAE,EACf7E,OAAO,GAAG,CAAC,CAAC,EACZ;EACA,WAAW,MAAM8E,SAAS,IAAID,UAAU,EAAE;IACxC,MAAMC,SAAS,CAACC,IAAI,CAAC/E,OAAO,CAAC;EAC/B;EACA,OAAOA,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhF,KAAK,CAACmE,SAAS,CAACL,iBAAiB,GAAG,SAASA,iBAAiBA,CAACkG,OAAO,GAAG,IAAI,EAAE;EAC7E,IAAI,CAACzH,OAAO,CAACuB,iBAAiB,GAAGH,OAAO,CAACqG,OAAO,CAAC;EACjD,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhK,KAAK,CAACmE,SAAS,CAACJ,oBAAoB,GAAG,SAASA,oBAAoBA,CAClEiG,OAAO,GAAG,IAAI,EACd;EACA,IAAI,CAACzH,OAAO,CAACwB,oBAAoB,GAAGJ,OAAO,CAACqG,OAAO,CAAC;EACpD,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAhK,KAAK,CAACmE,SAAS,CAAC4E,sBAAsB,GAAG,SAASA,sBAAsBA,CAAA,EAAG;EACzE,OAAOpF,OAAO,CAAC,IAAI,CAACpB,OAAO,CAACqB,WAAW,CAACwE,MAAM,CAAC;AACjD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACApI,KAAK,CAACmE,SAAS,CAAC+E,yBAAyB,GACvC,SAASA,yBAAyBA,CAAA,EAAG;EACnC,OAAOvF,OAAO,CAAC,IAAI,CAACpB,OAAO,CAACsB,cAAc,CAACuE,MAAM,CAAC;AACpD,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}