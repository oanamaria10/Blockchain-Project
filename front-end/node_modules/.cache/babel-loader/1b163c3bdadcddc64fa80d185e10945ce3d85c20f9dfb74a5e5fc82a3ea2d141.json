{"ast":null,"code":"import * as API from '@ucanto/interface';\nimport * as Schema from './schema.js';\n\n/**\n * @template {string} Method\n * @extends {Schema.API<API.DID<Method> & API.URI<\"did:\">, string, void|Method>}\n */\nclass DIDSchema extends Schema.API {\n  /**\n   * @param {string} source\n   * @param {void|Method} method\n   */\n  readWith(source, method) {\n    const prefix = method ? `did:${method}:` : `did:`;\n    if (!source.startsWith(prefix)) {\n      return Schema.error(`Expected a ${prefix} but got \"${source}\" instead`);\n    } else {\n      return {\n        ok: ( /** @type {API.DID<Method>} */source)\n      };\n    }\n  }\n}\nconst schema = Schema.string().refine(new DIDSchema());\nexport const did = () => schema;\n/**\n *\n * @param {unknown} input\n */\nexport const read = input => schema.read(input);\n\n/**\n * @template {string} Method\n * @param {{method?: Method}} options\n */\nexport const match = (options = {}) => ( /** @type {Schema.Schema<API.DID<Method> & API.URI<\"did:\">>} */\nSchema.string().refine(new DIDSchema(options.method)));\n\n/**\n * Create a DID string from any input (or throw)\n * @param {unknown} input\n */\nexport const from = input => match({}).from(input);","map":{"version":3,"names":["API","Schema","DIDSchema","readWith","source","method","prefix","startsWith","error","ok","schema","string","refine","did","read","input","match","options","from"],"sources":["C:/FACULTATE/Proiect/node_modules/@ucanto/core/src/schema/did.js"],"sourcesContent":["import * as API from '@ucanto/interface'\nimport * as Schema from './schema.js'\n\n/**\n * @template {string} Method\n * @extends {Schema.API<API.DID<Method> & API.URI<\"did:\">, string, void|Method>}\n */\nclass DIDSchema extends Schema.API {\n  /**\n   * @param {string} source\n   * @param {void|Method} method\n   */\n  readWith(source, method) {\n    const prefix = method ? `did:${method}:` : `did:`\n    if (!source.startsWith(prefix)) {\n      return Schema.error(`Expected a ${prefix} but got \"${source}\" instead`)\n    } else {\n      return { ok: /** @type {API.DID<Method>} */ (source) }\n    }\n  }\n}\n\nconst schema = Schema.string().refine(new DIDSchema())\n\nexport const did = () => schema\n/**\n *\n * @param {unknown} input\n */\nexport const read = input => schema.read(input)\n\n/**\n * @template {string} Method\n * @param {{method?: Method}} options\n */\nexport const match = (options = {}) =>\n  /** @type {Schema.Schema<API.DID<Method> & API.URI<\"did:\">>} */ (\n    Schema.string().refine(new DIDSchema(options.method))\n  )\n\n/**\n * Create a DID string from any input (or throw)\n * @param {unknown} input\n */\nexport const from = input => match({}).from(input)\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,mBAAmB;AACxC,OAAO,KAAKC,MAAM,MAAM,aAAa;;AAErC;AACA;AACA;AACA;AACA,MAAMC,SAAS,SAASD,MAAM,CAACD,GAAG,CAAC;EACjC;AACF;AACA;AACA;EACEG,QAAQA,CAACC,MAAM,EAAEC,MAAM,EAAE;IACvB,MAAMC,MAAM,GAAGD,MAAM,GAAI,OAAMA,MAAO,GAAE,GAAI,MAAK;IACjD,IAAI,CAACD,MAAM,CAACG,UAAU,CAACD,MAAM,CAAC,EAAE;MAC9B,OAAOL,MAAM,CAACO,KAAK,CAAE,cAAaF,MAAO,aAAYF,MAAO,WAAU,CAAC;IACzE,CAAC,MAAM;MACL,OAAO;QAAEK,EAAE,IAAE,8BAAgCL,MAAM;MAAE,CAAC;IACxD;EACF;AACF;AAEA,MAAMM,MAAM,GAAGT,MAAM,CAACU,MAAM,CAAC,CAAC,CAACC,MAAM,CAAC,IAAIV,SAAS,CAAC,CAAC,CAAC;AAEtD,OAAO,MAAMW,GAAG,GAAGA,CAAA,KAAMH,MAAM;AAC/B;AACA;AACA;AACA;AACA,OAAO,MAAMI,IAAI,GAAGC,KAAK,IAAIL,MAAM,CAACI,IAAI,CAACC,KAAK,CAAC;;AAE/C;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAGA,CAACC,OAAO,GAAG,CAAC,CAAC,OAChC;AACEhB,MAAM,CAACU,MAAM,CAAC,CAAC,CAACC,MAAM,CAAC,IAAIV,SAAS,CAACe,OAAO,CAACZ,MAAM,CAAC,CAAC,CACtD;;AAEH;AACA;AACA;AACA;AACA,OAAO,MAAMa,IAAI,GAAGH,KAAK,IAAIC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACE,IAAI,CAACH,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}