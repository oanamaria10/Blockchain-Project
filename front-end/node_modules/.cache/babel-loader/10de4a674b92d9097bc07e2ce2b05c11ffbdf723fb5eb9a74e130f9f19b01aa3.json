{"ast":null,"code":"import { assertArgument } from \"../utils/index.js\";\nconst subsChrs = \" !#$%&'()*+,-./<=>?@[]^_`{|}~\";\nconst Word = /^[a-z]*$/i;\nfunction unfold(words, sep) {\n  let initial = 97;\n  return words.reduce((accum, word) => {\n    if (word === sep) {\n      initial++;\n    } else if (word.match(Word)) {\n      accum.push(String.fromCharCode(initial) + word);\n    } else {\n      initial = 97;\n      accum.push(word);\n    }\n    return accum;\n  }, []);\n}\n/**\n *  @_ignore\n */\nexport function decode(data, subs) {\n  // Replace all the substitutions with their expanded form\n  for (let i = subsChrs.length - 1; i >= 0; i--) {\n    data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));\n  }\n  // Get all tle clumps; each suffix, first-increment and second-increment\n  const clumps = [];\n  const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {\n    if (semi) {\n      for (let i = parseInt(semi); i >= 0; i--) {\n        clumps.push(\";\");\n      }\n    } else {\n      clumps.push(item.toLowerCase());\n    }\n    return \"\";\n  });\n  /* c8 ignore start */\n  if (leftover) {\n    throw new Error(`leftovers: ${JSON.stringify(leftover)}`);\n  }\n  /* c8 ignore stop */\n  return unfold(unfold(clumps, \";\"), \":\");\n}\n/**\n *  @_ignore\n */\nexport function decodeOwl(data) {\n  assertArgument(data[0] === \"0\", \"unsupported auwl data\", \"data\", data);\n  return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));\n}","map":{"version":3,"names":["assertArgument","subsChrs","Word","unfold","words","sep","initial","reduce","accum","word","match","push","String","fromCharCode","decode","data","subs","i","length","split","join","substring","clumps","leftover","replace","all","item","semi","parseInt","toLowerCase","Error","JSON","stringify","decodeOwl"],"sources":["C:/Users/Oana/Desktop/Blockchain/Blockchain-Project/node_modules/ethers/lib.esm/wordlists/decode-owl.js"],"sourcesContent":["import { assertArgument } from \"../utils/index.js\";\nconst subsChrs = \" !#$%&'()*+,-./<=>?@[]^_`{|}~\";\nconst Word = /^[a-z]*$/i;\nfunction unfold(words, sep) {\n    let initial = 97;\n    return words.reduce((accum, word) => {\n        if (word === sep) {\n            initial++;\n        }\n        else if (word.match(Word)) {\n            accum.push(String.fromCharCode(initial) + word);\n        }\n        else {\n            initial = 97;\n            accum.push(word);\n        }\n        return accum;\n    }, []);\n}\n/**\n *  @_ignore\n */\nexport function decode(data, subs) {\n    // Replace all the substitutions with their expanded form\n    for (let i = subsChrs.length - 1; i >= 0; i--) {\n        data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));\n    }\n    // Get all tle clumps; each suffix, first-increment and second-increment\n    const clumps = [];\n    const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {\n        if (semi) {\n            for (let i = parseInt(semi); i >= 0; i--) {\n                clumps.push(\";\");\n            }\n        }\n        else {\n            clumps.push(item.toLowerCase());\n        }\n        return \"\";\n    });\n    /* c8 ignore start */\n    if (leftover) {\n        throw new Error(`leftovers: ${JSON.stringify(leftover)}`);\n    }\n    /* c8 ignore stop */\n    return unfold(unfold(clumps, \";\"), \":\");\n}\n/**\n *  @_ignore\n */\nexport function decodeOwl(data) {\n    assertArgument(data[0] === \"0\", \"unsupported auwl data\", \"data\", data);\n    return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));\n}\n//# sourceMappingURL=decode-owl.js.map"],"mappings":"AAAA,SAASA,cAAc,QAAQ,mBAAmB;AAClD,MAAMC,QAAQ,GAAG,+BAA+B;AAChD,MAAMC,IAAI,GAAG,WAAW;AACxB,SAASC,MAAMA,CAACC,KAAK,EAAEC,GAAG,EAAE;EACxB,IAAIC,OAAO,GAAG,EAAE;EAChB,OAAOF,KAAK,CAACG,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAK;IACjC,IAAIA,IAAI,KAAKJ,GAAG,EAAE;MACdC,OAAO,EAAE;IACb,CAAC,MACI,IAAIG,IAAI,CAACC,KAAK,CAACR,IAAI,CAAC,EAAE;MACvBM,KAAK,CAACG,IAAI,CAACC,MAAM,CAACC,YAAY,CAACP,OAAO,CAAC,GAAGG,IAAI,CAAC;IACnD,CAAC,MACI;MACDH,OAAO,GAAG,EAAE;MACZE,KAAK,CAACG,IAAI,CAACF,IAAI,CAAC;IACpB;IACA,OAAOD,KAAK;EAChB,CAAC,EAAE,EAAE,CAAC;AACV;AACA;AACA;AACA;AACA,OAAO,SAASM,MAAMA,CAACC,IAAI,EAAEC,IAAI,EAAE;EAC/B;EACA,KAAK,IAAIC,CAAC,GAAGhB,QAAQ,CAACiB,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC3CF,IAAI,GAAGA,IAAI,CAACI,KAAK,CAAClB,QAAQ,CAACgB,CAAC,CAAC,CAAC,CAACG,IAAI,CAACJ,IAAI,CAACK,SAAS,CAAC,CAAC,GAAGJ,CAAC,EAAE,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAC,CAAC;EACzE;EACA;EACA,MAAMK,MAAM,GAAG,EAAE;EACjB,MAAMC,QAAQ,GAAGR,IAAI,CAACS,OAAO,CAAC,4BAA4B,EAAE,CAACC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAElB,IAAI,KAAK;IACnF,IAAIkB,IAAI,EAAE;MACN,KAAK,IAAIV,CAAC,GAAGW,QAAQ,CAACD,IAAI,CAAC,EAAEV,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QACtCK,MAAM,CAACX,IAAI,CAAC,GAAG,CAAC;MACpB;IACJ,CAAC,MACI;MACDW,MAAM,CAACX,IAAI,CAACe,IAAI,CAACG,WAAW,CAAC,CAAC,CAAC;IACnC;IACA,OAAO,EAAE;EACb,CAAC,CAAC;EACF;EACA,IAAIN,QAAQ,EAAE;IACV,MAAM,IAAIO,KAAK,CAAC,cAAcC,IAAI,CAACC,SAAS,CAACT,QAAQ,CAAC,EAAE,CAAC;EAC7D;EACA;EACA,OAAOpB,MAAM,CAACA,MAAM,CAACmB,MAAM,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC;AAC3C;AACA;AACA;AACA;AACA,OAAO,SAASW,SAASA,CAAClB,IAAI,EAAE;EAC5Bf,cAAc,CAACe,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,uBAAuB,EAAE,MAAM,EAAEA,IAAI,CAAC;EACtE,OAAOD,MAAM,CAACC,IAAI,CAACM,SAAS,CAAC,CAAC,GAAG,CAAC,GAAGpB,QAAQ,CAACiB,MAAM,CAAC,EAAEH,IAAI,CAACM,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAGpB,QAAQ,CAACiB,MAAM,CAAC,CAAC;AACtG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}