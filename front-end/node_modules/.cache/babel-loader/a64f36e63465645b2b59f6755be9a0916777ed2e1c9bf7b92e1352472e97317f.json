{"ast":null,"code":"/**\n * Filecoin Aggregator Capabilities\n *\n * These can be imported directly with:\n * ```js\n * import * as Aggregator from '@web3-storage/capabilities/filecoin/aggregator'\n * ```\n *\n * @module\n */\n\nimport { capability, Schema, ok } from '@ucanto/validator';\nimport { PieceLink } from './lib.js';\nimport { equal, equalWith, checkLink, and } from '../utils.js';\n\n/**\n * Capability that allows a Storefront to request that a piece be aggregated\n * for inclusion in an upcoming an Filecoin deal.\n */\nexport const pieceOffer = capability({\n  can: 'piece/offer',\n  /**\n   * DID of an authorized Storefront.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * CID of the piece.\n     */\n    piece: PieceLink,\n    /**\n     * Grouping of joining segments into an aggregate.\n     */\n    group: Schema.text()\n  }),\n  derives: (claim, from) => {\n    return and(equalWith(claim, from)) || and(checkLink(claim.nb.piece, from.nb.piece, 'nb.piece')) || and(equal(claim.nb.group, from.nb.group, 'nb.group')) || ok({});\n  }\n});\n\n/**\n * Capability that allows an Aggregator to signal a piece has been accepted\n * or rejected for inclusion in an aggregate.\n */\nexport const pieceAccept = capability({\n  can: 'piece/accept',\n  /**\n   * DID of the Aggregator.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * CID of the piece.\n     *\n     * @see https://github.com/filecoin-project/FIPs/pull/758/files\n     */\n    piece: PieceLink,\n    /**\n     * Grouping of joining segments into an aggregate.\n     */\n    group: Schema.text()\n  }),\n  derives: (claim, from) => {\n    return and(equalWith(claim, from)) || and(checkLink(claim.nb.piece, from.nb.piece, 'nb.piece')) || and(equal(claim.nb.group, from.nb.group, 'nb.group')) || ok({});\n  }\n});","map":{"version":3,"names":["capability","Schema","ok","PieceLink","equal","equalWith","checkLink","and","pieceOffer","can","with","did","nb","struct","piece","group","text","derives","claim","from","pieceAccept"],"sources":["C:/FACULTATE/Proiect/node_modules/@web3-storage/capabilities/src/filecoin/aggregator.js"],"sourcesContent":["/**\n * Filecoin Aggregator Capabilities\n *\n * These can be imported directly with:\n * ```js\n * import * as Aggregator from '@web3-storage/capabilities/filecoin/aggregator'\n * ```\n *\n * @module\n */\n\nimport { capability, Schema, ok } from '@ucanto/validator'\nimport { PieceLink } from './lib.js'\nimport { equal, equalWith, checkLink, and } from '../utils.js'\n\n/**\n * Capability that allows a Storefront to request that a piece be aggregated\n * for inclusion in an upcoming an Filecoin deal.\n */\nexport const pieceOffer = capability({\n  can: 'piece/offer',\n  /**\n   * DID of an authorized Storefront.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * CID of the piece.\n     */\n    piece: PieceLink,\n    /**\n     * Grouping of joining segments into an aggregate.\n     */\n    group: Schema.text(),\n  }),\n  derives: (claim, from) => {\n    return (\n      and(equalWith(claim, from)) ||\n      and(checkLink(claim.nb.piece, from.nb.piece, 'nb.piece')) ||\n      and(equal(claim.nb.group, from.nb.group, 'nb.group')) ||\n      ok({})\n    )\n  },\n})\n\n/**\n * Capability that allows an Aggregator to signal a piece has been accepted\n * or rejected for inclusion in an aggregate.\n */\nexport const pieceAccept = capability({\n  can: 'piece/accept',\n  /**\n   * DID of the Aggregator.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * CID of the piece.\n     *\n     * @see https://github.com/filecoin-project/FIPs/pull/758/files\n     */\n    piece: PieceLink,\n    /**\n     * Grouping of joining segments into an aggregate.\n     */\n    group: Schema.text(),\n  }),\n  derives: (claim, from) => {\n    return (\n      and(equalWith(claim, from)) ||\n      and(checkLink(claim.nb.piece, from.nb.piece, 'nb.piece')) ||\n      and(equal(claim.nb.group, from.nb.group, 'nb.group')) ||\n      ok({})\n    )\n  },\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAU,EAAEC,MAAM,EAAEC,EAAE,QAAQ,mBAAmB;AAC1D,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAAEC,GAAG,QAAQ,aAAa;;AAE9D;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGR,UAAU,CAAC;EACnCS,GAAG,EAAE,aAAa;EAClB;AACF;AACA;EACEC,IAAI,EAAET,MAAM,CAACU,GAAG,CAAC,CAAC;EAClBC,EAAE,EAAEX,MAAM,CAACY,MAAM,CAAC;IAChB;AACJ;AACA;IACIC,KAAK,EAAEX,SAAS;IAChB;AACJ;AACA;IACIY,KAAK,EAAEd,MAAM,CAACe,IAAI,CAAC;EACrB,CAAC,CAAC;EACFC,OAAO,EAAEA,CAACC,KAAK,EAAEC,IAAI,KAAK;IACxB,OACEZ,GAAG,CAACF,SAAS,CAACa,KAAK,EAAEC,IAAI,CAAC,CAAC,IAC3BZ,GAAG,CAACD,SAAS,CAACY,KAAK,CAACN,EAAE,CAACE,KAAK,EAAEK,IAAI,CAACP,EAAE,CAACE,KAAK,EAAE,UAAU,CAAC,CAAC,IACzDP,GAAG,CAACH,KAAK,CAACc,KAAK,CAACN,EAAE,CAACG,KAAK,EAAEI,IAAI,CAACP,EAAE,CAACG,KAAK,EAAE,UAAU,CAAC,CAAC,IACrDb,EAAE,CAAC,CAAC,CAAC,CAAC;EAEV;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMkB,WAAW,GAAGpB,UAAU,CAAC;EACpCS,GAAG,EAAE,cAAc;EACnB;AACF;AACA;EACEC,IAAI,EAAET,MAAM,CAACU,GAAG,CAAC,CAAC;EAClBC,EAAE,EAAEX,MAAM,CAACY,MAAM,CAAC;IAChB;AACJ;AACA;AACA;AACA;IACIC,KAAK,EAAEX,SAAS;IAChB;AACJ;AACA;IACIY,KAAK,EAAEd,MAAM,CAACe,IAAI,CAAC;EACrB,CAAC,CAAC;EACFC,OAAO,EAAEA,CAACC,KAAK,EAAEC,IAAI,KAAK;IACxB,OACEZ,GAAG,CAACF,SAAS,CAACa,KAAK,EAAEC,IAAI,CAAC,CAAC,IAC3BZ,GAAG,CAACD,SAAS,CAACY,KAAK,CAACN,EAAE,CAACE,KAAK,EAAEK,IAAI,CAACP,EAAE,CAACE,KAAK,EAAE,UAAU,CAAC,CAAC,IACzDP,GAAG,CAACH,KAAK,CAACc,KAAK,CAACN,EAAE,CAACG,KAAK,EAAEI,IAAI,CAACP,EAAE,CAACG,KAAK,EAAE,UAAU,CAAC,CAAC,IACrDb,EAAE,CAAC,CAAC,CAAC,CAAC;EAEV;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}