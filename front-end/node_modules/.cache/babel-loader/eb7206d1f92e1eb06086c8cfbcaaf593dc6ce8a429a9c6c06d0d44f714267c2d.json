{"ast":null,"code":"import * as API from '@ucanto/interface';\nimport { encodeSequence, readInt, encodeInt, readSequenceWith } from './asn1.js';\nimport * as SPKI from './spki.js';\nimport { base64url } from 'multiformats/bases/base64';\n/**\n * RSA public key represenatation\n * @see https://datatracker.ietf.org/doc/html/rfc3447#appendix-A.1\n *\n * @typedef {object} RSAPublicKey\n * @property {API.ByteView<number>} n\n * @property {API.ByteView<number>} e\n */\n\n/**\n * Takes private-key information in [Private-Key Information Syntax](https://datatracker.ietf.org/doc/html/rfc5208#section-5)\n * and extracts all the fields as per [RSA private key syntax](https://datatracker.ietf.org/doc/html/rfc3447#appendix-A.1.2)\n *\n *\n * @param {API.ByteView<RSAPublicKey>} key\n * @param {number} byteOffset\n * @returns {RSAPublicKey}\n */\nexport const decode = (key, byteOffset = 0) => {\n  const [n, e] = readSequenceWith([readInt, readInt], key, byteOffset);\n  return {\n    n,\n    e\n  };\n};\n\n/**\n * @param {RSAPublicKey} key\n * @returns {API.ByteView<RSAPublicKey>}\n */\nexport const encode = ({\n  n,\n  e\n}) => encodeSequence([encodeInt(n), encodeInt(e)]);\n\n/**\n * @param {RSAPublicKey} key\n */\nexport const toSPKI = key => SPKI.encode(encode(key));\n\n/**\n * @param {API.ByteView<SPKI.SubjectPublicKeyInfo>} info\n */\nexport const fromSPKI = info => decode(SPKI.decode(info));\n\n/**\n * @param {RSAPublicKey} key\n * @returns {JsonWebKey}\n */\nexport const toJWK = ({\n  n,\n  e\n}) => ({\n  kty: 'RSA',\n  alg: 'RS256',\n  key_ops: ['verify'],\n  ext: true,\n  n: base64url.baseEncode(n),\n  e: base64url.baseEncode(e)\n});\n\n/**\n * @param {JsonWebKey} jwk\n * @returns {RSAPublicKey}\n */\nexport const fromJWK = ({\n  n,\n  e\n}) => ({\n  n: base64urlDecode(n),\n  e: base64urlDecode(e)\n});\n\n/**\n * @param {string|undefined} input\n */\nconst base64urlDecode = (input = '') => base64url.baseDecode(input);","map":{"version":3,"names":["API","encodeSequence","readInt","encodeInt","readSequenceWith","SPKI","base64url","decode","key","byteOffset","n","e","encode","toSPKI","fromSPKI","info","toJWK","kty","alg","key_ops","ext","baseEncode","fromJWK","base64urlDecode","input","baseDecode"],"sources":["C:/FACULTATE/Proiect/node_modules/@ucanto/principal/src/rsa/public-key.js"],"sourcesContent":["import * as API from '@ucanto/interface'\nimport { encodeSequence, readInt, encodeInt, readSequenceWith } from './asn1.js'\nimport * as SPKI from './spki.js'\nimport { base64url } from 'multiformats/bases/base64'\n/**\n * RSA public key represenatation\n * @see https://datatracker.ietf.org/doc/html/rfc3447#appendix-A.1\n *\n * @typedef {object} RSAPublicKey\n * @property {API.ByteView<number>} n\n * @property {API.ByteView<number>} e\n */\n\n/**\n * Takes private-key information in [Private-Key Information Syntax](https://datatracker.ietf.org/doc/html/rfc5208#section-5)\n * and extracts all the fields as per [RSA private key syntax](https://datatracker.ietf.org/doc/html/rfc3447#appendix-A.1.2)\n *\n *\n * @param {API.ByteView<RSAPublicKey>} key\n * @param {number} byteOffset\n * @returns {RSAPublicKey}\n */\nexport const decode = (key, byteOffset = 0) => {\n  const [n, e] = readSequenceWith([readInt, readInt], key, byteOffset)\n\n  return { n, e }\n}\n\n/**\n * @param {RSAPublicKey} key\n * @returns {API.ByteView<RSAPublicKey>}\n */\nexport const encode = ({ n, e }) => encodeSequence([encodeInt(n), encodeInt(e)])\n\n/**\n * @param {RSAPublicKey} key\n */\nexport const toSPKI = key => SPKI.encode(encode(key))\n\n/**\n * @param {API.ByteView<SPKI.SubjectPublicKeyInfo>} info\n */\nexport const fromSPKI = info => decode(SPKI.decode(info))\n\n/**\n * @param {RSAPublicKey} key\n * @returns {JsonWebKey}\n */\nexport const toJWK = ({ n, e }) => ({\n  kty: 'RSA',\n  alg: 'RS256',\n  key_ops: ['verify'],\n  ext: true,\n  n: base64url.baseEncode(n),\n  e: base64url.baseEncode(e),\n})\n\n/**\n * @param {JsonWebKey} jwk\n * @returns {RSAPublicKey}\n */\nexport const fromJWK = ({ n, e }) => ({\n  n: base64urlDecode(n),\n  e: base64urlDecode(e),\n})\n\n/**\n * @param {string|undefined} input\n */\nconst base64urlDecode = (input = '') => base64url.baseDecode(input)\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,mBAAmB;AACxC,SAASC,cAAc,EAAEC,OAAO,EAAEC,SAAS,EAAEC,gBAAgB,QAAQ,WAAW;AAChF,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,SAASC,SAAS,QAAQ,2BAA2B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGA,CAACC,GAAG,EAAEC,UAAU,GAAG,CAAC,KAAK;EAC7C,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGP,gBAAgB,CAAC,CAACF,OAAO,EAAEA,OAAO,CAAC,EAAEM,GAAG,EAAEC,UAAU,CAAC;EAEpE,OAAO;IAAEC,CAAC;IAAEC;EAAE,CAAC;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGA,CAAC;EAAEF,CAAC;EAAEC;AAAE,CAAC,KAAKV,cAAc,CAAC,CAACE,SAAS,CAACO,CAAC,CAAC,EAAEP,SAAS,CAACQ,CAAC,CAAC,CAAC,CAAC;;AAEhF;AACA;AACA;AACA,OAAO,MAAME,MAAM,GAAGL,GAAG,IAAIH,IAAI,CAACO,MAAM,CAACA,MAAM,CAACJ,GAAG,CAAC,CAAC;;AAErD;AACA;AACA;AACA,OAAO,MAAMM,QAAQ,GAAGC,IAAI,IAAIR,MAAM,CAACF,IAAI,CAACE,MAAM,CAACQ,IAAI,CAAC,CAAC;;AAEzD;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAGA,CAAC;EAAEN,CAAC;EAAEC;AAAE,CAAC,MAAM;EAClCM,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE,OAAO;EACZC,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,GAAG,EAAE,IAAI;EACTV,CAAC,EAAEJ,SAAS,CAACe,UAAU,CAACX,CAAC,CAAC;EAC1BC,CAAC,EAAEL,SAAS,CAACe,UAAU,CAACV,CAAC;AAC3B,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMW,OAAO,GAAGA,CAAC;EAAEZ,CAAC;EAAEC;AAAE,CAAC,MAAM;EACpCD,CAAC,EAAEa,eAAe,CAACb,CAAC,CAAC;EACrBC,CAAC,EAAEY,eAAe,CAACZ,CAAC;AACtB,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMY,eAAe,GAAGA,CAACC,KAAK,GAAG,EAAE,KAAKlB,SAAS,CAACmB,UAAU,CAACD,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}