{"ast":null,"code":"/**\n * Filecoin Storefront Capabilities\n *\n * These can be imported directly with:\n * ```js\n * import * as Storefront from '@web3-storage/capabilities/filecoin/storefront'\n * ```\n *\n * @module\n */\n\nimport { capability, Schema, ok } from '@ucanto/validator';\nimport { PieceLink } from './lib.js';\nimport { equalWith, checkLink, and } from '../utils.js';\n\n/**\n * Top-level capability for Filecoin operations.\n */\nexport const filecoin = capability({\n  can: 'filecoin/*',\n  /**\n   * DID of the space the content is stored in.\n   */\n  with: Schema.did(),\n  derives: equalWith\n});\n\n/**\n * Capability allowing an agent to _request_ storing a content piece in\n * Filecoin.\n */\nexport const filecoinOffer = capability({\n  can: 'filecoin/offer',\n  /**\n   * DID of the space the content is stored in.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * CID of the content that resulted in Filecoin piece.\n     */\n    content: Schema.link(),\n    /**\n     * CID of the piece.\n     */\n    piece: PieceLink\n  }),\n  derives: (claim, from) => {\n    return and(equalWith(claim, from)) || and(checkLink(claim.nb.content, from.nb.content, 'nb.content')) || and(checkLink(claim.nb.piece, from.nb.piece, 'nb.piece')) || ok({});\n  }\n});\n\n/**\n * Capability allowing a Storefront to signal that an offered piece has been\n * submitted to the filecoin storage pipeline.\n */\nexport const filecoinSubmit = capability({\n  can: 'filecoin/submit',\n  /**\n   * DID of the Storefront.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * CID of the content that resulted in Filecoin piece.\n     */\n    content: Schema.link(),\n    /**\n     * CID of the piece.\n     *\n     * @see https://github.com/filecoin-project/FIPs/pull/758/files\n     */\n    piece: PieceLink\n  }),\n  derives: (claim, from) => {\n    return and(equalWith(claim, from)) || and(checkLink(claim.nb.content, from.nb.content, 'nb.content')) || and(checkLink(claim.nb.piece, from.nb.piece, 'nb.piece')) || ok({});\n  }\n});\n\n/**\n * Capability allowing a Storefront to signal that a submitted piece has been\n * accepted in a Filecoin deal. The receipt contains the proof.\n */\nexport const filecoinAccept = capability({\n  can: 'filecoin/accept',\n  /**\n   * DID of the Storefront.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * CID of the content that resulted in Filecoin piece.\n     */\n    content: Schema.link(),\n    /**\n     * CID of the piece.\n     *\n     * @see https://github.com/filecoin-project/FIPs/pull/758/files\n     */\n    piece: PieceLink\n  }),\n  derives: (claim, from) => {\n    return and(equalWith(claim, from)) || and(checkLink(claim.nb.content, from.nb.content, 'nb.content')) || and(checkLink(claim.nb.piece, from.nb.piece, 'nb.piece')) || ok({});\n  }\n});\n\n/**\n * Capability allowing an agent to _request_ info about a content piece in\n * Filecoin deals.\n */\nexport const filecoinInfo = capability({\n  can: 'filecoin/info',\n  /**\n   * DID of the space the content is stored in.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * CID of the piece.\n     *\n     * @see https://github.com/filecoin-project/FIPs/pull/758/files\n     */\n    piece: PieceLink\n  }),\n  derives: (claim, from) => {\n    return and(equalWith(claim, from)) || and(checkLink(claim.nb.piece, from.nb.piece, 'nb.piece')) || ok({});\n  }\n});","map":{"version":3,"names":["capability","Schema","ok","PieceLink","equalWith","checkLink","and","filecoin","can","with","did","derives","filecoinOffer","nb","struct","content","link","piece","claim","from","filecoinSubmit","filecoinAccept","filecoinInfo"],"sources":["C:/FACULTATE/Proiect/node_modules/@web3-storage/capabilities/src/filecoin/storefront.js"],"sourcesContent":["/**\n * Filecoin Storefront Capabilities\n *\n * These can be imported directly with:\n * ```js\n * import * as Storefront from '@web3-storage/capabilities/filecoin/storefront'\n * ```\n *\n * @module\n */\n\nimport { capability, Schema, ok } from '@ucanto/validator'\nimport { PieceLink } from './lib.js'\nimport { equalWith, checkLink, and } from '../utils.js'\n\n/**\n * Top-level capability for Filecoin operations.\n */\nexport const filecoin = capability({\n  can: 'filecoin/*',\n  /**\n   * DID of the space the content is stored in.\n   */\n  with: Schema.did(),\n  derives: equalWith,\n})\n\n/**\n * Capability allowing an agent to _request_ storing a content piece in\n * Filecoin.\n */\nexport const filecoinOffer = capability({\n  can: 'filecoin/offer',\n  /**\n   * DID of the space the content is stored in.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * CID of the content that resulted in Filecoin piece.\n     */\n    content: Schema.link(),\n    /**\n     * CID of the piece.\n     */\n    piece: PieceLink,\n  }),\n  derives: (claim, from) => {\n    return (\n      and(equalWith(claim, from)) ||\n      and(checkLink(claim.nb.content, from.nb.content, 'nb.content')) ||\n      and(checkLink(claim.nb.piece, from.nb.piece, 'nb.piece')) ||\n      ok({})\n    )\n  },\n})\n\n/**\n * Capability allowing a Storefront to signal that an offered piece has been\n * submitted to the filecoin storage pipeline.\n */\nexport const filecoinSubmit = capability({\n  can: 'filecoin/submit',\n  /**\n   * DID of the Storefront.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * CID of the content that resulted in Filecoin piece.\n     */\n    content: Schema.link(),\n    /**\n     * CID of the piece.\n     *\n     * @see https://github.com/filecoin-project/FIPs/pull/758/files\n     */\n    piece: PieceLink,\n  }),\n  derives: (claim, from) => {\n    return (\n      and(equalWith(claim, from)) ||\n      and(checkLink(claim.nb.content, from.nb.content, 'nb.content')) ||\n      and(checkLink(claim.nb.piece, from.nb.piece, 'nb.piece')) ||\n      ok({})\n    )\n  },\n})\n\n/**\n * Capability allowing a Storefront to signal that a submitted piece has been\n * accepted in a Filecoin deal. The receipt contains the proof.\n */\nexport const filecoinAccept = capability({\n  can: 'filecoin/accept',\n  /**\n   * DID of the Storefront.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * CID of the content that resulted in Filecoin piece.\n     */\n    content: Schema.link(),\n    /**\n     * CID of the piece.\n     *\n     * @see https://github.com/filecoin-project/FIPs/pull/758/files\n     */\n    piece: PieceLink,\n  }),\n  derives: (claim, from) => {\n    return (\n      and(equalWith(claim, from)) ||\n      and(checkLink(claim.nb.content, from.nb.content, 'nb.content')) ||\n      and(checkLink(claim.nb.piece, from.nb.piece, 'nb.piece')) ||\n      ok({})\n    )\n  },\n})\n\n/**\n * Capability allowing an agent to _request_ info about a content piece in\n * Filecoin deals.\n */\nexport const filecoinInfo = capability({\n  can: 'filecoin/info',\n  /**\n   * DID of the space the content is stored in.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * CID of the piece.\n     *\n     * @see https://github.com/filecoin-project/FIPs/pull/758/files\n     */\n    piece: PieceLink,\n  }),\n  derives: (claim, from) => {\n    return (\n      and(equalWith(claim, from)) ||\n      and(checkLink(claim.nb.piece, from.nb.piece, 'nb.piece')) ||\n      ok({})\n    )\n  },\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}