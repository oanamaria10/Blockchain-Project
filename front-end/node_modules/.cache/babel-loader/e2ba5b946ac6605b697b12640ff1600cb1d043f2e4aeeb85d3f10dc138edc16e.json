{"ast":null,"code":"var linker = require('./linker.js');\n\n/// Translate old style version numbers to semver.\n/// Old style: 0.3.6-3fc68da5/Release-Emscripten/clang\n///            0.3.5-371690f0/Release-Emscripten/clang/Interpreter\n///            0.3.5-0/Release-Emscripten/clang/Interpreter\n///            0.2.0-e7098958/.-Emscripten/clang/int linked to libethereum-1.1.1-bbb80ab0/.-Emscripten/clang/int\n///            0.1.3-0/.-/clang/int linked to libethereum-0.9.92-0/.-/clang/int\n///            0.1.2-5c3bfd4b*/.-/clang/int\n///            0.1.1-6ff4cd6b/RelWithDebInfo-Emscripten/clang/int\n/// New style: 0.4.5+commit.b318366e.Emscripten.clang\nfunction versionToSemver(version) {\n  // FIXME: parse more detail, but this is a good start\n  var parsed = version.match(/^([0-9]+\\.[0-9]+\\.[0-9]+)-([0-9a-f]{8})[/*].*$/);\n  if (parsed) {\n    return parsed[1] + '+commit.' + parsed[2];\n  }\n  if (version.indexOf('0.1.3-0') !== -1) {\n    return '0.1.3';\n  }\n  if (version.indexOf('0.3.5-0') !== -1) {\n    return '0.3.5';\n  }\n  // assume it is already semver compatible\n  return version;\n}\nfunction translateErrors(ret, errors) {\n  for (var error in errors) {\n    var type = 'error';\n    var extractType = /^(.*):(\\d+):(\\d+):(.*):/;\n    extractType = extractType.exec(errors[error]);\n    if (extractType) {\n      type = extractType[4].trim();\n    } else if (errors[error].indexOf(': Warning:')) {\n      type = 'Warning';\n    } else if (errors[error].indexOf(': Error:')) {\n      type = 'Error';\n    }\n    ret.push({\n      type: type,\n      component: 'general',\n      severity: type === 'Warning' ? 'warning' : 'error',\n      message: errors[error],\n      formattedMessage: errors[error]\n    });\n  }\n}\nfunction translateGasEstimates(gasEstimates) {\n  if (gasEstimates === null) {\n    return 'infinite';\n  }\n  if (typeof gasEstimates === 'number') {\n    return gasEstimates.toString();\n  }\n  var gasEstimatesTranslated = {};\n  for (var func in gasEstimates) {\n    gasEstimatesTranslated[func] = translateGasEstimates(gasEstimates[func]);\n  }\n  return gasEstimatesTranslated;\n}\nfunction translateJsonCompilerOutput(output, libraries) {\n  var ret = {};\n  ret['errors'] = [];\n  var errors;\n  if (output['error']) {\n    errors = [output['error']];\n  } else {\n    errors = output['errors'];\n  }\n  translateErrors(ret['errors'], errors);\n  ret['contracts'] = {};\n  for (var contract in output['contracts']) {\n    // Split name first, can be `contract`, `:contract` or `filename:contract`\n    var tmp = contract.match(/^(([^:]*):)?([^:]+)$/);\n    if (tmp.length !== 4) {\n      // Force abort\n      return null;\n    }\n    var fileName = tmp[2];\n    if (fileName === undefined) {\n      // this is the case of `contract`\n      fileName = '';\n    }\n    var contractName = tmp[3];\n    var contractInput = output['contracts'][contract];\n    var gasEstimates = contractInput['gasEstimates'];\n    var translatedGasEstimates = {};\n    if (gasEstimates['creation']) {\n      translatedGasEstimates['creation'] = {\n        'codeDepositCost': translateGasEstimates(gasEstimates['creation'][1]),\n        'executionCost': translateGasEstimates(gasEstimates['creation'][0])\n      };\n    }\n    if (gasEstimates['internal']) {\n      translatedGasEstimates['internal'] = translateGasEstimates(gasEstimates['internal']);\n    }\n    if (gasEstimates['external']) {\n      translatedGasEstimates['external'] = translateGasEstimates(gasEstimates['external']);\n    }\n    var contractOutput = {\n      'abi': JSON.parse(contractInput['interface']),\n      'metadata': contractInput['metadata'],\n      'evm': {\n        'legacyAssembly': contractInput['assembly'],\n        'bytecode': {\n          'object': contractInput['bytecode'] && linker.linkBytecode(contractInput['bytecode'], libraries || {}),\n          'opcodes': contractInput['opcodes'],\n          'sourceMap': contractInput['srcmap'],\n          'linkReferences': contractInput['bytecode'] && linker.findLinkReferences(contractInput['bytecode'])\n        },\n        'deployedBytecode': {\n          'object': contractInput['runtimeBytecode'] && linker.linkBytecode(contractInput['runtimeBytecode'], libraries || {}),\n          'sourceMap': contractInput['srcmapRuntime'],\n          'linkReferences': contractInput['runtimeBytecode'] && linker.findLinkReferences(contractInput['runtimeBytecode'])\n        },\n        'methodIdentifiers': contractInput['functionHashes'],\n        'gasEstimates': translatedGasEstimates\n      }\n    };\n    if (!ret['contracts'][fileName]) {\n      ret['contracts'][fileName] = {};\n    }\n    ret['contracts'][fileName][contractName] = contractOutput;\n  }\n  var sourceMap = {};\n  for (var sourceId in output['sourceList']) {\n    sourceMap[output['sourceList'][sourceId]] = sourceId;\n  }\n  ret['sources'] = {};\n  for (var source in output['sources']) {\n    ret['sources'][source] = {\n      id: sourceMap[source],\n      legacyAST: output['sources'][source].AST\n    };\n  }\n  return ret;\n}\nfunction escapeString(text) {\n  return text.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t');\n}\n\n// 'asm' can be an object or a string\nfunction formatAssemblyText(asm, prefix, source) {\n  if (typeof asm === 'string' || asm === null || asm === undefined) {\n    return prefix + (asm || '') + '\\n';\n  }\n  var text = prefix + '.code\\n';\n  asm['.code'].forEach(function (item, i) {\n    var v = item.value === undefined ? '' : item.value;\n    var src = '';\n    if (source !== undefined && item.begin !== undefined && item.end !== undefined) {\n      src = escapeString(source.slice(item.begin, item.end));\n    }\n    if (src.length > 30) {\n      src = src.slice(0, 30) + '...';\n    }\n    if (item.name !== 'tag') {\n      text += '  ';\n    }\n    text += prefix + item.name + ' ' + v + '\\t\\t\\t' + src + '\\n';\n  });\n  text += prefix + '.data\\n';\n  var asmData = asm['.data'] || [];\n  for (var i in asmData) {\n    var item = asmData[i];\n    text += '  ' + prefix + '' + i + ':\\n';\n    text += formatAssemblyText(item, prefix + '    ', source);\n  }\n  return text;\n}\nfunction prettyPrintLegacyAssemblyJSON(assembly, source) {\n  return formatAssemblyText(assembly, '', source);\n}\nmodule.exports = {\n  versionToSemver: versionToSemver,\n  translateJsonCompilerOutput: translateJsonCompilerOutput,\n  prettyPrintLegacyAssemblyJSON: prettyPrintLegacyAssemblyJSON\n};","map":{"version":3,"names":["linker","require","versionToSemver","version","parsed","match","indexOf","translateErrors","ret","errors","error","type","extractType","exec","trim","push","component","severity","message","formattedMessage","translateGasEstimates","gasEstimates","toString","gasEstimatesTranslated","func","translateJsonCompilerOutput","output","libraries","contract","tmp","length","fileName","undefined","contractName","contractInput","translatedGasEstimates","contractOutput","JSON","parse","linkBytecode","findLinkReferences","sourceMap","sourceId","source","id","legacyAST","AST","escapeString","text","replace","formatAssemblyText","asm","prefix","forEach","item","i","v","value","src","begin","end","slice","name","asmData","prettyPrintLegacyAssemblyJSON","assembly","module","exports"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/solc/translate.js"],"sourcesContent":["var linker = require('./linker.js');\n\n/// Translate old style version numbers to semver.\n/// Old style: 0.3.6-3fc68da5/Release-Emscripten/clang\n///            0.3.5-371690f0/Release-Emscripten/clang/Interpreter\n///            0.3.5-0/Release-Emscripten/clang/Interpreter\n///            0.2.0-e7098958/.-Emscripten/clang/int linked to libethereum-1.1.1-bbb80ab0/.-Emscripten/clang/int\n///            0.1.3-0/.-/clang/int linked to libethereum-0.9.92-0/.-/clang/int\n///            0.1.2-5c3bfd4b*/.-/clang/int\n///            0.1.1-6ff4cd6b/RelWithDebInfo-Emscripten/clang/int\n/// New style: 0.4.5+commit.b318366e.Emscripten.clang\nfunction versionToSemver (version) {\n  // FIXME: parse more detail, but this is a good start\n  var parsed = version.match(/^([0-9]+\\.[0-9]+\\.[0-9]+)-([0-9a-f]{8})[/*].*$/);\n  if (parsed) {\n    return parsed[1] + '+commit.' + parsed[2];\n  }\n  if (version.indexOf('0.1.3-0') !== -1) {\n    return '0.1.3';\n  }\n  if (version.indexOf('0.3.5-0') !== -1) {\n    return '0.3.5';\n  }\n  // assume it is already semver compatible\n  return version;\n}\n\nfunction translateErrors (ret, errors) {\n  for (var error in errors) {\n    var type = 'error';\n    var extractType = /^(.*):(\\d+):(\\d+):(.*):/;\n    extractType = extractType.exec(errors[error]);\n    if (extractType) {\n      type = extractType[4].trim();\n    } else if (errors[error].indexOf(': Warning:')) {\n      type = 'Warning';\n    } else if (errors[error].indexOf(': Error:')) {\n      type = 'Error';\n    }\n    ret.push({\n      type: type,\n      component: 'general',\n      severity: (type === 'Warning') ? 'warning' : 'error',\n      message: errors[error],\n      formattedMessage: errors[error]\n    });\n  }\n}\n\nfunction translateGasEstimates (gasEstimates) {\n  if (gasEstimates === null) {\n    return 'infinite';\n  }\n\n  if (typeof gasEstimates === 'number') {\n    return gasEstimates.toString();\n  }\n\n  var gasEstimatesTranslated = {};\n  for (var func in gasEstimates) {\n    gasEstimatesTranslated[func] = translateGasEstimates(gasEstimates[func]);\n  }\n  return gasEstimatesTranslated;\n}\n\nfunction translateJsonCompilerOutput (output, libraries) {\n  var ret = {};\n\n  ret['errors'] = [];\n  var errors;\n  if (output['error']) {\n    errors = [ output['error'] ];\n  } else {\n    errors = output['errors'];\n  }\n  translateErrors(ret['errors'], errors);\n\n  ret['contracts'] = {};\n  for (var contract in output['contracts']) {\n    // Split name first, can be `contract`, `:contract` or `filename:contract`\n    var tmp = contract.match(/^(([^:]*):)?([^:]+)$/);\n    if (tmp.length !== 4) {\n      // Force abort\n      return null;\n    }\n    var fileName = tmp[2];\n    if (fileName === undefined) {\n      // this is the case of `contract`\n      fileName = '';\n    }\n    var contractName = tmp[3];\n\n    var contractInput = output['contracts'][contract];\n\n    var gasEstimates = contractInput['gasEstimates'];\n    var translatedGasEstimates = {};\n\n    if (gasEstimates['creation']) {\n      translatedGasEstimates['creation'] = {\n        'codeDepositCost': translateGasEstimates(gasEstimates['creation'][1]),\n        'executionCost': translateGasEstimates(gasEstimates['creation'][0])\n      };\n    }\n    if (gasEstimates['internal']) {\n      translatedGasEstimates['internal'] = translateGasEstimates(gasEstimates['internal']);\n    }\n    if (gasEstimates['external']) {\n      translatedGasEstimates['external'] = translateGasEstimates(gasEstimates['external']);\n    }\n\n    var contractOutput = {\n      'abi': JSON.parse(contractInput['interface']),\n      'metadata': contractInput['metadata'],\n      'evm': {\n        'legacyAssembly': contractInput['assembly'],\n        'bytecode': {\n          'object': contractInput['bytecode'] && linker.linkBytecode(contractInput['bytecode'], libraries || {}),\n          'opcodes': contractInput['opcodes'],\n          'sourceMap': contractInput['srcmap'],\n          'linkReferences': contractInput['bytecode'] && linker.findLinkReferences(contractInput['bytecode'])\n        },\n        'deployedBytecode': {\n          'object': contractInput['runtimeBytecode'] && linker.linkBytecode(contractInput['runtimeBytecode'], libraries || {}),\n          'sourceMap': contractInput['srcmapRuntime'],\n          'linkReferences': contractInput['runtimeBytecode'] && linker.findLinkReferences(contractInput['runtimeBytecode'])\n        },\n        'methodIdentifiers': contractInput['functionHashes'],\n        'gasEstimates': translatedGasEstimates\n      }\n    };\n\n    if (!ret['contracts'][fileName]) {\n      ret['contracts'][fileName] = {};\n    }\n\n    ret['contracts'][fileName][contractName] = contractOutput;\n  }\n\n  var sourceMap = {};\n  for (var sourceId in output['sourceList']) {\n    sourceMap[output['sourceList'][sourceId]] = sourceId;\n  }\n\n  ret['sources'] = {};\n  for (var source in output['sources']) {\n    ret['sources'][source] = {\n      id: sourceMap[source],\n      legacyAST: output['sources'][source].AST\n    };\n  }\n\n  return ret;\n}\n\nfunction escapeString (text) {\n  return text\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\\r/g, '\\\\r')\n    .replace(/\\t/g, '\\\\t');\n}\n\n// 'asm' can be an object or a string\nfunction formatAssemblyText (asm, prefix, source) {\n  if (typeof asm === 'string' || asm === null || asm === undefined) {\n    return prefix + (asm || '') + '\\n';\n  }\n  var text = prefix + '.code\\n';\n  asm['.code'].forEach(function (item, i) {\n    var v = item.value === undefined ? '' : item.value;\n    var src = '';\n    if (source !== undefined && item.begin !== undefined && item.end !== undefined) {\n      src = escapeString(source.slice(item.begin, item.end));\n    }\n    if (src.length > 30) {\n      src = src.slice(0, 30) + '...';\n    }\n    if (item.name !== 'tag') {\n      text += '  ';\n    }\n    text += prefix + item.name + ' ' + v + '\\t\\t\\t' + src + '\\n';\n  });\n  text += prefix + '.data\\n';\n  var asmData = asm['.data'] || [];\n  for (var i in asmData) {\n    var item = asmData[i];\n    text += '  ' + prefix + '' + i + ':\\n';\n    text += formatAssemblyText(item, prefix + '    ', source);\n  }\n  return text;\n}\n\nfunction prettyPrintLegacyAssemblyJSON (assembly, source) {\n  return formatAssemblyText(assembly, '', source);\n}\n\nmodule.exports = {\n  versionToSemver: versionToSemver,\n  translateJsonCompilerOutput: translateJsonCompilerOutput,\n  prettyPrintLegacyAssemblyJSON: prettyPrintLegacyAssemblyJSON\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}