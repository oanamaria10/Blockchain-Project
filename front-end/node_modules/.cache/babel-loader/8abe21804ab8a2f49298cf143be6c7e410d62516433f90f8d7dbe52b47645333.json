{"ast":null,"code":"var _jsxFileName = \"C:\\\\FACULTATE\\\\Proiect\\\\front-end\\\\src\\\\uploadFile.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { create } from 'ipfs-http-client';\n\n// Creează clientul IPFS folosind Infura\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = create('https://ipfs.infura.io:5001/api/v0');\nconst UploadFile = ({\n  onFileUploaded\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [image, setImage] = useState(null);\n  const [link, setLink] = useState('');\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleImageChange = event => {\n    setImage(event.target.files[0]);\n  };\n  const handleLinkChange = event => {\n    setLink(event.target.value);\n  };\n  const uploadToIPFS = async () => {\n    try {\n      if (!file || !image || !link) {\n        alert('Te rog să completezi toate câmpurile!');\n        return;\n      }\n\n      // Încarcă fișierul pe IPFS\n      const fileAdded = await client.add(file);\n      const imageAdded = await client.add(image);\n      console.log('Fișierul încărcat pe IPFS cu CID:', fileAdded.path);\n      console.log('Imaginea încărcată pe IPFS cu CID:', imageAdded.path);\n\n      // Apelează funcția onFileUploaded pentru a trimite CID-ul și linkul\n      onFileUploaded(imageAdded.path, fileAdded.path, link);\n    } catch (err) {\n      console.error('A apărut o eroare la încărcarea fișierului pe IPFS', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\xCEncarc\\u0103 fi\\u0219iere pentru campanie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleImageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Link campanie\",\n      value: link,\n      onChange: handleLinkChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadToIPFS,\n      children: \"\\xCEncarc\\u0103 pe IPFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadFile, \"+rFBF2o0Wu4woQ7PUOa74OOXkzo=\");\n_c = UploadFile;\nexport default UploadFile;\nvar _c;\n$RefreshReg$(_c, \"UploadFile\");","map":{"version":3,"names":["React","useState","create","jsxDEV","_jsxDEV","client","UploadFile","onFileUploaded","_s","file","setFile","image","setImage","link","setLink","handleFileChange","event","target","files","handleImageChange","handleLinkChange","value","uploadToIPFS","alert","fileAdded","add","imageAdded","console","log","path","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/FACULTATE/Proiect/front-end/src/uploadFile.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { create } from 'ipfs-http-client';\r\n\r\n// Creează clientul IPFS folosind Infura\r\nconst client = create('https://ipfs.infura.io:5001/api/v0');\r\n\r\nconst UploadFile = ({ onFileUploaded }) => {\r\n  const [file, setFile] = useState(null);\r\n  const [image, setImage] = useState(null);\r\n  const [link, setLink] = useState('');\r\n\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleImageChange = (event) => {\r\n    setImage(event.target.files[0]);\r\n  };\r\n\r\n  const handleLinkChange = (event) => {\r\n    setLink(event.target.value);\r\n  };\r\n\r\n  const uploadToIPFS = async () => {\r\n    try {\r\n      if (!file || !image || !link) {\r\n        alert('Te rog să completezi toate câmpurile!');\r\n        return;\r\n      }\r\n\r\n      // Încarcă fișierul pe IPFS\r\n      const fileAdded = await client.add(file);\r\n      const imageAdded = await client.add(image);\r\n\r\n      console.log('Fișierul încărcat pe IPFS cu CID:', fileAdded.path);\r\n      console.log('Imaginea încărcată pe IPFS cu CID:', imageAdded.path);\r\n\r\n      // Apelează funcția onFileUploaded pentru a trimite CID-ul și linkul\r\n      onFileUploaded(imageAdded.path, fileAdded.path, link);\r\n    } catch (err) {\r\n      console.error('A apărut o eroare la încărcarea fișierului pe IPFS', err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Încarcă fișiere pentru campanie</h2>\r\n      <input type=\"file\" onChange={handleImageChange} />\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      <input type=\"text\" placeholder=\"Link campanie\" value={link} onChange={handleLinkChange} />\r\n      <button onClick={uploadToIPFS}>Încarcă pe IPFS</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadFile;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}