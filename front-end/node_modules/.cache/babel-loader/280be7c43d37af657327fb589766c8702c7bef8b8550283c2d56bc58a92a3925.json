{"ast":null,"code":"/**\n * Filecoin Dealer Capabilities\n *\n * These can be imported directly with:\n * ```js\n * import * as Dealer from '@web3-storage/capabilities/filecoin/dealer'\n * ```\n *\n * @module\n */\n\nimport { capability, Schema, ok } from '@ucanto/validator';\nimport { PieceLink } from './lib.js';\nimport { equalWith, checkLink, and } from '../utils.js';\n\n/**\n * Capability allowing an Aggregator to request an aggregate to be added to a\n * deal with a Storage Provider.\n */\nexport const aggregateOffer = capability({\n  can: 'aggregate/offer',\n  /**\n   * DID of an authorized Storefront.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * Commitment proof for the aggregate being offered.\n     */\n    aggregate: PieceLink,\n    /**\n     * CID of the DAG-CBOR encoded block with offer details.\n     * Service will queue given offer to be validated and handled.\n     */\n    pieces: Schema.link({\n      version: 1\n    })\n  }),\n  derives: (claim, from) => {\n    return and(equalWith(claim, from)) || and(checkLink(claim.nb.aggregate, from.nb.aggregate, 'nb.aggregate')) || and(checkLink(claim.nb.pieces, from.nb.pieces, 'nb.pieces')) || ok({});\n  }\n});\n\n/**\n * Capability that allows a Dealer to signal an aggregate has been accepted\n * for inclusion in a Filecoin deal.\n */\nexport const aggregateAccept = capability({\n  can: 'aggregate/accept',\n  /**\n   * did:key identifier of the broker authority where offer is made available.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * Commitment proof for the aggregate being offered.\n     */\n    aggregate: PieceLink,\n    /**\n     * CID of the DAG-CBOR encoded block with offer details.\n     * Service will queue given offer to be validated and handled.\n     */\n    pieces: Schema.link()\n  }),\n  derives: (claim, from) => {\n    return and(equalWith(claim, from)) || and(checkLink(claim.nb.aggregate, from.nb.aggregate, 'nb.aggregate')) || and(checkLink(claim.nb.pieces, from.nb.pieces, 'nb.pieces')) || ok({});\n  }\n});","map":{"version":3,"names":["capability","Schema","ok","PieceLink","equalWith","checkLink","and","aggregateOffer","can","with","did","nb","struct","aggregate","pieces","link","version","derives","claim","from","aggregateAccept"],"sources":["C:/FACULTATE/Proiect/node_modules/@web3-storage/capabilities/src/filecoin/dealer.js"],"sourcesContent":["/**\n * Filecoin Dealer Capabilities\n *\n * These can be imported directly with:\n * ```js\n * import * as Dealer from '@web3-storage/capabilities/filecoin/dealer'\n * ```\n *\n * @module\n */\n\nimport { capability, Schema, ok } from '@ucanto/validator'\nimport { PieceLink } from './lib.js'\nimport { equalWith, checkLink, and } from '../utils.js'\n\n/**\n * Capability allowing an Aggregator to request an aggregate to be added to a\n * deal with a Storage Provider.\n */\nexport const aggregateOffer = capability({\n  can: 'aggregate/offer',\n  /**\n   * DID of an authorized Storefront.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * Commitment proof for the aggregate being offered.\n     */\n    aggregate: PieceLink,\n    /**\n     * CID of the DAG-CBOR encoded block with offer details.\n     * Service will queue given offer to be validated and handled.\n     */\n    pieces: Schema.link({ version: 1 }),\n  }),\n  derives: (claim, from) => {\n    return (\n      and(equalWith(claim, from)) ||\n      and(checkLink(claim.nb.aggregate, from.nb.aggregate, 'nb.aggregate')) ||\n      and(checkLink(claim.nb.pieces, from.nb.pieces, 'nb.pieces')) ||\n      ok({})\n    )\n  },\n})\n\n/**\n * Capability that allows a Dealer to signal an aggregate has been accepted\n * for inclusion in a Filecoin deal.\n */\nexport const aggregateAccept = capability({\n  can: 'aggregate/accept',\n  /**\n   * did:key identifier of the broker authority where offer is made available.\n   */\n  with: Schema.did(),\n  nb: Schema.struct({\n    /**\n     * Commitment proof for the aggregate being offered.\n     */\n    aggregate: PieceLink,\n    /**\n     * CID of the DAG-CBOR encoded block with offer details.\n     * Service will queue given offer to be validated and handled.\n     */\n    pieces: Schema.link(),\n  }),\n  derives: (claim, from) => {\n    return (\n      and(equalWith(claim, from)) ||\n      and(checkLink(claim.nb.aggregate, from.nb.aggregate, 'nb.aggregate')) ||\n      and(checkLink(claim.nb.pieces, from.nb.pieces, 'nb.pieces')) ||\n      ok({})\n    )\n  },\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAU,EAAEC,MAAM,EAAEC,EAAE,QAAQ,mBAAmB;AAC1D,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,SAAS,EAAEC,SAAS,EAAEC,GAAG,QAAQ,aAAa;;AAEvD;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGP,UAAU,CAAC;EACvCQ,GAAG,EAAE,iBAAiB;EACtB;AACF;AACA;EACEC,IAAI,EAAER,MAAM,CAACS,GAAG,CAAC,CAAC;EAClBC,EAAE,EAAEV,MAAM,CAACW,MAAM,CAAC;IAChB;AACJ;AACA;IACIC,SAAS,EAAEV,SAAS;IACpB;AACJ;AACA;AACA;IACIW,MAAM,EAAEb,MAAM,CAACc,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAE,CAAC;EACpC,CAAC,CAAC;EACFC,OAAO,EAAEA,CAACC,KAAK,EAAEC,IAAI,KAAK;IACxB,OACEb,GAAG,CAACF,SAAS,CAACc,KAAK,EAAEC,IAAI,CAAC,CAAC,IAC3Bb,GAAG,CAACD,SAAS,CAACa,KAAK,CAACP,EAAE,CAACE,SAAS,EAAEM,IAAI,CAACR,EAAE,CAACE,SAAS,EAAE,cAAc,CAAC,CAAC,IACrEP,GAAG,CAACD,SAAS,CAACa,KAAK,CAACP,EAAE,CAACG,MAAM,EAAEK,IAAI,CAACR,EAAE,CAACG,MAAM,EAAE,WAAW,CAAC,CAAC,IAC5DZ,EAAE,CAAC,CAAC,CAAC,CAAC;EAEV;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMkB,eAAe,GAAGpB,UAAU,CAAC;EACxCQ,GAAG,EAAE,kBAAkB;EACvB;AACF;AACA;EACEC,IAAI,EAAER,MAAM,CAACS,GAAG,CAAC,CAAC;EAClBC,EAAE,EAAEV,MAAM,CAACW,MAAM,CAAC;IAChB;AACJ;AACA;IACIC,SAAS,EAAEV,SAAS;IACpB;AACJ;AACA;AACA;IACIW,MAAM,EAAEb,MAAM,CAACc,IAAI,CAAC;EACtB,CAAC,CAAC;EACFE,OAAO,EAAEA,CAACC,KAAK,EAAEC,IAAI,KAAK;IACxB,OACEb,GAAG,CAACF,SAAS,CAACc,KAAK,EAAEC,IAAI,CAAC,CAAC,IAC3Bb,GAAG,CAACD,SAAS,CAACa,KAAK,CAACP,EAAE,CAACE,SAAS,EAAEM,IAAI,CAACR,EAAE,CAACE,SAAS,EAAE,cAAc,CAAC,CAAC,IACrEP,GAAG,CAACD,SAAS,CAACa,KAAK,CAACP,EAAE,CAACG,MAAM,EAAEK,IAAI,CAACR,EAAE,CAACG,MAAM,EAAE,WAAW,CAAC,CAAC,IAC5DZ,EAAE,CAAC,CAAC,CAAC,CAAC;EAEV;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}