{"ast":null,"code":"var _jsxFileName = \"C:\\\\FACULTATE\\\\Proiect\\\\front-end\\\\src\\\\uploadFile.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadFileToIPFS = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const uploadFile = async () => {\n    if (!file) {\n      alert('Please select a file to upload!');\n      return;\n    }\n    const url = 'https://ipfs.infura.io:5001/api/v0/add';\n    const apiKey = '033c4f3be5d84ba8af1eb00d78434c9d';\n    const apiSecret = 'ZESrMNXvxVJ9c/XiVz1vxEuP8wSk0s+qsfnrFDcie30reqvmmAiwcQ';\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          Authorization: `Basic ${btoa(`${apiKey}:${apiSecret}`)}` // Encode API Key and Secret\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const result = await response.json();\n      console.log('File uploaded successfully:', result);\n      alert(`File uploaded! CID: ${result.Hash}`);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      alert('File upload failed. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload File to IPFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadFile,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadFileToIPFS, \"Nkb8eHkBruGouXteoqeZ1R6wRVk=\");\n_c = UploadFileToIPFS;\nexport default UploadFileToIPFS;\nvar _c;\n$RefreshReg$(_c, \"UploadFileToIPFS\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UploadFileToIPFS","_s","file","setFile","handleFileChange","event","target","files","uploadFile","alert","url","apiKey","apiSecret","formData","FormData","append","response","fetch","method","body","headers","Authorization","btoa","ok","Error","status","result","json","console","log","Hash","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/FACULTATE/Proiect/front-end/src/uploadFile.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst UploadFileToIPFS = () => {\r\n  const [file, setFile] = useState(null);\r\n\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  const uploadFile = async () => {\r\n    if (!file) {\r\n      alert('Please select a file to upload!');\r\n      return;\r\n    }\r\n\r\n    const url = 'https://ipfs.infura.io:5001/api/v0/add';\r\n    const apiKey = '033c4f3be5d84ba8af1eb00d78434c9d';\r\n    const apiSecret = 'ZESrMNXvxVJ9c/XiVz1vxEuP8wSk0s+qsfnrFDcie30reqvmmAiwcQ';\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        body: formData,\r\n        headers: {\r\n          Authorization: `Basic ${btoa(`${apiKey}:${apiSecret}`)}`, // Encode API Key and Secret\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('File uploaded successfully:', result);\r\n      alert(`File uploaded! CID: ${result.Hash}`);\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n      alert('File upload failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Upload File to IPFS</h2>\r\n      {/* File input */}\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      {/* Upload button */}\r\n      <button onClick={uploadFile}>Upload</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadFileToIPFS;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMO,gBAAgB,GAAIC,KAAK,IAAK;IAClCF,OAAO,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACN,IAAI,EAAE;MACTO,KAAK,CAAC,iCAAiC,CAAC;MACxC;IACF;IAEA,MAAMC,GAAG,GAAG,wCAAwC;IACpD,MAAMC,MAAM,GAAG,kCAAkC;IACjD,MAAMC,SAAS,GAAG,wDAAwD;IAE1E,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEb,IAAI,CAAC;IAE7B,IAAI;MACF,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAE;QAChCQ,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN,QAAQ;QACdO,OAAO,EAAE;UACPC,aAAa,EAAG,SAAQC,IAAI,CAAE,GAAEX,MAAO,IAAGC,SAAU,EAAC,CAAE,EAAC,CAAE;QAC5D;MACF,CAAC,CAAC;MAEF,IAAI,CAACI,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBR,QAAQ,CAACS,MAAO,EAAC,CAAC;MAC3D;MAEA,MAAMC,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEH,MAAM,CAAC;MAClDjB,KAAK,CAAE,uBAAsBiB,MAAM,CAACI,IAAK,EAAC,CAAC;IAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CtB,KAAK,CAAC,uCAAuC,CAAC;IAChD;EACF,CAAC;EAED,oBACEV,OAAA;IAAAiC,QAAA,gBACEjC,OAAA;MAAAiC,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE5BrC,OAAA;MAAOsC,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAElC;IAAiB;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEjDrC,OAAA;MAAQwC,OAAO,EAAE/B,UAAW;MAAAwB,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEV,CAAC;AAACnC,EAAA,CAnDID,gBAAgB;AAAAwC,EAAA,GAAhBxC,gBAAgB;AAqDtB,eAAeA,gBAAgB;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}