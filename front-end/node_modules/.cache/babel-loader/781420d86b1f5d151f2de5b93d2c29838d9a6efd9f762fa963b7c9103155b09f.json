{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { getCurrentHub } from '@sentry/hub';\nimport { addInstrumentationHandler, isInstanceOf, isMatchingPattern } from '@sentry/utils';\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\nexport var DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\nexport var defaultRequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS\n};\n/** Registers span creators for xhr and fetch requests  */\nexport function registerRequestInstrumentation(_options) {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  var _a = __assign(__assign({}, defaultRequestInstrumentationOptions), _options),\n    traceFetch = _a.traceFetch,\n    traceXHR = _a.traceXHR,\n    tracingOrigins = _a.tracingOrigins,\n    shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;\n  // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n  var urlMap = {};\n  var defaultShouldCreateSpan = function (url) {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n    var origins = tracingOrigins;\n    urlMap[url] = origins.some(function (origin) {\n      return isMatchingPattern(url, origin);\n    }) && !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  };\n  // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n  var shouldCreateSpan = defaultShouldCreateSpan;\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = function (url) {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n  var spans = {};\n  if (traceFetch) {\n    addInstrumentationHandler({\n      callback: function (handlerData) {\n        fetchCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'fetch'\n    });\n  }\n  if (traceXHR) {\n    addInstrumentationHandler({\n      callback: function (handlerData) {\n        xhrCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'xhr'\n    });\n  }\n}\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(handlerData, shouldCreateSpan, spans) {\n  var _a;\n  var currentClientOptions = (_a = getCurrentHub().getClient()) === null || _a === void 0 ? void 0 : _a.getOptions();\n  if (!(currentClientOptions && hasTracingEnabled(currentClientOptions)) || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n  if (handlerData.endTimestamp && handlerData.fetchData.__span) {\n    var span = spans[handlerData.fetchData.__span];\n    if (span) {\n      var response = handlerData.response;\n      if (response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(response.status);\n      }\n      span.finish();\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[handlerData.fetchData.__span];\n    }\n    return;\n  }\n  var activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: __assign(__assign({}, handlerData.fetchData), {\n        type: 'fetch'\n      }),\n      description: handlerData.fetchData.method + \" \" + handlerData.fetchData.url,\n      op: 'http'\n    });\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n    var request = handlerData.args[0] = handlerData.args[0];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var options = handlerData.args[1] = handlerData.args[1] || {};\n    var headers = options.headers;\n    if (isInstanceOf(request, Request)) {\n      headers = request.headers;\n    }\n    if (headers) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (typeof headers.append === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        headers.append('sentry-trace', span.toTraceparent());\n      } else if (Array.isArray(headers)) {\n        headers = __spread(headers, [['sentry-trace', span.toTraceparent()]]);\n      } else {\n        headers = __assign(__assign({}, headers), {\n          'sentry-trace': span.toTraceparent()\n        });\n      }\n    } else {\n      headers = {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n    options.headers = headers;\n  }\n}\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(handlerData, shouldCreateSpan, spans) {\n  var _a;\n  var currentClientOptions = (_a = getCurrentHub().getClient()) === null || _a === void 0 ? void 0 : _a.getOptions();\n  if (!(currentClientOptions && hasTracingEnabled(currentClientOptions)) || !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url)) || handlerData.xhr.__sentry_own_request__) {\n    return;\n  }\n  var xhr = handlerData.xhr.__sentry_xhr__;\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_span_id__) {\n    var span = spans[handlerData.xhr.__sentry_xhr_span_id__];\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[handlerData.xhr.__sentry_xhr_span_id__];\n    }\n    return;\n  }\n  // if not, create a new span to track it\n  var activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    var span = activeTransaction.startChild({\n      data: __assign(__assign({}, xhr.data), {\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url\n      }),\n      description: xhr.method + \" \" + xhr.url,\n      op: 'http'\n    });\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}","map":{"version":3,"names":["getCurrentHub","addInstrumentationHandler","isInstanceOf","isMatchingPattern","getActiveTransaction","hasTracingEnabled","DEFAULT_TRACING_ORIGINS","defaultRequestInstrumentationOptions","traceFetch","traceXHR","tracingOrigins","registerRequestInstrumentation","_options","_a","__assign","shouldCreateSpanForRequest","urlMap","defaultShouldCreateSpan","url","origins","some","origin","shouldCreateSpan","spans","callback","handlerData","fetchCallback","type","xhrCallback","currentClientOptions","getClient","getOptions","fetchData","endTimestamp","__span","span","response","setHttpStatus","status","finish","activeTransaction","startChild","data","description","method","op","spanId","request","args","options","headers","Request","append","toTraceparent","Array","isArray","__spread","xhr","__sentry_xhr__","__sentry_own_request__","__sentry_xhr_span_id__","status_code","setRequestHeader","_"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\tracing\\src\\browser\\request.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/hub';\nimport { addInstrumentationHandler, isInstanceOf, isMatchingPattern } from '@sentry/utils';\n\nimport { Span } from '../span';\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\n\nexport const DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * List of strings / regex where the integration should create Spans out of. Additionally this will be used\n   * to define which outgoing requests the `sentry-trace` header will be attached to.\n   *\n   * Default: ['localhost', /^\\//] {@see DEFAULT_TRACING_ORIGINS}\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * By default it uses the `tracingOrigins` options as a url match.\n   */\n  shouldCreateSpanForRequest?(url: string): boolean;\n}\n\n/** Data returned from fetch callback */\nexport interface FetchData {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[]; // the arguments passed to the fetch call itself\n  fetchData?: {\n    method: string;\n    url: string;\n    // span_id\n    __span?: string;\n  };\n\n  // TODO Should this be unknown instead? If we vendor types, make it a Response\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  response?: any;\n\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    __sentry_xhr__?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function registerRequestInstrumentation(_options?: Partial<RequestInstrumentationOptions>): void {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const { traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest } = {\n    ...defaultRequestInstrumentationOptions,\n    ..._options,\n  };\n\n  // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n  const urlMap: Record<string, boolean> = {};\n\n  const defaultShouldCreateSpan = (url: string): boolean => {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n    const origins = tracingOrigins;\n    urlMap[url] =\n      origins.some((origin: string | RegExp) => isMatchingPattern(url, origin)) &&\n      !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  };\n\n  // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n  let shouldCreateSpan = defaultShouldCreateSpan;\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = (url: string) => {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler({\n      callback: (handlerData: FetchData) => {\n        fetchCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'fetch',\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler({\n      callback: (handlerData: XHRData) => {\n        xhrCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'xhr',\n    });\n  }\n}\n\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(\n  handlerData: FetchData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  const currentClientOptions = getCurrentHub()\n    .getClient()\n    ?.getOptions();\n  if (\n    !(currentClientOptions && hasTracingEnabled(currentClientOptions)) ||\n    !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))\n  ) {\n    return;\n  }\n\n  if (handlerData.endTimestamp && handlerData.fetchData.__span) {\n    const span = spans[handlerData.fetchData.__span];\n    if (span) {\n      const response = handlerData.response;\n      if (response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(response.status);\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[handlerData.fetchData.__span];\n    }\n    return;\n  }\n\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...handlerData.fetchData,\n        type: 'fetch',\n      },\n      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,\n      op: 'http',\n    });\n\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n\n    const request = (handlerData.args[0] = handlerData.args[0] as string | Request);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = (handlerData.args[1] = (handlerData.args[1] as { [key: string]: any }) || {});\n    let headers = options.headers;\n    if (isInstanceOf(request, Request)) {\n      headers = (request as Request).headers;\n    }\n    if (headers) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (typeof headers.append === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        headers.append('sentry-trace', span.toTraceparent());\n      } else if (Array.isArray(headers)) {\n        headers = [...headers, ['sentry-trace', span.toTraceparent()]];\n      } else {\n        headers = { ...headers, 'sentry-trace': span.toTraceparent() };\n      }\n    } else {\n      headers = { 'sentry-trace': span.toTraceparent() };\n    }\n    options.headers = headers;\n  }\n}\n\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  const currentClientOptions = getCurrentHub()\n    .getClient()\n    ?.getOptions();\n  if (\n    !(currentClientOptions && hasTracingEnabled(currentClientOptions)) ||\n    !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url)) ||\n    handlerData.xhr.__sentry_own_request__\n  ) {\n    return;\n  }\n\n  const xhr = handlerData.xhr.__sentry_xhr__;\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_span_id__) {\n    const span = spans[handlerData.xhr.__sentry_xhr_span_id__];\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[handlerData.xhr.__sentry_xhr_span_id__];\n    }\n    return;\n  }\n\n  // if not, create a new span to track it\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...xhr.data,\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url,\n      },\n      description: `${xhr.method} ${xhr.url}`,\n      op: 'http',\n    });\n\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}