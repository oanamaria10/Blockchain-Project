{"ast":null,"code":"import * as API from '@ucanto/interface';\nimport { CAR, Message } from '@ucanto/core';\nexport { CAR as codec };\nexport const contentType = CAR.contentType;\nconst HEADERS = Object.freeze({\n  'content-type': contentType,\n  // We will signal that we want to receive a CAR file in the response\n  accept: contentType\n});\n\n/**\n * Encodes `AgentMessage` into an `HTTPRequest`.\n *\n * @template {API.AgentMessage} Message\n * @param {Message} message\n * @param {API.EncodeOptions & { headers?: Record<string, string> }} [options]\n * @returns {API.HTTPRequest<Message>}\n */\nexport const encode = (message, options) => {\n  const blocks = new Map();\n  for (const block of message.iterateIPLDBlocks()) {\n    blocks.set(`${block.cid}`, block);\n  }\n\n  /**\n   * Cast to Uint8Array to remove phantom type set by the\n   * CAR encoder which is too specific.\n   *\n   * @type {Uint8Array}\n   */\n  const body = CAR.encode({\n    roots: [message.root],\n    blocks\n  });\n  return {\n    headers: options?.headers || {\n      ...HEADERS\n    },\n    body\n  };\n};\n\n/**\n * Decodes `AgentMessage` from the received `HTTPRequest`.\n *\n * @template {API.AgentMessage} Message\n * @param {API.HTTPRequest<Message>} request\n * @returns {Promise<Message>}\n */\nexport const decode = async ({\n  headers,\n  body\n}) => {\n  const {\n    roots,\n    blocks\n  } = CAR.decode( /** @type {Uint8Array} */body);\n  const message = Message.view({\n    root: roots[0].cid,\n    store: blocks\n  });\n  return /** @type {Message} */message;\n};","map":{"version":3,"names":["API","CAR","Message","codec","contentType","HEADERS","Object","freeze","accept","encode","message","options","blocks","Map","block","iterateIPLDBlocks","set","cid","body","roots","root","headers","decode","view","store"],"sources":["C:/FACULTATE/Proiect/node_modules/@ucanto/transport/src/car/request.js"],"sourcesContent":["import * as API from '@ucanto/interface'\nimport { CAR, Message } from '@ucanto/core'\n\nexport { CAR as codec }\n\nexport const contentType = CAR.contentType\n\nconst HEADERS = Object.freeze({\n  'content-type': contentType,\n  // We will signal that we want to receive a CAR file in the response\n  accept: contentType,\n})\n\n/**\n * Encodes `AgentMessage` into an `HTTPRequest`.\n *\n * @template {API.AgentMessage} Message\n * @param {Message} message\n * @param {API.EncodeOptions & { headers?: Record<string, string> }} [options]\n * @returns {API.HTTPRequest<Message>}\n */\nexport const encode = (message, options) => {\n  const blocks = new Map()\n  for (const block of message.iterateIPLDBlocks()) {\n    blocks.set(`${block.cid}`, block)\n  }\n\n  /**\n   * Cast to Uint8Array to remove phantom type set by the\n   * CAR encoder which is too specific.\n   *\n   * @type {Uint8Array}\n   */\n  const body = CAR.encode({\n    roots: [message.root],\n    blocks,\n  })\n\n  return {\n    headers: options?.headers || { ...HEADERS },\n    body,\n  }\n}\n\n/**\n * Decodes `AgentMessage` from the received `HTTPRequest`.\n *\n * @template {API.AgentMessage} Message\n * @param {API.HTTPRequest<Message>} request\n * @returns {Promise<Message>}\n */\nexport const decode = async ({ headers, body }) => {\n  const { roots, blocks } = CAR.decode(/** @type {Uint8Array} */ (body))\n  const message = Message.view({ root: roots[0].cid, store: blocks })\n  return /** @type {Message} */ (message)\n}\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,mBAAmB;AACxC,SAASC,GAAG,EAAEC,OAAO,QAAQ,cAAc;AAE3C,SAASD,GAAG,IAAIE,KAAK;AAErB,OAAO,MAAMC,WAAW,GAAGH,GAAG,CAACG,WAAW;AAE1C,MAAMC,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC;EAC5B,cAAc,EAAEH,WAAW;EAC3B;EACAI,MAAM,EAAEJ;AACV,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,MAAM,GAAGA,CAACC,OAAO,EAAEC,OAAO,KAAK;EAC1C,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;EACxB,KAAK,MAAMC,KAAK,IAAIJ,OAAO,CAACK,iBAAiB,CAAC,CAAC,EAAE;IAC/CH,MAAM,CAACI,GAAG,CAAE,GAAEF,KAAK,CAACG,GAAI,EAAC,EAAEH,KAAK,CAAC;EACnC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMI,IAAI,GAAGjB,GAAG,CAACQ,MAAM,CAAC;IACtBU,KAAK,EAAE,CAACT,OAAO,CAACU,IAAI,CAAC;IACrBR;EACF,CAAC,CAAC;EAEF,OAAO;IACLS,OAAO,EAAEV,OAAO,EAAEU,OAAO,IAAI;MAAE,GAAGhB;IAAQ,CAAC;IAC3Ca;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,MAAM,GAAG,MAAAA,CAAO;EAAED,OAAO;EAAEH;AAAK,CAAC,KAAK;EACjD,MAAM;IAAEC,KAAK;IAAEP;EAAO,CAAC,GAAGX,GAAG,CAACqB,MAAM,EAAC,yBAA2BJ,IAAK,CAAC;EACtE,MAAMR,OAAO,GAAGR,OAAO,CAACqB,IAAI,CAAC;IAAEH,IAAI,EAAED,KAAK,CAAC,CAAC,CAAC,CAACF,GAAG;IAAEO,KAAK,EAAEZ;EAAO,CAAC,CAAC;EACnE,OAAO,sBAAwBF,OAAO;AACxC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}