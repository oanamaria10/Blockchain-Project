{"ast":null,"code":"import retry from 'retry';\nconst networkErrorMsgs = new Set(['Failed to fetch',\n// Chrome\n'NetworkError when attempting to fetch resource.',\n// Firefox\n'The Internet connection appears to be offline.',\n// Safari\n'Network request failed',\n// `cross-fetch`\n'fetch failed' // Undici (Node.js)\n]);\nexport class AbortError extends Error {\n  constructor(message) {\n    super();\n    if (message instanceof Error) {\n      this.originalError = message;\n      ({\n        message\n      } = message);\n    } else {\n      this.originalError = new Error(message);\n      this.originalError.stack = this.stack;\n    }\n    this.name = 'AbortError';\n    this.message = message;\n  }\n}\nconst decorateErrorWithCounts = (error, attemptNumber, options) => {\n  // Minus 1 from attemptNumber because the first attempt does not count as a retry\n  const retriesLeft = options.retries - (attemptNumber - 1);\n  error.attemptNumber = attemptNumber;\n  error.retriesLeft = retriesLeft;\n  return error;\n};\nconst isNetworkError = errorMessage => networkErrorMsgs.has(errorMessage);\nconst getDOMException = errorMessage => globalThis.DOMException === undefined ? new Error(errorMessage) : new DOMException(errorMessage);\nexport default async function pRetry(input, options) {\n  return new Promise((resolve, reject) => {\n    options = {\n      onFailedAttempt() {},\n      retries: 10,\n      ...options\n    };\n    const operation = retry.operation(options);\n    operation.attempt(async attemptNumber => {\n      try {\n        resolve(await input(attemptNumber));\n      } catch (error) {\n        if (!(error instanceof Error)) {\n          reject(new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`));\n          return;\n        }\n        if (error instanceof AbortError) {\n          operation.stop();\n          reject(error.originalError);\n        } else if (error instanceof TypeError && !isNetworkError(error.message)) {\n          operation.stop();\n          reject(error);\n        } else {\n          decorateErrorWithCounts(error, attemptNumber, options);\n          try {\n            await options.onFailedAttempt(error);\n          } catch (error) {\n            reject(error);\n            return;\n          }\n          if (!operation.retry(error)) {\n            reject(operation.mainError());\n          }\n        }\n      }\n    });\n    if (options.signal && !options.signal.aborted) {\n      options.signal.addEventListener('abort', () => {\n        operation.stop();\n        const reason = options.signal.reason === undefined ? getDOMException('The operation was aborted.') : options.signal.reason;\n        reject(reason instanceof Error ? reason : getDOMException(reason));\n      }, {\n        once: true\n      });\n    }\n  });\n}","map":{"version":3,"names":["retry","networkErrorMsgs","Set","AbortError","Error","constructor","message","originalError","stack","name","decorateErrorWithCounts","error","attemptNumber","options","retriesLeft","retries","isNetworkError","errorMessage","has","getDOMException","globalThis","DOMException","undefined","pRetry","input","Promise","resolve","reject","onFailedAttempt","operation","attempt","TypeError","stop","mainError","signal","aborted","addEventListener","reason","once"],"sources":["C:/FACULTATE/Proiect/node_modules/@web3-storage/upload-client/node_modules/p-retry/index.js"],"sourcesContent":["import retry from 'retry';\n\nconst networkErrorMsgs = new Set([\n\t'Failed to fetch', // Chrome\n\t'NetworkError when attempting to fetch resource.', // Firefox\n\t'The Internet connection appears to be offline.', // Safari\n\t'Network request failed', // `cross-fetch`\n\t'fetch failed', // Undici (Node.js)\n]);\n\nexport class AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\n\t\tif (message instanceof Error) {\n\t\t\tthis.originalError = message;\n\t\t\t({message} = message);\n\t\t} else {\n\t\t\tthis.originalError = new Error(message);\n\t\t\tthis.originalError.stack = this.stack;\n\t\t}\n\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\nconst decorateErrorWithCounts = (error, attemptNumber, options) => {\n\t// Minus 1 from attemptNumber because the first attempt does not count as a retry\n\tconst retriesLeft = options.retries - (attemptNumber - 1);\n\n\terror.attemptNumber = attemptNumber;\n\terror.retriesLeft = retriesLeft;\n\treturn error;\n};\n\nconst isNetworkError = errorMessage => networkErrorMsgs.has(errorMessage);\n\nconst getDOMException = errorMessage => globalThis.DOMException === undefined\n\t? new Error(errorMessage)\n\t: new DOMException(errorMessage);\n\nexport default async function pRetry(input, options) {\n\treturn new Promise((resolve, reject) => {\n\t\toptions = {\n\t\t\tonFailedAttempt() {},\n\t\t\tretries: 10,\n\t\t\t...options,\n\t\t};\n\n\t\tconst operation = retry.operation(options);\n\n\t\toperation.attempt(async attemptNumber => {\n\t\t\ttry {\n\t\t\t\tresolve(await input(attemptNumber));\n\t\t\t} catch (error) {\n\t\t\t\tif (!(error instanceof Error)) {\n\t\t\t\t\treject(new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (error instanceof AbortError) {\n\t\t\t\t\toperation.stop();\n\t\t\t\t\treject(error.originalError);\n\t\t\t\t} else if (error instanceof TypeError && !isNetworkError(error.message)) {\n\t\t\t\t\toperation.stop();\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tdecorateErrorWithCounts(error, attemptNumber, options);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait options.onFailedAttempt(error);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!operation.retry(error)) {\n\t\t\t\t\t\treject(operation.mainError());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (options.signal && !options.signal.aborted) {\n\t\t\toptions.signal.addEventListener('abort', () => {\n\t\t\t\toperation.stop();\n\t\t\t\tconst reason = options.signal.reason === undefined\n\t\t\t\t\t? getDOMException('The operation was aborted.')\n\t\t\t\t\t: options.signal.reason;\n\t\t\t\treject(reason instanceof Error ? reason : getDOMException(reason));\n\t\t\t}, {\n\t\t\t\tonce: true,\n\t\t\t});\n\t\t}\n\t});\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}