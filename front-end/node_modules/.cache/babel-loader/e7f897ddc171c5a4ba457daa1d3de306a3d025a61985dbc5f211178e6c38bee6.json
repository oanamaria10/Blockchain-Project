{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeCompilationJobsWithoutBug = exports.mergeCompilationJobsWithBug = exports.createCompilationJobFromFile = exports.createCompilationJobsFromConnectedComponent = exports.CompilationJob = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst semver_1 = __importDefault(require(\"semver\"));\nconst builtin_tasks_1 = require(\"../../types/builtin-tasks\");\nconst errors_1 = require(\"../core/errors\");\nconst log = (0, debug_1.default)(\"hardhat:core:compilation-job\");\n// this should have a proper version range when it's fixed\nconst SOLC_BUG_9573_VERSIONS = \"<0.8.0\";\nfunction isCompilationJobCreationError(x) {\n  return \"reason\" in x;\n}\nclass CompilationJob {\n  constructor(solidityConfig) {\n    this.solidityConfig = solidityConfig;\n    this._filesToCompile = new Map();\n  }\n  addFileToCompile(file, emitsArtifacts) {\n    const fileToCompile = this._filesToCompile.get(file.sourceName);\n    // if the file doesn't exist, we add it\n    // we also add it if emitsArtifacts is true, to override it in case it was\n    // previously added but with a false emitsArtifacts\n    if (fileToCompile === undefined || emitsArtifacts) {\n      this._filesToCompile.set(file.sourceName, {\n        file,\n        emitsArtifacts\n      });\n    }\n  }\n  hasSolc9573Bug() {\n    return this.solidityConfig?.settings?.optimizer?.enabled === true && semver_1.default.satisfies(this.solidityConfig.version, SOLC_BUG_9573_VERSIONS);\n  }\n  merge(job) {\n    const isEqual = require(\"lodash/isEqual\");\n    (0, errors_1.assertHardhatInvariant)(isEqual(this.solidityConfig, job.getSolcConfig()), \"Merging jobs with different solidity configurations\");\n    const mergedJobs = new CompilationJob(job.getSolcConfig());\n    for (const file of this.getResolvedFiles()) {\n      mergedJobs.addFileToCompile(file, this.emitsArtifacts(file));\n    }\n    for (const file of job.getResolvedFiles()) {\n      mergedJobs.addFileToCompile(file, job.emitsArtifacts(file));\n    }\n    return mergedJobs;\n  }\n  getSolcConfig() {\n    return this.solidityConfig;\n  }\n  isEmpty() {\n    return this._filesToCompile.size === 0;\n  }\n  getResolvedFiles() {\n    return [...this._filesToCompile.values()].map(x => x.file);\n  }\n  /**\n   * Check if the given file emits artifacts.\n   *\n   * If no file is given, check if *some* file in the job emits artifacts.\n   */\n  emitsArtifacts(file) {\n    const fileToCompile = this._filesToCompile.get(file.sourceName);\n    (0, errors_1.assertHardhatInvariant)(fileToCompile !== undefined, `File '${file.sourceName}' does not exist in this compilation job`);\n    return fileToCompile.emitsArtifacts;\n  }\n}\nexports.CompilationJob = CompilationJob;\nfunction mergeCompilationJobs(jobs, isMergeable) {\n  const jobsMap = new Map();\n  for (const job of jobs) {\n    const mergedJobs = jobsMap.get(job.getSolcConfig());\n    if (isMergeable(job)) {\n      if (mergedJobs === undefined) {\n        jobsMap.set(job.getSolcConfig(), [job]);\n      } else if (mergedJobs.length === 1) {\n        const newJob = mergedJobs[0].merge(job);\n        jobsMap.set(job.getSolcConfig(), [newJob]);\n      } else {\n        (0, errors_1.assertHardhatInvariant)(false, \"More than one mergeable job was added for the same configuration\");\n      }\n    } else {\n      if (mergedJobs === undefined) {\n        jobsMap.set(job.getSolcConfig(), [job]);\n      } else {\n        jobsMap.set(job.getSolcConfig(), [...mergedJobs, job]);\n      }\n    }\n  }\n  // Array#flat This method defaults to depth limit 1\n  return [...jobsMap.values()].flat(1000000);\n}\n/**\n * Creates a list of compilation jobs from a dependency graph. *This function\n * assumes that the given graph is a connected component*.\n * Returns the list of compilation jobs on success, and a list of\n * non-compilable files on failure.\n */\nasync function createCompilationJobsFromConnectedComponent(connectedComponent, getFromFile) {\n  const compilationJobs = [];\n  const errors = [];\n  for (const file of connectedComponent.getResolvedFiles()) {\n    const compilationJobOrError = await getFromFile(file);\n    if (isCompilationJobCreationError(compilationJobOrError)) {\n      log(`'${file.absolutePath}' couldn't be compiled. Reason: '${compilationJobOrError}'`);\n      errors.push(compilationJobOrError);\n      continue;\n    }\n    compilationJobs.push(compilationJobOrError);\n  }\n  const jobs = mergeCompilationJobsWithBug(compilationJobs);\n  return {\n    jobs,\n    errors\n  };\n}\nexports.createCompilationJobsFromConnectedComponent = createCompilationJobsFromConnectedComponent;\nasync function createCompilationJobFromFile(dependencyGraph, file, solidityConfig) {\n  const directDependencies = dependencyGraph.getDependencies(file);\n  const transitiveDependencies = dependencyGraph.getTransitiveDependencies(file);\n  const compilerConfig = getCompilerConfigForFile(file, directDependencies, transitiveDependencies, solidityConfig);\n  // if the config cannot be obtained, we just return the failure\n  if (isCompilationJobCreationError(compilerConfig)) {\n    return compilerConfig;\n  }\n  log(`File '${file.absolutePath}' will be compiled with version '${compilerConfig.version}'`);\n  const compilationJob = new CompilationJob(compilerConfig);\n  compilationJob.addFileToCompile(file, true);\n  for (const {\n    dependency\n  } of transitiveDependencies) {\n    log(`File '${dependency.absolutePath}' added as dependency of '${file.absolutePath}'`);\n    compilationJob.addFileToCompile(dependency, false);\n  }\n  return compilationJob;\n}\nexports.createCompilationJobFromFile = createCompilationJobFromFile;\n/**\n * Merge compilation jobs affected by the solc #9573 bug\n */\nfunction mergeCompilationJobsWithBug(compilationJobs) {\n  return mergeCompilationJobs(compilationJobs, job => job.hasSolc9573Bug());\n}\nexports.mergeCompilationJobsWithBug = mergeCompilationJobsWithBug;\n/**\n * Merge compilation jobs not affected by the solc #9573 bug\n */\nfunction mergeCompilationJobsWithoutBug(compilationJobs) {\n  return mergeCompilationJobs(compilationJobs, job => !job.hasSolc9573Bug());\n}\nexports.mergeCompilationJobsWithoutBug = mergeCompilationJobsWithoutBug;\n/**\n * Return the compiler config with the newest version that satisfies the given\n * version ranges, or a value indicating why the compiler couldn't be obtained.\n */\nfunction getCompilerConfigForFile(file, directDependencies, transitiveDependencies, solidityConfig) {\n  const transitiveDependenciesVersionPragmas = transitiveDependencies.map(({\n    dependency\n  }) => dependency.content.versionPragmas);\n  const versionRange = Array.from(new Set([...file.content.versionPragmas, ...transitiveDependenciesVersionPragmas])).join(\" \");\n  const overrides = solidityConfig.overrides ?? {};\n  const overriddenCompiler = overrides[file.sourceName];\n  // if there's an override, we only check that\n  if (overriddenCompiler !== undefined) {\n    if (!semver_1.default.satisfies(overriddenCompiler.version, versionRange)) {\n      return getCompilationJobCreationError(file, directDependencies, transitiveDependencies, [overriddenCompiler.version], true);\n    }\n    return overriddenCompiler;\n  }\n  // if there's no override, we find a compiler that matches the version range\n  const compilerVersions = solidityConfig.compilers.map(x => x.version);\n  const matchingVersion = semver_1.default.maxSatisfying(compilerVersions, versionRange);\n  if (matchingVersion === null) {\n    return getCompilationJobCreationError(file, directDependencies, transitiveDependencies, compilerVersions, false);\n  }\n  const matchingConfig = solidityConfig.compilers.find(x => x.version === matchingVersion);\n  return matchingConfig;\n}\nfunction getCompilationJobCreationError(file, directDependencies, transitiveDependencies, compilerVersions, overriden) {\n  const fileVersionRange = file.content.versionPragmas.join(\" \");\n  if (semver_1.default.maxSatisfying(compilerVersions, fileVersionRange) === null) {\n    const reason = overriden ? builtin_tasks_1.CompilationJobCreationErrorReason.INCOMPATIBLE_OVERRIDEN_SOLC_VERSION : builtin_tasks_1.CompilationJobCreationErrorReason.NO_COMPATIBLE_SOLC_VERSION_FOUND;\n    return {\n      reason,\n      file\n    };\n  }\n  const incompatibleDirectImports = [];\n  for (const dependency of directDependencies) {\n    const dependencyVersionRange = dependency.content.versionPragmas.join(\" \");\n    if (!semver_1.default.intersects(fileVersionRange, dependencyVersionRange)) {\n      incompatibleDirectImports.push(dependency);\n    }\n  }\n  if (incompatibleDirectImports.length > 0) {\n    return {\n      reason: builtin_tasks_1.CompilationJobCreationErrorReason.DIRECTLY_IMPORTS_INCOMPATIBLE_FILE,\n      file,\n      extra: {\n        incompatibleDirectImports\n      }\n    };\n  }\n  const incompatibleIndirectImports = [];\n  for (const transitiveDependency of transitiveDependencies) {\n    const {\n      dependency\n    } = transitiveDependency;\n    const dependencyVersionRange = dependency.content.versionPragmas.join(\" \");\n    if (!semver_1.default.intersects(fileVersionRange, dependencyVersionRange)) {\n      incompatibleIndirectImports.push(transitiveDependency);\n    }\n  }\n  if (incompatibleIndirectImports.length > 0) {\n    return {\n      reason: builtin_tasks_1.CompilationJobCreationErrorReason.INDIRECTLY_IMPORTS_INCOMPATIBLE_FILE,\n      file,\n      extra: {\n        incompatibleIndirectImports\n      }\n    };\n  }\n  return {\n    reason: builtin_tasks_1.CompilationJobCreationErrorReason.OTHER_ERROR,\n    file\n  };\n}","map":{"version":3,"names":["debug_1","__importDefault","require","semver_1","builtin_tasks_1","errors_1","log","default","SOLC_BUG_9573_VERSIONS","isCompilationJobCreationError","x","CompilationJob","constructor","solidityConfig","_filesToCompile","Map","addFileToCompile","file","emitsArtifacts","fileToCompile","get","sourceName","undefined","set","hasSolc9573Bug","settings","optimizer","enabled","satisfies","version","merge","job","isEqual","assertHardhatInvariant","getSolcConfig","mergedJobs","getResolvedFiles","isEmpty","size","values","map","exports","mergeCompilationJobs","jobs","isMergeable","jobsMap","length","newJob","flat","createCompilationJobsFromConnectedComponent","connectedComponent","getFromFile","compilationJobs","errors","compilationJobOrError","absolutePath","push","mergeCompilationJobsWithBug","createCompilationJobFromFile","dependencyGraph","directDependencies","getDependencies","transitiveDependencies","getTransitiveDependencies","compilerConfig","getCompilerConfigForFile","compilationJob","dependency","mergeCompilationJobsWithoutBug","transitiveDependenciesVersionPragmas","content","versionPragmas","versionRange","Array","from","Set","join","overrides","overriddenCompiler","getCompilationJobCreationError","compilerVersions","compilers","matchingVersion","maxSatisfying","matchingConfig","find","overriden","fileVersionRange","reason","CompilationJobCreationErrorReason","INCOMPATIBLE_OVERRIDEN_SOLC_VERSION","NO_COMPATIBLE_SOLC_VERSION_FOUND","incompatibleDirectImports","dependencyVersionRange","intersects","DIRECTLY_IMPORTS_INCOMPATIBLE_FILE","extra","incompatibleIndirectImports","transitiveDependency","INDIRECTLY_IMPORTS_INCOMPATIBLE_FILE","OTHER_ERROR"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\solidity\\compilation-job.ts"],"sourcesContent":["import type { LoDashStatic } from \"lodash\";\n\nimport debug from \"debug\";\nimport semver from \"semver\";\n\nimport { SolcConfig, SolidityConfig } from \"../../types\";\nimport * as taskTypes from \"../../types/builtin-tasks\";\nimport {\n  CompilationJobCreationError,\n  CompilationJobCreationErrorReason,\n  CompilationJobsCreationResult,\n} from \"../../types/builtin-tasks\";\nimport { assertHardhatInvariant } from \"../core/errors\";\n\nimport { ResolvedFile } from \"./resolver\";\n\nconst log = debug(\"hardhat:core:compilation-job\");\n\n// this should have a proper version range when it's fixed\nconst SOLC_BUG_9573_VERSIONS = \"<0.8.0\";\n\nfunction isCompilationJobCreationError(\n  x:\n    | taskTypes.CompilationJob\n    | taskTypes.CompilationJobCreationError\n    | SolcConfig\n): x is CompilationJobCreationError {\n  return \"reason\" in x;\n}\n\nexport class CompilationJob implements taskTypes.CompilationJob {\n  private _filesToCompile: Map<\n    string,\n    { file: ResolvedFile; emitsArtifacts: boolean }\n  > = new Map();\n\n  constructor(public solidityConfig: SolcConfig) {}\n\n  public addFileToCompile(file: ResolvedFile, emitsArtifacts: boolean) {\n    const fileToCompile = this._filesToCompile.get(file.sourceName);\n\n    // if the file doesn't exist, we add it\n    // we also add it if emitsArtifacts is true, to override it in case it was\n    // previously added but with a false emitsArtifacts\n    if (fileToCompile === undefined || emitsArtifacts) {\n      this._filesToCompile.set(file.sourceName, { file, emitsArtifacts });\n    }\n  }\n\n  public hasSolc9573Bug(): boolean {\n    return (\n      this.solidityConfig?.settings?.optimizer?.enabled === true &&\n      semver.satisfies(this.solidityConfig.version, SOLC_BUG_9573_VERSIONS)\n    );\n  }\n\n  public merge(job: taskTypes.CompilationJob): CompilationJob {\n    const isEqual = require(\"lodash/isEqual\") as LoDashStatic[\"isEqual\"];\n\n    assertHardhatInvariant(\n      isEqual(this.solidityConfig, job.getSolcConfig()),\n      \"Merging jobs with different solidity configurations\"\n    );\n    const mergedJobs = new CompilationJob(job.getSolcConfig());\n    for (const file of this.getResolvedFiles()) {\n      mergedJobs.addFileToCompile(file, this.emitsArtifacts(file));\n    }\n    for (const file of job.getResolvedFiles()) {\n      mergedJobs.addFileToCompile(file, job.emitsArtifacts(file));\n    }\n    return mergedJobs;\n  }\n\n  public getSolcConfig(): SolcConfig {\n    return this.solidityConfig;\n  }\n\n  public isEmpty() {\n    return this._filesToCompile.size === 0;\n  }\n\n  public getResolvedFiles(): ResolvedFile[] {\n    return [...this._filesToCompile.values()].map((x) => x.file);\n  }\n\n  /**\n   * Check if the given file emits artifacts.\n   *\n   * If no file is given, check if *some* file in the job emits artifacts.\n   */\n  public emitsArtifacts(file: ResolvedFile): boolean {\n    const fileToCompile = this._filesToCompile.get(file.sourceName);\n\n    assertHardhatInvariant(\n      fileToCompile !== undefined,\n      `File '${file.sourceName}' does not exist in this compilation job`\n    );\n\n    return fileToCompile.emitsArtifacts;\n  }\n}\n\nfunction mergeCompilationJobs(\n  jobs: taskTypes.CompilationJob[],\n  isMergeable: (job: taskTypes.CompilationJob) => boolean\n): taskTypes.CompilationJob[] {\n  const jobsMap: Map<SolcConfig, taskTypes.CompilationJob[]> = new Map();\n\n  for (const job of jobs) {\n    const mergedJobs = jobsMap.get(job.getSolcConfig());\n    if (isMergeable(job)) {\n      if (mergedJobs === undefined) {\n        jobsMap.set(job.getSolcConfig(), [job]);\n      } else if (mergedJobs.length === 1) {\n        const newJob = mergedJobs[0].merge(job);\n        jobsMap.set(job.getSolcConfig(), [newJob]);\n      } else {\n        assertHardhatInvariant(\n          false,\n          \"More than one mergeable job was added for the same configuration\"\n        );\n      }\n    } else {\n      if (mergedJobs === undefined) {\n        jobsMap.set(job.getSolcConfig(), [job]);\n      } else {\n        jobsMap.set(job.getSolcConfig(), [...mergedJobs, job]);\n      }\n    }\n  }\n\n  // Array#flat This method defaults to depth limit 1\n  return [...jobsMap.values()].flat(1_000_000);\n}\n\n/**\n * Creates a list of compilation jobs from a dependency graph. *This function\n * assumes that the given graph is a connected component*.\n * Returns the list of compilation jobs on success, and a list of\n * non-compilable files on failure.\n */\nexport async function createCompilationJobsFromConnectedComponent(\n  connectedComponent: taskTypes.DependencyGraph,\n  getFromFile: (\n    file: ResolvedFile\n  ) => Promise<taskTypes.CompilationJob | CompilationJobCreationError>\n): Promise<CompilationJobsCreationResult> {\n  const compilationJobs: taskTypes.CompilationJob[] = [];\n  const errors: CompilationJobCreationError[] = [];\n\n  for (const file of connectedComponent.getResolvedFiles()) {\n    const compilationJobOrError = await getFromFile(file);\n\n    if (isCompilationJobCreationError(compilationJobOrError)) {\n      log(\n        `'${file.absolutePath}' couldn't be compiled. Reason: '${\n          compilationJobOrError as any\n        }'`\n      );\n      errors.push(compilationJobOrError);\n      continue;\n    }\n\n    compilationJobs.push(compilationJobOrError);\n  }\n\n  const jobs = mergeCompilationJobsWithBug(compilationJobs);\n\n  return { jobs, errors };\n}\n\nexport async function createCompilationJobFromFile(\n  dependencyGraph: taskTypes.DependencyGraph,\n  file: ResolvedFile,\n  solidityConfig: SolidityConfig\n): Promise<CompilationJob | CompilationJobCreationError> {\n  const directDependencies = dependencyGraph.getDependencies(file);\n  const transitiveDependencies =\n    dependencyGraph.getTransitiveDependencies(file);\n\n  const compilerConfig = getCompilerConfigForFile(\n    file,\n    directDependencies,\n    transitiveDependencies,\n    solidityConfig\n  );\n\n  // if the config cannot be obtained, we just return the failure\n  if (isCompilationJobCreationError(compilerConfig)) {\n    return compilerConfig;\n  }\n  log(\n    `File '${file.absolutePath}' will be compiled with version '${compilerConfig.version}'`\n  );\n\n  const compilationJob = new CompilationJob(compilerConfig);\n\n  compilationJob.addFileToCompile(file, true);\n  for (const { dependency } of transitiveDependencies) {\n    log(\n      `File '${dependency.absolutePath}' added as dependency of '${file.absolutePath}'`\n    );\n    compilationJob.addFileToCompile(dependency, false);\n  }\n\n  return compilationJob;\n}\n\n/**\n * Merge compilation jobs affected by the solc #9573 bug\n */\nexport function mergeCompilationJobsWithBug(\n  compilationJobs: taskTypes.CompilationJob[]\n): taskTypes.CompilationJob[] {\n  return mergeCompilationJobs(compilationJobs, (job) => job.hasSolc9573Bug());\n}\n\n/**\n * Merge compilation jobs not affected by the solc #9573 bug\n */\nexport function mergeCompilationJobsWithoutBug(\n  compilationJobs: taskTypes.CompilationJob[]\n): taskTypes.CompilationJob[] {\n  return mergeCompilationJobs(compilationJobs, (job) => !job.hasSolc9573Bug());\n}\n\n/**\n * Return the compiler config with the newest version that satisfies the given\n * version ranges, or a value indicating why the compiler couldn't be obtained.\n */\nfunction getCompilerConfigForFile(\n  file: ResolvedFile,\n  directDependencies: ResolvedFile[],\n  transitiveDependencies: taskTypes.TransitiveDependency[],\n  solidityConfig: SolidityConfig\n): SolcConfig | CompilationJobCreationError {\n  const transitiveDependenciesVersionPragmas = transitiveDependencies.map(\n    ({ dependency }) => dependency.content.versionPragmas\n  );\n  const versionRange = Array.from(\n    new Set([\n      ...file.content.versionPragmas,\n      ...transitiveDependenciesVersionPragmas,\n    ])\n  ).join(\" \");\n\n  const overrides = solidityConfig.overrides ?? {};\n\n  const overriddenCompiler = overrides[file.sourceName];\n\n  // if there's an override, we only check that\n  if (overriddenCompiler !== undefined) {\n    if (!semver.satisfies(overriddenCompiler.version, versionRange)) {\n      return getCompilationJobCreationError(\n        file,\n        directDependencies,\n        transitiveDependencies,\n        [overriddenCompiler.version],\n        true\n      );\n    }\n\n    return overriddenCompiler;\n  }\n\n  // if there's no override, we find a compiler that matches the version range\n  const compilerVersions = solidityConfig.compilers.map((x) => x.version);\n  const matchingVersion = semver.maxSatisfying(compilerVersions, versionRange);\n\n  if (matchingVersion === null) {\n    return getCompilationJobCreationError(\n      file,\n      directDependencies,\n      transitiveDependencies,\n      compilerVersions,\n      false\n    );\n  }\n\n  const matchingConfig = solidityConfig.compilers.find(\n    (x) => x.version === matchingVersion\n  )!;\n\n  return matchingConfig;\n}\n\nfunction getCompilationJobCreationError(\n  file: ResolvedFile,\n  directDependencies: ResolvedFile[],\n  transitiveDependencies: taskTypes.TransitiveDependency[],\n  compilerVersions: string[],\n  overriden: boolean\n): CompilationJobCreationError {\n  const fileVersionRange = file.content.versionPragmas.join(\" \");\n  if (semver.maxSatisfying(compilerVersions, fileVersionRange) === null) {\n    const reason = overriden\n      ? CompilationJobCreationErrorReason.INCOMPATIBLE_OVERRIDEN_SOLC_VERSION\n      : CompilationJobCreationErrorReason.NO_COMPATIBLE_SOLC_VERSION_FOUND;\n    return { reason, file };\n  }\n\n  const incompatibleDirectImports: ResolvedFile[] = [];\n  for (const dependency of directDependencies) {\n    const dependencyVersionRange = dependency.content.versionPragmas.join(\" \");\n    if (!semver.intersects(fileVersionRange, dependencyVersionRange)) {\n      incompatibleDirectImports.push(dependency);\n    }\n  }\n\n  if (incompatibleDirectImports.length > 0) {\n    return {\n      reason:\n        CompilationJobCreationErrorReason.DIRECTLY_IMPORTS_INCOMPATIBLE_FILE,\n      file,\n      extra: {\n        incompatibleDirectImports,\n      },\n    };\n  }\n\n  const incompatibleIndirectImports: taskTypes.TransitiveDependency[] = [];\n  for (const transitiveDependency of transitiveDependencies) {\n    const { dependency } = transitiveDependency;\n    const dependencyVersionRange = dependency.content.versionPragmas.join(\" \");\n    if (!semver.intersects(fileVersionRange, dependencyVersionRange)) {\n      incompatibleIndirectImports.push(transitiveDependency);\n    }\n  }\n\n  if (incompatibleIndirectImports.length > 0) {\n    return {\n      reason:\n        CompilationJobCreationErrorReason.INDIRECTLY_IMPORTS_INCOMPATIBLE_FILE,\n      file,\n      extra: {\n        incompatibleIndirectImports,\n      },\n    };\n  }\n\n  return { reason: CompilationJobCreationErrorReason.OTHER_ERROR, file };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}