{"ast":null,"code":"/* eslint-env browser */\nimport { encode as encodeCBOR } from '@ipld/dag-cbor';\nimport { encode as encodeVarint } from './varint.js';\n\n/**\n * @param {import('multiformats').UnknownLink[]} roots\n * @returns {Uint8Array}\n */\nexport const encodeHeader = roots => {\n  const headerBytes = encodeCBOR({\n    version: 1,\n    roots\n  });\n  const varintBytes = encodeVarint(headerBytes.length);\n  const header = new Uint8Array(varintBytes.length + headerBytes.length);\n  header.set(varintBytes, 0);\n  header.set(headerBytes, varintBytes.length);\n  return header;\n};\n\n/**\n * @param {import('./api.js').Block} block\n * @returns {Uint8Array}\n */\nexport const encodeBlock = block => {\n  const varintBytes = encodeVarint(block.cid.bytes.length + block.bytes.length);\n  const bytes = new Uint8Array(varintBytes.length + block.cid.bytes.length + block.bytes.length);\n  bytes.set(varintBytes);\n  bytes.set(block.cid.bytes, varintBytes.length);\n  bytes.set(block.bytes, varintBytes.length + block.cid.bytes.length);\n  return bytes;\n};\n\n/** @extends {TransformStream<import('./api.js').Block, Uint8Array>} */\nexport class CARWriterStream extends TransformStream {\n  /**\n   * @param {import('multiformats').UnknownLink[]} [roots]\n   * @param {QueuingStrategy<import('./api.js').Block>} [writableStrategy]\n   * @param {QueuingStrategy<Uint8Array>} [readableStrategy]\n   */\n  constructor(roots = [], writableStrategy, readableStrategy) {\n    super({\n      start: controller => controller.enqueue(encodeHeader(roots)),\n      transform: (block, controller) => controller.enqueue(encodeBlock(block))\n    }, writableStrategy, readableStrategy);\n  }\n}","map":{"version":3,"names":["encode","encodeCBOR","encodeVarint","encodeHeader","roots","headerBytes","version","varintBytes","length","header","Uint8Array","set","encodeBlock","block","cid","bytes","CARWriterStream","TransformStream","constructor","writableStrategy","readableStrategy","start","controller","enqueue","transform"],"sources":["C:/FACULTATE/Proiect/node_modules/carstream/src/writer.js"],"sourcesContent":["/* eslint-env browser */\nimport { encode as encodeCBOR } from '@ipld/dag-cbor'\nimport { encode as encodeVarint } from './varint.js'\n\n/**\n * @param {import('multiformats').UnknownLink[]} roots\n * @returns {Uint8Array}\n */\nexport const encodeHeader = roots => {\n  const headerBytes = encodeCBOR({ version: 1, roots })\n  const varintBytes = encodeVarint(headerBytes.length)\n  const header = new Uint8Array(varintBytes.length + headerBytes.length)\n  header.set(varintBytes, 0)\n  header.set(headerBytes, varintBytes.length)\n  return header\n}\n\n/**\n * @param {import('./api.js').Block} block\n * @returns {Uint8Array}\n */\nexport const encodeBlock = block => {\n  const varintBytes = encodeVarint(block.cid.bytes.length + block.bytes.length)\n  const bytes = new Uint8Array(varintBytes.length + block.cid.bytes.length + block.bytes.length)\n  bytes.set(varintBytes)\n  bytes.set(block.cid.bytes, varintBytes.length)\n  bytes.set(block.bytes, varintBytes.length + block.cid.bytes.length)\n  return bytes\n}\n\n/** @extends {TransformStream<import('./api.js').Block, Uint8Array>} */\nexport class CARWriterStream extends TransformStream {\n  /**\n   * @param {import('multiformats').UnknownLink[]} [roots]\n   * @param {QueuingStrategy<import('./api.js').Block>} [writableStrategy]\n   * @param {QueuingStrategy<Uint8Array>} [readableStrategy]\n   */\n  constructor (roots = [], writableStrategy, readableStrategy) {\n    super({\n      start: controller => controller.enqueue(encodeHeader(roots)),\n      transform: (block, controller) => controller.enqueue(encodeBlock(block))\n    }, writableStrategy, readableStrategy)\n  }\n}\n"],"mappings":"AAAA;AACA,SAASA,MAAM,IAAIC,UAAU,QAAQ,gBAAgB;AACrD,SAASD,MAAM,IAAIE,YAAY,QAAQ,aAAa;;AAEpD;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGC,KAAK,IAAI;EACnC,MAAMC,WAAW,GAAGJ,UAAU,CAAC;IAAEK,OAAO,EAAE,CAAC;IAAEF;EAAM,CAAC,CAAC;EACrD,MAAMG,WAAW,GAAGL,YAAY,CAACG,WAAW,CAACG,MAAM,CAAC;EACpD,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAACH,WAAW,CAACC,MAAM,GAAGH,WAAW,CAACG,MAAM,CAAC;EACtEC,MAAM,CAACE,GAAG,CAACJ,WAAW,EAAE,CAAC,CAAC;EAC1BE,MAAM,CAACE,GAAG,CAACN,WAAW,EAAEE,WAAW,CAACC,MAAM,CAAC;EAC3C,OAAOC,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMG,WAAW,GAAGC,KAAK,IAAI;EAClC,MAAMN,WAAW,GAAGL,YAAY,CAACW,KAAK,CAACC,GAAG,CAACC,KAAK,CAACP,MAAM,GAAGK,KAAK,CAACE,KAAK,CAACP,MAAM,CAAC;EAC7E,MAAMO,KAAK,GAAG,IAAIL,UAAU,CAACH,WAAW,CAACC,MAAM,GAAGK,KAAK,CAACC,GAAG,CAACC,KAAK,CAACP,MAAM,GAAGK,KAAK,CAACE,KAAK,CAACP,MAAM,CAAC;EAC9FO,KAAK,CAACJ,GAAG,CAACJ,WAAW,CAAC;EACtBQ,KAAK,CAACJ,GAAG,CAACE,KAAK,CAACC,GAAG,CAACC,KAAK,EAAER,WAAW,CAACC,MAAM,CAAC;EAC9CO,KAAK,CAACJ,GAAG,CAACE,KAAK,CAACE,KAAK,EAAER,WAAW,CAACC,MAAM,GAAGK,KAAK,CAACC,GAAG,CAACC,KAAK,CAACP,MAAM,CAAC;EACnE,OAAOO,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,SAASC,eAAe,CAAC;EACnD;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAAEd,KAAK,GAAG,EAAE,EAAEe,gBAAgB,EAAEC,gBAAgB,EAAE;IAC3D,KAAK,CAAC;MACJC,KAAK,EAAEC,UAAU,IAAIA,UAAU,CAACC,OAAO,CAACpB,YAAY,CAACC,KAAK,CAAC,CAAC;MAC5DoB,SAAS,EAAEA,CAACX,KAAK,EAAES,UAAU,KAAKA,UAAU,CAACC,OAAO,CAACX,WAAW,CAACC,KAAK,CAAC;IACzE,CAAC,EAAEM,gBAAgB,EAAEC,gBAAgB,CAAC;EACxC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}