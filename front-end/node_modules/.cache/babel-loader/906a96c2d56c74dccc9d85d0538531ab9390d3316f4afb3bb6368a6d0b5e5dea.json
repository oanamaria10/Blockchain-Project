{"ast":null,"code":"var Utils = require(\"../util\"),\n  Constants = Utils.Constants;\n\n/* The entries in the end of central directory */\nmodule.exports = function () {\n  var _volumeEntries = 0,\n    _totalEntries = 0,\n    _size = 0,\n    _offset = 0,\n    _commentLength = 0;\n  return {\n    get diskEntries() {\n      return _volumeEntries;\n    },\n    set diskEntries( /*Number*/val) {\n      _volumeEntries = _totalEntries = val;\n    },\n    get totalEntries() {\n      return _totalEntries;\n    },\n    set totalEntries( /*Number*/val) {\n      _totalEntries = _volumeEntries = val;\n    },\n    get size() {\n      return _size;\n    },\n    set size( /*Number*/val) {\n      _size = val;\n    },\n    get offset() {\n      return _offset;\n    },\n    set offset( /*Number*/val) {\n      _offset = val;\n    },\n    get commentLength() {\n      return _commentLength;\n    },\n    set commentLength( /*Number*/val) {\n      _commentLength = val;\n    },\n    get mainHeaderSize() {\n      return Constants.ENDHDR + _commentLength;\n    },\n    loadFromBinary: function ( /*Buffer*/data) {\n      // data should be 22 bytes and start with \"PK 05 06\"\n      // or be 56+ bytes and start with \"PK 06 06\" for Zip64\n      if ((data.length !== Constants.ENDHDR || data.readUInt32LE(0) !== Constants.ENDSIG) && (data.length < Constants.ZIP64HDR || data.readUInt32LE(0) !== Constants.ZIP64SIG)) {\n        throw new Error(Utils.Errors.INVALID_END);\n      }\n      if (data.readUInt32LE(0) === Constants.ENDSIG) {\n        // number of entries on this volume\n        _volumeEntries = data.readUInt16LE(Constants.ENDSUB);\n        // total number of entries\n        _totalEntries = data.readUInt16LE(Constants.ENDTOT);\n        // central directory size in bytes\n        _size = data.readUInt32LE(Constants.ENDSIZ);\n        // offset of first CEN header\n        _offset = data.readUInt32LE(Constants.ENDOFF);\n        // zip file comment length\n        _commentLength = data.readUInt16LE(Constants.ENDCOM);\n      } else {\n        // number of entries on this volume\n        _volumeEntries = Utils.readBigUInt64LE(data, Constants.ZIP64SUB);\n        // total number of entries\n        _totalEntries = Utils.readBigUInt64LE(data, Constants.ZIP64TOT);\n        // central directory size in bytes\n        _size = Utils.readBigUInt64LE(data, Constants.ZIP64SIZ);\n        // offset of first CEN header\n        _offset = Utils.readBigUInt64LE(data, Constants.ZIP64OFF);\n        _commentLength = 0;\n      }\n    },\n    toBinary: function () {\n      var b = Buffer.alloc(Constants.ENDHDR + _commentLength);\n      // \"PK 05 06\" signature\n      b.writeUInt32LE(Constants.ENDSIG, 0);\n      b.writeUInt32LE(0, 4);\n      // number of entries on this volume\n      b.writeUInt16LE(_volumeEntries, Constants.ENDSUB);\n      // total number of entries\n      b.writeUInt16LE(_totalEntries, Constants.ENDTOT);\n      // central directory size in bytes\n      b.writeUInt32LE(_size, Constants.ENDSIZ);\n      // offset of first CEN header\n      b.writeUInt32LE(_offset, Constants.ENDOFF);\n      // zip file comment length\n      b.writeUInt16LE(_commentLength, Constants.ENDCOM);\n      // fill comment memory with spaces so no garbage is left there\n      b.fill(\" \", Constants.ENDHDR);\n      return b;\n    },\n    toString: function () {\n      return '{\\n' + '\\t\"diskEntries\" : ' + _volumeEntries + \",\\n\" + '\\t\"totalEntries\" : ' + _totalEntries + \",\\n\" + '\\t\"size\" : ' + _size + \" bytes,\\n\" + '\\t\"offset\" : 0x' + _offset.toString(16).toUpperCase() + \",\\n\" + '\\t\"commentLength\" : 0x' + _commentLength + \"\\n\" + '}';\n    }\n  };\n};","map":{"version":3,"names":["Utils","require","Constants","module","exports","_volumeEntries","_totalEntries","_size","_offset","_commentLength","diskEntries","val","totalEntries","size","offset","commentLength","mainHeaderSize","ENDHDR","loadFromBinary","data","length","readUInt32LE","ENDSIG","ZIP64HDR","ZIP64SIG","Error","Errors","INVALID_END","readUInt16LE","ENDSUB","ENDTOT","ENDSIZ","ENDOFF","ENDCOM","readBigUInt64LE","ZIP64SUB","ZIP64TOT","ZIP64SIZ","ZIP64OFF","toBinary","b","Buffer","alloc","writeUInt32LE","writeUInt16LE","fill","toString","toUpperCase"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/adm-zip/headers/mainHeader.js"],"sourcesContent":["var Utils = require(\"../util\"),\r\n    Constants = Utils.Constants;\r\n\r\n/* The entries in the end of central directory */\r\nmodule.exports = function () {\r\n    var _volumeEntries = 0,\r\n        _totalEntries = 0,\r\n        _size = 0,\r\n        _offset = 0,\r\n        _commentLength = 0;\r\n\r\n    return {\r\n        get diskEntries () { return _volumeEntries },\r\n        set diskEntries (/*Number*/val) { _volumeEntries = _totalEntries = val; },\r\n\r\n        get totalEntries () { return _totalEntries },\r\n        set totalEntries (/*Number*/val) { _totalEntries = _volumeEntries = val; },\r\n\r\n        get size () { return _size },\r\n        set size (/*Number*/val) { _size = val; },\r\n\r\n        get offset () { return _offset },\r\n        set offset (/*Number*/val) { _offset = val; },\r\n\r\n        get commentLength () { return _commentLength },\r\n        set commentLength (/*Number*/val) { _commentLength = val; },\r\n\r\n        get mainHeaderSize () {\r\n            return Constants.ENDHDR + _commentLength;\r\n        },\r\n\r\n        loadFromBinary : function(/*Buffer*/data) {\r\n            // data should be 22 bytes and start with \"PK 05 06\"\r\n            // or be 56+ bytes and start with \"PK 06 06\" for Zip64\r\n            if ((data.length !== Constants.ENDHDR || data.readUInt32LE(0) !== Constants.ENDSIG) &&\r\n                (data.length < Constants.ZIP64HDR || data.readUInt32LE(0) !== Constants.ZIP64SIG)) {\r\n\r\n                throw new Error(Utils.Errors.INVALID_END);\r\n            }\r\n\r\n            if (data.readUInt32LE(0) === Constants.ENDSIG) {\r\n                // number of entries on this volume\r\n                _volumeEntries = data.readUInt16LE(Constants.ENDSUB);\r\n                // total number of entries\r\n                _totalEntries = data.readUInt16LE(Constants.ENDTOT);\r\n                // central directory size in bytes\r\n                _size = data.readUInt32LE(Constants.ENDSIZ);\r\n                // offset of first CEN header\r\n                _offset = data.readUInt32LE(Constants.ENDOFF);\r\n                // zip file comment length\r\n                _commentLength = data.readUInt16LE(Constants.ENDCOM);\r\n            } else {\r\n                // number of entries on this volume\r\n                _volumeEntries = Utils.readBigUInt64LE(data, Constants.ZIP64SUB);\r\n                // total number of entries\r\n                _totalEntries = Utils.readBigUInt64LE(data, Constants.ZIP64TOT);\r\n                // central directory size in bytes\r\n                _size = Utils.readBigUInt64LE(data, Constants.ZIP64SIZ);\r\n                // offset of first CEN header\r\n                _offset = Utils.readBigUInt64LE(data, Constants.ZIP64OFF);\r\n\r\n                _commentLength = 0;\r\n            }\r\n\r\n        },\r\n\r\n        toBinary : function() {\r\n           var b = Buffer.alloc(Constants.ENDHDR + _commentLength);\r\n            // \"PK 05 06\" signature\r\n            b.writeUInt32LE(Constants.ENDSIG, 0);\r\n            b.writeUInt32LE(0, 4);\r\n            // number of entries on this volume\r\n            b.writeUInt16LE(_volumeEntries, Constants.ENDSUB);\r\n            // total number of entries\r\n            b.writeUInt16LE(_totalEntries, Constants.ENDTOT);\r\n            // central directory size in bytes\r\n            b.writeUInt32LE(_size, Constants.ENDSIZ);\r\n            // offset of first CEN header\r\n            b.writeUInt32LE(_offset, Constants.ENDOFF);\r\n            // zip file comment length\r\n            b.writeUInt16LE(_commentLength, Constants.ENDCOM);\r\n            // fill comment memory with spaces so no garbage is left there\r\n            b.fill(\" \", Constants.ENDHDR);\r\n\r\n            return b;\r\n        },\r\n\r\n        toString : function() {\r\n            return '{\\n' +\r\n                '\\t\"diskEntries\" : ' + _volumeEntries + \",\\n\" +\r\n                '\\t\"totalEntries\" : ' + _totalEntries + \",\\n\" +\r\n                '\\t\"size\" : ' + _size + \" bytes,\\n\" +\r\n                '\\t\"offset\" : 0x' + _offset.toString(16).toUpperCase() + \",\\n\" +\r\n                '\\t\"commentLength\" : 0x' + _commentLength + \"\\n\" +\r\n            '}';\r\n        }\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}