{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Exit = exports.ExitCode = void 0;\nvar ExitCode;\n(function (ExitCode) {\n  ExitCode[ExitCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n  ExitCode[ExitCode[\"REVERT\"] = 1] = \"REVERT\";\n  ExitCode[ExitCode[\"OUT_OF_GAS\"] = 2] = \"OUT_OF_GAS\";\n  ExitCode[ExitCode[\"INTERNAL_ERROR\"] = 3] = \"INTERNAL_ERROR\";\n  ExitCode[ExitCode[\"INVALID_OPCODE\"] = 4] = \"INVALID_OPCODE\";\n  ExitCode[ExitCode[\"STACK_UNDERFLOW\"] = 5] = \"STACK_UNDERFLOW\";\n  ExitCode[ExitCode[\"CODESIZE_EXCEEDS_MAXIMUM\"] = 6] = \"CODESIZE_EXCEEDS_MAXIMUM\";\n  ExitCode[ExitCode[\"CREATE_COLLISION\"] = 7] = \"CREATE_COLLISION\";\n  ExitCode[ExitCode[\"STATIC_STATE_CHANGE\"] = 8] = \"STATIC_STATE_CHANGE\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\nclass Exit {\n  static fromEdrSuccessReason(reason) {\n    switch (reason) {\n      case 0 /* SuccessReason.Stop */:\n      case 1 /* SuccessReason.Return */:\n      case 2 /* SuccessReason.SelfDestruct */:\n        return new Exit(ExitCode.SUCCESS);\n    }\n    const _exhaustiveCheck = reason;\n  }\n  static fromEdrExceptionalHalt(halt) {\n    switch (halt) {\n      case 0 /* ExceptionalHalt.OutOfGas */:\n        return new Exit(ExitCode.OUT_OF_GAS);\n      case 1 /* ExceptionalHalt.OpcodeNotFound */:\n      case 2 /* ExceptionalHalt.InvalidFEOpcode */:\n      // Returned when an opcode is not implemented for the hardfork\n      case 4 /* ExceptionalHalt.NotActivated */:\n        return new Exit(ExitCode.INVALID_OPCODE);\n      case 5 /* ExceptionalHalt.StackUnderflow */:\n        return new Exit(ExitCode.STACK_UNDERFLOW);\n      case 8 /* ExceptionalHalt.CreateCollision */:\n        return new Exit(ExitCode.CREATE_COLLISION);\n      case 11 /* ExceptionalHalt.CreateContractSizeLimit */:\n        return new Exit(ExitCode.CODESIZE_EXCEEDS_MAXIMUM);\n      default:\n        {\n          // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n          throw new Error(`Unmatched EDR exceptional halt: ${halt}`);\n        }\n    }\n  }\n  constructor(kind) {\n    this.kind = kind;\n  }\n  isError() {\n    return this.kind !== ExitCode.SUCCESS;\n  }\n  getReason() {\n    switch (this.kind) {\n      case ExitCode.SUCCESS:\n        return \"Success\";\n      case ExitCode.REVERT:\n        return \"Reverted\";\n      case ExitCode.OUT_OF_GAS:\n        return \"Out of gas\";\n      case ExitCode.INTERNAL_ERROR:\n        return \"Internal error\";\n      case ExitCode.INVALID_OPCODE:\n        return \"Invalid opcode\";\n      case ExitCode.STACK_UNDERFLOW:\n        return \"Stack underflow\";\n      case ExitCode.CODESIZE_EXCEEDS_MAXIMUM:\n        return \"Codesize exceeds maximum\";\n      case ExitCode.CREATE_COLLISION:\n        return \"Create collision\";\n      case ExitCode.STATIC_STATE_CHANGE:\n        return \"Static state change\";\n    }\n    const _exhaustiveCheck = this.kind;\n  }\n  getEdrExceptionalHalt() {\n    switch (this.kind) {\n      case ExitCode.OUT_OF_GAS:\n        return 0 /* ExceptionalHalt.OutOfGas */;\n      case ExitCode.INVALID_OPCODE:\n        return 1 /* ExceptionalHalt.OpcodeNotFound */;\n      case ExitCode.CODESIZE_EXCEEDS_MAXIMUM:\n        return 11 /* ExceptionalHalt.CreateContractSizeLimit */;\n      case ExitCode.CREATE_COLLISION:\n        return 8 /* ExceptionalHalt.CreateCollision */;\n      default:\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw new Error(`Unmatched exit code: ${this.kind}`);\n    }\n  }\n}\nexports.Exit = Exit;","map":{"version":3,"names":["ExitCode","exports","Exit","fromEdrSuccessReason","reason","SUCCESS","_exhaustiveCheck","fromEdrExceptionalHalt","halt","OUT_OF_GAS","INVALID_OPCODE","STACK_UNDERFLOW","CREATE_COLLISION","CODESIZE_EXCEEDS_MAXIMUM","Error","constructor","kind","isError","getReason","REVERT","INTERNAL_ERROR","STATIC_STATE_CHANGE","getEdrExceptionalHalt"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\hardhat-network\\provider\\vm\\exit.ts"],"sourcesContent":["import { ExceptionalHalt, SuccessReason } from \"@nomicfoundation/edr\";\n\nexport enum ExitCode {\n  SUCCESS,\n  REVERT,\n  OUT_OF_GAS,\n  INTERNAL_ERROR,\n  INVALID_OPCODE,\n  STACK_UNDERFLOW,\n  CODESIZE_EXCEEDS_MAXIMUM,\n  CREATE_COLLISION,\n  STATIC_STATE_CHANGE,\n}\n\nexport class Exit {\n  public static fromEdrSuccessReason(reason: SuccessReason): Exit {\n    switch (reason) {\n      case SuccessReason.Stop:\n      case SuccessReason.Return:\n      case SuccessReason.SelfDestruct:\n        return new Exit(ExitCode.SUCCESS);\n    }\n\n    const _exhaustiveCheck: never = reason;\n  }\n\n  public static fromEdrExceptionalHalt(halt: ExceptionalHalt): Exit {\n    switch (halt) {\n      case ExceptionalHalt.OutOfGas:\n        return new Exit(ExitCode.OUT_OF_GAS);\n\n      case ExceptionalHalt.OpcodeNotFound:\n      case ExceptionalHalt.InvalidFEOpcode:\n      // Returned when an opcode is not implemented for the hardfork\n      case ExceptionalHalt.NotActivated:\n        return new Exit(ExitCode.INVALID_OPCODE);\n\n      case ExceptionalHalt.StackUnderflow:\n        return new Exit(ExitCode.STACK_UNDERFLOW);\n\n      case ExceptionalHalt.CreateCollision:\n        return new Exit(ExitCode.CREATE_COLLISION);\n\n      case ExceptionalHalt.CreateContractSizeLimit:\n        return new Exit(ExitCode.CODESIZE_EXCEEDS_MAXIMUM);\n\n      default: {\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw new Error(`Unmatched EDR exceptional halt: ${halt}`);\n      }\n    }\n  }\n\n  constructor(public kind: ExitCode) {}\n\n  public isError(): boolean {\n    return this.kind !== ExitCode.SUCCESS;\n  }\n\n  public getReason(): string {\n    switch (this.kind) {\n      case ExitCode.SUCCESS:\n        return \"Success\";\n      case ExitCode.REVERT:\n        return \"Reverted\";\n      case ExitCode.OUT_OF_GAS:\n        return \"Out of gas\";\n      case ExitCode.INTERNAL_ERROR:\n        return \"Internal error\";\n      case ExitCode.INVALID_OPCODE:\n        return \"Invalid opcode\";\n      case ExitCode.STACK_UNDERFLOW:\n        return \"Stack underflow\";\n      case ExitCode.CODESIZE_EXCEEDS_MAXIMUM:\n        return \"Codesize exceeds maximum\";\n      case ExitCode.CREATE_COLLISION:\n        return \"Create collision\";\n      case ExitCode.STATIC_STATE_CHANGE:\n        return \"Static state change\";\n    }\n\n    const _exhaustiveCheck: never = this.kind;\n  }\n\n  public getEdrExceptionalHalt(): ExceptionalHalt {\n    switch (this.kind) {\n      case ExitCode.OUT_OF_GAS:\n        return ExceptionalHalt.OutOfGas;\n      case ExitCode.INVALID_OPCODE:\n        return ExceptionalHalt.OpcodeNotFound;\n      case ExitCode.CODESIZE_EXCEEDS_MAXIMUM:\n        return ExceptionalHalt.CreateContractSizeLimit;\n      case ExitCode.CREATE_COLLISION:\n        return ExceptionalHalt.CreateCollision;\n\n      default:\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw new Error(`Unmatched exit code: ${this.kind}`);\n    }\n  }\n}\n"],"mappings":";;;;;;AAEA,IAAYA,QAUX;AAVD,WAAYA,QAAQ;EAClBA,QAAA,CAAAA,QAAA,4BAAO;EACPA,QAAA,CAAAA,QAAA,0BAAM;EACNA,QAAA,CAAAA,QAAA,kCAAU;EACVA,QAAA,CAAAA,QAAA,0CAAc;EACdA,QAAA,CAAAA,QAAA,0CAAc;EACdA,QAAA,CAAAA,QAAA,4CAAe;EACfA,QAAA,CAAAA,QAAA,8DAAwB;EACxBA,QAAA,CAAAA,QAAA,8CAAgB;EAChBA,QAAA,CAAAA,QAAA,oDAAmB;AACrB,CAAC,EAVWA,QAAQ,GAARC,OAAA,CAAAD,QAAQ,KAARC,OAAA,CAAAD,QAAQ;AAYpB,MAAaE,IAAI;EACR,OAAOC,oBAAoBA,CAACC,MAAqB;IACtD,QAAQA,MAAM;MACZ;MACA;MACA;QACE,OAAO,IAAIF,IAAI,CAACF,QAAQ,CAACK,OAAO,CAAC;;IAGrC,MAAMC,gBAAgB,GAAUF,MAAM;EACxC;EAEO,OAAOG,sBAAsBA,CAACC,IAAqB;IACxD,QAAQA,IAAI;MACV;QACE,OAAO,IAAIN,IAAI,CAACF,QAAQ,CAACS,UAAU,CAAC;MAEtC;MACA;MACA;MACA;QACE,OAAO,IAAIP,IAAI,CAACF,QAAQ,CAACU,cAAc,CAAC;MAE1C;QACE,OAAO,IAAIR,IAAI,CAACF,QAAQ,CAACW,eAAe,CAAC;MAE3C;QACE,OAAO,IAAIT,IAAI,CAACF,QAAQ,CAACY,gBAAgB,CAAC;MAE5C;QACE,OAAO,IAAIV,IAAI,CAACF,QAAQ,CAACa,wBAAwB,CAAC;MAEpD;QAAS;UACP;UACA,MAAM,IAAIC,KAAK,CAAC,mCAAmCN,IAAI,EAAE,CAAC;;;EAGhE;EAEAO,YAAmBC,IAAc;IAAd,KAAAA,IAAI,GAAJA,IAAI;EAAa;EAE7BC,OAAOA,CAAA;IACZ,OAAO,IAAI,CAACD,IAAI,KAAKhB,QAAQ,CAACK,OAAO;EACvC;EAEOa,SAASA,CAAA;IACd,QAAQ,IAAI,CAACF,IAAI;MACf,KAAKhB,QAAQ,CAACK,OAAO;QACnB,OAAO,SAAS;MAClB,KAAKL,QAAQ,CAACmB,MAAM;QAClB,OAAO,UAAU;MACnB,KAAKnB,QAAQ,CAACS,UAAU;QACtB,OAAO,YAAY;MACrB,KAAKT,QAAQ,CAACoB,cAAc;QAC1B,OAAO,gBAAgB;MACzB,KAAKpB,QAAQ,CAACU,cAAc;QAC1B,OAAO,gBAAgB;MACzB,KAAKV,QAAQ,CAACW,eAAe;QAC3B,OAAO,iBAAiB;MAC1B,KAAKX,QAAQ,CAACa,wBAAwB;QACpC,OAAO,0BAA0B;MACnC,KAAKb,QAAQ,CAACY,gBAAgB;QAC5B,OAAO,kBAAkB;MAC3B,KAAKZ,QAAQ,CAACqB,mBAAmB;QAC/B,OAAO,qBAAqB;;IAGhC,MAAMf,gBAAgB,GAAU,IAAI,CAACU,IAAI;EAC3C;EAEOM,qBAAqBA,CAAA;IAC1B,QAAQ,IAAI,CAACN,IAAI;MACf,KAAKhB,QAAQ,CAACS,UAAU;QACtB;MACF,KAAKT,QAAQ,CAACU,cAAc;QAC1B;MACF,KAAKV,QAAQ,CAACa,wBAAwB;QACpC;MACF,KAAKb,QAAQ,CAACY,gBAAgB;QAC5B;MAEF;QACE;QACA,MAAM,IAAIE,KAAK,CAAC,wBAAwB,IAAI,CAACE,IAAI,EAAE,CAAC;;EAE1D;;AArFFf,OAAA,CAAAC,IAAA,GAAAA,IAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}