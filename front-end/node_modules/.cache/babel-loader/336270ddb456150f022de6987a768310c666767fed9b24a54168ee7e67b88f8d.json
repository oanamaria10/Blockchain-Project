{"ast":null,"code":"import debug from 'debug';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base64 } from 'multiformats/bases/base64';\n// Add a formatter for converting to a base58 string\ndebug.formatters.b = v => {\n  return v == null ? 'undefined' : base58btc.baseEncode(v);\n};\n// Add a formatter for converting to a base32 string\ndebug.formatters.t = v => {\n  return v == null ? 'undefined' : base32.baseEncode(v);\n};\n// Add a formatter for converting to a base64 string\ndebug.formatters.m = v => {\n  return v == null ? 'undefined' : base64.baseEncode(v);\n};\n// Add a formatter for stringifying peer ids\ndebug.formatters.p = v => {\n  return v == null ? 'undefined' : v.toString();\n};\n// Add a formatter for stringifying CIDs\ndebug.formatters.c = v => {\n  return v == null ? 'undefined' : v.toString();\n};\n// Add a formatter for stringifying Datastore keys\ndebug.formatters.k = v => {\n  return v == null ? 'undefined' : v.toString();\n};\nexport function logger(name) {\n  return Object.assign(debug(name), {\n    error: debug(`${name}:error`),\n    trace: debug(`${name}:trace`)\n  });\n}\nexport function disable() {\n  debug.disable();\n}\nexport function enable(namespaces) {\n  debug.enable(namespaces);\n}\nexport function enabled(namespaces) {\n  return debug.enabled(namespaces);\n}","map":{"version":3,"names":["debug","base58btc","base32","base64","formatters","b","v","baseEncode","t","m","p","toString","c","k","logger","name","Object","assign","error","trace","disable","enable","namespaces","enabled"],"sources":["C:\\FACULTATE\\Proiect\\node_modules\\@libp2p\\logger\\src\\index.ts"],"sourcesContent":["import debug from 'debug'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base64 } from 'multiformats/bases/base64'\nimport type { PeerId } from '@libp2p/interfaces/peer-id'\nimport type { CID } from 'multiformats/cid'\nimport type { Key } from 'interface-datastore'\n\n// Add a formatter for converting to a base58 string\ndebug.formatters.b = (v?: Uint8Array) => {\n  return v == null ? 'undefined' : base58btc.baseEncode(v)\n}\n\n// Add a formatter for converting to a base32 string\ndebug.formatters.t = (v?: Uint8Array) => {\n  return v == null ? 'undefined' : base32.baseEncode(v)\n}\n\n// Add a formatter for converting to a base64 string\ndebug.formatters.m = (v?: Uint8Array) => {\n  return v == null ? 'undefined' : base64.baseEncode(v)\n}\n\n// Add a formatter for stringifying peer ids\ndebug.formatters.p = (v?: PeerId) => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying CIDs\ndebug.formatters.c = (v?: CID) => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying Datastore keys\ndebug.formatters.k = (v: Key) => {\n  return v == null ? 'undefined' : v.toString()\n}\n\nexport interface Logger {\n  (formatter: any, ...args: any[]): void\n  error: (formatter: any, ...args: any[]) => void\n  trace: (formatter: any, ...args: any[]) => void\n  enabled: boolean\n}\n\nexport function logger (name: string): Logger {\n  return Object.assign(debug(name), {\n    error: debug(`${name}:error`),\n    trace: debug(`${name}:trace`)\n  })\n}\n\nexport function disable () {\n  debug.disable()\n}\n\nexport function enable (namespaces: string) {\n  debug.enable(namespaces)\n}\n\nexport function enabled (namespaces: string) {\n  return debug.enabled(namespaces)\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,2BAA2B;AACrD,SAASC,MAAM,QAAQ,2BAA2B;AAClD,SAASC,MAAM,QAAQ,2BAA2B;AAKlD;AACAH,KAAK,CAACI,UAAU,CAACC,CAAC,GAAIC,CAAc,IAAI;EACtC,OAAOA,CAAC,IAAI,IAAI,GAAG,WAAW,GAAGL,SAAS,CAACM,UAAU,CAACD,CAAC,CAAC;AAC1D,CAAC;AAED;AACAN,KAAK,CAACI,UAAU,CAACI,CAAC,GAAIF,CAAc,IAAI;EACtC,OAAOA,CAAC,IAAI,IAAI,GAAG,WAAW,GAAGJ,MAAM,CAACK,UAAU,CAACD,CAAC,CAAC;AACvD,CAAC;AAED;AACAN,KAAK,CAACI,UAAU,CAACK,CAAC,GAAIH,CAAc,IAAI;EACtC,OAAOA,CAAC,IAAI,IAAI,GAAG,WAAW,GAAGH,MAAM,CAACI,UAAU,CAACD,CAAC,CAAC;AACvD,CAAC;AAED;AACAN,KAAK,CAACI,UAAU,CAACM,CAAC,GAAIJ,CAAU,IAAI;EAClC,OAAOA,CAAC,IAAI,IAAI,GAAG,WAAW,GAAGA,CAAC,CAACK,QAAQ,EAAE;AAC/C,CAAC;AAED;AACAX,KAAK,CAACI,UAAU,CAACQ,CAAC,GAAIN,CAAO,IAAI;EAC/B,OAAOA,CAAC,IAAI,IAAI,GAAG,WAAW,GAAGA,CAAC,CAACK,QAAQ,EAAE;AAC/C,CAAC;AAED;AACAX,KAAK,CAACI,UAAU,CAACS,CAAC,GAAIP,CAAM,IAAI;EAC9B,OAAOA,CAAC,IAAI,IAAI,GAAG,WAAW,GAAGA,CAAC,CAACK,QAAQ,EAAE;AAC/C,CAAC;AASD,OAAM,SAAUG,MAAMA,CAAEC,IAAY;EAClC,OAAOC,MAAM,CAACC,MAAM,CAACjB,KAAK,CAACe,IAAI,CAAC,EAAE;IAChCG,KAAK,EAAElB,KAAK,CAAC,GAAGe,IAAI,QAAQ,CAAC;IAC7BI,KAAK,EAAEnB,KAAK,CAAC,GAAGe,IAAI,QAAQ;GAC7B,CAAC;AACJ;AAEA,OAAM,SAAUK,OAAOA,CAAA;EACrBpB,KAAK,CAACoB,OAAO,EAAE;AACjB;AAEA,OAAM,SAAUC,MAAMA,CAAEC,UAAkB;EACxCtB,KAAK,CAACqB,MAAM,CAACC,UAAU,CAAC;AAC1B;AAEA,OAAM,SAAUC,OAAOA,CAAED,UAAkB;EACzC,OAAOtB,KAAK,CAACuB,OAAO,CAACD,UAAU,CAAC;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}