{"ast":null,"code":"import * as API from './api.js';\nimport * as Node from './node.js';\nimport * as Proof from './proof.js';\nconst MAX_LEVEL = 64;\n\n/**\n * This is a lazy zero-comm buffer which we fill up on demand.\n */\nclass ZeroComm {\n  constructor() {\n    this.bytes = new Uint8Array(MAX_LEVEL * Node.Size);\n    this.bytes.set(Node.empty(), 0);\n    /** @private */\n    this.node = Node.empty();\n    /** @private */\n    this.length = Node.Size;\n  }\n  /**\n   * @param {number} start\n   * @param {number} end\n   */\n  slice(start, end) {\n    while (this.length < end) {\n      this.node = Proof.computeNode(this.node, this.node);\n      this.bytes.set(this.node, this.length);\n      this.length += Node.Size;\n    }\n    return this.bytes.subarray(start, end);\n  }\n}\nconst ZERO_COMM = new ZeroComm();\n\n/**\n * simple access by level, only levels between `0` and `64` inclusive are\n * available otherwise throws an error.\n *\n * @param {number} level\n * @returns {API.MerkleTreeNode}\n */\nexport const fromLevel = level => {\n  if (level < 0 || level >= MAX_LEVEL) {\n    throw new Error(`Only levels between 0 and ${MAX_LEVEL - 1} inclusive are available`);\n  }\n  return ZERO_COMM.slice(Node.Size * level, Node.Size * (level + 1));\n};","map":{"version":3,"names":["API","Node","Proof","MAX_LEVEL","ZeroComm","constructor","bytes","Uint8Array","Size","set","empty","node","length","slice","start","end","computeNode","subarray","ZERO_COMM","fromLevel","level","Error"],"sources":["C:/FACULTATE/Proiect/node_modules/@web3-storage/data-segment/src/zero-comm.js"],"sourcesContent":["import * as API from './api.js'\nimport * as Node from './node.js'\nimport * as Proof from './proof.js'\n\nconst MAX_LEVEL = 64\n\n/**\n * This is a lazy zero-comm buffer which we fill up on demand.\n */\nclass ZeroComm {\n  constructor() {\n    this.bytes = new Uint8Array(MAX_LEVEL * Node.Size)\n    this.bytes.set(Node.empty(), 0)\n    /** @private */\n    this.node = Node.empty()\n    /** @private */\n    this.length = Node.Size\n  }\n  /**\n   * @param {number} start\n   * @param {number} end\n   */\n  slice(start, end) {\n    while (this.length < end) {\n      this.node = Proof.computeNode(this.node, this.node)\n      this.bytes.set(this.node, this.length)\n      this.length += Node.Size\n    }\n\n    return this.bytes.subarray(start, end)\n  }\n}\nconst ZERO_COMM = new ZeroComm()\n\n/**\n * simple access by level, only levels between `0` and `64` inclusive are\n * available otherwise throws an error.\n *\n * @param {number} level\n * @returns {API.MerkleTreeNode}\n */\nexport const fromLevel = (level) => {\n  if (level < 0 || level >= MAX_LEVEL) {\n    throw new Error(\n      `Only levels between 0 and ${MAX_LEVEL - 1} inclusive are available`\n    )\n  }\n\n  return ZERO_COMM.slice(Node.Size * level, Node.Size * (level + 1))\n}\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,UAAU;AAC/B,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,OAAO,KAAKC,KAAK,MAAM,YAAY;AAEnC,MAAMC,SAAS,GAAG,EAAE;;AAEpB;AACA;AACA;AACA,MAAMC,QAAQ,CAAC;EACbC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,KAAK,GAAG,IAAIC,UAAU,CAACJ,SAAS,GAAGF,IAAI,CAACO,IAAI,CAAC;IAClD,IAAI,CAACF,KAAK,CAACG,GAAG,CAACR,IAAI,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAC/B;IACA,IAAI,CAACC,IAAI,GAAGV,IAAI,CAACS,KAAK,CAAC,CAAC;IACxB;IACA,IAAI,CAACE,MAAM,GAAGX,IAAI,CAACO,IAAI;EACzB;EACA;AACF;AACA;AACA;EACEK,KAAKA,CAACC,KAAK,EAAEC,GAAG,EAAE;IAChB,OAAO,IAAI,CAACH,MAAM,GAAGG,GAAG,EAAE;MACxB,IAAI,CAACJ,IAAI,GAAGT,KAAK,CAACc,WAAW,CAAC,IAAI,CAACL,IAAI,EAAE,IAAI,CAACA,IAAI,CAAC;MACnD,IAAI,CAACL,KAAK,CAACG,GAAG,CAAC,IAAI,CAACE,IAAI,EAAE,IAAI,CAACC,MAAM,CAAC;MACtC,IAAI,CAACA,MAAM,IAAIX,IAAI,CAACO,IAAI;IAC1B;IAEA,OAAO,IAAI,CAACF,KAAK,CAACW,QAAQ,CAACH,KAAK,EAAEC,GAAG,CAAC;EACxC;AACF;AACA,MAAMG,SAAS,GAAG,IAAId,QAAQ,CAAC,CAAC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMe,SAAS,GAAIC,KAAK,IAAK;EAClC,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAIjB,SAAS,EAAE;IACnC,MAAM,IAAIkB,KAAK,CACZ,6BAA4BlB,SAAS,GAAG,CAAE,0BAC7C,CAAC;EACH;EAEA,OAAOe,SAAS,CAACL,KAAK,CAACZ,IAAI,CAACO,IAAI,GAAGY,KAAK,EAAEnB,IAAI,CAACO,IAAI,IAAIY,KAAK,GAAG,CAAC,CAAC,CAAC;AACpE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}