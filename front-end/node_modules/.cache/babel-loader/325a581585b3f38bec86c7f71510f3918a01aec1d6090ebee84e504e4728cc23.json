{"ast":null,"code":"import { getCurrentHub } from '@sentry/core';\nimport { consoleSandbox } from '@sentry/utils';\nimport { logAndExitProcess } from '../handlers';\n/** Global Promise Rejection handler */\nvar OnUnhandledRejection = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function OnUnhandledRejection(_options) {\n    if (_options === void 0) {\n      _options = {\n        mode: 'warn'\n      };\n    }\n    this._options = _options;\n    /**\n     * @inheritDoc\n     */\n    this.name = OnUnhandledRejection.id;\n  }\n  /**\n   * @inheritDoc\n   */\n  OnUnhandledRejection.prototype.setupOnce = function () {\n    global.process.on('unhandledRejection', this.sendUnhandledPromise.bind(this));\n  };\n  /**\n   * Send an exception with reason\n   * @param reason string\n   * @param promise promise\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n  OnUnhandledRejection.prototype.sendUnhandledPromise = function (reason, promise) {\n    var hub = getCurrentHub();\n    if (!hub.getIntegration(OnUnhandledRejection)) {\n      this._handleRejection(reason);\n      return;\n    }\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    var context = promise.domain && promise.domain.sentryContext || {};\n    hub.withScope(function (scope) {\n      scope.setExtra('unhandledPromiseRejection', true);\n      // Preserve backwards compatibility with raven-node for now\n      if (context.user) {\n        scope.setUser(context.user);\n      }\n      if (context.tags) {\n        scope.setTags(context.tags);\n      }\n      if (context.extra) {\n        scope.setExtras(context.extra);\n      }\n      hub.captureException(reason, {\n        originalException: promise\n      });\n    });\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    this._handleRejection(reason);\n  };\n  /**\n   * Handler for `mode` option\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  OnUnhandledRejection.prototype._handleRejection = function (reason) {\n    // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n    var rejectionWarning = 'This error originated either by ' + 'throwing inside of an async function without a catch block, ' + 'or by rejecting a promise which was not handled with .catch().' + ' The promise rejected with the reason:';\n    /* eslint-disable no-console */\n    if (this._options.mode === 'warn') {\n      consoleSandbox(function () {\n        console.warn(rejectionWarning);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        console.error(reason && reason.stack ? reason.stack : reason);\n      });\n    } else if (this._options.mode === 'strict') {\n      consoleSandbox(function () {\n        console.warn(rejectionWarning);\n      });\n      logAndExitProcess(reason);\n    }\n    /* eslint-enable no-console */\n  };\n  /**\n   * @inheritDoc\n   */\n  OnUnhandledRejection.id = 'OnUnhandledRejection';\n  return OnUnhandledRejection;\n}();\nexport { OnUnhandledRejection };","map":{"version":3,"names":["getCurrentHub","consoleSandbox","logAndExitProcess","OnUnhandledRejection","_options","mode","name","id","prototype","setupOnce","global","process","on","sendUnhandledPromise","bind","reason","promise","hub","getIntegration","_handleRejection","context","domain","sentryContext","withScope","scope","setExtra","user","setUser","tags","setTags","extra","setExtras","captureException","originalException","rejectionWarning","console","warn","error","stack"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\node\\src\\integrations\\onunhandledrejection.ts"],"sourcesContent":["import { getCurrentHub, Scope } from '@sentry/core';\nimport { Integration } from '@sentry/types';\nimport { consoleSandbox } from '@sentry/utils';\n\nimport { logAndExitProcess } from '../handlers';\n\ntype UnhandledRejectionMode = 'none' | 'warn' | 'strict';\n\n/** Global Promise Rejection handler */\nexport class OnUnhandledRejection implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'OnUnhandledRejection';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = OnUnhandledRejection.id;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    private readonly _options: {\n      /**\n       * Option deciding what to do after capturing unhandledRejection,\n       * that mimicks behavior of node's --unhandled-rejection flag.\n       */\n      mode: UnhandledRejectionMode;\n    } = { mode: 'warn' },\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    global.process.on('unhandledRejection', this.sendUnhandledPromise.bind(this));\n  }\n\n  /**\n   * Send an exception with reason\n   * @param reason string\n   * @param promise promise\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n  public sendUnhandledPromise(reason: any, promise: any): void {\n    const hub = getCurrentHub();\n\n    if (!hub.getIntegration(OnUnhandledRejection)) {\n      this._handleRejection(reason);\n      return;\n    }\n\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    const context = (promise.domain && promise.domain.sentryContext) || {};\n\n    hub.withScope((scope: Scope) => {\n      scope.setExtra('unhandledPromiseRejection', true);\n\n      // Preserve backwards compatibility with raven-node for now\n      if (context.user) {\n        scope.setUser(context.user);\n      }\n      if (context.tags) {\n        scope.setTags(context.tags);\n      }\n      if (context.extra) {\n        scope.setExtras(context.extra);\n      }\n\n      hub.captureException(reason, { originalException: promise });\n    });\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n    this._handleRejection(reason);\n  }\n\n  /**\n   * Handler for `mode` option\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _handleRejection(reason: any): void {\n    // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n    const rejectionWarning =\n      'This error originated either by ' +\n      'throwing inside of an async function without a catch block, ' +\n      'or by rejecting a promise which was not handled with .catch().' +\n      ' The promise rejected with the reason:';\n\n    /* eslint-disable no-console */\n    if (this._options.mode === 'warn') {\n      consoleSandbox(() => {\n        console.warn(rejectionWarning);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        console.error(reason && reason.stack ? reason.stack : reason);\n      });\n    } else if (this._options.mode === 'strict') {\n      consoleSandbox(() => {\n        console.warn(rejectionWarning);\n      });\n      logAndExitProcess(reason);\n    }\n    /* eslint-enable no-console */\n  }\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAe,cAAc;AAEnD,SAASC,cAAc,QAAQ,eAAe;AAE9C,SAASC,iBAAiB,QAAQ,aAAa;AAI/C;AACA,IAAAC,oBAAA;EAWE;;;EAGA,SAAAA,qBACmBC,QAMG;IANH,IAAAA,QAAA;MAAAA,QAAA;QAMXC,IAAI,EAAE;MAAM,CAAE;IAAA;IANH,KAAAD,QAAQ,GAARA,QAAQ;IAT3B;;;IAGO,KAAAE,IAAI,GAAWH,oBAAoB,CAACI,EAAE;EAa1C;EAEH;;;EAGOJ,oBAAA,CAAAK,SAAA,CAAAC,SAAS,GAAhB;IACEC,MAAM,CAACC,OAAO,CAACC,EAAE,CAAC,oBAAoB,EAAE,IAAI,CAACC,oBAAoB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC/E,CAAC;EAED;;;;;EAKA;EACOX,oBAAA,CAAAK,SAAA,CAAAK,oBAAoB,GAA3B,UAA4BE,MAAW,EAAEC,OAAY;IACnD,IAAMC,GAAG,GAAGjB,aAAa,EAAE;IAE3B,IAAI,CAACiB,GAAG,CAACC,cAAc,CAACf,oBAAoB,CAAC,EAAE;MAC7C,IAAI,CAACgB,gBAAgB,CAACJ,MAAM,CAAC;MAC7B;;IAGF;IACA,IAAMK,OAAO,GAAIJ,OAAO,CAACK,MAAM,IAAIL,OAAO,CAACK,MAAM,CAACC,aAAa,IAAK,EAAE;IAEtEL,GAAG,CAACM,SAAS,CAAC,UAACC,KAAY;MACzBA,KAAK,CAACC,QAAQ,CAAC,2BAA2B,EAAE,IAAI,CAAC;MAEjD;MACA,IAAIL,OAAO,CAACM,IAAI,EAAE;QAChBF,KAAK,CAACG,OAAO,CAACP,OAAO,CAACM,IAAI,CAAC;;MAE7B,IAAIN,OAAO,CAACQ,IAAI,EAAE;QAChBJ,KAAK,CAACK,OAAO,CAACT,OAAO,CAACQ,IAAI,CAAC;;MAE7B,IAAIR,OAAO,CAACU,KAAK,EAAE;QACjBN,KAAK,CAACO,SAAS,CAACX,OAAO,CAACU,KAAK,CAAC;;MAGhCb,GAAG,CAACe,gBAAgB,CAACjB,MAAM,EAAE;QAAEkB,iBAAiB,EAAEjB;MAAO,CAAE,CAAC;IAC9D,CAAC,CAAC;IACF;IAEA,IAAI,CAACG,gBAAgB,CAACJ,MAAM,CAAC;EAC/B,CAAC;EAED;;;EAGA;EACQZ,oBAAA,CAAAK,SAAA,CAAAW,gBAAgB,GAAxB,UAAyBJ,MAAW;IAClC;IACA,IAAMmB,gBAAgB,GACpB,kCAAkC,GAClC,8DAA8D,GAC9D,gEAAgE,GAChE,wCAAwC;IAE1C;IACA,IAAI,IAAI,CAAC9B,QAAQ,CAACC,IAAI,KAAK,MAAM,EAAE;MACjCJ,cAAc,CAAC;QACbkC,OAAO,CAACC,IAAI,CAACF,gBAAgB,CAAC;QAC9B;QACAC,OAAO,CAACE,KAAK,CAACtB,MAAM,IAAIA,MAAM,CAACuB,KAAK,GAAGvB,MAAM,CAACuB,KAAK,GAAGvB,MAAM,CAAC;MAC/D,CAAC,CAAC;KACH,MAAM,IAAI,IAAI,CAACX,QAAQ,CAACC,IAAI,KAAK,QAAQ,EAAE;MAC1CJ,cAAc,CAAC;QACbkC,OAAO,CAACC,IAAI,CAACF,gBAAgB,CAAC;MAChC,CAAC,CAAC;MACFhC,iBAAiB,CAACa,MAAM,CAAC;;IAE3B;EACF,CAAC;EA9FD;;;EAGcZ,oBAAA,CAAAI,EAAE,GAAW,sBAAsB;EA4FnD,OAAAJ,oBAAC;CAAA,CAhGD;SAAaA,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}