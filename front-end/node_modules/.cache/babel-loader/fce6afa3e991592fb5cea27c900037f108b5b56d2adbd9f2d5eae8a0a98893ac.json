{"ast":null,"code":"/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nexport function encode(input) {\n  if (Array.isArray(input)) {\n    const output = [];\n    let outputLength = 0;\n    for (let i = 0; i < input.length; i++) {\n      const encoded = encode(input[i]);\n      output.push(encoded);\n      outputLength += encoded.length;\n    }\n    return concatBytes(encodeLength(outputLength, 192), ...output);\n  }\n  const inputBuf = toBytes(input);\n  if (inputBuf.length === 1 && inputBuf[0] < 128) {\n    return inputBuf;\n  }\n  return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input, start, end) {\n  if (end > input.length) {\n    throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n  }\n  return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v) {\n  if (v[0] === 0) {\n    throw new Error('invalid RLP: extra zeros');\n  }\n  return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return Uint8Array.from([len + offset]);\n  }\n  const hexLength = numberToHex(len);\n  const lLength = hexLength.length / 2;\n  const firstByte = numberToHex(offset + 55 + lLength);\n  return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nexport function decode(input, stream = false) {\n  if (typeof input === 'undefined' || input === null || input.length === 0) {\n    return Uint8Array.from([]);\n  }\n  const inputBytes = toBytes(input);\n  const decoded = _decode(inputBytes);\n  if (stream) {\n    return decoded;\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid RLP: remainder must be zero');\n  }\n  return decoded.data;\n}\n/** Decode an input with RLP */\nfunction _decode(input) {\n  let length, llength, data, innerRemainder, d;\n  const decoded = [];\n  const firstByte = input[0];\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f;\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = Uint8Array.from([]);\n    } else {\n      data = safeSlice(input, 1, length);\n    }\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n    }\n    return {\n      data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6;\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length');\n    }\n    length = decodeLength(safeSlice(input, 1, llength));\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55');\n    }\n    data = safeSlice(input, llength, length + llength);\n    return {\n      data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between 0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = safeSlice(input, 1, length);\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = decodeLength(safeSlice(input, 1, llength));\n    if (length < 56) {\n      throw new Error('invalid RLP: encoded list too short');\n    }\n    const totalLength = llength + length;\n    if (totalLength > input.length) {\n      throw new Error('invalid RLP: total length is larger than the data');\n    }\n    innerRemainder = safeSlice(input, llength, totalLength);\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\nconst cachedHexes = Array.from({\n  length: 256\n}, (_v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n  // Pre-caching chars with `cachedHexes` speeds this up 6x\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += cachedHexes[uint8a[i]];\n  }\n  return hex;\n}\nfunction parseHexByte(hexByte) {\n  const byte = Number.parseInt(hexByte, 16);\n  if (Number.isNaN(byte)) throw new Error('Invalid byte sequence');\n  return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    array[i] = parseHexByte(hex.slice(j, j + 2));\n  }\n  return array;\n}\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays) {\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\nfunction utf8ToBytes(utf) {\n  return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer) {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!');\n  }\n  const hex = integer.toString(16);\n  return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n  return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n  return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\nfunction toBytes(v) {\n  if (v instanceof Uint8Array) {\n    return v;\n  }\n  if (typeof v === 'string') {\n    if (isHexPrefixed(v)) {\n      return hexToBytes(padToEven(stripHexPrefix(v)));\n    }\n    return utf8ToBytes(v);\n  }\n  if (typeof v === 'number' || typeof v === 'bigint') {\n    if (!v) {\n      return Uint8Array.from([]);\n    }\n    return hexToBytes(numberToHex(v));\n  }\n  if (v === null || v === undefined) {\n    return Uint8Array.from([]);\n  }\n  throw new Error('toBytes: received unsupported type ' + typeof v);\n}\nexport const utils = {\n  bytesToHex,\n  concatBytes,\n  hexToBytes,\n  utf8ToBytes\n};\nexport const RLP = {\n  encode,\n  decode\n};","map":{"version":3,"names":["encode","input","Array","isArray","output","outputLength","i","length","encoded","push","concatBytes","encodeLength","inputBuf","toBytes","safeSlice","start","end","Error","slice","decodeLength","v","parseHexByte","bytesToHex","len","offset","Uint8Array","from","hexLength","numberToHex","lLength","firstByte","hexToBytes","decode","stream","inputBytes","decoded","_decode","remainder","data","llength","innerRemainder","d","totalLength","cachedHexes","_v","toString","padStart","uint8a","hex","hexByte","byte","Number","parseInt","isNaN","TypeError","array","j","arrays","reduce","a","arr","result","pad","set","utf8ToBytes","utf","TextEncoder","integer","padToEven","isHexPrefixed","str","stripHexPrefix","undefined","utils","RLP"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@nomicfoundation\\ethereumjs-rlp\\src\\index.ts"],"sourcesContent":["export type Input = string | number | bigint | Uint8Array | Array<Input> | null | undefined\n\nexport type NestedUint8Array = Array<Uint8Array | NestedUint8Array>\n\nexport interface Decoded {\n  data: Uint8Array | NestedUint8Array\n  remainder: Uint8Array\n}\n\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nexport function encode(input: Input): Uint8Array {\n  if (Array.isArray(input)) {\n    const output: Uint8Array[] = []\n    let outputLength = 0\n    for (let i = 0; i < input.length; i++) {\n      const encoded = encode(input[i])\n      output.push(encoded)\n      outputLength += encoded.length\n    }\n    return concatBytes(encodeLength(outputLength, 192), ...output)\n  }\n  const inputBuf = toBytes(input)\n  if (inputBuf.length === 1 && inputBuf[0] < 128) {\n    return inputBuf\n  }\n  return concatBytes(encodeLength(inputBuf.length, 128), inputBuf)\n}\n\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input: Uint8Array, start: number, end: number) {\n  if (end > input.length) {\n    throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds')\n  }\n  return input.slice(start, end)\n}\n\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v: Uint8Array): number {\n  if (v[0] === 0) {\n    throw new Error('invalid RLP: extra zeros')\n  }\n  return parseHexByte(bytesToHex(v))\n}\n\nfunction encodeLength(len: number, offset: number): Uint8Array {\n  if (len < 56) {\n    return Uint8Array.from([len + offset])\n  }\n  const hexLength = numberToHex(len)\n  const lLength = hexLength.length / 2\n  const firstByte = numberToHex(offset + 55 + lLength)\n  return Uint8Array.from(hexToBytes(firstByte + hexLength))\n}\n\n/**\n * RLP Decoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * @param input Will be converted to Uint8Array\n * @param stream Is the input a stream (false by default)\n * @returns decoded Array of Uint8Arrays containing the original message\n **/\nexport function decode(input: Input, stream?: false): Uint8Array | NestedUint8Array\nexport function decode(input: Input, stream?: true): Decoded\nexport function decode(input: Input, stream = false): Uint8Array | NestedUint8Array | Decoded {\n  if (typeof input === 'undefined' || input === null || (input as any).length === 0) {\n    return Uint8Array.from([])\n  }\n\n  const inputBytes = toBytes(input)\n  const decoded = _decode(inputBytes)\n\n  if (stream) {\n    return decoded\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid RLP: remainder must be zero')\n  }\n\n  return decoded.data\n}\n\n/** Decode an input with RLP */\nfunction _decode(input: Uint8Array): Decoded {\n  let length: number, llength: number, data: Uint8Array, innerRemainder: Uint8Array, d: Decoded\n  const decoded = []\n  const firstByte = input[0]\n\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1),\n    }\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f\n\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = Uint8Array.from([])\n    } else {\n      data = safeSlice(input, 1, length)\n    }\n\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed')\n    }\n\n    return {\n      data,\n      remainder: input.slice(length),\n    }\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length')\n    }\n    length = decodeLength(safeSlice(input, 1, llength))\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55')\n    }\n    data = safeSlice(input, llength, length + llength)\n\n    return {\n      data,\n      remainder: input.slice(length + llength),\n    }\n  } else if (firstByte <= 0xf7) {\n    // a list between 0-55 bytes long\n    length = firstByte - 0xbf\n    innerRemainder = safeSlice(input, 1, length)\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(length),\n    }\n  } else {\n    // a list over 55 bytes long\n    llength = firstByte - 0xf6\n    length = decodeLength(safeSlice(input, 1, llength))\n    if (length < 56) {\n      throw new Error('invalid RLP: encoded list too short')\n    }\n    const totalLength = llength + length\n    if (totalLength > input.length) {\n      throw new Error('invalid RLP: total length is larger than the data')\n    }\n\n    innerRemainder = safeSlice(input, llength, totalLength)\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength),\n    }\n  }\n}\n\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'))\nfunction bytesToHex(uint8a: Uint8Array): string {\n  // Pre-caching chars with `cachedHexes` speeds this up 6x\n  let hex = ''\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += cachedHexes[uint8a[i]]\n  }\n  return hex\n}\n\nfunction parseHexByte(hexByte: string): number {\n  const byte = Number.parseInt(hexByte, 16)\n  if (Number.isNaN(byte)) throw new Error('Invalid byte sequence')\n  return byte\n}\n\n// Caching slows it down 2-3x\nfunction hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex)\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex')\n  const array = new Uint8Array(hex.length / 2)\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2\n    array[i] = parseHexByte(hex.slice(j, j + 2))\n  }\n  return array\n}\n\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (arrays.length === 1) return arrays[0]\n  const length = arrays.reduce((a, arr) => a + arr.length, 0)\n  const result = new Uint8Array(length)\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i]\n    result.set(arr, pad)\n    pad += arr.length\n  }\n  return result\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any\ndeclare const TextDecoder: any\n\nfunction utf8ToBytes(utf: string): Uint8Array {\n  return new TextEncoder().encode(utf)\n}\n\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer: number | bigint): string {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!')\n  }\n  const hex = integer.toString(16)\n  return hex.length % 2 ? `0${hex}` : hex\n}\n\n/** Pad a string to be even */\nfunction padToEven(a: string): string {\n  return a.length % 2 ? `0${a}` : a\n}\n\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str: string): boolean {\n  return str.length >= 2 && str[0] === '0' && str[1] === 'x'\n}\n\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str: string): string {\n  if (typeof str !== 'string') {\n    return str\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str\n}\n\n/** Transform anything into a Uint8Array */\nfunction toBytes(v: Input): Uint8Array {\n  if (v instanceof Uint8Array) {\n    return v\n  }\n  if (typeof v === 'string') {\n    if (isHexPrefixed(v)) {\n      return hexToBytes(padToEven(stripHexPrefix(v)))\n    }\n    return utf8ToBytes(v)\n  }\n  if (typeof v === 'number' || typeof v === 'bigint') {\n    if (!v) {\n      return Uint8Array.from([])\n    }\n    return hexToBytes(numberToHex(v))\n  }\n  if (v === null || v === undefined) {\n    return Uint8Array.from([])\n  }\n  throw new Error('toBytes: received unsupported type ' + typeof v)\n}\n\nexport const utils = {\n  bytesToHex,\n  concatBytes,\n  hexToBytes,\n  utf8ToBytes,\n}\n\nexport const RLP = { encode, decode }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}