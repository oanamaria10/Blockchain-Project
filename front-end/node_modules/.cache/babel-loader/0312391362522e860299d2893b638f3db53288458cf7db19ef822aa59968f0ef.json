{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReturnData = void 0;\nconst ethereumjs_util_1 = require(\"@nomicfoundation/ethereumjs-util\");\nconst errors_1 = require(\"../../core/errors\");\nconst {\n  rawDecode\n} = require(\"ethereumjs-abi\");\n// selector of Error(string)\nconst ERROR_SELECTOR = \"08c379a0\";\n// selector of Panic(uint256)\nconst PANIC_SELECTOR = \"4e487b71\";\n/**\n * Represents the returnData of a transaction, whose contents are unknown.\n */\nclass ReturnData {\n  constructor(value) {\n    this.value = value;\n    if (value.length >= 4) {\n      this._selector = Buffer.from(value.slice(0, 4)).toString(\"hex\");\n    }\n  }\n  isEmpty() {\n    return this.value.length === 0;\n  }\n  matchesSelector(selector) {\n    if (this._selector === undefined) {\n      return false;\n    }\n    return this._selector === Buffer.from(selector).toString(\"hex\");\n  }\n  isErrorReturnData() {\n    return this._selector === ERROR_SELECTOR;\n  }\n  isPanicReturnData() {\n    return this._selector === PANIC_SELECTOR;\n  }\n  decodeError() {\n    if (this.isEmpty()) {\n      return \"\";\n    }\n    (0, errors_1.assertHardhatInvariant)(this._selector === ERROR_SELECTOR, \"Expected return data to be a Error(string)\");\n    const [decodedError] = rawDecode([\"string\"], this.value.slice(4));\n    return decodedError;\n  }\n  decodePanic() {\n    (0, errors_1.assertHardhatInvariant)(this._selector === PANIC_SELECTOR, \"Expected return data to be a Panic(uint256)\");\n    // we are assuming that panic codes are smaller than Number.MAX_SAFE_INTEGER\n    const errorCode = (0, ethereumjs_util_1.bytesToBigInt)(this.value.slice(4));\n    return errorCode;\n  }\n  getSelector() {\n    return this._selector;\n  }\n}\nexports.ReturnData = ReturnData;","map":{"version":3,"names":["ethereumjs_util_1","require","errors_1","rawDecode","ERROR_SELECTOR","PANIC_SELECTOR","ReturnData","constructor","value","length","_selector","Buffer","from","slice","toString","isEmpty","matchesSelector","selector","undefined","isErrorReturnData","isPanicReturnData","decodeError","assertHardhatInvariant","decodedError","decodePanic","errorCode","bytesToBigInt","getSelector","exports"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\hardhat-network\\provider\\return-data.ts"],"sourcesContent":["import { bytesToBigInt } from \"@nomicfoundation/ethereumjs-util\";\nimport { assertHardhatInvariant } from \"../../core/errors\";\n\nconst { rawDecode } = require(\"ethereumjs-abi\");\n\n// selector of Error(string)\nconst ERROR_SELECTOR = \"08c379a0\";\n// selector of Panic(uint256)\nconst PANIC_SELECTOR = \"4e487b71\";\n\n/**\n * Represents the returnData of a transaction, whose contents are unknown.\n */\nexport class ReturnData {\n  private _selector: string | undefined;\n\n  constructor(public value: Uint8Array) {\n    if (value.length >= 4) {\n      this._selector = Buffer.from(value.slice(0, 4)).toString(\"hex\");\n    }\n  }\n\n  public isEmpty(): boolean {\n    return this.value.length === 0;\n  }\n\n  public matchesSelector(selector: Uint8Array): boolean {\n    if (this._selector === undefined) {\n      return false;\n    }\n\n    return this._selector === Buffer.from(selector).toString(\"hex\");\n  }\n\n  public isErrorReturnData(): boolean {\n    return this._selector === ERROR_SELECTOR;\n  }\n\n  public isPanicReturnData(): boolean {\n    return this._selector === PANIC_SELECTOR;\n  }\n\n  public decodeError(): string {\n    if (this.isEmpty()) {\n      return \"\";\n    }\n\n    assertHardhatInvariant(\n      this._selector === ERROR_SELECTOR,\n      \"Expected return data to be a Error(string)\"\n    );\n\n    const [decodedError] = rawDecode([\"string\"], this.value.slice(4)) as [\n      string\n    ];\n\n    return decodedError;\n  }\n\n  public decodePanic(): bigint {\n    assertHardhatInvariant(\n      this._selector === PANIC_SELECTOR,\n      \"Expected return data to be a Panic(uint256)\"\n    );\n\n    // we are assuming that panic codes are smaller than Number.MAX_SAFE_INTEGER\n    const errorCode = bytesToBigInt(this.value.slice(4));\n\n    return errorCode;\n  }\n\n  public getSelector(): string | undefined {\n    return this._selector;\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,iBAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AAEA,MAAM;EAAEE;AAAS,CAAE,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAE/C;AACA,MAAMG,cAAc,GAAG,UAAU;AACjC;AACA,MAAMC,cAAc,GAAG,UAAU;AAEjC;;;AAGA,MAAaC,UAAU;EAGrBC,YAAmBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IACtB,IAAIA,KAAK,CAACC,MAAM,IAAI,CAAC,EAAE;MACrB,IAAI,CAACC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACJ,KAAK,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;;EAEnE;EAEOC,OAAOA,CAAA;IACZ,OAAO,IAAI,CAACP,KAAK,CAACC,MAAM,KAAK,CAAC;EAChC;EAEOO,eAAeA,CAACC,QAAoB;IACzC,IAAI,IAAI,CAACP,SAAS,KAAKQ,SAAS,EAAE;MAChC,OAAO,KAAK;;IAGd,OAAO,IAAI,CAACR,SAAS,KAAKC,MAAM,CAACC,IAAI,CAACK,QAAQ,CAAC,CAACH,QAAQ,CAAC,KAAK,CAAC;EACjE;EAEOK,iBAAiBA,CAAA;IACtB,OAAO,IAAI,CAACT,SAAS,KAAKN,cAAc;EAC1C;EAEOgB,iBAAiBA,CAAA;IACtB,OAAO,IAAI,CAACV,SAAS,KAAKL,cAAc;EAC1C;EAEOgB,WAAWA,CAAA;IAChB,IAAI,IAAI,CAACN,OAAO,EAAE,EAAE;MAClB,OAAO,EAAE;;IAGX,IAAAb,QAAA,CAAAoB,sBAAsB,EACpB,IAAI,CAACZ,SAAS,KAAKN,cAAc,EACjC,4CAA4C,CAC7C;IAED,MAAM,CAACmB,YAAY,CAAC,GAAGpB,SAAS,CAAC,CAAC,QAAQ,CAAC,EAAE,IAAI,CAACK,KAAK,CAACK,KAAK,CAAC,CAAC,CAAC,CAE/D;IAED,OAAOU,YAAY;EACrB;EAEOC,WAAWA,CAAA;IAChB,IAAAtB,QAAA,CAAAoB,sBAAsB,EACpB,IAAI,CAACZ,SAAS,KAAKL,cAAc,EACjC,6CAA6C,CAC9C;IAED;IACA,MAAMoB,SAAS,GAAG,IAAAzB,iBAAA,CAAA0B,aAAa,EAAC,IAAI,CAAClB,KAAK,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC;IAEpD,OAAOY,SAAS;EAClB;EAEOE,WAAWA,CAAA;IAChB,OAAO,IAAI,CAACjB,SAAS;EACvB;;AA5DFkB,OAAA,CAAAtB,UAAA,GAAAA,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}