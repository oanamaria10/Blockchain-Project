{"ast":null,"code":"import * as API from '@ucanto/interface';\nimport { base64url } from 'multiformats/bases/base64';\nimport { encodeSequence, encodeOctetString, enterSequence, skipSequence, skipInt, readOctetString } from './asn1.js';\nconst PKSC8_HEADER = new Uint8Array([\n// version\n2, 1, 0,\n// privateKeyAlgorithm\n48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0]);\n/**\n * @typedef {import('./private-key').RSAPrivateKey} RSAPrivateKey\n * @typedef {object} AlgorithmIdentifier\n * @property {Uint8Array} version\n * @property {Uint8Array} parameters\n *\n * @see https://datatracker.ietf.org/doc/html/rfc5208#section-5\n * @typedef {object} PrivateKeyInfo\n * @property {API.ByteView<number>} version\n * @property {API.ByteView<AlgorithmIdentifier>} privateKeyAlgorithm\n * @property {API.ByteView<RSAPrivateKey>} privateKey\n * @property {API.ByteView<unknown>} [attributes]\n */\n\n/**\n * @param {API.ByteView<PrivateKeyInfo>} info\n * @returns {API.ByteView<RSAPrivateKey>}\n */\nexport const decode = info => {\n  let offset = 0;\n  // go into the top-level SEQUENCE\n  offset = enterSequence(info, offset);\n  offset = skipInt(info, offset);\n  offset = skipSequence(info, offset);\n\n  // we expect the bitstring next\n  return readOctetString(info, offset);\n};\n\n/**\n * @param {API.ByteView<RSAPrivateKey>} key\n * @returns {API.ByteView<PrivateKeyInfo>}\n */\nexport const encode = key => encodeSequence([PKSC8_HEADER, encodeOctetString(key)]);","map":{"version":3,"names":["API","base64url","encodeSequence","encodeOctetString","enterSequence","skipSequence","skipInt","readOctetString","PKSC8_HEADER","Uint8Array","decode","info","offset","encode","key"],"sources":["C:/FACULTATE/Proiect/node_modules/@ucanto/principal/src/rsa/pkcs8.js"],"sourcesContent":["import * as API from '@ucanto/interface'\nimport { base64url } from 'multiformats/bases/base64'\nimport {\n  encodeSequence,\n  encodeOctetString,\n  enterSequence,\n  skipSequence,\n  skipInt,\n  readOctetString,\n} from './asn1.js'\n\nconst PKSC8_HEADER = new Uint8Array([\n  // version\n  2, 1, 0,\n  // privateKeyAlgorithm\n  48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0,\n])\n/**\n * @typedef {import('./private-key').RSAPrivateKey} RSAPrivateKey\n * @typedef {object} AlgorithmIdentifier\n * @property {Uint8Array} version\n * @property {Uint8Array} parameters\n *\n * @see https://datatracker.ietf.org/doc/html/rfc5208#section-5\n * @typedef {object} PrivateKeyInfo\n * @property {API.ByteView<number>} version\n * @property {API.ByteView<AlgorithmIdentifier>} privateKeyAlgorithm\n * @property {API.ByteView<RSAPrivateKey>} privateKey\n * @property {API.ByteView<unknown>} [attributes]\n */\n\n/**\n * @param {API.ByteView<PrivateKeyInfo>} info\n * @returns {API.ByteView<RSAPrivateKey>}\n */\nexport const decode = info => {\n  let offset = 0\n  // go into the top-level SEQUENCE\n  offset = enterSequence(info, offset)\n  offset = skipInt(info, offset)\n  offset = skipSequence(info, offset)\n\n  // we expect the bitstring next\n  return readOctetString(info, offset)\n}\n\n/**\n * @param {API.ByteView<RSAPrivateKey>} key\n * @returns {API.ByteView<PrivateKeyInfo>}\n */\nexport const encode = key =>\n  encodeSequence([PKSC8_HEADER, encodeOctetString(key)])\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,mBAAmB;AACxC,SAASC,SAAS,QAAQ,2BAA2B;AACrD,SACEC,cAAc,EACdC,iBAAiB,EACjBC,aAAa,EACbC,YAAY,EACZC,OAAO,EACPC,eAAe,QACV,WAAW;AAElB,MAAMC,YAAY,GAAG,IAAIC,UAAU,CAAC;AAClC;AACA,CAAC,EAAE,CAAC,EAAE,CAAC;AACP;AACA,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACvD,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGC,IAAI,IAAI;EAC5B,IAAIC,MAAM,GAAG,CAAC;EACd;EACAA,MAAM,GAAGR,aAAa,CAACO,IAAI,EAAEC,MAAM,CAAC;EACpCA,MAAM,GAAGN,OAAO,CAACK,IAAI,EAAEC,MAAM,CAAC;EAC9BA,MAAM,GAAGP,YAAY,CAACM,IAAI,EAAEC,MAAM,CAAC;;EAEnC;EACA,OAAOL,eAAe,CAACI,IAAI,EAAEC,MAAM,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGC,GAAG,IACvBZ,cAAc,CAAC,CAACM,YAAY,EAAEL,iBAAiB,CAACW,GAAG,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}