{"ast":null,"code":"import * as Client from '@ucanto/client';\nimport * as CAR from '@ucanto/transport/car';\nimport * as HTTP from '@ucanto/transport/http';\nimport * as ucanto from '@ucanto/core';\nimport * as Capabilities from '@web3-storage/capabilities/space';\nimport { attest } from '@web3-storage/capabilities/ucan';\nimport * as Access from './access.js';\nimport * as Space from './space.js';\nimport { invoke, delegate, DID, Delegation, Schema, isDelegation } from '@ucanto/core';\nimport { isExpired, isTooEarly, canDelegateCapability } from './delegations.js';\nimport { AgentData, getSessionProofs } from './agent-data.js';\nimport { UCAN } from '@web3-storage/capabilities';\nimport * as API from './types.js';\nexport * from './types.js';\nexport * from './delegations.js';\nexport { AgentData, Access, Space, Delegation, Schema };\nexport * from './agent-use-cases.js';\nconst HOST = 'https://up.web3.storage';\nconst PRINCIPAL = DID.parse('did:web:web3.storage');\n/**\n * Keeps track of AgentData for all Agents constructed.\n * Used by addSpacesFromDelegations - so it can only accept Agent as param, but\n * still mutate corresponding AgentData\n *\n * @deprecated - remove this when deprecated addSpacesFromDelegations is removed\n */\n/** @type {WeakMap<Agent<Record<string, any>>, AgentData>} */\nconst agentToData = new WeakMap();\n/**\n * @typedef {API.Service} Service\n * @typedef {API.Receipt<any, any>} Receipt\n */\n/**\n * Creates a Ucanto connection for the w3access API\n *\n * Usage:\n *\n * ```js\n * import { connection } from '@web3-storage/access/agent'\n * ```\n *\n * @template {API.DID} T - DID method\n * @template {Record<string, any>} [S=Service]\n * @param {object} [options]\n * @param {API.Principal<T>} [options.principal] - w3access API Principal\n * @param {URL} [options.url] - w3access API URL\n * @param {API.Transport.Channel<S>} [options.channel] - Ucanto channel to use\n * @param {typeof fetch} [options.fetch] - Fetch implementation to use\n * @returns {API.ConnectionView<S>}\n */\nexport function connection(options = {}) {\n  return Client.connect({\n    id: options.principal ?? PRINCIPAL,\n    codec: CAR.outbound,\n    channel: options.channel ?? HTTP.open({\n      url: options.url ?? new URL(HOST),\n      method: 'POST',\n      fetch: options.fetch ?? globalThis.fetch.bind(globalThis)\n    })\n  });\n}\n/**\n * Agent\n *\n * Usage:\n *\n * ```js\n * import { Agent } from '@web3-storage/access/agent'\n * ```\n *\n * @template {Record<string, any>} [S=Service]\n */\nexport class Agent {\n  /** @type {import('./agent-data.js').AgentData} */\n  #data;\n  /**\n   * @param {import('./agent-data.js').AgentData} data - Agent data\n   * @param {import('./types.js').AgentOptions<S>} [options]\n   */\n  constructor(data, options = {}) {\n    /** @type { Client.Channel<S> & { url?: URL } | undefined } */\n    const channel = options.connection?.channel;\n    this.url = options.url ?? channel?.url ?? new URL(HOST);\n    this.connection = options.connection ?? connection({\n      principal: options.servicePrincipal,\n      url: this.url\n    });\n    this.#data = data;\n    agentToData.set(this, this.#data);\n  }\n  /**\n   * Create a new Agent instance, optionally with the passed initialization data.\n   *\n   * @template {Record<string, any>} [R=Service]\n   * @param {Partial<import('./types.js').AgentDataModel>} [init]\n   * @param {import('./types.js').AgentOptions<R> & import('./types.js').AgentDataOptions} [options]\n   */\n  static async create(init, options = {}) {\n    const data = await AgentData.create(init, options);\n    return new Agent(data, options);\n  }\n  /**\n   * Instantiate an Agent from pre-exported agent data.\n   *\n   * @template {Record<string, any>} [R=Service]\n   * @param {import('./types.js').AgentDataExport} raw\n   * @param {import('./types.js').AgentOptions<R> & import('./types.js').AgentDataOptions} [options]\n   */\n  static from(raw, options = {}) {\n    const data = AgentData.fromExport(raw, options);\n    return new Agent(data, options);\n  }\n  get issuer() {\n    return this.#data.principal;\n  }\n  get meta() {\n    return this.#data.meta;\n  }\n  get spaces() {\n    return this.#data.spaces;\n  }\n  did() {\n    return this.#data.principal.did();\n  }\n  /**\n   * Add a proof to the agent store.\n   *\n   * @param {API.Delegation} delegation\n   */\n  async addProof(delegation) {\n    return await this.addProofs([delegation]);\n  }\n  /**\n   * Adds set of proofs to the agent store.\n   *\n   * @param {Iterable<API.Delegation>} delegations\n   */\n  async addProofs(delegations) {\n    for (const proof of delegations) {\n      await this.#data.addDelegation(proof, {\n        audience: this.meta\n      });\n    }\n    await this.removeExpiredDelegations();\n    return {};\n  }\n  /**\n   * Query the delegations store for all the delegations matching the capabilities provided.\n   *\n   * @param {API.CapabilityQuery[]} [caps]\n   */\n  #delegations(caps) {\n    const _caps = new Set(caps);\n    /** @type {Array<{ delegation: API.Delegation, meta: API.DelegationMeta }>} */\n    const values = [];\n    for (const [, value] of this.#data.delegations) {\n      // check expiration\n      if (!isExpired(value.delegation) &&\n      // check if delegation can be used\n      !isTooEarly(value.delegation)) {\n        // check if we need to filter for caps\n        if (Array.isArray(caps) && caps.length > 0) {\n          for (const cap of _caps) {\n            if (canDelegateCapability(value.delegation, cap)) {\n              values.push(value);\n            }\n          }\n        } else {\n          values.push(value);\n        }\n      }\n    }\n    return values;\n  }\n  /**\n   * Clean up any expired delegations.\n   */\n  async removeExpiredDelegations() {\n    for (const [, value] of this.#data.delegations) {\n      if (isExpired(value.delegation)) {\n        await this.#data.removeDelegation(value.delegation.cid);\n      }\n    }\n  }\n  /**\n   * Revoke a delegation by CID.\n   *\n   * If the delegation was issued by this agent (and therefore is stored in the\n   * delegation store) you can just pass the CID. If not, or if the current agent's\n   * delegation store no longer contains the delegation, you MUST pass a chain of\n   * proofs that proves your authority to revoke this delegation as `options.proofs`.\n   *\n   * @param {API.UCANLink} delegationCID\n   * @param {object} [options]\n   * @param {API.Delegation[]} [options.proofs]\n   */\n  async revoke(delegationCID, options = {}) {\n    const additionalProofs = options.proofs ?? [];\n    // look for the identified delegation in the delegation store and the passed proofs\n    const delegation = [...this.delegations(), ...additionalProofs].find(delegation => delegation.cid.equals(delegationCID));\n    if (!delegation) {\n      return {\n        error: new Error(`could not find delegation ${delegationCID.toString()} - please include the delegation in options.proofs`)\n      };\n    }\n    const receipt = await this.invokeAndExecute(UCAN.revoke, {\n      // per https://github.com/storacha/w3up/blob/main/packages/capabilities/src/ucan.js#L38C6-L38C6 the resource here should be\n      // the current issuer - using the space DID here works for simple cases but falls apart when a delegee tries to revoke a delegation\n      // they have re-delegated, since they don't have \"ucan/revoke\" capabilities on the space\n      with: this.issuer.did(),\n      nb: {\n        ucan: delegation.cid\n      },\n      proofs: [delegation, ...additionalProofs]\n    });\n    return receipt.out;\n  }\n  /**\n   * Get all the proofs matching the capabilities.\n   *\n   * Proofs are delegations with an audience matching agent DID, or with an\n   * audience matching the session DID.\n   *\n   * Proof of session will also be included in the returned proofs if any\n   * proofs matching the passed capabilities require it.\n   *\n   * @param {API.CapabilityQuery[]} [caps] - Capabilities to filter by. Empty or undefined caps with return all the proofs.\n   * @param {object} [options]\n   * @param {API.DID} [options.sessionProofIssuer] - only include session proofs for this issuer\n   */\n  proofs(caps, options) {\n    const authorizations = [];\n    for (const {\n      delegation\n    } of this.#delegations(caps)) {\n      if (delegation.audience.did() === this.issuer.did()) {\n        authorizations.push(delegation);\n      }\n    }\n    // now let's add any session proofs that refer to those authorizations\n    const sessions = getSessionProofs(this.#data);\n    for (const proof of authorizations) {\n      const proofsByIssuer = sessions[proof.asCID.toString()] ?? {};\n      const sessionProofs = options?.sessionProofIssuer ? proofsByIssuer[options.sessionProofIssuer] ?? [] : Object.values(proofsByIssuer).flat();\n      if (sessionProofs.length) {\n        authorizations.push(...sessionProofs);\n      }\n    }\n    return authorizations;\n  }\n  /**\n   * Get delegations created by the agent for others.\n   *\n   * @param {API.CapabilityQuery[]} [caps] - Capabilities to filter by. Empty or undefined caps with return all the delegations.\n   */\n  delegations(caps) {\n    const arr = [];\n    for (const {\n      delegation\n    } of this.delegationsWithMeta(caps)) {\n      arr.push(delegation);\n    }\n    return arr;\n  }\n  /**\n   * Get delegations created by the agent for others and their metadata.\n   *\n   * @param {API.CapabilityQuery[]} [caps] - Capabilities to filter by. Empty or undefined caps with return all the delegations.\n   */\n  delegationsWithMeta(caps) {\n    const arr = [];\n    for (const value of this.#delegations(caps)) {\n      const {\n        delegation\n      } = value;\n      const isSession = delegation.capabilities.some(c => c.can === attest.can);\n      if (!isSession && delegation.audience.did() !== this.issuer.did()) {\n        arr.push(value);\n      }\n    }\n    return arr;\n  }\n  /**\n   * Creates a space signer and a delegation to the agent\n   *\n   * @param {string} name\n   */\n  async createSpace(name) {\n    return await Space.generate({\n      name,\n      agent: this\n    });\n  }\n  /**\n   * @param {string} secret\n   * @param {object} options\n   * @param {string} options.name\n   */\n  async recoverSpace(secret, {\n    name\n  }) {\n    return await Space.fromMnemonic(secret, {\n      name,\n      agent: this\n    });\n  }\n  /**\n   * Import a space from a delegation.\n   *\n   * @param {API.Delegation} delegation\n   * @param {object} options\n   * @param {string} [options.name]\n   */\n  async importSpaceFromDelegation(delegation, {\n    name = ''\n  } = {}) {\n    const space = name === '' ? Space.fromDelegation(delegation) : Space.fromDelegation(delegation).withName(name);\n    this.#data.spaces.set(space.did(), {\n      ...space.meta,\n      name: space.name\n    });\n    await this.addProof(space.delegation);\n    // if we do not have a current space, make this one current\n    if (!this.currentSpace()) {\n      await this.setCurrentSpace(space.did());\n    }\n    return space;\n  }\n  /**\n   * Sets the current selected space\n   *\n   * Other methods will default to use the current space if no resource is defined\n   *\n   * @param {API.SpaceDID} space\n   */\n  async setCurrentSpace(space) {\n    if (!this.#data.spaces.has(space)) {\n      throw new Error(`Agent has no proofs for ${space}.`);\n    }\n    await this.#data.setCurrentSpace(space);\n    return space;\n  }\n  /**\n   * Get current space DID\n   */\n  currentSpace() {\n    return this.#data.currentSpace;\n  }\n  /**\n   * Get current space DID, proofs and abilities\n   */\n  currentSpaceWithMeta() {\n    if (!this.#data.currentSpace) {\n      return;\n    }\n    const proofs = this.proofs([{\n      can: 'space/info',\n      with: this.#data.currentSpace\n    }]);\n    const caps = new Set();\n    for (const p of proofs) {\n      for (const cap of p.capabilities) {\n        caps.add(cap.can);\n      }\n    }\n    return {\n      did: this.#data.currentSpace,\n      proofs,\n      capabilities: [...caps],\n      meta: this.#data.spaces.get(this.#data.currentSpace)\n    };\n  }\n  /**\n   *\n   * @param {import('./types.js').DelegationOptions} options\n   */\n  async delegate(options) {\n    const space = this.currentSpaceWithMeta();\n    if (!space) {\n      throw new Error('no space selected.');\n    }\n    const caps = /** @type {API.Capabilities} */options.abilities.map(a => {\n      return {\n        with: space.did,\n        can: a\n      };\n    });\n    // Verify agent can provide proofs for each requested capability\n    for (const cap of caps) {\n      if (!this.proofs([cap]).length) {\n        throw new Error(`cannot delegate capability ${cap.can} with ${cap.with}`);\n      }\n    }\n    const delegation = await delegate({\n      issuer: this.issuer,\n      capabilities: caps,\n      proofs: this.proofs(caps),\n      facts: [{\n        space: space.meta ?? {}\n      }],\n      ...options\n    });\n    await this.#data.addDelegation(delegation, {\n      audience: options.audienceMeta\n    });\n    await this.removeExpiredDelegations();\n    return delegation;\n  }\n  /**\n   * Invoke and execute the given capability on the Access service connection\n   *\n   * ```js\n   *\n   * await agent.invokeAndExecute(Space.recover, {\n   *   nb: {\n   *     identity: 'mailto: email@gmail.com',\n   *   },\n   * })\n   *\n   * // sugar for\n   * const recoverInvocation = await agent.invoke(Space.recover, {\n   *   nb: {\n   *     identity: 'mailto: email@gmail.com',\n   *   },\n   * })\n   *\n   * await recoverInvocation.execute(agent.connection)\n   * ```\n   *\n   * @template {API.Ability} A\n   * @template {API.URI} R\n   * @template {API.Caveats} C\n   * @param {API.TheCapabilityParser<API.CapabilityMatch<A, R, C>>} cap\n   * @param {API.InvokeOptions<A, R, API.TheCapabilityParser<API.CapabilityMatch<A, R, C>>>} options\n   * @returns {Promise<API.InferReceipt<API.Capability<A, R, C>, S>>}\n   */\n  async invokeAndExecute(cap, options) {\n    const inv = await this.invoke(cap, options);\n    const out = inv.execute( /** @type {*} */this.connection);\n    return /** @type {*} */out;\n  }\n  /**\n   * Execute invocations on the agent's connection\n   *\n   * @example\n   * ```js\n   * const i1 = await agent.invoke(Space.info, {})\n   * const i2 = await agent.invoke(Space.recover, {\n   *   nb: {\n   *     identity: 'mailto:hello@web3.storage',\n   *   },\n   * })\n   *\n   * const results = await agent.execute2(i1, i2)\n   *\n   * ```\n   * @template {API.Capability} C\n   * @template {API.Tuple<API.ServiceInvocation<C, S>>} I\n   * @param {I} invocations\n   */\n  execute(...invocations) {\n    return this.connection.execute(...invocations);\n  }\n  /**\n   * Creates an invocation for the given capability with Agent's proofs, service, issuer and space.\n   *\n   * @example\n   * ```js\n   * const recoverInvocation = await agent.invoke(Space.recover, {\n   *   nb: {\n   *     identity: 'mailto: email@gmail.com',\n   *   },\n   * })\n   *\n   * await recoverInvocation.execute(agent.connection)\n   * // or\n   * await agent.execute(recoverInvocation)\n   * ```\n   *\n   * @template {API.Ability} A\n   * @template {API.URI} R\n   * @template {API.TheCapabilityParser<API.CapabilityMatch<A, R, C>>} CAP\n   * @template {API.Caveats} [C={}]\n   * @param {CAP} cap\n   * @param {import('./types.js').InvokeOptions<A, R, CAP>} options\n   */\n  async invoke(cap, options) {\n    const audience = options.audience || this.connection.id;\n    const space = options.with || this.currentSpace();\n    if (!space) {\n      throw new Error('No space or resource selected, you need pass a resource.');\n    }\n    const proofs = [...(options.proofs || []), ...this.proofs([{\n      with: space,\n      can: cap.can\n    }], {\n      sessionProofIssuer: audience.did()\n    })];\n    if (proofs.length === 0 && options.with !== this.did()) {\n      throw new Error(`no proofs available for resource ${space} and ability ${cap.can}`);\n    }\n    const inv = invoke({\n      ...options,\n      audience,\n      // @ts-ignore\n      capability: cap.create({\n        with: space,\n        nb: options.nb\n      }),\n      issuer: this.issuer,\n      proofs: [...proofs],\n      nonce: options.nonce\n    });\n    return /** @type {API.IssuedInvocationView<API.InferInvokedCapability<CAP>>} */inv;\n  }\n  /**\n   * Get Space information from Access service\n   *\n   * @param {API.URI<\"did:\">} [space]\n   * @param {object} [options]\n   * @param {string} [options.nonce]\n   */\n  async getSpaceInfo(space, options) {\n    const _space = space || this.currentSpace();\n    if (!_space) {\n      throw new Error('No space selected, you need pass a resource.');\n    }\n    const inv = await this.invokeAndExecute(Capabilities.info, {\n      ...options,\n      with: _space\n    });\n    if (inv.out.error) {\n      throw inv.out.error;\n    }\n    return /** @type {import('./types.js').SpaceInfoResult} */inv.out.ok;\n  }\n}\n/**\n * Given a list of delegations, add to agent data spaces list.\n *\n * @deprecated - trying to remove explicit space tracking from Agent/AgentData\n * in favor of functions that derive the space set from access.delegations\n *\n * @template {Record<string, any>} [S=Service]\n * @param {Agent<S>} agent\n * @param {API.Delegation[]} delegations\n */\nexport async function addSpacesFromDelegations(agent, delegations) {\n  const data = agentToData.get(agent);\n  if (!data) {\n    throw Object.assign(new Error(`cannot determine AgentData for Agent`), {\n      agent: agent\n    });\n  }\n  // spaces we find along the way.\n  const spaces = new Map();\n  // only consider ucans with this agent as the audience\n  const ours = delegations.filter(x => x.audience.did() === agent.did());\n  // space names are stored as facts in proofs in the special `ucan:*` delegation from email to agent.\n  const ucanStars = ours.filter(x => x.capabilities[0].can === '*' && x.capabilities[0].with === 'ucan:*');\n  for (const delegation of ucanStars) {\n    for (const proof of delegation.proofs) {\n      if (!isDelegation(proof) || !proof.capabilities[0].with.startsWith('did:key')) {\n        continue;\n      }\n      const space = Space.fromDelegation(proof);\n      spaces.set(space.did(), space.meta);\n    }\n  }\n  // Find any other spaces the user may have access to\n  for (const delegation of ours) {\n    // TODO: we need a more robust way to determine which spaces a user has access to\n    // it may or may not involve look at delegations\n    const allows = ucanto.Delegation.allows(delegation);\n    for (const [resource, value] of Object.entries(allows)) {\n      // If we discovered a delegation to any DID, we add it to the spaces list.\n      if (resource.startsWith('did:key') && Object.keys(value).length > 0) {\n        if (!spaces.has(resource)) {\n          spaces.set(resource, {});\n        }\n      }\n    }\n  }\n  for (const [did, meta] of spaces) {\n    await data.addSpace(did, meta);\n  }\n}\n/**\n * Stores given delegations in the agent's data store and adds discovered spaces\n * to the agent's space list.\n *\n * @param {Agent} agent\n * @param {object} authorization\n * @param {API.Delegation[]} authorization.proofs\n * @returns {Promise<API.Result<API.Unit, Error>>}\n */\nexport const importAuthorization = async (agent, {\n  proofs\n}) => {\n  try {\n    await agent.addProofs(proofs);\n    await addSpacesFromDelegations(agent, proofs);\n    return {\n      ok: {}\n    };\n  } catch (error) {\n    return /** @type {{error:Error}} */{\n      error\n    };\n  }\n};","map":{"version":3,"names":["Client","CAR","HTTP","ucanto","Capabilities","attest","Access","Space","invoke","delegate","DID","Delegation","Schema","isDelegation","isExpired","isTooEarly","canDelegateCapability","AgentData","getSessionProofs","UCAN","API","HOST","PRINCIPAL","parse","agentToData","WeakMap","connection","options","connect","id","principal","codec","outbound","channel","open","url","URL","method","fetch","globalThis","bind","Agent","data","constructor","servicePrincipal","set","create","init","from","raw","fromExport","issuer","meta","spaces","did","addProof","delegation","addProofs","delegations","proof","addDelegation","audience","removeExpiredDelegations","#delegations","caps","_caps","Set","values","value","Array","isArray","length","cap","push","removeDelegation","cid","revoke","delegationCID","additionalProofs","proofs","find","equals","error","Error","toString","receipt","invokeAndExecute","with","nb","ucan","out","authorizations","sessions","proofsByIssuer","asCID","sessionProofs","sessionProofIssuer","Object","flat","arr","delegationsWithMeta","isSession","capabilities","some","c","can","createSpace","name","generate","agent","recoverSpace","secret","fromMnemonic","importSpaceFromDelegation","space","fromDelegation","withName","currentSpace","setCurrentSpace","has","currentSpaceWithMeta","p","add","get","abilities","map","a","facts","audienceMeta","inv","execute","invocations","capability","nonce","getSpaceInfo","_space","info","ok","addSpacesFromDelegations","assign","Map","ours","filter","x","ucanStars","startsWith","allows","resource","entries","keys","addSpace","importAuthorization"],"sources":["../../src/agent.js"],"sourcesContent":[null],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,gBAAgB;AACxC,OAAO,KAAKC,GAAG,MAAM,uBAAuB;AAC5C,OAAO,KAAKC,IAAI,MAAM,wBAAwB;AAC9C,OAAO,KAAKC,MAAM,MAAM,cAAc;AACtC,OAAO,KAAKC,YAAY,MAAM,kCAAkC;AAChE,SAASC,MAAM,QAAQ,iCAAiC;AACxD,OAAO,KAAKC,MAAM,MAAM,aAAa;AACrC,OAAO,KAAKC,KAAK,MAAM,YAAY;AAEnC,SACEC,MAAM,EACNC,QAAQ,EACRC,GAAG,EACHC,UAAU,EACVC,MAAM,EACNC,YAAY,QACP,cAAc;AACrB,SAASC,SAAS,EAAEC,UAAU,EAAEC,qBAAqB,QAAQ,kBAAkB;AAC/E,SAASC,SAAS,EAAEC,gBAAgB,QAAQ,iBAAiB;AAC7D,SAASC,IAAI,QAAQ,4BAA4B;AAEjD,OAAO,KAAKC,GAAG,MAAM,YAAY;AAEjC,cAAc,YAAY;AAC1B,cAAc,kBAAkB;AAChC,SAASH,SAAS,EAAEX,MAAM,EAAEC,KAAK,EAAEI,UAAU,EAAEC,MAAM;AACrD,cAAc,sBAAsB;AAEpC,MAAMS,IAAI,GAAG,yBAAyB;AACtC,MAAMC,SAAS,GAAGZ,GAAG,CAACa,KAAK,CAAC,sBAAsB,CAAC;AAEnD;;;;;;;AAOA;AACA,MAAMC,WAAW,GAAG,IAAIC,OAAO,EAAE;AAEjC;;;;AAKA;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUC,UAAUA,CAACC,OAAO,GAAG,EAAE;EACrC,OAAO3B,MAAM,CAAC4B,OAAO,CAAC;IACpBC,EAAE,EAAEF,OAAO,CAACG,SAAS,IAAIR,SAAS;IAClCS,KAAK,EAAE9B,GAAG,CAAC+B,QAAQ;IACnBC,OAAO,EACLN,OAAO,CAACM,OAAO,IACf/B,IAAI,CAACgC,IAAI,CAAC;MACRC,GAAG,EAAER,OAAO,CAACQ,GAAG,IAAI,IAAIC,GAAG,CAACf,IAAI,CAAC;MACjCgB,MAAM,EAAE,MAAM;MACdC,KAAK,EAAEX,OAAO,CAACW,KAAK,IAAIC,UAAU,CAACD,KAAK,CAACE,IAAI,CAACD,UAAU;KACzD;GACJ,CAAC;AACJ;AAEA;;;;;;;;;;;AAWA,OAAM,MAAOE,KAAK;EAChB;EACA,CAAAC,IAAK;EAEL;;;;EAIAC,YAAYD,IAAI,EAAEf,OAAO,GAAG,EAAE;IAC5B;IACA,MAAMM,OAAO,GAAGN,OAAO,CAACD,UAAU,EAAEO,OAAO;IAC3C,IAAI,CAACE,GAAG,GAAGR,OAAO,CAACQ,GAAG,IAAIF,OAAO,EAAEE,GAAG,IAAI,IAAIC,GAAG,CAACf,IAAI,CAAC;IACvD,IAAI,CAACK,UAAU,GACbC,OAAO,CAACD,UAAU,IAClBA,UAAU,CAAC;MACTI,SAAS,EAAEH,OAAO,CAACiB,gBAAgB;MACnCT,GAAG,EAAE,IAAI,CAACA;KACX,CAAC;IACJ,IAAI,CAAC,CAAAO,IAAK,GAAGA,IAAI;IACjBlB,WAAW,CAACqB,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAAH,IAAK,CAAC;EACnC;EAEA;;;;;;;EAOA,aAAaI,MAAMA,CAACC,IAAI,EAAEpB,OAAO,GAAG,EAAE;IACpC,MAAMe,IAAI,GAAG,MAAMzB,SAAS,CAAC6B,MAAM,CAACC,IAAI,EAAEpB,OAAO,CAAC;IAClD,OAAO,IAAIc,KAAK,CAACC,IAAI,EAAEf,OAAO,CAAC;EACjC;EAEA;;;;;;;EAOA,OAAOqB,IAAIA,CAACC,GAAG,EAAEtB,OAAO,GAAG,EAAE;IAC3B,MAAMe,IAAI,GAAGzB,SAAS,CAACiC,UAAU,CAACD,GAAG,EAAEtB,OAAO,CAAC;IAC/C,OAAO,IAAIc,KAAK,CAACC,IAAI,EAAEf,OAAO,CAAC;EACjC;EAEA,IAAIwB,MAAMA,CAAA;IACR,OAAO,IAAI,CAAC,CAAAT,IAAK,CAACZ,SAAS;EAC7B;EAEA,IAAIsB,IAAIA,CAAA;IACN,OAAO,IAAI,CAAC,CAAAV,IAAK,CAACU,IAAI;EACxB;EAEA,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAAC,CAAAX,IAAK,CAACW,MAAM;EAC1B;EAEAC,GAAGA,CAAA;IACD,OAAO,IAAI,CAAC,CAAAZ,IAAK,CAACZ,SAAS,CAACwB,GAAG,EAAE;EACnC;EAEA;;;;;EAKA,MAAMC,QAAQA,CAACC,UAAU;IACvB,OAAO,MAAM,IAAI,CAACC,SAAS,CAAC,CAACD,UAAU,CAAC,CAAC;EAC3C;EAEA;;;;;EAKA,MAAMC,SAASA,CAACC,WAAW;IACzB,KAAK,MAAMC,KAAK,IAAID,WAAW,EAAE;MAC/B,MAAM,IAAI,CAAC,CAAAhB,IAAK,CAACkB,aAAa,CAACD,KAAK,EAAE;QAAEE,QAAQ,EAAE,IAAI,CAACT;MAAI,CAAE,CAAC;;IAEhE,MAAM,IAAI,CAACU,wBAAwB,EAAE;IAErC,OAAO,EAAE;EACX;EAEA;;;;;EAKA,CAAAJ,WAAYK,CAACC,IAAI;IACf,MAAMC,KAAK,GAAG,IAAIC,GAAG,CAACF,IAAI,CAAC;IAC3B;IACA,MAAMG,MAAM,GAAG,EAAE;IACjB,KAAK,MAAM,GAAGC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAA1B,IAAK,CAACgB,WAAW,EAAE;MAC9C;MACA,IACE,CAAC5C,SAAS,CAACsD,KAAK,CAACZ,UAAU,CAAC;MAAI;MAChC,CAACzC,UAAU,CAACqD,KAAK,CAACZ,UAAU,CAAC,EAC7B;QACA;QACA,IAAIa,KAAK,CAACC,OAAO,CAACN,IAAI,CAAC,IAAIA,IAAI,CAACO,MAAM,GAAG,CAAC,EAAE;UAC1C,KAAK,MAAMC,GAAG,IAAIP,KAAK,EAAE;YACvB,IAAIjD,qBAAqB,CAACoD,KAAK,CAACZ,UAAU,EAAEgB,GAAG,CAAC,EAAE;cAChDL,MAAM,CAACM,IAAI,CAACL,KAAK,CAAC;;;SAGvB,MAAM;UACLD,MAAM,CAACM,IAAI,CAACL,KAAK,CAAC;;;;IAIxB,OAAOD,MAAM;EACf;EAEA;;;EAGA,MAAML,wBAAwBA,CAAA;IAC5B,KAAK,MAAM,GAAGM,KAAK,CAAC,IAAI,IAAI,CAAC,CAAA1B,IAAK,CAACgB,WAAW,EAAE;MAC9C,IAAI5C,SAAS,CAACsD,KAAK,CAACZ,UAAU,CAAC,EAAE;QAC/B,MAAM,IAAI,CAAC,CAAAd,IAAK,CAACgC,gBAAgB,CAACN,KAAK,CAACZ,UAAU,CAACmB,GAAG,CAAC;;;EAG7D;EAEA;;;;;;;;;;;;EAYA,MAAMC,MAAMA,CAACC,aAAa,EAAElD,OAAO,GAAG,EAAE;IACtC,MAAMmD,gBAAgB,GAAGnD,OAAO,CAACoD,MAAM,IAAI,EAAE;IAC7C;IACA,MAAMvB,UAAU,GAAG,CAAC,GAAG,IAAI,CAACE,WAAW,EAAE,EAAE,GAAGoB,gBAAgB,CAAC,CAACE,IAAI,CACjExB,UAAU,IAAKA,UAAU,CAACmB,GAAG,CAACM,MAAM,CAACJ,aAAa,CAAC,CACrD;IACD,IAAI,CAACrB,UAAU,EAAE;MACf,OAAO;QACL0B,KAAK,EAAE,IAAIC,KAAK,CACd,6BAA6BN,aAAa,CAACO,QAAQ,EAAE,oDAAoD;OAE5G;;IAEH,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACC,gBAAgB,CAACnE,IAAI,CAACyD,MAAM,EAAE;MACvD;MACA;MACA;MACAW,IAAI,EAAE,IAAI,CAACpC,MAAM,CAACG,GAAG,EAAE;MACvBkC,EAAE,EAAE;QACFC,IAAI,EAAEjC,UAAU,CAACmB;OAClB;MACDI,MAAM,EAAE,CAACvB,UAAU,EAAE,GAAGsB,gBAAgB;KACzC,CAAC;IACF,OAAOO,OAAO,CAACK,GAAG;EACpB;EAEA;;;;;;;;;;;;;EAaAX,MAAMA,CAACf,IAAI,EAAErC,OAAO;IAClB,MAAMgE,cAAc,GAAG,EAAE;IACzB,KAAK,MAAM;MAAEnC;IAAU,CAAE,IAAI,IAAI,CAAC,CAAAE,WAAY,CAACM,IAAI,CAAC,EAAE;MACpD,IAAIR,UAAU,CAACK,QAAQ,CAACP,GAAG,EAAE,KAAK,IAAI,CAACH,MAAM,CAACG,GAAG,EAAE,EAAE;QACnDqC,cAAc,CAAClB,IAAI,CAACjB,UAAU,CAAC;;;IAInC;IACA,MAAMoC,QAAQ,GAAG1E,gBAAgB,CAAC,IAAI,CAAC,CAAAwB,IAAK,CAAC;IAC7C,KAAK,MAAMiB,KAAK,IAAIgC,cAAc,EAAE;MAClC,MAAME,cAAc,GAAGD,QAAQ,CAACjC,KAAK,CAACmC,KAAK,CAACV,QAAQ,EAAE,CAAC,IAAI,EAAE;MAC7D,MAAMW,aAAa,GAAGpE,OAAO,EAAEqE,kBAAkB,GAC7CH,cAAc,CAAClE,OAAO,CAACqE,kBAAkB,CAAC,IAAI,EAAE,GAChDC,MAAM,CAAC9B,MAAM,CAAC0B,cAAc,CAAC,CAACK,IAAI,EAAE;MACxC,IAAIH,aAAa,CAACxB,MAAM,EAAE;QACxBoB,cAAc,CAAClB,IAAI,CAAC,GAAGsB,aAAa,CAAC;;;IAGzC,OAAOJ,cAAc;EACvB;EAEA;;;;;EAKAjC,WAAWA,CAACM,IAAI;IACd,MAAMmC,GAAG,GAAG,EAAE;IAEd,KAAK,MAAM;MAAE3C;IAAU,CAAE,IAAI,IAAI,CAAC4C,mBAAmB,CAACpC,IAAI,CAAC,EAAE;MAC3DmC,GAAG,CAAC1B,IAAI,CAACjB,UAAU,CAAC;;IAGtB,OAAO2C,GAAG;EACZ;EAEA;;;;;EAKAC,mBAAmBA,CAACpC,IAAI;IACtB,MAAMmC,GAAG,GAAG,EAAE;IAEd,KAAK,MAAM/B,KAAK,IAAI,IAAI,CAAC,CAAAV,WAAY,CAACM,IAAI,CAAC,EAAE;MAC3C,MAAM;QAAER;MAAU,CAAE,GAAGY,KAAK;MAC5B,MAAMiC,SAAS,GAAG7C,UAAU,CAAC8C,YAAY,CAACC,IAAI,CAC3CC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKpG,MAAM,CAACoG,GAAG,CAC5B;MACD,IAAI,CAACJ,SAAS,IAAI7C,UAAU,CAACK,QAAQ,CAACP,GAAG,EAAE,KAAK,IAAI,CAACH,MAAM,CAACG,GAAG,EAAE,EAAE;QACjE6C,GAAG,CAAC1B,IAAI,CAACL,KAAK,CAAC;;;IAInB,OAAO+B,GAAG;EACZ;EAEA;;;;;EAKA,MAAMO,WAAWA,CAACC,IAAI;IACpB,OAAO,MAAMpG,KAAK,CAACqG,QAAQ,CAAC;MAAED,IAAI;MAAEE,KAAK,EAAE;IAAI,CAAE,CAAC;EACpD;EAEA;;;;;EAKA,MAAMC,YAAYA,CAACC,MAAM,EAAE;IAAEJ;EAAI,CAAE;IACjC,OAAO,MAAMpG,KAAK,CAACyG,YAAY,CAACD,MAAM,EAAE;MAAEJ,IAAI;MAAEE,KAAK,EAAE;IAAI,CAAE,CAAC;EAChE;EAEA;;;;;;;EAOA,MAAMI,yBAAyBA,CAACzD,UAAU,EAAE;IAAEmD,IAAI,GAAG;EAAE,CAAE,GAAG,EAAE;IAC5D,MAAMO,KAAK,GACTP,IAAI,KAAK,EAAE,GACPpG,KAAK,CAAC4G,cAAc,CAAC3D,UAAU,CAAC,GAChCjD,KAAK,CAAC4G,cAAc,CAAC3D,UAAU,CAAC,CAAC4D,QAAQ,CAACT,IAAI,CAAC;IAErD,IAAI,CAAC,CAAAjE,IAAK,CAACW,MAAM,CAACR,GAAG,CAACqE,KAAK,CAAC5D,GAAG,EAAE,EAAE;MAAE,GAAG4D,KAAK,CAAC9D,IAAI;MAAEuD,IAAI,EAAEO,KAAK,CAACP;IAAI,CAAE,CAAC;IAEvE,MAAM,IAAI,CAACpD,QAAQ,CAAC2D,KAAK,CAAC1D,UAAU,CAAC;IAErC;IACA,IAAI,CAAC,IAAI,CAAC6D,YAAY,EAAE,EAAE;MACxB,MAAM,IAAI,CAACC,eAAe,CAACJ,KAAK,CAAC5D,GAAG,EAAE,CAAC;;IAGzC,OAAO4D,KAAK;EACd;EAEA;;;;;;;EAOA,MAAMI,eAAeA,CAACJ,KAAK;IACzB,IAAI,CAAC,IAAI,CAAC,CAAAxE,IAAK,CAACW,MAAM,CAACkE,GAAG,CAACL,KAAK,CAAC,EAAE;MACjC,MAAM,IAAI/B,KAAK,CAAC,2BAA2B+B,KAAK,GAAG,CAAC;;IAGtD,MAAM,IAAI,CAAC,CAAAxE,IAAK,CAAC4E,eAAe,CAACJ,KAAK,CAAC;IAEvC,OAAOA,KAAK;EACd;EAEA;;;EAGAG,YAAYA,CAAA;IACV,OAAO,IAAI,CAAC,CAAA3E,IAAK,CAAC2E,YAAY;EAChC;EAEA;;;EAGAG,oBAAoBA,CAAA;IAClB,IAAI,CAAC,IAAI,CAAC,CAAA9E,IAAK,CAAC2E,YAAY,EAAE;MAC5B;;IAGF,MAAMtC,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC,CACzB;MACE0B,GAAG,EAAE,YAAY;MACjBlB,IAAI,EAAE,IAAI,CAAC,CAAA7C,IAAK,CAAC2E;KAClB,CACF,CAAC;IAEF,MAAMrD,IAAI,GAAG,IAAIE,GAAG,EAAE;IACtB,KAAK,MAAMuD,CAAC,IAAI1C,MAAM,EAAE;MACtB,KAAK,MAAMP,GAAG,IAAIiD,CAAC,CAACnB,YAAY,EAAE;QAChCtC,IAAI,CAAC0D,GAAG,CAAClD,GAAG,CAACiC,GAAG,CAAC;;;IAIrB,OAAO;MACLnD,GAAG,EAAE,IAAI,CAAC,CAAAZ,IAAK,CAAC2E,YAAY;MAC5BtC,MAAM;MACNuB,YAAY,EAAE,CAAC,GAAGtC,IAAI,CAAC;MACvBZ,IAAI,EAAE,IAAI,CAAC,CAAAV,IAAK,CAACW,MAAM,CAACsE,GAAG,CAAC,IAAI,CAAC,CAAAjF,IAAK,CAAC2E,YAAY;KACpD;EACH;EAEA;;;;EAIA,MAAM5G,QAAQA,CAACkB,OAAO;IACpB,MAAMuF,KAAK,GAAG,IAAI,CAACM,oBAAoB,EAAE;IACzC,IAAI,CAACN,KAAK,EAAE;MACV,MAAM,IAAI/B,KAAK,CAAC,oBAAoB,CAAC;;IAGvC,MAAMnB,IAAI,GAAG,+BACXrC,OAAO,CAACiG,SAAS,CAACC,GAAG,CAAEC,CAAC,IAAI;MAC1B,OAAO;QACLvC,IAAI,EAAE2B,KAAK,CAAC5D,GAAG;QACfmD,GAAG,EAAEqB;OACN;IACH,CAAC,CACF;IAED;IACA,KAAK,MAAMtD,GAAG,IAAIR,IAAI,EAAE;MACtB,IAAI,CAAC,IAAI,CAACe,MAAM,CAAC,CAACP,GAAG,CAAC,CAAC,CAACD,MAAM,EAAE;QAC9B,MAAM,IAAIY,KAAK,CACb,8BAA8BX,GAAG,CAACiC,GAAG,SAASjC,GAAG,CAACe,IAAI,EAAE,CACzD;;;IAIL,MAAM/B,UAAU,GAAG,MAAM/C,QAAQ,CAAC;MAChC0C,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBmD,YAAY,EAAEtC,IAAI;MAClBe,MAAM,EAAE,IAAI,CAACA,MAAM,CAACf,IAAI,CAAC;MACzB+D,KAAK,EAAE,CAAC;QAAEb,KAAK,EAAEA,KAAK,CAAC9D,IAAI,IAAI;MAAE,CAAE,CAAC;MACpC,GAAGzB;KACJ,CAAC;IAEF,MAAM,IAAI,CAAC,CAAAe,IAAK,CAACkB,aAAa,CAACJ,UAAU,EAAE;MACzCK,QAAQ,EAAElC,OAAO,CAACqG;KACnB,CAAC;IACF,MAAM,IAAI,CAAClE,wBAAwB,EAAE;IAErC,OAAON,UAAU;EACnB;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BA,MAAM8B,gBAAgBA,CAACd,GAAG,EAAE7C,OAAO;IACjC,MAAMsG,GAAG,GAAG,MAAM,IAAI,CAACzH,MAAM,CAACgE,GAAG,EAAE7C,OAAO,CAAC;IAC3C,MAAM+D,GAAG,GAAGuC,GAAG,CAACC,OAAO,EAAC,gBAAkB,IAAI,CAACxG,UAAW,CAAC;IAC3D,OAAO,gBAAkBgE,GAAG;EAC9B;EAEA;;;;;;;;;;;;;;;;;;;EAmBAwC,OAAOA,CAAC,GAAGC,WAAW;IACpB,OAAO,IAAI,CAACzG,UAAU,CAACwG,OAAO,CAAC,GAAGC,WAAW,CAAC;EAChD;EAEA;;;;;;;;;;;;;;;;;;;;;;;EAuBA,MAAM3H,MAAMA,CAACgE,GAAG,EAAE7C,OAAO;IACvB,MAAMkC,QAAQ,GAAGlC,OAAO,CAACkC,QAAQ,IAAI,IAAI,CAACnC,UAAU,CAACG,EAAE;IAEvD,MAAMqF,KAAK,GAAGvF,OAAO,CAAC4D,IAAI,IAAI,IAAI,CAAC8B,YAAY,EAAE;IACjD,IAAI,CAACH,KAAK,EAAE;MACV,MAAM,IAAI/B,KAAK,CACb,0DAA0D,CAC3D;;IAGH,MAAMJ,MAAM,GAAG,CACb,IAAIpD,OAAO,CAACoD,MAAM,IAAI,EAAE,CAAC,EACzB,GAAG,IAAI,CAACA,MAAM,CACZ,CACE;MACEQ,IAAI,EAAE2B,KAAK;MACXT,GAAG,EAAEjC,GAAG,CAACiC;KACV,CACF,EACD;MAAET,kBAAkB,EAAEnC,QAAQ,CAACP,GAAG;IAAE,CAAE,CACvC,CACF;IAED,IAAIyB,MAAM,CAACR,MAAM,KAAK,CAAC,IAAI5C,OAAO,CAAC4D,IAAI,KAAK,IAAI,CAACjC,GAAG,EAAE,EAAE;MACtD,MAAM,IAAI6B,KAAK,CACb,oCAAoC+B,KAAK,gBAAgB1C,GAAG,CAACiC,GAAG,EAAE,CACnE;;IAEH,MAAMwB,GAAG,GAAGzH,MAAM,CAAC;MACjB,GAAGmB,OAAO;MACVkC,QAAQ;MACR;MACAuE,UAAU,EAAE5D,GAAG,CAAC1B,MAAM,CAAC;QACrByC,IAAI,EAAE2B,KAAK;QACX1B,EAAE,EAAE7D,OAAO,CAAC6D;OACb,CAAC;MACFrC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnB4B,MAAM,EAAE,CAAC,GAAGA,MAAM,CAAC;MACnBsD,KAAK,EAAE1G,OAAO,CAAC0G;KAChB,CAAC;IAEF,OAAO,wEACLJ,GAAG;EAEP;EAEA;;;;;;;EAOA,MAAMK,YAAYA,CAACpB,KAAK,EAAEvF,OAAO;IAC/B,MAAM4G,MAAM,GAAGrB,KAAK,IAAI,IAAI,CAACG,YAAY,EAAE;IAC3C,IAAI,CAACkB,MAAM,EAAE;MACX,MAAM,IAAIpD,KAAK,CAAC,8CAA8C,CAAC;;IAEjE,MAAM8C,GAAG,GAAG,MAAM,IAAI,CAAC3C,gBAAgB,CAAClF,YAAY,CAACoI,IAAI,EAAE;MACzD,GAAG7G,OAAO;MACV4D,IAAI,EAAEgD;KACP,CAAC;IAEF,IAAIN,GAAG,CAACvC,GAAG,CAACR,KAAK,EAAE;MACjB,MAAM+C,GAAG,CAACvC,GAAG,CAACR,KAAK;;IAGrB,OAAO,mDAAqD+C,GAAG,CAACvC,GAAG,CAAC+C,EAAE;EACxE;;AAGF;;;;;;;;;;AAUA,OAAO,eAAeC,wBAAwBA,CAAC7B,KAAK,EAAEnD,WAAW;EAC/D,MAAMhB,IAAI,GAAGlB,WAAW,CAACmG,GAAG,CAACd,KAAK,CAAC;EACnC,IAAI,CAACnE,IAAI,EAAE;IACT,MAAMuD,MAAM,CAAC0C,MAAM,CAAC,IAAIxD,KAAK,CAAC,sCAAsC,CAAC,EAAE;MACrE0B,KAAK,EAAEA;KACR,CAAC;;EAGJ;EACA,MAAMxD,MAAM,GAAG,IAAIuF,GAAG,EAAE;EACxB;EACA,MAAMC,IAAI,GAAGnF,WAAW,CAACoF,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAClF,QAAQ,CAACP,GAAG,EAAE,KAAKuD,KAAK,CAACvD,GAAG,EAAE,CAAC;EACxE;EACA,MAAM0F,SAAS,GAAGH,IAAI,CAACC,MAAM,CAC1BC,CAAC,IAAKA,CAAC,CAACzC,YAAY,CAAC,CAAC,CAAC,CAACG,GAAG,KAAK,GAAG,IAAIsC,CAAC,CAACzC,YAAY,CAAC,CAAC,CAAC,CAACf,IAAI,KAAK,QAAQ,CAC5E;EACD,KAAK,MAAM/B,UAAU,IAAIwF,SAAS,EAAE;IAClC,KAAK,MAAMrF,KAAK,IAAIH,UAAU,CAACuB,MAAM,EAAE;MACrC,IACE,CAAClE,YAAY,CAAC8C,KAAK,CAAC,IACpB,CAACA,KAAK,CAAC2C,YAAY,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC0D,UAAU,CAAC,SAAS,CAAC,EACjD;QACA;;MAEF,MAAM/B,KAAK,GAAG3G,KAAK,CAAC4G,cAAc,CAACxD,KAAK,CAAC;MACzCN,MAAM,CAACR,GAAG,CAACqE,KAAK,CAAC5D,GAAG,EAAE,EAAE4D,KAAK,CAAC9D,IAAI,CAAC;;;EAIvC;EACA,KAAK,MAAMI,UAAU,IAAIqF,IAAI,EAAE;IAC7B;IACA;IACA,MAAMK,MAAM,GAAG/I,MAAM,CAACQ,UAAU,CAACuI,MAAM,CAAC1F,UAAU,CAAC;IACnD,KAAK,MAAM,CAAC2F,QAAQ,EAAE/E,KAAK,CAAC,IAAI6B,MAAM,CAACmD,OAAO,CAACF,MAAM,CAAC,EAAE;MACtD;MACA,IAAIC,QAAQ,CAACF,UAAU,CAAC,SAAS,CAAC,IAAIhD,MAAM,CAACoD,IAAI,CAACjF,KAAK,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;QACnE,IAAI,CAAClB,MAAM,CAACkE,GAAG,CAAC4B,QAAQ,CAAC,EAAE;UACzB9F,MAAM,CAACR,GAAG,CAACsG,QAAQ,EAAE,EAAE,CAAC;;;;;EAMhC,KAAK,MAAM,CAAC7F,GAAG,EAAEF,IAAI,CAAC,IAAIC,MAAM,EAAE;IAChC,MAAMX,IAAI,CAAC4G,QAAQ,CAAChG,GAAG,EAAEF,IAAI,CAAC;;AAElC;AAEA;;;;;;;;;AASA,OAAO,MAAMmG,mBAAmB,GAAG,MAAAA,CAAO1C,KAAK,EAAE;EAAE9B;AAAM,CAAE,KAAI;EAC7D,IAAI;IACF,MAAM8B,KAAK,CAACpD,SAAS,CAACsB,MAAM,CAAC;IAC7B,MAAM2D,wBAAwB,CAAC7B,KAAK,EAAE9B,MAAM,CAAC;IAC7C,OAAO;MAAE0D,EAAE,EAAE;IAAE,CAAE;GAClB,CAAC,OAAOvD,KAAK,EAAE;IACd,OAAO,4BAA8B;MAAEA;IAAK,CAAE;;AAElD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}