{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getActiveDomain, getMainCarrier } from '@sentry/hub';\nimport { TransactionSamplingMethod } from '@sentry/types';\nimport { dynamicRequire, extractNodeRequestData, getGlobalObject, isInstanceOf, isNodeEnv, logger } from '@sentry/utils';\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders() {\n  var scope = this.getScope();\n  if (scope) {\n    var span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n  }\n  return {};\n}\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param hub: The hub off of which to read config options\n * @param transaction: The transaction needing a sampling decision\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample(hub, transaction, samplingContext) {\n  var _a;\n  var client = hub.getClient();\n  var options = client && client.getOptions() || {};\n  // nothing to do if there's no client or if tracing is disabled\n  if (!client || !hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.tags = __assign(__assign({}, transaction.tags), {\n      __sentry_samplingMethod: TransactionSamplingMethod.Explicit\n    });\n    return transaction;\n  }\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  var sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    // cast the rate to a number first in case it's a boolean\n    transaction.tags = __assign(__assign({}, transaction.tags), {\n      __sentry_samplingMethod: TransactionSamplingMethod.Sampler,\n      // TODO kmclb - once tag types are loosened, don't need to cast to string here\n      __sentry_sampleRate: String(Number(sampleRate))\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.tags = __assign(__assign({}, transaction.tags), {\n      __sentry_samplingMethod: TransactionSamplingMethod.Inheritance\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    // cast the rate to a number first in case it's a boolean\n    transaction.tags = __assign(__assign({}, transaction.tags), {\n      __sentry_samplingMethod: TransactionSamplingMethod.Rate,\n      // TODO kmclb - once tag types are loosened, don't need to cast to string here\n      __sentry_sampleRate: String(Number(sampleRate))\n    });\n  }\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    logger.warn(\"[Tracing] Discarding transaction because of invalid sample rate.\");\n    transaction.sampled = false;\n    return transaction;\n  }\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    logger.log(\"[Tracing] Discarding transaction because \" + (typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'));\n    transaction.sampled = false;\n    return transaction;\n  }\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < sampleRate;\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    logger.log(\"[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = \" + Number(sampleRate) + \")\");\n    return transaction;\n  }\n  // at this point we know we're keeping the transaction, whether because of an inherited decision or because it got\n  // lucky with the dice roll\n  transaction.initSpanRecorder((_a = options._experiments) === null || _a === void 0 ? void 0 : _a.maxSpans);\n  logger.log(\"[Tracing] starting \" + transaction.op + \" transaction - \" + transaction.name);\n  return transaction;\n}\n/**\n * Gets the correct context to pass to the tracesSampler, based on the environment (i.e., which SDK is being used)\n *\n * @returns The default sample context\n */\nfunction getDefaultSamplingContext(transactionContext) {\n  // promote parent sampling decision (if any) for easy access\n  var parentSampled = transactionContext.parentSampled;\n  var defaultSamplingContext = {\n    transactionContext: transactionContext,\n    parentSampled: parentSampled\n  };\n  if (isNodeEnv()) {\n    var domain = getActiveDomain();\n    if (domain) {\n      // for all node servers that we currently support, we store the incoming request object (which is an instance of\n      // http.IncomingMessage) on the domain\n      // the domain members are stored as an array, so our only way to find the request is to iterate through the array\n      // and compare types\n      var nodeHttpModule = dynamicRequire(module, 'http');\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      var requestType_1 = nodeHttpModule.IncomingMessage;\n      var request = domain.members.find(function (member) {\n        return isInstanceOf(member, requestType_1);\n      });\n      if (request) {\n        defaultSamplingContext.request = extractNodeRequestData(request);\n      }\n    }\n  }\n  // we must be in browser-js (or some derivative thereof)\n  else {\n    // we use `getGlobalObject()` rather than `window` since service workers also have a `location` property on `self`\n    var globalObject = getGlobalObject();\n    if ('location' in globalObject) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      defaultSamplingContext.location = __assign({}, globalObject.location);\n    }\n  }\n  return defaultSamplingContext;\n}\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate) {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got \" + JSON.stringify(rate) + \" of type \" + JSON.stringify(typeof rate) + \".\");\n    return false;\n  }\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got \" + rate + \".\");\n    return false;\n  }\n  return true;\n}\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(transactionContext, customSamplingContext) {\n  var transaction = new Transaction(transactionContext, this);\n  return sample(this, transaction, __assign(__assign({}, getDefaultSamplingContext(transactionContext)), customSamplingContext));\n}\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(hub, transactionContext, idleTimeout, onScope) {\n  var transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  return sample(hub, transaction, getDefaultSamplingContext(transactionContext));\n}\n/**\n * @private\n */\nexport function _addTracingExtensions() {\n  var carrier = getMainCarrier();\n  if (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n    if (!carrier.__SENTRY__.extensions.startTransaction) {\n      carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n    }\n    if (!carrier.__SENTRY__.extensions.traceHeaders) {\n      carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n    }\n  }\n}\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods() {\n  _addTracingExtensions();\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}","map":{"version":3,"names":["getActiveDomain","getMainCarrier","TransactionSamplingMethod","dynamicRequire","extractNodeRequestData","getGlobalObject","isInstanceOf","isNodeEnv","logger","registerErrorInstrumentation","IdleTransaction","Transaction","hasTracingEnabled","traceHeaders","scope","getScope","span","getSpan","toTraceparent","sample","hub","transaction","samplingContext","client","getClient","options","getOptions","sampled","undefined","tags","__assign","__sentry_samplingMethod","Explicit","sampleRate","tracesSampler","Sampler","__sentry_sampleRate","String","Number","parentSampled","Inheritance","tracesSampleRate","Rate","isValidSampleRate","warn","log","Math","random","initSpanRecorder","_a","_experiments","maxSpans","op","name","getDefaultSamplingContext","transactionContext","defaultSamplingContext","domain","nodeHttpModule","module","requestType_1","IncomingMessage","request","members","find","member","globalObject","location","rate","isNaN","JSON","stringify","_startTransaction","customSamplingContext","startIdleTransaction","idleTimeout","onScope","_addTracingExtensions","carrier","__SENTRY__","extensions","startTransaction","addExtensionMethods"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\tracing\\src\\hubextensions.ts"],"sourcesContent":["import { getActiveDomain, getMainCarrier, Hub } from '@sentry/hub';\nimport { CustomSamplingContext, SamplingContext, TransactionContext, TransactionSamplingMethod } from '@sentry/types';\nimport {\n  dynamicRequire,\n  extractNodeRequestData,\n  getGlobalObject,\n  isInstanceOf,\n  isNodeEnv,\n  logger,\n} from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param hub: The hub off of which to read config options\n * @param transaction: The transaction needing a sampling decision\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(hub: Hub, transaction: T, samplingContext: SamplingContext): T {\n  const client = hub.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  // nothing to do if there's no client or if tracing is disabled\n  if (!client || !hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.tags = { ...transaction.tags, __sentry_samplingMethod: TransactionSamplingMethod.Explicit };\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    // cast the rate to a number first in case it's a boolean\n    transaction.tags = {\n      ...transaction.tags,\n      __sentry_samplingMethod: TransactionSamplingMethod.Sampler,\n      // TODO kmclb - once tag types are loosened, don't need to cast to string here\n      __sentry_sampleRate: String(Number(sampleRate)),\n    };\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.tags = { ...transaction.tags, __sentry_samplingMethod: TransactionSamplingMethod.Inheritance };\n  } else {\n    sampleRate = options.tracesSampleRate;\n    // cast the rate to a number first in case it's a boolean\n    transaction.tags = {\n      ...transaction.tags,\n      __sentry_samplingMethod: TransactionSamplingMethod.Rate,\n      // TODO kmclb - once tag types are loosened, don't need to cast to string here\n      __sentry_sampleRate: String(Number(sampleRate)),\n    };\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    logger.warn(`[Tracing] Discarding transaction because of invalid sample rate.`);\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    logger.log(\n      `[Tracing] Discarding transaction because ${\n        typeof options.tracesSampler === 'function'\n          ? 'tracesSampler returned 0 or false'\n          : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n      }`,\n    );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    logger.log(\n      `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n        sampleRate,\n      )})`,\n    );\n    return transaction;\n  }\n\n  // at this point we know we're keeping the transaction, whether because of an inherited decision or because it got\n  // lucky with the dice roll\n  transaction.initSpanRecorder(options._experiments?.maxSpans as number);\n\n  logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n/**\n * Gets the correct context to pass to the tracesSampler, based on the environment (i.e., which SDK is being used)\n *\n * @returns The default sample context\n */\nfunction getDefaultSamplingContext(transactionContext: TransactionContext): SamplingContext {\n  // promote parent sampling decision (if any) for easy access\n  const { parentSampled } = transactionContext;\n  const defaultSamplingContext: SamplingContext = { transactionContext, parentSampled };\n\n  if (isNodeEnv()) {\n    const domain = getActiveDomain();\n\n    if (domain) {\n      // for all node servers that we currently support, we store the incoming request object (which is an instance of\n      // http.IncomingMessage) on the domain\n\n      // the domain members are stored as an array, so our only way to find the request is to iterate through the array\n      // and compare types\n\n      const nodeHttpModule = dynamicRequire(module, 'http');\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const requestType = nodeHttpModule.IncomingMessage;\n\n      const request = domain.members.find(member => isInstanceOf(member, requestType));\n      if (request) {\n        defaultSamplingContext.request = extractNodeRequestData(request);\n      }\n    }\n  }\n\n  // we must be in browser-js (or some derivative thereof)\n  else {\n    // we use `getGlobalObject()` rather than `window` since service workers also have a `location` property on `self`\n    const globalObject = getGlobalObject<WindowOrWorkerGlobalScope>();\n\n    if ('location' in globalObject) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      defaultSamplingContext.location = { ...(globalObject as any).location };\n    }\n  }\n\n  return defaultSamplingContext;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate as any) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    logger.warn(\n      `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n        rate,\n      )} of type ${JSON.stringify(typeof rate)}.`,\n    );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const transaction = new Transaction(transactionContext, this);\n  return sample(this, transaction, {\n    ...getDefaultSamplingContext(transactionContext),\n    ...customSamplingContext,\n  });\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout?: number,\n  onScope?: boolean,\n): IdleTransaction {\n  const transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  return sample(hub, transaction, getDefaultSamplingContext(transactionContext));\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n    if (!carrier.__SENTRY__.extensions.startTransaction) {\n      carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n    }\n    if (!carrier.__SENTRY__.extensions.traceHeaders) {\n      carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n    }\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}