{"ast":null,"code":"import * as API from \"./file/api.js\";\nimport * as UnixFS from \"./codec.js\";\nimport * as Writer from \"./file/writer.js\";\nimport * as Task from \"actor\";\nimport { panic } from \"./writer/util.js\";\nimport * as FixedSize from \"./file/chunker/fixed.js\";\nimport { sha256 } from \"multiformats/hashes/sha2\";\nimport { CID } from \"multiformats/cid\";\nimport * as Balanced from \"./file/layout/balanced.js\";\nexport * from \"./file/api.js\";\n\n/**\n * @returns {API.EncoderSettings}\n */\nexport const defaults = () => ({\n  chunker: FixedSize,\n  fileChunkEncoder: UnixFSLeaf,\n  smallFileEncoder: UnixFSLeaf,\n  fileEncoder: UnixFS,\n  fileLayout: Balanced.withWidth(174),\n  hasher: sha256,\n  linker: {\n    createLink: CID.createV1\n  }\n});\n\n/**\n * @template {unknown} Layout\n * @param {Partial<API.EncoderSettings<Layout>>} config\n * @returns {API.EncoderSettings<Layout>}\n */\nexport const configure = config => ({\n  ...defaults(),\n  ...config\n});\nexport const UnixFSLeaf = {\n  code: UnixFS.code,\n  name: UnixFS.name,\n  encode: UnixFS.encodeFileChunk\n};\nexport const UnixFSRawLeaf = {\n  code: UnixFS.code,\n  name: UnixFS.name,\n  encode: UnixFS.encodeRaw\n};\n\n/**\n * @template Layout\n * @param {API.Options<Layout>} options\n * @returns {API.View<Layout>}\n */\nexport const create = ({\n  writer,\n  metadata = {},\n  settings = defaults()\n}) => new FileWriterView(Writer.init(writer, metadata, configure(settings)));\n\n/**\n * @template T\n * @param {API.View<T>} view\n * @param {Uint8Array} bytes\n * @return {Promise<API.View<T>>}\n */\n\nexport const write = async (view, bytes) => {\n  await perform(view, Task.send({\n    type: \"write\",\n    bytes\n  }));\n  return view;\n};\n\n/**\n * @template T\n * @param {API.View<T>} view\n * @param {API.CloseOptions} options\n */\nexport const close = async (view, {\n  releaseLock = false,\n  closeWriter = false\n} = {}) => {\n  await perform(view, Task.send({\n    type: \"close\"\n  }));\n  const {\n    state\n  } = view;\n  if (state.status === \"linked\") {\n    if (closeWriter) {\n      await view.state.writer.close();\n    } else if (releaseLock) {\n      view.state.writer.releaseLock();\n    }\n    return state.link;\n    /* c8 ignore next 5 */\n  } else {\n    panic(`Expected writer to be in 'linked' state after close, but it is in \"${state.status}\" instead`);\n  }\n};\n\n/**\n * @template T\n * @param {API.View<T>} view\n * @param {Task.Effect<Writer.Message>} effect\n */\nconst perform = (view, effect) => Task.fork(Task.loop(effect, message => {\n  const {\n    state,\n    effect\n  } = Writer.update(message, view.state);\n  view.state = state;\n  return effect;\n}));\n\n/**\n * @template Layout\n * @implements {API.View<Layout>}\n */\nclass FileWriterView {\n  /**\n   * @param {Writer.State<Layout>} state\n   */\n  constructor(state) {\n    this.state = state;\n  }\n  get writer() {\n    return this.state.writer;\n  }\n  get settings() {\n    return this.state.config;\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {Promise<API.View<Layout>>}\n   */\n  write(bytes) {\n    return write(this, bytes);\n  }\n  /**\n   * @param {API.CloseOptions} [options]\n   * @returns {Promise<UnixFS.FileLink>}\n   */\n  close(options) {\n    return close(this, options);\n  }\n}","map":{"version":3,"names":["API","UnixFS","Writer","Task","panic","FixedSize","sha256","CID","Balanced","defaults","chunker","fileChunkEncoder","UnixFSLeaf","smallFileEncoder","fileEncoder","fileLayout","withWidth","hasher","linker","createLink","createV1","configure","config","code","name","encode","encodeFileChunk","UnixFSRawLeaf","encodeRaw","create","writer","metadata","settings","FileWriterView","init","write","view","bytes","perform","send","type","close","releaseLock","closeWriter","state","status","link","effect","fork","loop","message","update","constructor","options"],"sources":["C:/FACULTATE/Proiect/node_modules/@ipld/unixfs/src/file.js"],"sourcesContent":["import * as API from \"./file/api.js\"\nimport * as UnixFS from \"./codec.js\"\nimport * as Writer from \"./file/writer.js\"\nimport * as Task from \"actor\"\nimport { panic } from \"./writer/util.js\"\nimport * as FixedSize from \"./file/chunker/fixed.js\"\nimport { sha256 } from \"multiformats/hashes/sha2\"\nimport { CID } from \"multiformats/cid\"\nimport * as Balanced from \"./file/layout/balanced.js\"\n\nexport * from \"./file/api.js\"\n\n/**\n * @returns {API.EncoderSettings}\n */\nexport const defaults = () => ({\n  chunker: FixedSize,\n  fileChunkEncoder: UnixFSLeaf,\n  smallFileEncoder: UnixFSLeaf,\n  fileEncoder: UnixFS,\n  fileLayout: Balanced.withWidth(174),\n  hasher: sha256,\n  linker: { createLink: CID.createV1 },\n})\n\n/**\n * @template {unknown} Layout\n * @param {Partial<API.EncoderSettings<Layout>>} config\n * @returns {API.EncoderSettings<Layout>}\n */\nexport const configure = config => ({\n  ...defaults(),\n  ...config,\n})\n\nexport const UnixFSLeaf = {\n  code: UnixFS.code,\n  name: UnixFS.name,\n  encode: UnixFS.encodeFileChunk,\n}\n\nexport const UnixFSRawLeaf = {\n  code: UnixFS.code,\n  name: UnixFS.name,\n  encode: UnixFS.encodeRaw,\n}\n\n/**\n * @template Layout\n * @param {API.Options<Layout>} options\n * @returns {API.View<Layout>}\n */\nexport const create = ({ writer, metadata = {}, settings = defaults() }) =>\n  new FileWriterView(Writer.init(writer, metadata, configure(settings)))\n\n/**\n * @template T\n * @param {API.View<T>} view\n * @param {Uint8Array} bytes\n * @return {Promise<API.View<T>>}\n */\n\nexport const write = async (view, bytes) => {\n  await perform(view, Task.send({ type: \"write\", bytes }))\n  return view\n}\n\n/**\n * @template T\n * @param {API.View<T>} view\n * @param {API.CloseOptions} options\n */\nexport const close = async (\n  view,\n  { releaseLock = false, closeWriter = false } = {}\n) => {\n  await perform(view, Task.send({ type: \"close\" }))\n  const { state } = view\n  if (state.status === \"linked\") {\n    if (closeWriter) {\n      await view.state.writer.close()\n    } else if (releaseLock) {\n      view.state.writer.releaseLock()\n    }\n    return state.link\n    /* c8 ignore next 5 */\n  } else {\n    panic(\n      `Expected writer to be in 'linked' state after close, but it is in \"${state.status}\" instead`\n    )\n  }\n}\n\n/**\n * @template T\n * @param {API.View<T>} view\n * @param {Task.Effect<Writer.Message>} effect\n */\nconst perform = (view, effect) =>\n  Task.fork(\n    Task.loop(effect, message => {\n      const { state, effect } = Writer.update(message, view.state)\n      view.state = state\n      return effect\n    })\n  )\n\n/**\n * @template Layout\n * @implements {API.View<Layout>}\n */\nclass FileWriterView {\n  /**\n   * @param {Writer.State<Layout>} state\n   */\n  constructor(state) {\n    this.state = state\n  }\n  get writer() {\n    return this.state.writer\n  }\n  get settings() {\n    return this.state.config\n  }\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {Promise<API.View<Layout>>}\n   */\n  write(bytes) {\n    return write(this, bytes)\n  }\n  /**\n   * @param {API.CloseOptions} [options]\n   * @returns {Promise<UnixFS.FileLink>}\n   */\n  close(options) {\n    return close(this, options)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}