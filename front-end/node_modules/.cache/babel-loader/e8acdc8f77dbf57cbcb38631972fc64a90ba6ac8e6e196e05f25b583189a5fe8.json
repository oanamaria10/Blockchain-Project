{"ast":null,"code":"import { capability, struct, ok, Link } from '@ucanto/validator';\nimport { equalWith, and, equal, ProviderDID } from './utils.js';\nexport const admin = capability({\n  can: 'admin/*',\n  with: ProviderDID,\n  derives: equalWith\n});\nexport const upload = {\n  /**\n   * Capability can be invoked by a provider to get information about a content CID.\n   */\n  inspect: capability({\n    can: 'admin/upload/inspect',\n    with: ProviderDID,\n    nb: struct({\n      root: Link\n    }),\n    derives: (child, parent) => {\n      return and(equalWith(child, parent)) || and(equal(child.nb.root, parent.nb.root, 'root')) || ok({});\n    }\n  })\n};\nexport const store = {\n  /**\n   * Capability can be invoked by a provider to get information an upload shard CID.\n   */\n  inspect: capability({\n    can: 'admin/store/inspect',\n    with: ProviderDID,\n    nb: struct({\n      link: Link\n    }),\n    derives: (child, parent) => {\n      return and(equalWith(child, parent)) || and(equal(child.nb.link, parent.nb.link, 'link')) || ok({});\n    }\n  })\n};","map":{"version":3,"names":["capability","struct","ok","Link","equalWith","and","equal","ProviderDID","admin","can","with","derives","upload","inspect","nb","root","child","parent","store","link"],"sources":["C:/FACULTATE/Proiect/node_modules/@web3-storage/capabilities/src/admin.js"],"sourcesContent":["import { capability, struct, ok, Link } from '@ucanto/validator'\nimport { equalWith, and, equal, ProviderDID } from './utils.js'\n\nexport const admin = capability({\n  can: 'admin/*',\n  with: ProviderDID,\n  derives: equalWith,\n})\n\nexport const upload = {\n  /**\n   * Capability can be invoked by a provider to get information about a content CID.\n   */\n  inspect: capability({\n    can: 'admin/upload/inspect',\n    with: ProviderDID,\n    nb: struct({\n      root: Link,\n    }),\n    derives: (child, parent) => {\n      return (\n        and(equalWith(child, parent)) ||\n        and(equal(child.nb.root, parent.nb.root, 'root')) ||\n        ok({})\n      )\n    },\n  }),\n}\n\nexport const store = {\n  /**\n   * Capability can be invoked by a provider to get information an upload shard CID.\n   */\n  inspect: capability({\n    can: 'admin/store/inspect',\n    with: ProviderDID,\n    nb: struct({\n      link: Link,\n    }),\n    derives: (child, parent) => {\n      return (\n        and(equalWith(child, parent)) ||\n        and(equal(child.nb.link, parent.nb.link, 'link')) ||\n        ok({})\n      )\n    },\n  }),\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,MAAM,EAAEC,EAAE,EAAEC,IAAI,QAAQ,mBAAmB;AAChE,SAASC,SAAS,EAAEC,GAAG,EAAEC,KAAK,EAAEC,WAAW,QAAQ,YAAY;AAE/D,OAAO,MAAMC,KAAK,GAAGR,UAAU,CAAC;EAC9BS,GAAG,EAAE,SAAS;EACdC,IAAI,EAAEH,WAAW;EACjBI,OAAO,EAAEP;AACX,CAAC,CAAC;AAEF,OAAO,MAAMQ,MAAM,GAAG;EACpB;AACF;AACA;EACEC,OAAO,EAAEb,UAAU,CAAC;IAClBS,GAAG,EAAE,sBAAsB;IAC3BC,IAAI,EAAEH,WAAW;IACjBO,EAAE,EAAEb,MAAM,CAAC;MACTc,IAAI,EAAEZ;IACR,CAAC,CAAC;IACFQ,OAAO,EAAEA,CAACK,KAAK,EAAEC,MAAM,KAAK;MAC1B,OACEZ,GAAG,CAACD,SAAS,CAACY,KAAK,EAAEC,MAAM,CAAC,CAAC,IAC7BZ,GAAG,CAACC,KAAK,CAACU,KAAK,CAACF,EAAE,CAACC,IAAI,EAAEE,MAAM,CAACH,EAAE,CAACC,IAAI,EAAE,MAAM,CAAC,CAAC,IACjDb,EAAE,CAAC,CAAC,CAAC,CAAC;IAEV;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMgB,KAAK,GAAG;EACnB;AACF;AACA;EACEL,OAAO,EAAEb,UAAU,CAAC;IAClBS,GAAG,EAAE,qBAAqB;IAC1BC,IAAI,EAAEH,WAAW;IACjBO,EAAE,EAAEb,MAAM,CAAC;MACTkB,IAAI,EAAEhB;IACR,CAAC,CAAC;IACFQ,OAAO,EAAEA,CAACK,KAAK,EAAEC,MAAM,KAAK;MAC1B,OACEZ,GAAG,CAACD,SAAS,CAACY,KAAK,EAAEC,MAAM,CAAC,CAAC,IAC7BZ,GAAG,CAACC,KAAK,CAACU,KAAK,CAACF,EAAE,CAACK,IAAI,EAAEF,MAAM,CAACH,EAAE,CAACK,IAAI,EAAE,MAAM,CAAC,CAAC,IACjDjB,EAAE,CAAC,CAAC,CAAC,CAAC;IAEV;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}