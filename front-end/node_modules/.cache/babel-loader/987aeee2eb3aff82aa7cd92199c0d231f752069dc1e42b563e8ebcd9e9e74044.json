{"ast":null,"code":"const {\n  existsSync,\n  readFileSync\n} = require(\"fs\");\nconst {\n  join\n} = require(\"path\");\nconst {\n  platform,\n  arch\n} = process;\nlet nativeBinding = null;\nlet localFileExisted = false;\nlet loadError = null;\nfunction isMusl() {\n  // For Node 10\n  if (!process.report || typeof process.report.getReport !== \"function\") {\n    try {\n      const lddPath = require(\"child_process\").execSync(\"which ldd\").toString().trim();\n      return readFileSync(lddPath, \"utf8\").includes(\"musl\");\n    } catch (e) {\n      return true;\n    }\n  } else {\n    const {\n      glibcVersionRuntime\n    } = process.report.getReport().header;\n    return !glibcVersionRuntime;\n  }\n}\nswitch (platform) {\n  case \"android\":\n    switch (arch) {\n      case \"arm64\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.android-arm64.node\"));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.android-arm64.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-android-arm64\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case \"arm\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.android-arm-eabi.node\"));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.android-arm-eabi.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-android-arm-eabi\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Android ${arch}`);\n    }\n    break;\n  case \"win32\":\n    switch (arch) {\n      case \"x64\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.win32-x64-msvc.node\"));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.win32-x64-msvc.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-win32-x64-msvc\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case \"ia32\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.win32-ia32-msvc.node\"));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.win32-ia32-msvc.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-win32-ia32-msvc\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case \"arm64\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.win32-arm64-msvc.node\"));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.win32-arm64-msvc.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-win32-arm64-msvc\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Windows: ${arch}`);\n    }\n    break;\n  case \"darwin\":\n    localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.darwin-universal.node\"));\n    try {\n      if (localFileExisted) {\n        nativeBinding = require(\"./solidity-analyzer.darwin-universal.node\");\n      } else {\n        nativeBinding = require(\"@nomicfoundation/solidity-analyzer-darwin-universal\");\n      }\n      break;\n    } catch {}\n    switch (arch) {\n      case \"x64\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.darwin-x64.node\"));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.darwin-x64.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-darwin-x64\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case \"arm64\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.darwin-arm64.node\"));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.darwin-arm64.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-darwin-arm64\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on macOS: ${arch}`);\n    }\n    break;\n  case \"freebsd\":\n    if (arch !== \"x64\") {\n      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`);\n    }\n    localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.freebsd-x64.node\"));\n    try {\n      if (localFileExisted) {\n        nativeBinding = require(\"./solidity-analyzer.freebsd-x64.node\");\n      } else {\n        nativeBinding = require(\"@nomicfoundation/solidity-analyzer-freebsd-x64\");\n      }\n    } catch (e) {\n      loadError = e;\n    }\n    break;\n  case \"linux\":\n    switch (arch) {\n      case \"x64\":\n        if (isMusl()) {\n          localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.linux-x64-musl.node\"));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-x64-musl.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-x64-musl\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        } else {\n          localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.linux-x64-gnu.node\"));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-x64-gnu.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-x64-gnu\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        }\n        break;\n      case \"arm64\":\n        if (isMusl()) {\n          localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.linux-arm64-musl.node\"));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-arm64-musl.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-arm64-musl\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        } else {\n          localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.linux-arm64-gnu.node\"));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-arm64-gnu.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-arm64-gnu\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        }\n        break;\n      case \"arm\":\n        localFileExisted = existsSync(join(__dirname, \"solidity-analyzer.linux-arm-gnueabihf.node\"));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.linux-arm-gnueabihf.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-arm-gnueabihf\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Linux: ${arch}`);\n    }\n    break;\n  default:\n    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);\n}\nif (!nativeBinding) {\n  if (loadError) {\n    throw loadError;\n  }\n  throw new Error(`Failed to load native binding`);\n}\nconst {\n  analyze\n} = nativeBinding;\nmodule.exports.analyze = analyze;","map":{"version":3,"names":["existsSync","readFileSync","require","join","platform","arch","process","nativeBinding","localFileExisted","loadError","isMusl","report","getReport","lddPath","execSync","toString","trim","includes","e","glibcVersionRuntime","header","__dirname","Error","analyze","module","exports"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/@nomicfoundation/solidity-analyzer/index.js"],"sourcesContent":["const { existsSync, readFileSync } = require(\"fs\");\nconst { join } = require(\"path\");\n\nconst { platform, arch } = process;\n\nlet nativeBinding = null;\nlet localFileExisted = false;\nlet loadError = null;\n\nfunction isMusl() {\n  // For Node 10\n  if (!process.report || typeof process.report.getReport !== \"function\") {\n    try {\n      const lddPath = require(\"child_process\")\n        .execSync(\"which ldd\")\n        .toString()\n        .trim();\n      return readFileSync(lddPath, \"utf8\").includes(\"musl\");\n    } catch (e) {\n      return true;\n    }\n  } else {\n    const { glibcVersionRuntime } = process.report.getReport().header;\n    return !glibcVersionRuntime;\n  }\n}\n\nswitch (platform) {\n  case \"android\":\n    switch (arch) {\n      case \"arm64\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.android-arm64.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.android-arm64.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-android-arm64\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case \"arm\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.android-arm-eabi.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.android-arm-eabi.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-android-arm-eabi\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Android ${arch}`);\n    }\n    break;\n  case \"win32\":\n    switch (arch) {\n      case \"x64\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.win32-x64-msvc.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.win32-x64-msvc.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-win32-x64-msvc\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case \"ia32\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.win32-ia32-msvc.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.win32-ia32-msvc.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-win32-ia32-msvc\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case \"arm64\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.win32-arm64-msvc.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.win32-arm64-msvc.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-win32-arm64-msvc\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Windows: ${arch}`);\n    }\n    break;\n  case \"darwin\":\n    localFileExisted = existsSync(\n      join(__dirname, \"solidity-analyzer.darwin-universal.node\")\n    );\n    try {\n      if (localFileExisted) {\n        nativeBinding = require(\"./solidity-analyzer.darwin-universal.node\");\n      } else {\n        nativeBinding = require(\"@nomicfoundation/solidity-analyzer-darwin-universal\");\n      }\n      break;\n    } catch {}\n    switch (arch) {\n      case \"x64\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.darwin-x64.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.darwin-x64.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-darwin-x64\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case \"arm64\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.darwin-arm64.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.darwin-arm64.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-darwin-arm64\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on macOS: ${arch}`);\n    }\n    break;\n  case \"freebsd\":\n    if (arch !== \"x64\") {\n      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`);\n    }\n    localFileExisted = existsSync(\n      join(__dirname, \"solidity-analyzer.freebsd-x64.node\")\n    );\n    try {\n      if (localFileExisted) {\n        nativeBinding = require(\"./solidity-analyzer.freebsd-x64.node\");\n      } else {\n        nativeBinding = require(\"@nomicfoundation/solidity-analyzer-freebsd-x64\");\n      }\n    } catch (e) {\n      loadError = e;\n    }\n    break;\n  case \"linux\":\n    switch (arch) {\n      case \"x64\":\n        if (isMusl()) {\n          localFileExisted = existsSync(\n            join(__dirname, \"solidity-analyzer.linux-x64-musl.node\")\n          );\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-x64-musl.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-x64-musl\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        } else {\n          localFileExisted = existsSync(\n            join(__dirname, \"solidity-analyzer.linux-x64-gnu.node\")\n          );\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-x64-gnu.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-x64-gnu\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        }\n        break;\n      case \"arm64\":\n        if (isMusl()) {\n          localFileExisted = existsSync(\n            join(__dirname, \"solidity-analyzer.linux-arm64-musl.node\")\n          );\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-arm64-musl.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-arm64-musl\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        } else {\n          localFileExisted = existsSync(\n            join(__dirname, \"solidity-analyzer.linux-arm64-gnu.node\")\n          );\n          try {\n            if (localFileExisted) {\n              nativeBinding = require(\"./solidity-analyzer.linux-arm64-gnu.node\");\n            } else {\n              nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-arm64-gnu\");\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        }\n        break;\n      case \"arm\":\n        localFileExisted = existsSync(\n          join(__dirname, \"solidity-analyzer.linux-arm-gnueabihf.node\")\n        );\n        try {\n          if (localFileExisted) {\n            nativeBinding = require(\"./solidity-analyzer.linux-arm-gnueabihf.node\");\n          } else {\n            nativeBinding = require(\"@nomicfoundation/solidity-analyzer-linux-arm-gnueabihf\");\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Linux: ${arch}`);\n    }\n    break;\n  default:\n    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);\n}\n\nif (!nativeBinding) {\n  if (loadError) {\n    throw loadError;\n  }\n  throw new Error(`Failed to load native binding`);\n}\n\nconst { analyze } = nativeBinding;\n\nmodule.exports.analyze = analyze;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}