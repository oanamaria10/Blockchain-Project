{"ast":null,"code":"import { Base } from '../base.js';\nimport { Space as SpaceCapabilities } from '@web3-storage/capabilities';\nimport * as API from '../types.js';\n/**\n * Client for interacting with the `space/*` capabilities.\n */\nexport class SpaceClient extends Base {\n  /**\n   * Get information about a space.\n   *\n   * Required delegated capabilities:\n   * - `space/info`\n   *\n   * @param {import('../types.js').DID} space - DID of the space to retrieve info about.\n   * @param {object} [options]\n   * @param {string} [options.nonce]\n   */\n  async info(space, options) {\n    return await this._agent.getSpaceInfo(space, options);\n  }\n  /**\n   * Record egress data for a served resource.\n   * It will execute the capability invocation to find the customer and then record the egress data for the resource.\n   *\n   * Required delegated capabilities:\n   * - `space/content/serve/egress/record`\n   *\n   * @param {object} egressData\n   * @param {import('../types.js').SpaceDID} egressData.space\n   * @param {API.UnknownLink} egressData.resource\n   * @param {number} egressData.bytes\n   * @param {string} egressData.servedAt\n   * @param {object} [options]\n   * @param {string} [options.nonce]\n   * @param {API.Delegation[]} [options.proofs]\n   * @returns {Promise<API.EgressRecordSuccess>}\n   */\n  async egressRecord(egressData, options) {\n    const out = await egressRecord({\n      agent: this.agent\n    }, {\n      ...egressData\n    }, {\n      ...options\n    });\n    if (!out.ok) {\n      throw new Error(`failed ${SpaceCapabilities.egressRecord.can} invocation`, {\n        cause: out.error\n      });\n    }\n    return /** @type {API.EgressRecordSuccess} */out.ok;\n  }\n}\n/**\n * Record egress data for a resource from a given space.\n *\n * @param {{agent: API.Agent}} client\n * @param {object} egressData\n * @param {API.SpaceDID} egressData.space\n * @param {API.UnknownLink} egressData.resource\n * @param {number} egressData.bytes\n * @param {string} egressData.servedAt\n * @param {object} options\n * @param {string} [options.nonce]\n * @param {API.Delegation[]} [options.proofs]\n */\nexport const egressRecord = async ({\n  agent\n}, {\n  space,\n  resource,\n  bytes,\n  servedAt\n}, {\n  nonce,\n  proofs = []\n}) => {\n  const receipt = await agent.invokeAndExecute(SpaceCapabilities.egressRecord, {\n    with: space,\n    proofs,\n    nonce,\n    nb: {\n      resource,\n      bytes,\n      servedAt: Math.floor(new Date(servedAt).getTime() / 1000)\n    }\n  });\n  return receipt.out;\n};","map":{"version":3,"names":["Base","Space","SpaceCapabilities","API","SpaceClient","info","space","options","_agent","getSpaceInfo","egressRecord","egressData","out","agent","ok","Error","can","cause","error","resource","bytes","servedAt","nonce","proofs","receipt","invokeAndExecute","with","nb","Math","floor","Date","getTime"],"sources":["../../../src/capability/space.js"],"sourcesContent":[null],"mappings":"AAAA,SAASA,IAAI,QAAQ,YAAY;AACjC,SAASC,KAAK,IAAIC,iBAAiB,QAAQ,4BAA4B;AACvE,OAAO,KAAKC,GAAG,MAAM,aAAa;AAElC;;;AAGA,OAAM,MAAOC,WAAY,SAAQJ,IAAI;EACnC;;;;;;;;;;EAUA,MAAMK,IAAIA,CAACC,KAAK,EAAEC,OAAO;IACvB,OAAO,MAAM,IAAI,CAACC,MAAM,CAACC,YAAY,CAACH,KAAK,EAAEC,OAAO,CAAC;EACvD;EAEA;;;;;;;;;;;;;;;;;EAiBA,MAAMG,YAAYA,CAACC,UAAU,EAAEJ,OAAO;IACpC,MAAMK,GAAG,GAAG,MAAMF,YAAY,CAC5B;MAAEG,KAAK,EAAE,IAAI,CAACA;IAAK,CAAE,EACrB;MAAE,GAAGF;IAAU,CAAE,EACjB;MAAE,GAAGJ;IAAO,CAAE,CACf;IAED,IAAI,CAACK,GAAG,CAACE,EAAE,EAAE;MACX,MAAM,IAAIC,KAAK,CACb,UAAUb,iBAAiB,CAACQ,YAAY,CAACM,GAAG,aAAa,EACzD;QACEC,KAAK,EAAEL,GAAG,CAACM;OACZ,CACF;;IAGH,OAAO,sCAAwCN,GAAG,CAACE,EAAE;EACvD;;AAGF;;;;;;;;;;;;;AAaA,OAAO,MAAMJ,YAAY,GAAG,MAAAA,CAC1B;EAAEG;AAAK,CAAE,EACT;EAAEP,KAAK;EAAEa,QAAQ;EAAEC,KAAK;EAAEC;AAAQ,CAAE,EACpC;EAAEC,KAAK;EAAEC,MAAM,GAAG;AAAE,CAAE,KACpB;EACF,MAAMC,OAAO,GAAG,MAAMX,KAAK,CAACY,gBAAgB,CAACvB,iBAAiB,CAACQ,YAAY,EAAE;IAC3EgB,IAAI,EAAEpB,KAAK;IACXiB,MAAM;IACND,KAAK;IACLK,EAAE,EAAE;MACFR,QAAQ;MACRC,KAAK;MACLC,QAAQ,EAAEO,IAAI,CAACC,KAAK,CAAC,IAAIC,IAAI,CAACT,QAAQ,CAAC,CAACU,OAAO,EAAE,GAAG,IAAI;;GAE3D,CAAC;EACF,OAAOP,OAAO,CAACZ,GAAG;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}