{"ast":null,"code":"/**\n *  @_ignore\n */\nimport { getBytesCopy, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nexport function looseArrayify(hexString) {\n  if (typeof hexString === \"string\" && !hexString.startsWith(\"0x\")) {\n    hexString = \"0x\" + hexString;\n  }\n  return getBytesCopy(hexString);\n}\nexport function zpad(value, length) {\n  value = String(value);\n  while (value.length < length) {\n    value = '0' + value;\n  }\n  return value;\n}\nexport function getPassword(password) {\n  if (typeof password === 'string') {\n    return toUtf8Bytes(password, \"NFKC\");\n  }\n  return getBytesCopy(password);\n}\nexport function spelunk(object, _path) {\n  const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);\n  assertArgument(match != null, \"invalid path\", \"path\", _path);\n  const path = match[1];\n  const type = match[3];\n  const reqd = match[4] === \"!\";\n  let cur = object;\n  for (const comp of path.toLowerCase().split('.')) {\n    // Search for a child object with a case-insensitive matching key\n    if (Array.isArray(cur)) {\n      if (!comp.match(/^[0-9]+$/)) {\n        break;\n      }\n      cur = cur[parseInt(comp)];\n    } else if (typeof cur === \"object\") {\n      let found = null;\n      for (const key in cur) {\n        if (key.toLowerCase() === comp) {\n          found = cur[key];\n          break;\n        }\n      }\n      cur = found;\n    } else {\n      cur = null;\n    }\n    if (cur == null) {\n      break;\n    }\n  }\n  assertArgument(!reqd || cur != null, \"missing required value\", \"path\", path);\n  if (type && cur != null) {\n    if (type === \"int\") {\n      if (typeof cur === \"string\" && cur.match(/^-?[0-9]+$/)) {\n        return parseInt(cur);\n      } else if (Number.isSafeInteger(cur)) {\n        return cur;\n      }\n    }\n    if (type === \"number\") {\n      if (typeof cur === \"string\" && cur.match(/^-?[0-9.]*$/)) {\n        return parseFloat(cur);\n      }\n    }\n    if (type === \"data\") {\n      if (typeof cur === \"string\") {\n        return looseArrayify(cur);\n      }\n    }\n    if (type === \"array\" && Array.isArray(cur)) {\n      return cur;\n    }\n    if (type === typeof cur) {\n      return cur;\n    }\n    assertArgument(false, `wrong type found for ${type} `, \"path\", path);\n  }\n  return cur;\n}\n/*\nexport function follow(object: any, path: string): null | string {\n    let currentChild = object;\n\n    for (const comp of path.toLowerCase().split('/')) {\n\n        // Search for a child object with a case-insensitive matching key\n        let matchingChild = null;\n        for (const key in currentChild) {\n             if (key.toLowerCase() === comp) {\n                 matchingChild = currentChild[key];\n                 break;\n             }\n        }\n\n        if (matchingChild === null) { return null; }\n\n        currentChild = matchingChild;\n    }\n\n    return currentChild;\n}\n\n// \"path/to/something:type!\"\nexport function followRequired(data: any, path: string): string {\n    const value = follow(data, path);\n    if (value != null) { return value; }\n    return logger.throwArgumentError(\"invalid value\", `data:${ path }`,\n    JSON.stringify(data));\n}\n*/\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n/*\nexport function uuidV4(randomBytes: BytesLike): string {\n    const bytes = getBytes(randomBytes, \"randomBytes\");\n\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    const value = hexlify(bytes);\n\n    return [\n       value.substring(2, 10),\n       value.substring(10, 14),\n       value.substring(14, 18),\n       value.substring(18, 22),\n       value.substring(22, 34),\n    ].join(\"-\");\n}\n*/","map":{"version":3,"names":["getBytesCopy","assertArgument","toUtf8Bytes","looseArrayify","hexString","startsWith","zpad","value","length","String","getPassword","password","spelunk","object","_path","match","path","type","reqd","cur","comp","toLowerCase","split","Array","isArray","parseInt","found","key","Number","isSafeInteger","parseFloat"],"sources":["C:/Users/Oana/Desktop/Blockchain/Blockchain-Project/node_modules/ethers/lib.esm/wallet/utils.js"],"sourcesContent":["/**\n *  @_ignore\n */\nimport { getBytesCopy, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nexport function looseArrayify(hexString) {\n    if (typeof (hexString) === \"string\" && !hexString.startsWith(\"0x\")) {\n        hexString = \"0x\" + hexString;\n    }\n    return getBytesCopy(hexString);\n}\nexport function zpad(value, length) {\n    value = String(value);\n    while (value.length < length) {\n        value = '0' + value;\n    }\n    return value;\n}\nexport function getPassword(password) {\n    if (typeof (password) === 'string') {\n        return toUtf8Bytes(password, \"NFKC\");\n    }\n    return getBytesCopy(password);\n}\nexport function spelunk(object, _path) {\n    const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);\n    assertArgument(match != null, \"invalid path\", \"path\", _path);\n    const path = match[1];\n    const type = match[3];\n    const reqd = (match[4] === \"!\");\n    let cur = object;\n    for (const comp of path.toLowerCase().split('.')) {\n        // Search for a child object with a case-insensitive matching key\n        if (Array.isArray(cur)) {\n            if (!comp.match(/^[0-9]+$/)) {\n                break;\n            }\n            cur = cur[parseInt(comp)];\n        }\n        else if (typeof (cur) === \"object\") {\n            let found = null;\n            for (const key in cur) {\n                if (key.toLowerCase() === comp) {\n                    found = cur[key];\n                    break;\n                }\n            }\n            cur = found;\n        }\n        else {\n            cur = null;\n        }\n        if (cur == null) {\n            break;\n        }\n    }\n    assertArgument(!reqd || cur != null, \"missing required value\", \"path\", path);\n    if (type && cur != null) {\n        if (type === \"int\") {\n            if (typeof (cur) === \"string\" && cur.match(/^-?[0-9]+$/)) {\n                return parseInt(cur);\n            }\n            else if (Number.isSafeInteger(cur)) {\n                return cur;\n            }\n        }\n        if (type === \"number\") {\n            if (typeof (cur) === \"string\" && cur.match(/^-?[0-9.]*$/)) {\n                return parseFloat(cur);\n            }\n        }\n        if (type === \"data\") {\n            if (typeof (cur) === \"string\") {\n                return looseArrayify(cur);\n            }\n        }\n        if (type === \"array\" && Array.isArray(cur)) {\n            return cur;\n        }\n        if (type === typeof (cur)) {\n            return cur;\n        }\n        assertArgument(false, `wrong type found for ${type} `, \"path\", path);\n    }\n    return cur;\n}\n/*\nexport function follow(object: any, path: string): null | string {\n    let currentChild = object;\n\n    for (const comp of path.toLowerCase().split('/')) {\n\n        // Search for a child object with a case-insensitive matching key\n        let matchingChild = null;\n        for (const key in currentChild) {\n             if (key.toLowerCase() === comp) {\n                 matchingChild = currentChild[key];\n                 break;\n             }\n        }\n\n        if (matchingChild === null) { return null; }\n\n        currentChild = matchingChild;\n    }\n\n    return currentChild;\n}\n\n// \"path/to/something:type!\"\nexport function followRequired(data: any, path: string): string {\n    const value = follow(data, path);\n    if (value != null) { return value; }\n    return logger.throwArgumentError(\"invalid value\", `data:${ path }`,\n    JSON.stringify(data));\n}\n*/\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n/*\nexport function uuidV4(randomBytes: BytesLike): string {\n    const bytes = getBytes(randomBytes, \"randomBytes\");\n\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    const value = hexlify(bytes);\n\n    return [\n       value.substring(2, 10),\n       value.substring(10, 14),\n       value.substring(14, 18),\n       value.substring(18, 22),\n       value.substring(22, 34),\n    ].join(\"-\");\n}\n*/\n//# sourceMappingURL=utils.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}