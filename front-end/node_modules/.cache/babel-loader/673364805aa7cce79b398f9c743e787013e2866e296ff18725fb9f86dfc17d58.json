{"ast":null,"code":"import { Base } from '../base.js';\nimport * as API from '../types.js';\nimport * as Plan from '@web3-storage/capabilities/plan';\nexport class PlanClient extends Base {\n  /**\n   * Required delegated capabilities:\n   * - `plan/get`\n   *\n   * @param {import('@web3-storage/access').AccountDID} account\n   * @param {object} [options]\n   * @param {string} [options.nonce]\n   */\n  async get(account, options) {\n    const out = await get({\n      agent: this.agent\n    }, {\n      ...options,\n      account\n    });\n    if (!out.ok) {\n      throw new Error(`failed ${Plan.get.can} invocation`, {\n        cause: out.error\n      });\n    }\n    return out.ok;\n  }\n  /**\n   * Required delegated capabilities:\n   * - `plan/set`\n   *\n   * @param {API.AccountDID} account\n   * @param {API.DID} product\n   * @param {object} [options]\n   * @param {string} [options.nonce]\n   */\n  async set(account, product, options) {\n    const out = await set({\n      agent: this.agent\n    }, {\n      ...options,\n      account,\n      product\n    });\n    if (!out.ok) {\n      throw new Error(`failed ${Plan.set.can} invocation`, {\n        cause: out.error\n      });\n    }\n    return out.ok;\n  }\n  /**\n   *\n   * @param {API.AccountDID} account\n   * @param {string} returnURL\n   * @param {object} [options]\n   * @param {string} [options.nonce]\n   */\n  async createAdminSession(account, returnURL, options) {\n    const out = await createAdminSession({\n      agent: this.agent\n    }, {\n      ...options,\n      account,\n      returnURL\n    });\n    if (!out.ok) {\n      throw new Error(`failed ${Plan.createAdminSession.can} invocation`, {\n        cause: out.error\n      });\n    }\n    return out.ok;\n  }\n}\n/**\n * Gets the plan currently associated with the account.\n *\n * @param {{agent: API.Agent}} client\n * @param {object} options\n * @param {API.AccountDID} options.account\n * @param {string} [options.nonce]\n * @param {API.Delegation[]} [options.proofs]\n */\nexport const get = async ({\n  agent\n}, {\n  account,\n  nonce,\n  proofs = []\n}) => {\n  const receipt = await agent.invokeAndExecute(Plan.get, {\n    with: account,\n    proofs,\n    nonce\n  });\n  return receipt.out;\n};\n/**\n * Sets the plan currently associated with the account.\n *\n * @param {{agent: API.Agent}} client\n * @param {object} options\n * @param {API.DID} options.product\n * @param {API.AccountDID} options.account\n * @param {string} [options.nonce]\n * @param {API.Delegation[]} [options.proofs]\n */\nexport const set = async ({\n  agent\n}, {\n  account,\n  product,\n  nonce,\n  proofs = []\n}) => {\n  const receipt = await agent.invokeAndExecute(Plan.set, {\n    with: account,\n    nb: {\n      product\n    },\n    nonce,\n    proofs\n  });\n  return receipt.out;\n};\n/**\n * Creates an admin session for the given account.\n *\n * Returns a URL that a user can resolve to enter the\n * admin billing portal for this account.\n *\n * @param {{agent: API.Agent}} client\n * @param {object} options\n * @param {API.AccountDID} options.account\n * @param {string} options.returnURL\n * @param {string} [options.nonce]\n * @param {API.Delegation[]} [options.proofs]\n */\nexport const createAdminSession = async ({\n  agent\n}, {\n  account,\n  returnURL,\n  nonce,\n  proofs = []\n}) => {\n  const receipt = await agent.invokeAndExecute(Plan.createAdminSession, {\n    with: account,\n    proofs,\n    nonce,\n    nb: {\n      returnURL\n    }\n  });\n  return receipt.out;\n};","map":{"version":3,"names":["Base","API","Plan","PlanClient","get","account","options","out","agent","ok","Error","can","cause","error","set","product","createAdminSession","returnURL","nonce","proofs","receipt","invokeAndExecute","with","nb"],"sources":["../../../src/capability/plan.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}