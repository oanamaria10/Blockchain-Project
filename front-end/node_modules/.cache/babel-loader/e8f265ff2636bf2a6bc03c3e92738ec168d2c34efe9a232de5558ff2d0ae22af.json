{"ast":null,"code":"import { Dsn, urlEncode } from '@sentry/utils';\nvar SENTRY_API_VERSION = '7';\n/** Helper class to provide urls to different Sentry endpoints. */\nvar API = /** @class */function () {\n  /** Create a new instance of API */\n  function API(dsn) {\n    this.dsn = dsn;\n    this._dsnObject = new Dsn(dsn);\n  }\n  /** Returns the Dsn object. */\n  API.prototype.getDsn = function () {\n    return this._dsnObject;\n  };\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  API.prototype.getBaseApiEndpoint = function () {\n    var dsn = this._dsnObject;\n    var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n    var port = dsn.port ? \":\" + dsn.port : '';\n    return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n  };\n  /** Returns the store endpoint URL. */\n  API.prototype.getStoreEndpoint = function () {\n    return this._getIngestEndpoint('store');\n  };\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n    return this.getStoreEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n    return this._getEnvelopeEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /** Returns only the path component for the store endpoint. */\n  API.prototype.getStoreEndpointPath = function () {\n    var dsn = this._dsnObject;\n    return (dsn.path ? \"/\" + dsn.path : '') + \"/api/\" + dsn.projectId + \"/store/\";\n  };\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  API.prototype.getRequestHeaders = function (clientName, clientVersion) {\n    var dsn = this._dsnObject;\n    var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n    header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n    header.push(\"sentry_key=\" + dsn.user);\n    if (dsn.pass) {\n      header.push(\"sentry_secret=\" + dsn.pass);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', ')\n    };\n  };\n  /** Returns the url to the report dialog endpoint. */\n  API.prototype.getReportDialogEndpoint = function (dialogOptions) {\n    if (dialogOptions === void 0) {\n      dialogOptions = {};\n    }\n    var dsn = this._dsnObject;\n    var endpoint = this.getBaseApiEndpoint() + \"embed/error-page/\";\n    var encodedOptions = [];\n    encodedOptions.push(\"dsn=\" + dsn.toString());\n    for (var key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(\"name=\" + encodeURIComponent(dialogOptions.user.name));\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(\"email=\" + encodeURIComponent(dialogOptions.user.email));\n        }\n      } else {\n        encodedOptions.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]));\n      }\n    }\n    if (encodedOptions.length) {\n      return endpoint + \"?\" + encodedOptions.join('&');\n    }\n    return endpoint;\n  };\n  /** Returns the envelope endpoint URL. */\n  API.prototype._getEnvelopeEndpoint = function () {\n    return this._getIngestEndpoint('envelope');\n  };\n  /** Returns the ingest API endpoint for target. */\n  API.prototype._getIngestEndpoint = function (target) {\n    var base = this.getBaseApiEndpoint();\n    var dsn = this._dsnObject;\n    return \"\" + base + dsn.projectId + \"/\" + target + \"/\";\n  };\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  API.prototype._encodedAuth = function () {\n    var dsn = this._dsnObject;\n    var auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION\n    };\n    return urlEncode(auth);\n  };\n  return API;\n}();\nexport { API };","map":{"version":3,"names":["Dsn","urlEncode","SENTRY_API_VERSION","API","dsn","_dsnObject","prototype","getDsn","getBaseApiEndpoint","protocol","port","host","path","getStoreEndpoint","_getIngestEndpoint","getStoreEndpointWithUrlEncodedAuth","_encodedAuth","getEnvelopeEndpointWithUrlEncodedAuth","_getEnvelopeEndpoint","getStoreEndpointPath","projectId","getRequestHeaders","clientName","clientVersion","header","push","user","pass","join","getReportDialogEndpoint","dialogOptions","endpoint","encodedOptions","toString","key","name","encodeURIComponent","email","length","target","base","auth","sentry_key","sentry_version"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\core\\src\\api.ts"],"sourcesContent":["import { DsnLike } from '@sentry/types';\nimport { Dsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Helper class to provide urls to different Sentry endpoints. */\nexport class API {\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n  /** Create a new instance of API */\n  public constructor(public dsn: DsnLike) {\n    this._dsnObject = new Dsn(dsn);\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    const dsn = this._dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return this._getIngestEndpoint('store');\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return `${this.getStoreEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return `${this._getEnvelopeEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this._dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    const dsn = this._dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.user}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this._dsnObject;\n    const endpoint = `${this.getBaseApiEndpoint()}embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n\n  /** Returns the envelope endpoint URL. */\n  private _getEnvelopeEndpoint(): string {\n    return this._getIngestEndpoint('envelope');\n  }\n\n  /** Returns the ingest API endpoint for target. */\n  private _getIngestEndpoint(target: 'store' | 'envelope'): string {\n    const base = this.getBaseApiEndpoint();\n    const dsn = this._dsnObject;\n    return `${base}${dsn.projectId}/${target}/`;\n  }\n\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  private _encodedAuth(): string {\n    const dsn = this._dsnObject;\n    const auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    return urlEncode(auth);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}