{"ast":null,"code":"import { BIGINT_0, hexToBytes } from '@nomicfoundation/ethereumjs-util';\nexport var Chain;\n(function (Chain) {\n  Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n  Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n  Chain[Chain[\"Sepolia\"] = 11155111] = \"Sepolia\";\n  Chain[Chain[\"Holesky\"] = 17000] = \"Holesky\";\n  Chain[Chain[\"Kaustinen\"] = 69420] = \"Kaustinen\";\n})(Chain || (Chain = {}));\n// Having this info as record will force typescript to make sure no chain is missed\n/**\n * GenesisState info about well known ethereum chains\n */\nexport const ChainGenesis = {\n  [Chain.Mainnet]: {\n    name: 'mainnet',\n    blockNumber: BIGINT_0,\n    stateRoot: hexToBytes('0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544')\n  },\n  [Chain.Goerli]: {\n    name: 'goerli',\n    blockNumber: BIGINT_0,\n    stateRoot: hexToBytes('0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008')\n  },\n  [Chain.Sepolia]: {\n    name: 'sepolia',\n    blockNumber: BIGINT_0,\n    stateRoot: hexToBytes('0x5eb6e371a698b8d68f665192350ffcecbbbf322916f4b51bd79bb6887da3f494')\n  },\n  [Chain.Holesky]: {\n    name: 'holesky',\n    blockNumber: BIGINT_0,\n    stateRoot: hexToBytes('0x69d8c9d72f6fa4ad42d4702b433707212f90db395eb54dc20bc85de253788783')\n  },\n  [Chain.Kaustinen]: {\n    name: 'kaustinen',\n    blockNumber: BIGINT_0,\n    stateRoot: hexToBytes('0x5e8519756841faf0b2c28951c451b61a4b407b70a5ce5b57992f4bec973173ff')\n  }\n};\nexport var Hardfork;\n(function (Hardfork) {\n  Hardfork[\"Chainstart\"] = \"chainstart\";\n  Hardfork[\"Homestead\"] = \"homestead\";\n  Hardfork[\"Dao\"] = \"dao\";\n  Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n  Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n  Hardfork[\"Byzantium\"] = \"byzantium\";\n  Hardfork[\"Constantinople\"] = \"constantinople\";\n  Hardfork[\"Petersburg\"] = \"petersburg\";\n  Hardfork[\"Istanbul\"] = \"istanbul\";\n  Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n  Hardfork[\"Berlin\"] = \"berlin\";\n  Hardfork[\"London\"] = \"london\";\n  Hardfork[\"ArrowGlacier\"] = \"arrowGlacier\";\n  Hardfork[\"GrayGlacier\"] = \"grayGlacier\";\n  Hardfork[\"MergeForkIdTransition\"] = \"mergeForkIdTransition\";\n  Hardfork[\"Paris\"] = \"paris\";\n  Hardfork[\"Shanghai\"] = \"shanghai\";\n  Hardfork[\"Cancun\"] = \"cancun\";\n  Hardfork[\"Prague\"] = \"prague\";\n})(Hardfork || (Hardfork = {}));\nexport var ConsensusType;\n(function (ConsensusType) {\n  ConsensusType[\"ProofOfStake\"] = \"pos\";\n  ConsensusType[\"ProofOfWork\"] = \"pow\";\n  ConsensusType[\"ProofOfAuthority\"] = \"poa\";\n})(ConsensusType || (ConsensusType = {}));\nexport var ConsensusAlgorithm;\n(function (ConsensusAlgorithm) {\n  ConsensusAlgorithm[\"Ethash\"] = \"ethash\";\n  ConsensusAlgorithm[\"Clique\"] = \"clique\";\n  ConsensusAlgorithm[\"Casper\"] = \"casper\";\n})(ConsensusAlgorithm || (ConsensusAlgorithm = {}));\nexport var CustomChain;\n(function (CustomChain) {\n  /**\n   * Polygon (Matic) Mainnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n  /**\n   * Polygon (Matic) Mumbai Testnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n  /**\n   * Arbitrum One - mainnet for Arbitrum roll-up\n   *\n   * - [Documentation](https://developer.offchainlabs.com/public-chains)\n   */\n  CustomChain[\"ArbitrumOne\"] = \"arbitrum-one\";\n  /**\n   * xDai EVM sidechain with a native stable token\n   *\n   * - [Documentation](https://www.xdaichain.com/)\n   */\n  CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n  /**\n   * Optimistic Kovan - testnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  CustomChain[\"OptimisticKovan\"] = \"optimistic-kovan\";\n  /**\n   * Optimistic Ethereum - mainnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  CustomChain[\"OptimisticEthereum\"] = \"optimistic-ethereum\";\n})(CustomChain || (CustomChain = {}));","map":{"version":3,"names":["BIGINT_0","hexToBytes","Chain","ChainGenesis","Mainnet","name","blockNumber","stateRoot","Goerli","Sepolia","Holesky","Kaustinen","Hardfork","ConsensusType","ConsensusAlgorithm","CustomChain"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@nomicfoundation\\ethereumjs-common\\src\\enums.ts"],"sourcesContent":["import { BIGINT_0, hexToBytes } from '@nomicfoundation/ethereumjs-util'\n\nexport enum Chain {\n  Mainnet = 1,\n  Goerli = 5,\n  Sepolia = 11155111,\n  Holesky = 17000,\n  Kaustinen = 69420,\n}\n\n/**\n * Genesis state meta info which is decoupled from common's genesis params\n */\ntype GenesisState = {\n  name: string\n  /* blockNumber that can be used to update and track the regenesis marker */\n  blockNumber: bigint\n  /* stateRoot of the chain at the blockNumber */\n  stateRoot: Uint8Array\n}\n\n// Having this info as record will force typescript to make sure no chain is missed\n/**\n * GenesisState info about well known ethereum chains\n */\nexport const ChainGenesis: Record<Chain, GenesisState> = {\n  [Chain.Mainnet]: {\n    name: 'mainnet',\n    blockNumber: BIGINT_0,\n    stateRoot: hexToBytes('0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544'),\n  },\n  [Chain.Goerli]: {\n    name: 'goerli',\n    blockNumber: BIGINT_0,\n    stateRoot: hexToBytes('0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008'),\n  },\n  [Chain.Sepolia]: {\n    name: 'sepolia',\n    blockNumber: BIGINT_0,\n    stateRoot: hexToBytes('0x5eb6e371a698b8d68f665192350ffcecbbbf322916f4b51bd79bb6887da3f494'),\n  },\n  [Chain.Holesky]: {\n    name: 'holesky',\n    blockNumber: BIGINT_0,\n    stateRoot: hexToBytes('0x69d8c9d72f6fa4ad42d4702b433707212f90db395eb54dc20bc85de253788783'),\n  },\n  [Chain.Kaustinen]: {\n    name: 'kaustinen',\n    blockNumber: BIGINT_0,\n    stateRoot: hexToBytes('0x5e8519756841faf0b2c28951c451b61a4b407b70a5ce5b57992f4bec973173ff'),\n  },\n}\n\nexport enum Hardfork {\n  Chainstart = 'chainstart',\n  Homestead = 'homestead',\n  Dao = 'dao',\n  TangerineWhistle = 'tangerineWhistle',\n  SpuriousDragon = 'spuriousDragon',\n  Byzantium = 'byzantium',\n  Constantinople = 'constantinople',\n  Petersburg = 'petersburg',\n  Istanbul = 'istanbul',\n  MuirGlacier = 'muirGlacier',\n  Berlin = 'berlin',\n  London = 'london',\n  ArrowGlacier = 'arrowGlacier',\n  GrayGlacier = 'grayGlacier',\n  MergeForkIdTransition = 'mergeForkIdTransition',\n  Paris = 'paris',\n  Shanghai = 'shanghai',\n  Cancun = 'cancun',\n  Prague = 'prague',\n}\n\nexport enum ConsensusType {\n  ProofOfStake = 'pos',\n  ProofOfWork = 'pow',\n  ProofOfAuthority = 'poa',\n}\n\nexport enum ConsensusAlgorithm {\n  Ethash = 'ethash',\n  Clique = 'clique',\n  Casper = 'casper',\n}\n\nexport enum CustomChain {\n  /**\n   * Polygon (Matic) Mainnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMainnet = 'polygon-mainnet',\n\n  /**\n   * Polygon (Matic) Mumbai Testnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMumbai = 'polygon-mumbai',\n\n  /**\n   * Arbitrum One - mainnet for Arbitrum roll-up\n   *\n   * - [Documentation](https://developer.offchainlabs.com/public-chains)\n   */\n  ArbitrumOne = 'arbitrum-one',\n\n  /**\n   * xDai EVM sidechain with a native stable token\n   *\n   * - [Documentation](https://www.xdaichain.com/)\n   */\n  xDaiChain = 'x-dai-chain',\n\n  /**\n   * Optimistic Kovan - testnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  OptimisticKovan = 'optimistic-kovan',\n\n  /**\n   * Optimistic Ethereum - mainnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  OptimisticEthereum = 'optimistic-ethereum',\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,UAAU,QAAQ,kCAAkC;AAEvE,WAAYC,KAMX;AAND,WAAYA,KAAK;EACfA,KAAA,CAAAA,KAAA,4BAAW;EACXA,KAAA,CAAAA,KAAA,0BAAU;EACVA,KAAA,CAAAA,KAAA,mCAAkB;EAClBA,KAAA,CAAAA,KAAA,gCAAe;EACfA,KAAA,CAAAA,KAAA,oCAAiB;AACnB,CAAC,EANWA,KAAK,KAALA,KAAK;AAmBjB;AACA;;;AAGA,OAAO,MAAMC,YAAY,GAAgC;EACvD,CAACD,KAAK,CAACE,OAAO,GAAG;IACfC,IAAI,EAAE,SAAS;IACfC,WAAW,EAAEN,QAAQ;IACrBO,SAAS,EAAEN,UAAU,CAAC,oEAAoE;GAC3F;EACD,CAACC,KAAK,CAACM,MAAM,GAAG;IACdH,IAAI,EAAE,QAAQ;IACdC,WAAW,EAAEN,QAAQ;IACrBO,SAAS,EAAEN,UAAU,CAAC,oEAAoE;GAC3F;EACD,CAACC,KAAK,CAACO,OAAO,GAAG;IACfJ,IAAI,EAAE,SAAS;IACfC,WAAW,EAAEN,QAAQ;IACrBO,SAAS,EAAEN,UAAU,CAAC,oEAAoE;GAC3F;EACD,CAACC,KAAK,CAACQ,OAAO,GAAG;IACfL,IAAI,EAAE,SAAS;IACfC,WAAW,EAAEN,QAAQ;IACrBO,SAAS,EAAEN,UAAU,CAAC,oEAAoE;GAC3F;EACD,CAACC,KAAK,CAACS,SAAS,GAAG;IACjBN,IAAI,EAAE,WAAW;IACjBC,WAAW,EAAEN,QAAQ;IACrBO,SAAS,EAAEN,UAAU,CAAC,oEAAoE;;CAE7F;AAED,WAAYW,QAoBX;AApBD,WAAYA,QAAQ;EAClBA,QAAA,6BAAyB;EACzBA,QAAA,2BAAuB;EACvBA,QAAA,eAAW;EACXA,QAAA,yCAAqC;EACrCA,QAAA,qCAAiC;EACjCA,QAAA,2BAAuB;EACvBA,QAAA,qCAAiC;EACjCA,QAAA,6BAAyB;EACzBA,QAAA,yBAAqB;EACrBA,QAAA,+BAA2B;EAC3BA,QAAA,qBAAiB;EACjBA,QAAA,qBAAiB;EACjBA,QAAA,iCAA6B;EAC7BA,QAAA,+BAA2B;EAC3BA,QAAA,mDAA+C;EAC/CA,QAAA,mBAAe;EACfA,QAAA,yBAAqB;EACrBA,QAAA,qBAAiB;EACjBA,QAAA,qBAAiB;AACnB,CAAC,EApBWA,QAAQ,KAARA,QAAQ;AAsBpB,WAAYC,aAIX;AAJD,WAAYA,aAAa;EACvBA,aAAA,wBAAoB;EACpBA,aAAA,uBAAmB;EACnBA,aAAA,4BAAwB;AAC1B,CAAC,EAJWA,aAAa,KAAbA,aAAa;AAMzB,WAAYC,kBAIX;AAJD,WAAYA,kBAAkB;EAC5BA,kBAAA,qBAAiB;EACjBA,kBAAA,qBAAiB;EACjBA,kBAAA,qBAAiB;AACnB,CAAC,EAJWA,kBAAkB,KAAlBA,kBAAkB;AAM9B,WAAYC,WA0CX;AA1CD,WAAYA,WAAW;EACrB;;;;;EAKAA,WAAA,sCAAkC;EAElC;;;;;EAKAA,WAAA,oCAAgC;EAEhC;;;;;EAKAA,WAAA,gCAA4B;EAE5B;;;;;EAKAA,WAAA,6BAAyB;EAEzB;;;;;EAKAA,WAAA,wCAAoC;EAEpC;;;;;EAKAA,WAAA,8CAA0C;AAC5C,CAAC,EA1CWA,WAAW,KAAXA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}