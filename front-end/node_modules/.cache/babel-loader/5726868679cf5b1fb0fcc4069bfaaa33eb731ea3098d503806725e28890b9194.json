{"ast":null,"code":"import * as API from '@ucanto/interface';\nimport { encodeSequence, encodeBitString, enterSequence, skipSequence, readBitString } from './asn1.js';\n\n/**\n * @typedef {import('./public-key.js').RSAPublicKey} RSAPublicKey\n */\n/**\n * Described in RFC 5208 Section 4.1: https://tools.ietf.org/html/rfc5280#section-4.1\n * ```\n * SubjectPublicKeyInfo  ::=  SEQUENCE  {\n *    algorithm            AlgorithmIdentifier,\n *    subjectPublicKey     BIT STRING  }\n * ```\n *\n * @typedef {object} SubjectPublicKeyInfo\n * @property {API.ByteView<AlgorithmIdentifier>} algorithm\n * @property {API.ByteView<RSAPublicKey>} subjectPublicKey\n * @typedef {import('./pkcs8.js').AlgorithmIdentifier} AlgorithmIdentifier\n */\n\n/**\n * The ASN.1 DER encoded header that needs to be added to an\n * ASN.1 DER encoded RSAPublicKey to make it a SubjectPublicKeyInfo.\n *\n * This byte sequence is always the same.\n *\n * A human-readable version of this as part of a dumpasn1 dump:\n *\n *     SEQUENCE {\n *       OBJECT IDENTIFIER rsaEncryption (1 2 840 113549 1 1 1)\n *       NULL\n *     }\n *\n * See https://github.com/ucan-wg/ts-ucan/issues/30\n */\nexport const SPKI_PARAMS_ENCODED = new Uint8Array([48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0]);\n\n/**\n * @param {API.ByteView<RSAPublicKey>} key\n * @returns {API.ByteView<SubjectPublicKeyInfo>}\n */\nexport const encode = key => encodeSequence([SPKI_PARAMS_ENCODED, encodeBitString(key)]);\n\n/**\n *\n * @param {API.ByteView<SubjectPublicKeyInfo>} info\n * @returns {API.ByteView<RSAPublicKey>}\n */\nexport const decode = info => {\n  // go into the top-level SEQUENCE\n  const offset = enterSequence(info, 0);\n  // skip the header we expect (SKPI_PARAMS_ENCODED)\n  const keyOffset = skipSequence(info, offset);\n\n  // we expect the bitstring next\n  return readBitString(info, keyOffset);\n};","map":{"version":3,"names":["API","encodeSequence","encodeBitString","enterSequence","skipSequence","readBitString","SPKI_PARAMS_ENCODED","Uint8Array","encode","key","decode","info","offset","keyOffset"],"sources":["C:/FACULTATE/Proiect/node_modules/@ucanto/principal/src/rsa/spki.js"],"sourcesContent":["import * as API from '@ucanto/interface'\nimport {\n  encodeSequence,\n  encodeBitString,\n  enterSequence,\n  skipSequence,\n  readBitString,\n} from './asn1.js'\n\n/**\n * @typedef {import('./public-key.js').RSAPublicKey} RSAPublicKey\n */\n/**\n * Described in RFC 5208 Section 4.1: https://tools.ietf.org/html/rfc5280#section-4.1\n * ```\n * SubjectPublicKeyInfo  ::=  SEQUENCE  {\n *    algorithm            AlgorithmIdentifier,\n *    subjectPublicKey     BIT STRING  }\n * ```\n *\n * @typedef {object} SubjectPublicKeyInfo\n * @property {API.ByteView<AlgorithmIdentifier>} algorithm\n * @property {API.ByteView<RSAPublicKey>} subjectPublicKey\n * @typedef {import('./pkcs8.js').AlgorithmIdentifier} AlgorithmIdentifier\n */\n\n/**\n * The ASN.1 DER encoded header that needs to be added to an\n * ASN.1 DER encoded RSAPublicKey to make it a SubjectPublicKeyInfo.\n *\n * This byte sequence is always the same.\n *\n * A human-readable version of this as part of a dumpasn1 dump:\n *\n *     SEQUENCE {\n *       OBJECT IDENTIFIER rsaEncryption (1 2 840 113549 1 1 1)\n *       NULL\n *     }\n *\n * See https://github.com/ucan-wg/ts-ucan/issues/30\n */\nexport const SPKI_PARAMS_ENCODED = new Uint8Array([\n  48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0,\n])\n\n/**\n * @param {API.ByteView<RSAPublicKey>} key\n * @returns {API.ByteView<SubjectPublicKeyInfo>}\n */\nexport const encode = key =>\n  encodeSequence([SPKI_PARAMS_ENCODED, encodeBitString(key)])\n\n/**\n *\n * @param {API.ByteView<SubjectPublicKeyInfo>} info\n * @returns {API.ByteView<RSAPublicKey>}\n */\nexport const decode = info => {\n  // go into the top-level SEQUENCE\n  const offset = enterSequence(info, 0)\n  // skip the header we expect (SKPI_PARAMS_ENCODED)\n  const keyOffset = skipSequence(info, offset)\n\n  // we expect the bitstring next\n  return readBitString(info, keyOffset)\n}\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,mBAAmB;AACxC,SACEC,cAAc,EACdC,eAAe,EACfC,aAAa,EACbC,YAAY,EACZC,aAAa,QACR,WAAW;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAG,IAAIC,UAAU,CAAC,CAChD,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CACvD,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGC,GAAG,IACvBR,cAAc,CAAC,CAACK,mBAAmB,EAAEJ,eAAe,CAACO,GAAG,CAAC,CAAC,CAAC;;AAE7D;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGC,IAAI,IAAI;EAC5B;EACA,MAAMC,MAAM,GAAGT,aAAa,CAACQ,IAAI,EAAE,CAAC,CAAC;EACrC;EACA,MAAME,SAAS,GAAGT,YAAY,CAACO,IAAI,EAAEC,MAAM,CAAC;;EAE5C;EACA,OAAOP,aAAa,CAACM,IAAI,EAAEE,SAAS,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}