{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HelpPrinter = void 0;\nconst errors_1 = require(\"../core/errors\");\nconst errors_list_1 = require(\"../core/errors-list\");\nconst ArgumentsParser_1 = require(\"./ArgumentsParser\");\nclass HelpPrinter {\n  constructor(_programName, _executableName, _version, _hardhatParamDefinitions, _tasks, _scopes) {\n    this._programName = _programName;\n    this._executableName = _executableName;\n    this._version = _version;\n    this._hardhatParamDefinitions = _hardhatParamDefinitions;\n    this._tasks = _tasks;\n    this._scopes = _scopes;\n  }\n  printGlobalHelp(includeSubtasks = false) {\n    console.log(`${this._programName} version ${this._version}\\n`);\n    console.log(`Usage: ${this._executableName} [GLOBAL OPTIONS] [SCOPE] <TASK> [TASK OPTIONS]\\n`);\n    console.log(\"GLOBAL OPTIONS:\\n\");\n    let length = this._printParamDetails(this._hardhatParamDefinitions);\n    console.log(\"\\n\\nAVAILABLE TASKS:\\n\");\n    length = this._printTasks(this._tasks, includeSubtasks, length);\n    if (Object.keys(this._scopes).length > 0) {\n      console.log(\"\\n\\nAVAILABLE TASK SCOPES:\\n\");\n      this._printScopes(this._scopes, length);\n    }\n    console.log(\"\");\n    console.log(`To get help for a specific task run: npx ${this._executableName} help [SCOPE] <TASK>\\n`);\n  }\n  printScopeHelp(scopeDefinition, includeSubtasks = false) {\n    const name = scopeDefinition.name;\n    const description = scopeDefinition.description ?? \"\";\n    console.log(`${this._programName} version ${this._version}`);\n    console.log(`\\nUsage: hardhat [GLOBAL OPTIONS] ${name} <TASK> [TASK OPTIONS]`);\n    console.log(`\\nAVAILABLE TASKS:\\n`);\n    if (this._scopes[name] === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_SCOPE, {\n        scope: name\n      });\n    }\n    this._printTasks(this._scopes[name].tasks, includeSubtasks);\n    console.log(`\\n${name}: ${description}`);\n    console.log(`\\nFor global options help run: ${this._executableName} help\\n`);\n  }\n  printTaskHelp(taskDefinition) {\n    const {\n      description = \"\",\n      name,\n      paramDefinitions,\n      positionalParamDefinitions\n    } = taskDefinition;\n    console.log(`${this._programName} version ${this._version}\\n`);\n    const paramsList = this._getParamsList(paramDefinitions);\n    const positionalParamsList = this._getPositionalParamsList(positionalParamDefinitions);\n    const scope = taskDefinition.scope !== undefined ? `${taskDefinition.scope} ` : \"\";\n    console.log(`Usage: ${this._executableName} [GLOBAL OPTIONS] ${scope}${name}${paramsList}${positionalParamsList}\\n`);\n    if (Object.keys(paramDefinitions).length > 0) {\n      console.log(\"OPTIONS:\\n\");\n      this._printParamDetails(paramDefinitions);\n      console.log(\"\");\n    }\n    if (positionalParamDefinitions.length > 0) {\n      console.log(\"POSITIONAL ARGUMENTS:\\n\");\n      this._printPositionalParamDetails(positionalParamDefinitions);\n      console.log(\"\");\n    }\n    console.log(`${name}: ${description}\\n`);\n    console.log(`For global options help run: ${this._executableName} help\\n`);\n  }\n  _printTasks(tasksMap, includeSubtasks, length = 0) {\n    const taskNameList = Object.entries(tasksMap).filter(([, taskDefinition]) => includeSubtasks || !taskDefinition.isSubtask).map(([taskName]) => taskName).sort();\n    const nameLength = taskNameList.map(n => n.length).reduce((a, b) => Math.max(a, b), length);\n    for (const name of taskNameList) {\n      const {\n        description = \"\"\n      } = tasksMap[name];\n      console.log(`  ${name.padEnd(nameLength)}\\t${description}`);\n    }\n    return nameLength;\n  }\n  _printScopes(scopesMap, length) {\n    const scopeNamesList = Object.entries(scopesMap).map(([scopeName]) => scopeName).sort();\n    const nameLength = scopeNamesList.map(n => n.length).reduce((a, b) => Math.max(a, b), length);\n    for (const name of scopeNamesList) {\n      const {\n        description = \"\"\n      } = scopesMap[name];\n      console.log(`  ${name.padEnd(nameLength)}\\t${description}`);\n    }\n    return nameLength;\n  }\n  _getParamValueDescription(paramDefinition) {\n    return `<${paramDefinition.type.name.toUpperCase()}>`;\n  }\n  _getParamsList(paramDefinitions) {\n    let paramsList = \"\";\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const definition = paramDefinitions[name];\n      const {\n        isFlag,\n        isOptional\n      } = definition;\n      paramsList += \" \";\n      if (isOptional) {\n        paramsList += \"[\";\n      }\n      paramsList += `${ArgumentsParser_1.ArgumentsParser.paramNameToCLA(name)}`;\n      if (!isFlag) {\n        paramsList += ` ${this._getParamValueDescription(definition)}`;\n      }\n      if (isOptional) {\n        paramsList += \"]\";\n      }\n    }\n    return paramsList;\n  }\n  _getPositionalParamsList(positionalParamDefinitions) {\n    let paramsList = \"\";\n    for (const definition of positionalParamDefinitions) {\n      const {\n        isOptional,\n        isVariadic,\n        name\n      } = definition;\n      paramsList += \" \";\n      if (isOptional) {\n        paramsList += \"[\";\n      }\n      if (isVariadic) {\n        paramsList += \"...\";\n      }\n      paramsList += name;\n      if (isOptional) {\n        paramsList += \"]\";\n      }\n    }\n    return paramsList;\n  }\n  _printParamDetails(paramDefinitions) {\n    const paramsNameLength = Object.keys(paramDefinitions).map(n => ArgumentsParser_1.ArgumentsParser.paramNameToCLA(n).length).reduce((a, b) => Math.max(a, b), 0);\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const {\n        description,\n        defaultValue,\n        isOptional,\n        isFlag\n      } = paramDefinitions[name];\n      let msg = `  ${ArgumentsParser_1.ArgumentsParser.paramNameToCLA(name).padEnd(paramsNameLength)}\\t`;\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n      if (isOptional && defaultValue !== undefined && !isFlag) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n      console.log(msg);\n    }\n    return paramsNameLength;\n  }\n  _printPositionalParamDetails(positionalParamDefinitions) {\n    const paramsNameLength = positionalParamDefinitions.map(d => d.name.length).reduce((a, b) => Math.max(a, b), 0);\n    for (const definition of positionalParamDefinitions) {\n      const {\n        name,\n        description,\n        isOptional,\n        defaultValue\n      } = definition;\n      let msg = `  ${name.padEnd(paramsNameLength)}\\t`;\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n      if (isOptional && defaultValue !== undefined) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n      console.log(msg);\n    }\n  }\n}\nexports.HelpPrinter = HelpPrinter;","map":{"version":3,"names":["errors_1","require","errors_list_1","ArgumentsParser_1","HelpPrinter","constructor","_programName","_executableName","_version","_hardhatParamDefinitions","_tasks","_scopes","printGlobalHelp","includeSubtasks","console","log","length","_printParamDetails","_printTasks","Object","keys","_printScopes","printScopeHelp","scopeDefinition","name","description","undefined","HardhatError","ERRORS","ARGUMENTS","UNRECOGNIZED_SCOPE","scope","tasks","printTaskHelp","taskDefinition","paramDefinitions","positionalParamDefinitions","paramsList","_getParamsList","positionalParamsList","_getPositionalParamsList","_printPositionalParamDetails","tasksMap","taskNameList","entries","filter","isSubtask","map","taskName","sort","nameLength","n","reduce","a","b","Math","max","padEnd","scopesMap","scopeNamesList","scopeName","_getParamValueDescription","paramDefinition","type","toUpperCase","definition","isFlag","isOptional","ArgumentsParser","paramNameToCLA","isVariadic","paramsNameLength","defaultValue","msg","JSON","stringify","d","exports"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\cli\\HelpPrinter.ts"],"sourcesContent":["import {\n  HardhatParamDefinitions,\n  ParamDefinition,\n  ParamDefinitionsMap,\n  ScopeDefinition,\n  ScopesMap,\n  TaskDefinition,\n  TasksMap,\n} from \"../../types\";\nimport { HardhatError } from \"../core/errors\";\nimport { ERRORS } from \"../core/errors-list\";\n\nimport { ArgumentsParser } from \"./ArgumentsParser\";\n\nexport class HelpPrinter {\n  constructor(\n    private readonly _programName: string,\n    private readonly _executableName: string,\n    private readonly _version: string,\n    private readonly _hardhatParamDefinitions: HardhatParamDefinitions,\n    private readonly _tasks: TasksMap,\n    private readonly _scopes: ScopesMap\n  ) {}\n\n  public printGlobalHelp(includeSubtasks = false) {\n    console.log(`${this._programName} version ${this._version}\\n`);\n\n    console.log(\n      `Usage: ${this._executableName} [GLOBAL OPTIONS] [SCOPE] <TASK> [TASK OPTIONS]\\n`\n    );\n\n    console.log(\"GLOBAL OPTIONS:\\n\");\n\n    let length = this._printParamDetails(this._hardhatParamDefinitions);\n\n    console.log(\"\\n\\nAVAILABLE TASKS:\\n\");\n\n    length = this._printTasks(this._tasks, includeSubtasks, length);\n\n    if (Object.keys(this._scopes).length > 0) {\n      console.log(\"\\n\\nAVAILABLE TASK SCOPES:\\n\");\n\n      this._printScopes(this._scopes, length);\n    }\n\n    console.log(\"\");\n\n    console.log(\n      `To get help for a specific task run: npx ${this._executableName} help [SCOPE] <TASK>\\n`\n    );\n  }\n\n  public printScopeHelp(\n    scopeDefinition: ScopeDefinition,\n    includeSubtasks = false\n  ) {\n    const name = scopeDefinition.name;\n    const description = scopeDefinition.description ?? \"\";\n\n    console.log(`${this._programName} version ${this._version}`);\n\n    console.log(\n      `\\nUsage: hardhat [GLOBAL OPTIONS] ${name} <TASK> [TASK OPTIONS]`\n    );\n\n    console.log(`\\nAVAILABLE TASKS:\\n`);\n\n    if (this._scopes[name] === undefined) {\n      throw new HardhatError(ERRORS.ARGUMENTS.UNRECOGNIZED_SCOPE, {\n        scope: name,\n      });\n    }\n\n    this._printTasks(this._scopes[name].tasks, includeSubtasks);\n\n    console.log(`\\n${name}: ${description}`);\n\n    console.log(\n      `\\nFor global options help run: ${this._executableName} help\\n`\n    );\n  }\n\n  public printTaskHelp(taskDefinition: TaskDefinition) {\n    const {\n      description = \"\",\n      name,\n      paramDefinitions,\n      positionalParamDefinitions,\n    } = taskDefinition;\n\n    console.log(`${this._programName} version ${this._version}\\n`);\n\n    const paramsList = this._getParamsList(paramDefinitions);\n    const positionalParamsList = this._getPositionalParamsList(\n      positionalParamDefinitions\n    );\n\n    const scope =\n      taskDefinition.scope !== undefined ? `${taskDefinition.scope} ` : \"\";\n\n    console.log(\n      `Usage: ${this._executableName} [GLOBAL OPTIONS] ${scope}${name}${paramsList}${positionalParamsList}\\n`\n    );\n\n    if (Object.keys(paramDefinitions).length > 0) {\n      console.log(\"OPTIONS:\\n\");\n\n      this._printParamDetails(paramDefinitions);\n\n      console.log(\"\");\n    }\n\n    if (positionalParamDefinitions.length > 0) {\n      console.log(\"POSITIONAL ARGUMENTS:\\n\");\n\n      this._printPositionalParamDetails(positionalParamDefinitions);\n\n      console.log(\"\");\n    }\n\n    console.log(`${name}: ${description}\\n`);\n\n    console.log(`For global options help run: ${this._executableName} help\\n`);\n  }\n\n  private _printTasks(\n    tasksMap: TasksMap,\n    includeSubtasks: boolean,\n    length: number = 0\n  ) {\n    const taskNameList = Object.entries(tasksMap)\n      .filter(\n        ([, taskDefinition]) => includeSubtasks || !taskDefinition.isSubtask\n      )\n      .map(([taskName]) => taskName)\n      .sort();\n\n    const nameLength = taskNameList\n      .map((n) => n.length)\n      .reduce((a, b) => Math.max(a, b), length);\n\n    for (const name of taskNameList) {\n      const { description = \"\" } = tasksMap[name];\n\n      console.log(`  ${name.padEnd(nameLength)}\\t${description}`);\n    }\n\n    return nameLength;\n  }\n\n  private _printScopes(scopesMap: ScopesMap, length: number) {\n    const scopeNamesList = Object.entries(scopesMap)\n      .map(([scopeName]) => scopeName)\n      .sort();\n\n    const nameLength = scopeNamesList\n      .map((n) => n.length)\n      .reduce((a, b) => Math.max(a, b), length);\n\n    for (const name of scopeNamesList) {\n      const { description = \"\" } = scopesMap[name];\n\n      console.log(`  ${name.padEnd(nameLength)}\\t${description}`);\n    }\n\n    return nameLength;\n  }\n\n  private _getParamValueDescription<T>(paramDefinition: ParamDefinition<T>) {\n    return `<${paramDefinition.type.name.toUpperCase()}>`;\n  }\n\n  private _getParamsList(paramDefinitions: ParamDefinitionsMap) {\n    let paramsList = \"\";\n\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const definition = paramDefinitions[name];\n      const { isFlag, isOptional } = definition;\n\n      paramsList += \" \";\n\n      if (isOptional) {\n        paramsList += \"[\";\n      }\n\n      paramsList += `${ArgumentsParser.paramNameToCLA(name)}`;\n\n      if (!isFlag) {\n        paramsList += ` ${this._getParamValueDescription(definition)}`;\n      }\n\n      if (isOptional) {\n        paramsList += \"]\";\n      }\n    }\n\n    return paramsList;\n  }\n\n  private _getPositionalParamsList(\n    positionalParamDefinitions: Array<ParamDefinition<any>>\n  ) {\n    let paramsList = \"\";\n\n    for (const definition of positionalParamDefinitions) {\n      const { isOptional, isVariadic, name } = definition;\n\n      paramsList += \" \";\n\n      if (isOptional) {\n        paramsList += \"[\";\n      }\n\n      if (isVariadic) {\n        paramsList += \"...\";\n      }\n\n      paramsList += name;\n\n      if (isOptional) {\n        paramsList += \"]\";\n      }\n    }\n\n    return paramsList;\n  }\n\n  private _printParamDetails(paramDefinitions: ParamDefinitionsMap): number {\n    const paramsNameLength = Object.keys(paramDefinitions)\n      .map((n) => ArgumentsParser.paramNameToCLA(n).length)\n      .reduce((a, b) => Math.max(a, b), 0);\n\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const { description, defaultValue, isOptional, isFlag } =\n        paramDefinitions[name];\n\n      let msg = `  ${ArgumentsParser.paramNameToCLA(name).padEnd(\n        paramsNameLength\n      )}\\t`;\n\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n\n      if (isOptional && defaultValue !== undefined && !isFlag) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n\n      console.log(msg);\n    }\n\n    return paramsNameLength;\n  }\n\n  private _printPositionalParamDetails(\n    positionalParamDefinitions: Array<ParamDefinition<any>>\n  ) {\n    const paramsNameLength = positionalParamDefinitions\n      .map((d) => d.name.length)\n      .reduce((a, b) => Math.max(a, b), 0);\n\n    for (const definition of positionalParamDefinitions) {\n      const { name, description, isOptional, defaultValue } = definition;\n\n      let msg = `  ${name.padEnd(paramsNameLength)}\\t`;\n\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n\n      if (isOptional && defaultValue !== undefined) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n\n      console.log(msg);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}