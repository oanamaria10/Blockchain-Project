{"ast":null,"code":"var assert = require('assert');\nvar translate = require('./translate.js');\nvar requireFromString = require('require-from-string');\nvar https = require('follow-redirects').https;\nvar MemoryStream = require('memorystream');\nvar semver = require('semver');\nfunction setupMethods(soljson) {\n  var version;\n  if ('_solidity_version' in soljson) {\n    version = soljson.cwrap('solidity_version', 'string', []);\n  } else {\n    version = soljson.cwrap('version', 'string', []);\n  }\n  var versionToSemver = function () {\n    return translate.versionToSemver(version());\n  };\n  var isVersion6 = semver.gt(versionToSemver(), '0.5.99');\n  var license;\n  if ('_solidity_license' in soljson) {\n    license = soljson.cwrap('solidity_license', 'string', []);\n  } else if ('_license' in soljson) {\n    license = soljson.cwrap('license', 'string', []);\n  } else {\n    // pre 0.4.14\n    license = function () {\n      // return undefined\n    };\n  }\n  var alloc;\n  if ('_solidity_alloc' in soljson) {\n    alloc = soljson.cwrap('solidity_alloc', 'number', ['number']);\n  } else {\n    alloc = soljson._malloc;\n    assert(alloc, 'Expected malloc to be present.');\n  }\n  var reset;\n  if ('_solidity_reset' in soljson) {\n    reset = soljson.cwrap('solidity_reset', null, []);\n  }\n  var copyToCString = function (str, ptr) {\n    var length = soljson.lengthBytesUTF8(str);\n    // This is allocating memory using solc's allocator.\n    //\n    // Before 0.6.0:\n    //   Assuming copyToCString is only used in the context of wrapCallback, solc will free these pointers.\n    //   See https://github.com/ethereum/solidity/blob/v0.5.13/libsolc/libsolc.h#L37-L40\n    //\n    // After 0.6.0:\n    //   The duty is on solc-js to free these pointers. We accomplish that by calling `reset` at the end.\n    var buffer = alloc(length + 1);\n    soljson.stringToUTF8(str, buffer, length + 1);\n    soljson.setValue(ptr, buffer, '*');\n  };\n\n  // This is to support multiple versions of Emscripten.\n  // Take a single `ptr` and returns a `str`.\n  var copyFromCString = soljson.UTF8ToString || soljson.Pointer_stringify;\n  var wrapCallback = function (callback) {\n    assert(typeof callback === 'function', 'Invalid callback specified.');\n    return function (data, contents, error) {\n      var result = callback(copyFromCString(data));\n      if (typeof result.contents === 'string') {\n        copyToCString(result.contents, contents);\n      }\n      if (typeof result.error === 'string') {\n        copyToCString(result.error, error);\n      }\n    };\n  };\n  var wrapCallbackWithKind = function (callback) {\n    assert(typeof callback === 'function', 'Invalid callback specified.');\n    return function (context, kind, data, contents, error) {\n      // Must be a null pointer.\n      assert(context === 0, 'Callback context must be null.');\n      var result = callback(copyFromCString(kind), copyFromCString(data));\n      if (typeof result.contents === 'string') {\n        copyToCString(result.contents, contents);\n      }\n      if (typeof result.error === 'string') {\n        copyToCString(result.error, error);\n      }\n    };\n  };\n\n  // This calls compile() with args || cb\n  var runWithCallbacks = function (callbacks, compile, args) {\n    if (callbacks) {\n      assert(typeof callbacks === 'object', 'Invalid callback object specified.');\n    } else {\n      callbacks = {};\n    }\n    var readCallback = callbacks.import;\n    if (readCallback === undefined) {\n      readCallback = function (data) {\n        return {\n          error: 'File import callback not supported'\n        };\n      };\n    }\n    var singleCallback;\n    if (isVersion6) {\n      // After 0.6.x multiple kind of callbacks are supported.\n      var smtSolverCallback = callbacks.smtSolver;\n      if (smtSolverCallback === undefined) {\n        smtSolverCallback = function (data) {\n          return {\n            error: 'SMT solver callback not supported'\n          };\n        };\n      }\n      singleCallback = function (kind, data) {\n        if (kind === 'source') {\n          return readCallback(data);\n        } else if (kind === 'smt-query') {\n          return smtSolverCallback(data);\n        } else {\n          assert(false, 'Invalid callback kind specified.');\n        }\n      };\n      singleCallback = wrapCallbackWithKind(singleCallback);\n    } else {\n      // Old Solidity version only supported imports.\n      singleCallback = wrapCallback(readCallback);\n    }\n\n    // This is to support multiple versions of Emscripten.\n    var addFunction = soljson.addFunction || soljson.Runtime.addFunction;\n    var removeFunction = soljson.removeFunction || soljson.Runtime.removeFunction;\n    var cb = addFunction(singleCallback, 'viiiii');\n    var output;\n    try {\n      args.push(cb);\n      if (isVersion6) {\n        // Callback context.\n        args.push(null);\n      }\n      output = compile.apply(undefined, args);\n    } catch (e) {\n      removeFunction(cb);\n      throw e;\n    }\n    removeFunction(cb);\n    if (reset) {\n      // Explicitly free memory.\n      //\n      // NOTE: cwrap() of \"compile\" will copy the returned pointer into a\n      //       Javascript string and it is not possible to call free() on it.\n      //       reset() however will clear up all allocations.\n      reset();\n    }\n    return output;\n  };\n  var compileJSON = null;\n  if ('_compileJSON' in soljson) {\n    // input (text), optimize (bool) -> output (jsontext)\n    compileJSON = soljson.cwrap('compileJSON', 'string', ['string', 'number']);\n  }\n  var compileJSONMulti = null;\n  if ('_compileJSONMulti' in soljson) {\n    // input (jsontext), optimize (bool) -> output (jsontext)\n    compileJSONMulti = soljson.cwrap('compileJSONMulti', 'string', ['string', 'number']);\n  }\n  var compileJSONCallback = null;\n  if ('_compileJSONCallback' in soljson) {\n    // input (jsontext), optimize (bool), callback (ptr) -> output (jsontext)\n    var compileInternal = soljson.cwrap('compileJSONCallback', 'string', ['string', 'number', 'number']);\n    compileJSONCallback = function (input, optimize, readCallback) {\n      return runWithCallbacks(readCallback, compileInternal, [input, optimize]);\n    };\n  }\n  var compileStandard = null;\n  if ('_compileStandard' in soljson) {\n    // input (jsontext), callback (ptr) -> output (jsontext)\n    var compileStandardInternal = soljson.cwrap('compileStandard', 'string', ['string', 'number']);\n    compileStandard = function (input, readCallback) {\n      return runWithCallbacks(readCallback, compileStandardInternal, [input]);\n    };\n  }\n  if ('_solidity_compile' in soljson) {\n    var solidityCompile;\n    if (isVersion6) {\n      // input (jsontext), callback (ptr), callback_context (ptr) -> output (jsontext)\n      solidityCompile = soljson.cwrap('solidity_compile', 'string', ['string', 'number', 'number']);\n    } else {\n      // input (jsontext), callback (ptr) -> output (jsontext)\n      solidityCompile = soljson.cwrap('solidity_compile', 'string', ['string', 'number']);\n    }\n    compileStandard = function (input, callbacks) {\n      return runWithCallbacks(callbacks, solidityCompile, [input]);\n    };\n  }\n\n  // Expects a Standard JSON I/O but supports old compilers\n  var compileStandardWrapper = function (input, readCallback) {\n    if (compileStandard !== null) {\n      return compileStandard(input, readCallback);\n    }\n    function formatFatalError(message) {\n      return JSON.stringify({\n        errors: [{\n          'type': 'JSONError',\n          'component': 'solcjs',\n          'severity': 'error',\n          'message': message,\n          'formattedMessage': 'Error: ' + message\n        }]\n      });\n    }\n    try {\n      input = JSON.parse(input);\n    } catch (e) {\n      return formatFatalError('Invalid JSON supplied: ' + e.message);\n    }\n    if (input['language'] !== 'Solidity') {\n      return formatFatalError('Only \"Solidity\" is supported as a language.');\n    }\n\n    // NOTE: this is deliberately `== null`\n    if (input['sources'] == null || input['sources'].length === 0) {\n      return formatFatalError('No input sources specified.');\n    }\n    function isOptimizerEnabled(input) {\n      return input['settings'] && input['settings']['optimizer'] && input['settings']['optimizer']['enabled'];\n    }\n    function translateSources(input) {\n      var sources = {};\n      for (var source in input['sources']) {\n        if (input['sources'][source]['content'] !== null) {\n          sources[source] = input['sources'][source]['content'];\n        } else {\n          // force failure\n          return null;\n        }\n      }\n      return sources;\n    }\n    function librariesSupplied(input) {\n      if (input['settings']) {\n        return input['settings']['libraries'];\n      }\n    }\n    function translateOutput(output, libraries) {\n      try {\n        output = JSON.parse(output);\n      } catch (e) {\n        return formatFatalError('Compiler returned invalid JSON: ' + e.message);\n      }\n      output = translate.translateJsonCompilerOutput(output, libraries);\n      if (output == null) {\n        return formatFatalError('Failed to process output.');\n      }\n      return JSON.stringify(output);\n    }\n    var sources = translateSources(input);\n    if (sources === null || Object.keys(sources).length === 0) {\n      return formatFatalError('Failed to process sources.');\n    }\n\n    // Try linking if libraries were supplied\n    var libraries = librariesSupplied(input);\n\n    // Try to wrap around old versions\n    if (compileJSONCallback !== null) {\n      return translateOutput(compileJSONCallback(JSON.stringify({\n        'sources': sources\n      }), isOptimizerEnabled(input), readCallback), libraries);\n    }\n    if (compileJSONMulti !== null) {\n      return translateOutput(compileJSONMulti(JSON.stringify({\n        'sources': sources\n      }), isOptimizerEnabled(input)), libraries);\n    }\n\n    // Try our luck with an ancient compiler\n    if (compileJSON !== null) {\n      if (Object.keys(sources).length !== 1) {\n        return formatFatalError('Multiple sources provided, but compiler only supports single input.');\n      }\n      return translateOutput(compileJSON(sources[Object.keys(sources)[0]], isOptimizerEnabled(input)), libraries);\n    }\n    return formatFatalError('Compiler does not support any known interface.');\n  };\n  return {\n    version: version,\n    semver: versionToSemver,\n    license: license,\n    lowlevel: {\n      compileSingle: compileJSON,\n      compileMulti: compileJSONMulti,\n      compileCallback: compileJSONCallback,\n      compileStandard: compileStandard\n    },\n    features: {\n      legacySingleInput: compileJSON !== null,\n      multipleInputs: compileJSONMulti !== null || compileStandard !== null,\n      importCallback: compileJSONCallback !== null || compileStandard !== null,\n      nativeStandardJSON: compileStandard !== null\n    },\n    compile: compileStandardWrapper,\n    // Loads the compiler of the given version from the github repository\n    // instead of from the local filesystem.\n    loadRemoteVersion: function (versionString, cb) {\n      var mem = new MemoryStream(null, {\n        readable: false\n      });\n      var url = 'https://solc-bin.ethereum.org/bin/soljson-' + versionString + '.js';\n      https.get(url, function (response) {\n        if (response.statusCode !== 200) {\n          cb(new Error('Error retrieving binary: ' + response.statusMessage));\n        } else {\n          response.pipe(mem);\n          response.on('end', function () {\n            cb(null, setupMethods(requireFromString(mem.toString(), 'soljson-' + versionString + '.js')));\n          });\n        }\n      }).on('error', function (error) {\n        cb(error);\n      });\n    },\n    // Use this if you want to add wrapper functions around the pure module.\n    setupMethods: setupMethods\n  };\n}\nmodule.exports = setupMethods;","map":{"version":3,"names":["assert","require","translate","requireFromString","https","MemoryStream","semver","setupMethods","soljson","version","cwrap","versionToSemver","isVersion6","gt","license","alloc","_malloc","reset","copyToCString","str","ptr","length","lengthBytesUTF8","buffer","stringToUTF8","setValue","copyFromCString","UTF8ToString","Pointer_stringify","wrapCallback","callback","data","contents","error","result","wrapCallbackWithKind","context","kind","runWithCallbacks","callbacks","compile","args","readCallback","import","undefined","singleCallback","smtSolverCallback","smtSolver","addFunction","Runtime","removeFunction","cb","output","push","apply","e","compileJSON","compileJSONMulti","compileJSONCallback","compileInternal","input","optimize","compileStandard","compileStandardInternal","solidityCompile","compileStandardWrapper","formatFatalError","message","JSON","stringify","errors","parse","isOptimizerEnabled","translateSources","sources","source","librariesSupplied","translateOutput","libraries","translateJsonCompilerOutput","Object","keys","lowlevel","compileSingle","compileMulti","compileCallback","features","legacySingleInput","multipleInputs","importCallback","nativeStandardJSON","loadRemoteVersion","versionString","mem","readable","url","get","response","statusCode","Error","statusMessage","pipe","on","toString","module","exports"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/solc/wrapper.js"],"sourcesContent":["var assert = require('assert');\nvar translate = require('./translate.js');\nvar requireFromString = require('require-from-string');\nvar https = require('follow-redirects').https;\nvar MemoryStream = require('memorystream');\nvar semver = require('semver');\n\nfunction setupMethods (soljson) {\n  var version;\n  if ('_solidity_version' in soljson) {\n    version = soljson.cwrap('solidity_version', 'string', []);\n  } else {\n    version = soljson.cwrap('version', 'string', []);\n  }\n\n  var versionToSemver = function () {\n    return translate.versionToSemver(version());\n  };\n\n  var isVersion6 = semver.gt(versionToSemver(), '0.5.99');\n\n  var license;\n  if ('_solidity_license' in soljson) {\n    license = soljson.cwrap('solidity_license', 'string', []);\n  } else if ('_license' in soljson) {\n    license = soljson.cwrap('license', 'string', []);\n  } else {\n    // pre 0.4.14\n    license = function () {\n      // return undefined\n    };\n  }\n\n  var alloc;\n  if ('_solidity_alloc' in soljson) {\n    alloc = soljson.cwrap('solidity_alloc', 'number', [ 'number' ]);\n  } else {\n    alloc = soljson._malloc;\n    assert(alloc, 'Expected malloc to be present.');\n  }\n\n  var reset;\n  if ('_solidity_reset' in soljson) {\n    reset = soljson.cwrap('solidity_reset', null, []);\n  }\n\n  var copyToCString = function (str, ptr) {\n    var length = soljson.lengthBytesUTF8(str);\n    // This is allocating memory using solc's allocator.\n    //\n    // Before 0.6.0:\n    //   Assuming copyToCString is only used in the context of wrapCallback, solc will free these pointers.\n    //   See https://github.com/ethereum/solidity/blob/v0.5.13/libsolc/libsolc.h#L37-L40\n    //\n    // After 0.6.0:\n    //   The duty is on solc-js to free these pointers. We accomplish that by calling `reset` at the end.\n    var buffer = alloc(length + 1);\n    soljson.stringToUTF8(str, buffer, length + 1);\n    soljson.setValue(ptr, buffer, '*');\n  };\n\n  // This is to support multiple versions of Emscripten.\n  // Take a single `ptr` and returns a `str`.\n  var copyFromCString = soljson.UTF8ToString || soljson.Pointer_stringify;\n\n  var wrapCallback = function (callback) {\n    assert(typeof callback === 'function', 'Invalid callback specified.');\n    return function (data, contents, error) {\n      var result = callback(copyFromCString(data));\n      if (typeof result.contents === 'string') {\n        copyToCString(result.contents, contents);\n      }\n      if (typeof result.error === 'string') {\n        copyToCString(result.error, error);\n      }\n    };\n  };\n\n  var wrapCallbackWithKind = function (callback) {\n    assert(typeof callback === 'function', 'Invalid callback specified.');\n    return function (context, kind, data, contents, error) {\n      // Must be a null pointer.\n      assert(context === 0, 'Callback context must be null.');\n      var result = callback(copyFromCString(kind), copyFromCString(data));\n      if (typeof result.contents === 'string') {\n        copyToCString(result.contents, contents);\n      }\n      if (typeof result.error === 'string') {\n        copyToCString(result.error, error);\n      }\n    };\n  };\n\n  // This calls compile() with args || cb\n  var runWithCallbacks = function (callbacks, compile, args) {\n    if (callbacks) {\n      assert(typeof callbacks === 'object', 'Invalid callback object specified.');\n    } else {\n      callbacks = {};\n    }\n\n    var readCallback = callbacks.import;\n    if (readCallback === undefined) {\n      readCallback = function (data) {\n        return {\n          error: 'File import callback not supported'\n        };\n      };\n    }\n\n    var singleCallback;\n    if (isVersion6) {\n      // After 0.6.x multiple kind of callbacks are supported.\n      var smtSolverCallback = callbacks.smtSolver;\n      if (smtSolverCallback === undefined) {\n        smtSolverCallback = function (data) {\n          return {\n            error: 'SMT solver callback not supported'\n          };\n        };\n      }\n\n      singleCallback = function (kind, data) {\n        if (kind === 'source') {\n          return readCallback(data);\n        } else if (kind === 'smt-query') {\n          return smtSolverCallback(data);\n        } else {\n          assert(false, 'Invalid callback kind specified.');\n        }\n      };\n\n      singleCallback = wrapCallbackWithKind(singleCallback);\n    } else {\n      // Old Solidity version only supported imports.\n      singleCallback = wrapCallback(readCallback);\n    }\n\n    // This is to support multiple versions of Emscripten.\n    var addFunction = soljson.addFunction || soljson.Runtime.addFunction;\n    var removeFunction = soljson.removeFunction || soljson.Runtime.removeFunction;\n\n    var cb = addFunction(singleCallback, 'viiiii');\n    var output;\n    try {\n      args.push(cb);\n      if (isVersion6) {\n        // Callback context.\n        args.push(null);\n      }\n      output = compile.apply(undefined, args);\n    } catch (e) {\n      removeFunction(cb);\n      throw e;\n    }\n    removeFunction(cb);\n    if (reset) {\n      // Explicitly free memory.\n      //\n      // NOTE: cwrap() of \"compile\" will copy the returned pointer into a\n      //       Javascript string and it is not possible to call free() on it.\n      //       reset() however will clear up all allocations.\n      reset();\n    }\n    return output;\n  };\n\n  var compileJSON = null;\n  if ('_compileJSON' in soljson) {\n    // input (text), optimize (bool) -> output (jsontext)\n    compileJSON = soljson.cwrap('compileJSON', 'string', ['string', 'number']);\n  }\n\n  var compileJSONMulti = null;\n  if ('_compileJSONMulti' in soljson) {\n    // input (jsontext), optimize (bool) -> output (jsontext)\n    compileJSONMulti = soljson.cwrap('compileJSONMulti', 'string', ['string', 'number']);\n  }\n\n  var compileJSONCallback = null;\n  if ('_compileJSONCallback' in soljson) {\n    // input (jsontext), optimize (bool), callback (ptr) -> output (jsontext)\n    var compileInternal = soljson.cwrap('compileJSONCallback', 'string', ['string', 'number', 'number']);\n    compileJSONCallback = function (input, optimize, readCallback) {\n      return runWithCallbacks(readCallback, compileInternal, [ input, optimize ]);\n    };\n  }\n\n  var compileStandard = null;\n  if ('_compileStandard' in soljson) {\n    // input (jsontext), callback (ptr) -> output (jsontext)\n    var compileStandardInternal = soljson.cwrap('compileStandard', 'string', ['string', 'number']);\n    compileStandard = function (input, readCallback) {\n      return runWithCallbacks(readCallback, compileStandardInternal, [ input ]);\n    };\n  }\n  if ('_solidity_compile' in soljson) {\n    var solidityCompile;\n    if (isVersion6) {\n      // input (jsontext), callback (ptr), callback_context (ptr) -> output (jsontext)\n      solidityCompile = soljson.cwrap('solidity_compile', 'string', ['string', 'number', 'number']);\n    } else {\n      // input (jsontext), callback (ptr) -> output (jsontext)\n      solidityCompile = soljson.cwrap('solidity_compile', 'string', ['string', 'number']);\n    }\n    compileStandard = function (input, callbacks) {\n      return runWithCallbacks(callbacks, solidityCompile, [ input ]);\n    };\n  }\n\n  // Expects a Standard JSON I/O but supports old compilers\n  var compileStandardWrapper = function (input, readCallback) {\n    if (compileStandard !== null) {\n      return compileStandard(input, readCallback);\n    }\n\n    function formatFatalError (message) {\n      return JSON.stringify({\n        errors: [\n          {\n            'type': 'JSONError',\n            'component': 'solcjs',\n            'severity': 'error',\n            'message': message,\n            'formattedMessage': 'Error: ' + message\n          }\n        ]\n      });\n    }\n\n    try {\n      input = JSON.parse(input);\n    } catch (e) {\n      return formatFatalError('Invalid JSON supplied: ' + e.message);\n    }\n\n    if (input['language'] !== 'Solidity') {\n      return formatFatalError('Only \"Solidity\" is supported as a language.');\n    }\n\n    // NOTE: this is deliberately `== null`\n    if (input['sources'] == null || input['sources'].length === 0) {\n      return formatFatalError('No input sources specified.');\n    }\n\n    function isOptimizerEnabled (input) {\n      return input['settings'] && input['settings']['optimizer'] && input['settings']['optimizer']['enabled'];\n    }\n\n    function translateSources (input) {\n      var sources = {};\n      for (var source in input['sources']) {\n        if (input['sources'][source]['content'] !== null) {\n          sources[source] = input['sources'][source]['content'];\n        } else {\n          // force failure\n          return null;\n        }\n      }\n      return sources;\n    }\n\n    function librariesSupplied (input) {\n      if (input['settings']) {\n        return input['settings']['libraries'];\n      }\n    }\n\n    function translateOutput (output, libraries) {\n      try {\n        output = JSON.parse(output);\n      } catch (e) {\n        return formatFatalError('Compiler returned invalid JSON: ' + e.message);\n      }\n      output = translate.translateJsonCompilerOutput(output, libraries);\n      if (output == null) {\n        return formatFatalError('Failed to process output.');\n      }\n      return JSON.stringify(output);\n    }\n\n    var sources = translateSources(input);\n    if (sources === null || Object.keys(sources).length === 0) {\n      return formatFatalError('Failed to process sources.');\n    }\n\n    // Try linking if libraries were supplied\n    var libraries = librariesSupplied(input);\n\n    // Try to wrap around old versions\n    if (compileJSONCallback !== null) {\n      return translateOutput(compileJSONCallback(JSON.stringify({ 'sources': sources }), isOptimizerEnabled(input), readCallback), libraries);\n    }\n\n    if (compileJSONMulti !== null) {\n      return translateOutput(compileJSONMulti(JSON.stringify({ 'sources': sources }), isOptimizerEnabled(input)), libraries);\n    }\n\n    // Try our luck with an ancient compiler\n    if (compileJSON !== null) {\n      if (Object.keys(sources).length !== 1) {\n        return formatFatalError('Multiple sources provided, but compiler only supports single input.');\n      }\n      return translateOutput(compileJSON(sources[Object.keys(sources)[0]], isOptimizerEnabled(input)), libraries);\n    }\n\n    return formatFatalError('Compiler does not support any known interface.');\n  };\n\n  return {\n    version: version,\n    semver: versionToSemver,\n    license: license,\n    lowlevel: {\n      compileSingle: compileJSON,\n      compileMulti: compileJSONMulti,\n      compileCallback: compileJSONCallback,\n      compileStandard: compileStandard\n    },\n    features: {\n      legacySingleInput: compileJSON !== null,\n      multipleInputs: compileJSONMulti !== null || compileStandard !== null,\n      importCallback: compileJSONCallback !== null || compileStandard !== null,\n      nativeStandardJSON: compileStandard !== null\n    },\n    compile: compileStandardWrapper,\n    // Loads the compiler of the given version from the github repository\n    // instead of from the local filesystem.\n    loadRemoteVersion: function (versionString, cb) {\n      var mem = new MemoryStream(null, {readable: false});\n      var url = 'https://solc-bin.ethereum.org/bin/soljson-' + versionString + '.js';\n      https.get(url, function (response) {\n        if (response.statusCode !== 200) {\n          cb(new Error('Error retrieving binary: ' + response.statusMessage));\n        } else {\n          response.pipe(mem);\n          response.on('end', function () {\n            cb(null, setupMethods(requireFromString(mem.toString(), 'soljson-' + versionString + '.js')));\n          });\n        }\n      }).on('error', function (error) {\n        cb(error);\n      });\n    },\n    // Use this if you want to add wrapper functions around the pure module.\n    setupMethods: setupMethods\n  };\n}\n\nmodule.exports = setupMethods;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}