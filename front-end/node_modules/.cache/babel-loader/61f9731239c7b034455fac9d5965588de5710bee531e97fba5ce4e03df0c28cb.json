{"ast":null,"code":"import { allocUnsafe } from '#alloc';\nimport { asUint8Array } from '#util/as-uint8array';\n/**\n * Returns the xor distance between two Uint8Arrays\n */\nexport function xor(a, b) {\n  if (a.length !== b.length) {\n    throw new Error('Inputs should have the same length');\n  }\n  const result = allocUnsafe(a.length);\n  for (let i = 0; i < a.length; i++) {\n    result[i] = a[i] ^ b[i];\n  }\n  return asUint8Array(result);\n}","map":{"version":3,"names":["allocUnsafe","asUint8Array","xor","a","b","length","Error","result","i"],"sources":["C:\\FACULTATE\\Proiect\\node_modules\\@web3-storage\\blob-index\\node_modules\\uint8arrays\\src\\xor.ts"],"sourcesContent":["import { allocUnsafe } from '#alloc'\nimport { asUint8Array } from '#util/as-uint8array'\n\n/**\n * Returns the xor distance between two Uint8Arrays\n */\nexport function xor (a: Uint8Array, b: Uint8Array): Uint8Array {\n  if (a.length !== b.length) {\n    throw new Error('Inputs should have the same length')\n  }\n\n  const result = allocUnsafe(a.length)\n\n  for (let i = 0; i < a.length; i++) {\n    result[i] = a[i] ^ b[i]\n  }\n\n  return asUint8Array(result)\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,QAAQ;AACpC,SAASC,YAAY,QAAQ,qBAAqB;AAElD;;;AAGA,OAAM,SAAUC,GAAGA,CAAEC,CAAa,EAAEC,CAAa;EAC/C,IAAID,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;EACvD;EAEA,MAAMC,MAAM,GAAGP,WAAW,CAACG,CAAC,CAACE,MAAM,CAAC;EAEpC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,CAACE,MAAM,EAAEG,CAAC,EAAE,EAAE;IACjCD,MAAM,CAACC,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC,GAAGJ,CAAC,CAACI,CAAC,CAAC;EACzB;EAEA,OAAOP,YAAY,CAACM,MAAM,CAAC;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}