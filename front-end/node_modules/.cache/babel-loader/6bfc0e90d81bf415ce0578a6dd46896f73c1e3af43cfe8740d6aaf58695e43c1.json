{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@nomicfoundation\\ethereumjs-common\\src\\types.ts"],"sourcesContent":["import type { Chain, ConsensusAlgorithm, ConsensusType, Hardfork } from './enums.js'\nimport type { BigIntLike, ECDSASignature } from '@nomicfoundation/ethereumjs-util'\n\nexport interface ChainName {\n  [chainId: string]: string\n}\nexport interface ChainsConfig {\n  [key: string]: ChainConfig | ChainName\n}\n\nexport type CliqueConfig = {\n  period: number\n  epoch: number\n}\n\nexport type EthashConfig = {}\n\nexport type CasperConfig = {}\n\ntype ConsensusConfig = {\n  type: ConsensusType | string\n  algorithm: ConsensusAlgorithm | string\n  clique?: CliqueConfig\n  ethash?: EthashConfig\n  casper?: CasperConfig\n}\n\nexport interface ChainConfig {\n  name: string\n  chainId: number | bigint\n  networkId: number | bigint\n  defaultHardfork?: string\n  comment?: string\n  url?: string\n  genesis: GenesisBlockConfig\n  hardforks: HardforkTransitionConfig[]\n  bootstrapNodes: BootstrapNodeConfig[]\n  dnsNetworks?: string[]\n  consensus: ConsensusConfig\n}\n\nexport interface GenesisBlockConfig {\n  timestamp?: string\n  gasLimit: number | string\n  difficulty: number | string\n  nonce: string\n  extraData: string\n  baseFeePerGas?: string\n  excessBlobGas?: string\n}\n\nexport interface HardforkTransitionConfig {\n  name: Hardfork | string\n  block: number | null // null is used for hardforks that should not be applied -- since `undefined` isn't a valid value in JSON\n  ttd?: bigint | string\n  timestamp?: number | string\n  forkHash?: string | null\n}\n\nexport interface BootstrapNodeConfig {\n  ip: string\n  port: number | string\n  network?: string\n  chainId?: number\n  id: string\n  location: string\n  comment: string\n}\n\nexport interface CustomCrypto {\n  /**\n   * Interface for providing custom cryptographic primitives in place of `ethereum-cryptography` variants\n   */\n  keccak256?: (msg: Uint8Array) => Uint8Array\n  ecrecover?: (\n    msgHash: Uint8Array,\n    v: bigint,\n    r: Uint8Array,\n    s: Uint8Array,\n    chainId?: bigint\n  ) => Uint8Array\n  sha256?: (msg: Uint8Array) => Uint8Array\n  ecsign?: (msg: Uint8Array, pk: Uint8Array, chainId?: bigint) => ECDSASignature\n}\n\ninterface BaseOpts {\n  /**\n   * String identifier ('byzantium') for hardfork or {@link Hardfork} enum.\n   *\n   * Default: Hardfork.London\n   */\n  hardfork?: string | Hardfork\n  /**\n   * Selected EIPs which can be activated, please use an array for instantiation\n   * (e.g. `eips: [ 1559, 3860 ]`)\n   */\n  eips?: number[]\n  /**\n   * This option can be used to replace the most common crypto primitives\n   * (keccak256 hashing e.g.) within the EthereumJS ecosystem libraries\n   * with alternative implementations (e.g. more performant WASM libraries).\n   *\n   * Note: please be aware that this is adding new dependencies for your\n   * system setup to be used for sensitive/core parts of the functionality\n   * and a choice on the libraries to add should be handled with care\n   * and be made with eventual security implications considered.\n   */\n  customCrypto?: CustomCrypto\n}\n\n/**\n * Options for instantiating a {@link Common} instance.\n */\nexport interface CommonOpts extends BaseOpts {\n  /**\n   * Chain name ('mainnet'), id (1), or {@link Chain} enum,\n   * either from a chain directly supported or a custom chain\n   * passed in via {@link CommonOpts.customChains}.\n   */\n  chain: string | number | Chain | bigint | object\n  /**\n   * Initialize (in addition to the supported chains) with the selected\n   * custom chains. Custom genesis state should be passed to the Blockchain class if used.\n   *\n   * Usage (directly with the respective chain initialization via the {@link CommonOpts.chain} option):\n   *\n   * ```javascript\n   * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\n   * const common = new Common({ chain: 'myCustomChain1', customChains: [ myCustomChain1 ]})\n   * ```\n   */\n  customChains?: ChainConfig[]\n}\n\n/**\n * Options to be used with the {@link Common.custom} static constructor.\n */\nexport interface CustomCommonOpts extends BaseOpts {\n  /**\n   * The name (`mainnet`), id (`1`), or {@link Chain} enum of\n   * a standard chain used to base the custom chain params on.\n   */\n  baseChain?: string | number | Chain | bigint\n}\n\nexport interface GethConfigOpts extends BaseOpts {\n  chain?: string\n  genesisHash?: Uint8Array\n  mergeForkIdPostMerge?: boolean\n}\n\nexport interface HardforkByOpts {\n  blockNumber?: BigIntLike\n  timestamp?: BigIntLike\n  td?: BigIntLike\n}\n\ntype ParamDict = {\n  v: number | bigint | null\n  d: string\n}\n\nexport type EIPOrHFConfig = {\n  comment: string\n  url: string\n  status: string\n  gasConfig?: {\n    [key: string]: ParamDict\n  }\n  gasPrices?: {\n    [key: string]: ParamDict\n  }\n  pow?: {\n    [key: string]: ParamDict\n  }\n  sharding?: {\n    [key: string]: ParamDict\n  }\n  vm?: {\n    [key: string]: ParamDict\n  }\n}\n\nexport type EIPConfig = {\n  minimumHardfork: Hardfork\n  requiredEIPs: number[]\n} & EIPOrHFConfig\n\nexport type HardforkConfig = {\n  name: string\n  eips?: number[]\n  consensus?: ConsensusConfig\n} & EIPOrHFConfig\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}