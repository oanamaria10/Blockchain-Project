{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Reporter = exports.SENTRY_DSN = void 0;\nconst errors_1 = require(\"../core/errors\");\nconst execution_mode_1 = require(\"../core/execution-mode\");\nconst errors_2 = require(\"../core/providers/errors\");\nconst ci_detection_1 = require(\"../util/ci-detection\");\nconst global_dir_1 = require(\"../util/global-dir\");\nconst packageInfo_1 = require(\"../util/packageInfo\");\nconst transport_1 = require(\"./transport\");\nexports.SENTRY_DSN = \"https://38ba58bb85fa409e9bb7f50d2c419bc2@o385026.ingest.sentry.io/5224869\";\n/**\n * This class acts as a global singleton for reporting errors through Sentry.\n */\nclass Reporter {\n  static reportError(error) {\n    const instance = Reporter._getInstance();\n    if (!instance.enabled) {\n      return;\n    }\n    if (!Reporter.shouldReport(error)) {\n      return;\n    }\n    instance.init();\n    const Sentry = require(\"@sentry/node\");\n    Sentry.setExtra(\"verbose\", instance.verbose);\n    Sentry.setExtra(\"configPath\", instance.configPath);\n    Sentry.setExtra(\"nodeVersion\", process.version);\n    const hardhatVersion = (0, packageInfo_1.getHardhatVersion)();\n    Sentry.setExtra(\"hardhatVersion\", hardhatVersion);\n    Sentry.captureException(error);\n    return true;\n  }\n  /**\n   * Enable or disable reporting. When disabled, all calls to `reportError` are\n   * no-ops.\n   */\n  static setEnabled(enabled) {\n    const instance = Reporter._getInstance();\n    instance.enabled = enabled;\n  }\n  /**\n   * Enable or disable verbose output. This is necessary to pass the correct\n   * environment variable to the transport subprocess.\n   */\n  static setVerbose(verbose) {\n    const instance = Reporter._getInstance();\n    instance.verbose = verbose;\n  }\n  /**\n   * The path to the hardhat config file. We use this when files are anonymized,\n   * since the hardhat config is the only file in the user's project that is not\n   * anonymized.\n   */\n  static setConfigPath(configPath) {\n    const instance = Reporter._getInstance();\n    instance.configPath = configPath;\n  }\n  /**\n   * Wait until all Sentry events were sent or until `timeout` milliseconds are\n   * elapsed.\n   *\n   * This needs to be used before calling `process.exit`, otherwise some events\n   * might get lost.\n   */\n  static async close(timeout) {\n    const instance = Reporter._getInstance();\n    if (!instance.enabled || !instance.initialized) {\n      return true;\n    }\n    const Sentry = await Promise.resolve().then(() => __importStar(require(\"@sentry/node\")));\n    return Sentry.close(timeout);\n  }\n  static shouldReport(error) {\n    if (errors_1.HardhatError.isHardhatError(error) && !error.errorDescriptor.shouldBeReported) {\n      return false;\n    }\n    if (errors_1.HardhatPluginError.isHardhatPluginError(error)) {\n      if (errors_1.NomicLabsHardhatPluginError.isNomicLabsHardhatPluginError(error)) {\n        return error.shouldBeReported;\n      }\n      // don't log errors from third-party plugins\n      return false;\n    }\n    // We don't report network related errors\n    if (error instanceof errors_2.ProviderError) {\n      return false;\n    }\n    if (!Reporter._hasTelemetryConsent()) {\n      return false;\n    }\n    return true;\n  }\n  static _getInstance() {\n    if (this._instance === undefined) {\n      this._instance = new Reporter();\n    }\n    return this._instance;\n  }\n  static _hasTelemetryConsent() {\n    const telemetryConsent = (0, global_dir_1.hasConsentedTelemetry)();\n    return telemetryConsent === true;\n  }\n  constructor() {\n    this.initialized = false;\n    this.verbose = false;\n    this.enabled = true;\n    if ((0, ci_detection_1.isRunningOnCiServer)()) {\n      this.enabled = false;\n    }\n    // set HARDHAT_ENABLE_SENTRY=true to enable sentry during development (for local testing)\n    if ((0, execution_mode_1.isLocalDev)() && process.env.HARDHAT_ENABLE_SENTRY === undefined) {\n      this.enabled = false;\n    }\n  }\n  init() {\n    if (this.initialized) {\n      return;\n    }\n    const Sentry = require(\"@sentry/node\");\n    const linkedErrorsIntegration = new Sentry.Integrations.LinkedErrors({\n      key: \"parent\"\n    });\n    Sentry.init({\n      dsn: exports.SENTRY_DSN,\n      transport: (0, transport_1.getSubprocessTransport)(),\n      integrations: () => [linkedErrorsIntegration]\n    });\n    this.initialized = true;\n  }\n}\nexports.Reporter = Reporter;","map":{"version":3,"names":["errors_1","require","execution_mode_1","errors_2","ci_detection_1","global_dir_1","packageInfo_1","transport_1","exports","SENTRY_DSN","Reporter","reportError","error","instance","_getInstance","enabled","shouldReport","init","Sentry","setExtra","verbose","configPath","process","version","hardhatVersion","getHardhatVersion","captureException","setEnabled","setVerbose","setConfigPath","close","timeout","initialized","Promise","resolve","then","__importStar","HardhatError","isHardhatError","errorDescriptor","shouldBeReported","HardhatPluginError","isHardhatPluginError","NomicLabsHardhatPluginError","isNomicLabsHardhatPluginError","ProviderError","_hasTelemetryConsent","_instance","undefined","telemetryConsent","hasConsentedTelemetry","constructor","isRunningOnCiServer","isLocalDev","env","HARDHAT_ENABLE_SENTRY","linkedErrorsIntegration","Integrations","LinkedErrors","key","dsn","transport","getSubprocessTransport","integrations"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\sentry\\reporter.ts"],"sourcesContent":["import {\n  HardhatError,\n  HardhatPluginError,\n  NomicLabsHardhatPluginError,\n} from \"../core/errors\";\nimport { isLocalDev } from \"../core/execution-mode\";\nimport { ProviderError } from \"../core/providers/errors\";\nimport { isRunningOnCiServer } from \"../util/ci-detection\";\nimport { hasConsentedTelemetry } from \"../util/global-dir\";\nimport { getHardhatVersion } from \"../util/packageInfo\";\n\nimport { getSubprocessTransport } from \"./transport\";\n\nexport const SENTRY_DSN =\n  \"https://38ba58bb85fa409e9bb7f50d2c419bc2@o385026.ingest.sentry.io/5224869\";\n\n/**\n * This class acts as a global singleton for reporting errors through Sentry.\n */\nexport class Reporter {\n  public static reportError(error: Error) {\n    const instance = Reporter._getInstance();\n\n    if (!instance.enabled) {\n      return;\n    }\n\n    if (!Reporter.shouldReport(error)) {\n      return;\n    }\n\n    instance.init();\n\n    const Sentry = require(\"@sentry/node\");\n    Sentry.setExtra(\"verbose\", instance.verbose);\n    Sentry.setExtra(\"configPath\", instance.configPath);\n    Sentry.setExtra(\"nodeVersion\", process.version);\n\n    const hardhatVersion = getHardhatVersion();\n    Sentry.setExtra(\"hardhatVersion\", hardhatVersion);\n\n    Sentry.captureException(error);\n\n    return true;\n  }\n\n  /**\n   * Enable or disable reporting. When disabled, all calls to `reportError` are\n   * no-ops.\n   */\n  public static setEnabled(enabled: boolean) {\n    const instance = Reporter._getInstance();\n    instance.enabled = enabled;\n  }\n\n  /**\n   * Enable or disable verbose output. This is necessary to pass the correct\n   * environment variable to the transport subprocess.\n   */\n  public static setVerbose(verbose: boolean) {\n    const instance = Reporter._getInstance();\n    instance.verbose = verbose;\n  }\n\n  /**\n   * The path to the hardhat config file. We use this when files are anonymized,\n   * since the hardhat config is the only file in the user's project that is not\n   * anonymized.\n   */\n  public static setConfigPath(configPath: string) {\n    const instance = Reporter._getInstance();\n    instance.configPath = configPath;\n  }\n\n  /**\n   * Wait until all Sentry events were sent or until `timeout` milliseconds are\n   * elapsed.\n   *\n   * This needs to be used before calling `process.exit`, otherwise some events\n   * might get lost.\n   */\n  public static async close(timeout: number): Promise<boolean> {\n    const instance = Reporter._getInstance();\n    if (!instance.enabled || !instance.initialized) {\n      return true;\n    }\n\n    const Sentry = await import(\"@sentry/node\");\n    return Sentry.close(timeout);\n  }\n\n  public static shouldReport(error: Error): boolean {\n    if (\n      HardhatError.isHardhatError(error) &&\n      !error.errorDescriptor.shouldBeReported\n    ) {\n      return false;\n    }\n\n    if (HardhatPluginError.isHardhatPluginError(error)) {\n      if (NomicLabsHardhatPluginError.isNomicLabsHardhatPluginError(error)) {\n        return error.shouldBeReported;\n      }\n\n      // don't log errors from third-party plugins\n      return false;\n    }\n\n    // We don't report network related errors\n    if (error instanceof ProviderError) {\n      return false;\n    }\n\n    if (!Reporter._hasTelemetryConsent()) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private static _instance: Reporter;\n\n  private static _getInstance(): Reporter {\n    if (this._instance === undefined) {\n      this._instance = new Reporter();\n    }\n\n    return this._instance;\n  }\n\n  private static _hasTelemetryConsent(): boolean {\n    const telemetryConsent = hasConsentedTelemetry();\n\n    return telemetryConsent === true;\n  }\n\n  public enabled: boolean;\n  public initialized = false;\n  public verbose = false;\n  public configPath?: string;\n\n  private constructor() {\n    this.enabled = true;\n    if (isRunningOnCiServer()) {\n      this.enabled = false;\n    }\n\n    // set HARDHAT_ENABLE_SENTRY=true to enable sentry during development (for local testing)\n    if (isLocalDev() && process.env.HARDHAT_ENABLE_SENTRY === undefined) {\n      this.enabled = false;\n    }\n  }\n\n  public init() {\n    if (this.initialized) {\n      return;\n    }\n\n    const Sentry = require(\"@sentry/node\");\n\n    const linkedErrorsIntegration = new Sentry.Integrations.LinkedErrors({\n      key: \"parent\",\n    });\n\n    Sentry.init({\n      dsn: SENTRY_DSN,\n      transport: getSubprocessTransport(),\n      integrations: () => [linkedErrorsIntegration],\n    });\n\n    this.initialized = true;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}