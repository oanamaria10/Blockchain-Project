{"ast":null,"code":"import { capability, ok, Schema } from '@ucanto/validator';\nimport { and, equal, equalWith, SpaceDID } from './utils.js';\n\n/**\n * Capability can only be delegated (but not invoked) allowing audience to\n * be derived any `usage/` prefixed capability for the (memory) space identified\n * by DID in the `with` field.\n */\nexport const usage = capability({\n  can: 'usage/*',\n  /** DID of the (memory) space where usage is derived. */\n  with: SpaceDID,\n  derives: equalWith\n});\n\n/**\n * Capability can be invoked by an agent to retrieve usage data for a space in\n * a given period.\n */\nexport const report = capability({\n  can: 'usage/report',\n  with: SpaceDID,\n  nb: Schema.struct({\n    /** Period to retrieve events between. */\n    period: Schema.struct({\n      /** Time in seconds after Unix epoch (inclusive). */\n      from: Schema.integer().greaterThan(-1),\n      /** Time in seconds after Unix epoch (exclusive). */\n      to: Schema.integer().greaterThan(-1)\n    })\n  }),\n  derives: (child, parent) => {\n    return and(equalWith(child, parent)) || and(equal(child.nb.period?.from, parent.nb.period?.from, 'period.from')) || and(equal(child.nb.period?.to, parent.nb.period?.to, 'period.to')) || ok({});\n  }\n});","map":{"version":3,"names":["capability","ok","Schema","and","equal","equalWith","SpaceDID","usage","can","with","derives","report","nb","struct","period","from","integer","greaterThan","to","child","parent"],"sources":["C:/FACULTATE/Proiect/node_modules/@web3-storage/capabilities/src/usage.js"],"sourcesContent":["import { capability, ok, Schema } from '@ucanto/validator'\nimport { and, equal, equalWith, SpaceDID } from './utils.js'\n\n/**\n * Capability can only be delegated (but not invoked) allowing audience to\n * be derived any `usage/` prefixed capability for the (memory) space identified\n * by DID in the `with` field.\n */\nexport const usage = capability({\n  can: 'usage/*',\n  /** DID of the (memory) space where usage is derived. */\n  with: SpaceDID,\n  derives: equalWith,\n})\n\n/**\n * Capability can be invoked by an agent to retrieve usage data for a space in\n * a given period.\n */\nexport const report = capability({\n  can: 'usage/report',\n  with: SpaceDID,\n  nb: Schema.struct({\n    /** Period to retrieve events between. */\n    period: Schema.struct({\n      /** Time in seconds after Unix epoch (inclusive). */\n      from: Schema.integer().greaterThan(-1),\n      /** Time in seconds after Unix epoch (exclusive). */\n      to: Schema.integer().greaterThan(-1),\n    }),\n  }),\n  derives: (child, parent) => {\n    return (\n      and(equalWith(child, parent)) ||\n      and(\n        equal(child.nb.period?.from, parent.nb.period?.from, 'period.from')\n      ) ||\n      and(equal(child.nb.period?.to, parent.nb.period?.to, 'period.to')) ||\n      ok({})\n    )\n  },\n})\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,EAAE,EAAEC,MAAM,QAAQ,mBAAmB;AAC1D,SAASC,GAAG,EAAEC,KAAK,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,YAAY;;AAE5D;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAGP,UAAU,CAAC;EAC9BQ,GAAG,EAAE,SAAS;EACd;EACAC,IAAI,EAAEH,QAAQ;EACdI,OAAO,EAAEL;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMM,MAAM,GAAGX,UAAU,CAAC;EAC/BQ,GAAG,EAAE,cAAc;EACnBC,IAAI,EAAEH,QAAQ;EACdM,EAAE,EAAEV,MAAM,CAACW,MAAM,CAAC;IAChB;IACAC,MAAM,EAAEZ,MAAM,CAACW,MAAM,CAAC;MACpB;MACAE,IAAI,EAAEb,MAAM,CAACc,OAAO,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;MACtC;MACAC,EAAE,EAAEhB,MAAM,CAACc,OAAO,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;IACrC,CAAC;EACH,CAAC,CAAC;EACFP,OAAO,EAAEA,CAACS,KAAK,EAAEC,MAAM,KAAK;IAC1B,OACEjB,GAAG,CAACE,SAAS,CAACc,KAAK,EAAEC,MAAM,CAAC,CAAC,IAC7BjB,GAAG,CACDC,KAAK,CAACe,KAAK,CAACP,EAAE,CAACE,MAAM,EAAEC,IAAI,EAAEK,MAAM,CAACR,EAAE,CAACE,MAAM,EAAEC,IAAI,EAAE,aAAa,CACpE,CAAC,IACDZ,GAAG,CAACC,KAAK,CAACe,KAAK,CAACP,EAAE,CAACE,MAAM,EAAEI,EAAE,EAAEE,MAAM,CAACR,EAAE,CAACE,MAAM,EAAEI,EAAE,EAAE,WAAW,CAAC,CAAC,IAClEjB,EAAE,CAAC,CAAC,CAAC,CAAC;EAEV;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}