{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventEmitterWrapper = void 0;\n// IMPORTANT NOTE: This class is type-checked against the currently installed\n// version of @types/node (10.x atm), and manually checked to be compatible with\n// Node.js up to 14.3.0 (the latest release atm). There's a test that ensures\n// that we are exporting all the EventEmitter's members, but it can't check the\n// actual types of those members if they are functions.\n//\n// If a new version of Node.js adds new members to EventEmitter or overloads\n// existing ones this class has to be updated, even if it still type-checks.\n// This is a serious limitation ot DefinitelyTyped when the original, un-typed,\n// library can change because of the user having a different version.\nclass EventEmitterWrapper {\n  constructor(_wrapped) {\n    this._wrapped = _wrapped;\n  }\n  addListener(event, listener) {\n    this._wrapped.addListener(event, listener);\n    return this;\n  }\n  on(event, listener) {\n    this._wrapped.on(event, listener);\n    return this;\n  }\n  once(event, listener) {\n    this._wrapped.once(event, listener);\n    return this;\n  }\n  prependListener(event, listener) {\n    this._wrapped.prependListener(event, listener);\n    return this;\n  }\n  prependOnceListener(event, listener) {\n    this._wrapped.prependOnceListener(event, listener);\n    return this;\n  }\n  removeListener(event, listener) {\n    this._wrapped.removeListener(event, listener);\n    return this;\n  }\n  off(event, listener) {\n    this._wrapped.off(event, listener);\n    return this;\n  }\n  removeAllListeners(event) {\n    this._wrapped.removeAllListeners(event);\n    return this;\n  }\n  setMaxListeners(n) {\n    this._wrapped.setMaxListeners(n);\n    return this;\n  }\n  getMaxListeners() {\n    return this._wrapped.getMaxListeners();\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  listeners(event) {\n    return this._wrapped.listeners(event);\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  rawListeners(event) {\n    return this._wrapped.rawListeners(event);\n  }\n  emit(event, ...args) {\n    return this._wrapped.emit(event, ...args);\n  }\n  eventNames() {\n    return this._wrapped.eventNames();\n  }\n  listenerCount(type) {\n    return this._wrapped.listenerCount(type);\n  }\n}\nexports.EventEmitterWrapper = EventEmitterWrapper;","map":{"version":3,"names":["EventEmitterWrapper","constructor","_wrapped","addListener","event","listener","on","once","prependListener","prependOnceListener","removeListener","off","removeAllListeners","setMaxListeners","n","getMaxListeners","listeners","rawListeners","emit","args","eventNames","listenerCount","type","exports"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\util\\event-emitter.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\n\n// IMPORTANT NOTE: This class is type-checked against the currently installed\n// version of @types/node (10.x atm), and manually checked to be compatible with\n// Node.js up to 14.3.0 (the latest release atm). There's a test that ensures\n// that we are exporting all the EventEmitter's members, but it can't check the\n// actual types of those members if they are functions.\n//\n// If a new version of Node.js adds new members to EventEmitter or overloads\n// existing ones this class has to be updated, even if it still type-checks.\n// This is a serious limitation ot DefinitelyTyped when the original, un-typed,\n// library can change because of the user having a different version.\nexport class EventEmitterWrapper implements EventEmitter {\n  constructor(private readonly _wrapped: EventEmitter) {}\n\n  public addListener(\n    event: string | symbol,\n    listener: (...args: any[]) => void\n  ): this {\n    this._wrapped.addListener(event, listener);\n    return this;\n  }\n\n  public on(event: string | symbol, listener: (...args: any[]) => void): this {\n    this._wrapped.on(event, listener);\n    return this;\n  }\n\n  public once(\n    event: string | symbol,\n    listener: (...args: any[]) => void\n  ): this {\n    this._wrapped.once(event, listener);\n    return this;\n  }\n\n  public prependListener(\n    event: string | symbol,\n    listener: (...args: any[]) => void\n  ): this {\n    this._wrapped.prependListener(event, listener);\n    return this;\n  }\n\n  public prependOnceListener(\n    event: string | symbol,\n    listener: (...args: any[]) => void\n  ): this {\n    this._wrapped.prependOnceListener(event, listener);\n    return this;\n  }\n\n  public removeListener(\n    event: string | symbol,\n    listener: (...args: any[]) => void\n  ): this {\n    this._wrapped.removeListener(event, listener);\n    return this;\n  }\n\n  public off(event: string | symbol, listener: (...args: any[]) => void): this {\n    this._wrapped.off(event, listener);\n    return this;\n  }\n\n  public removeAllListeners(event?: string | symbol | undefined): this {\n    this._wrapped.removeAllListeners(event);\n    return this;\n  }\n\n  public setMaxListeners(n: number): this {\n    this._wrapped.setMaxListeners(n);\n    return this;\n  }\n\n  public getMaxListeners(): number {\n    return this._wrapped.getMaxListeners();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  public listeners(event: string | symbol): Function[] {\n    return this._wrapped.listeners(event);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  public rawListeners(event: string | symbol): Function[] {\n    return this._wrapped.rawListeners(event);\n  }\n\n  public emit(event: string | symbol, ...args: any[]): boolean {\n    return this._wrapped.emit(event, ...args);\n  }\n\n  public eventNames(): Array<string | symbol> {\n    return this._wrapped.eventNames();\n  }\n\n  public listenerCount(type: string | symbol): number {\n    return this._wrapped.listenerCount(type);\n  }\n}\n"],"mappings":";;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAaA,mBAAmB;EAC9BC,YAA6BC,QAAsB;IAAtB,KAAAA,QAAQ,GAARA,QAAQ;EAAiB;EAE/CC,WAAWA,CAChBC,KAAsB,EACtBC,QAAkC;IAElC,IAAI,CAACH,QAAQ,CAACC,WAAW,CAACC,KAAK,EAAEC,QAAQ,CAAC;IAC1C,OAAO,IAAI;EACb;EAEOC,EAAEA,CAACF,KAAsB,EAAEC,QAAkC;IAClE,IAAI,CAACH,QAAQ,CAACI,EAAE,CAACF,KAAK,EAAEC,QAAQ,CAAC;IACjC,OAAO,IAAI;EACb;EAEOE,IAAIA,CACTH,KAAsB,EACtBC,QAAkC;IAElC,IAAI,CAACH,QAAQ,CAACK,IAAI,CAACH,KAAK,EAAEC,QAAQ,CAAC;IACnC,OAAO,IAAI;EACb;EAEOG,eAAeA,CACpBJ,KAAsB,EACtBC,QAAkC;IAElC,IAAI,CAACH,QAAQ,CAACM,eAAe,CAACJ,KAAK,EAAEC,QAAQ,CAAC;IAC9C,OAAO,IAAI;EACb;EAEOI,mBAAmBA,CACxBL,KAAsB,EACtBC,QAAkC;IAElC,IAAI,CAACH,QAAQ,CAACO,mBAAmB,CAACL,KAAK,EAAEC,QAAQ,CAAC;IAClD,OAAO,IAAI;EACb;EAEOK,cAAcA,CACnBN,KAAsB,EACtBC,QAAkC;IAElC,IAAI,CAACH,QAAQ,CAACQ,cAAc,CAACN,KAAK,EAAEC,QAAQ,CAAC;IAC7C,OAAO,IAAI;EACb;EAEOM,GAAGA,CAACP,KAAsB,EAAEC,QAAkC;IACnE,IAAI,CAACH,QAAQ,CAACS,GAAG,CAACP,KAAK,EAAEC,QAAQ,CAAC;IAClC,OAAO,IAAI;EACb;EAEOO,kBAAkBA,CAACR,KAAmC;IAC3D,IAAI,CAACF,QAAQ,CAACU,kBAAkB,CAACR,KAAK,CAAC;IACvC,OAAO,IAAI;EACb;EAEOS,eAAeA,CAACC,CAAS;IAC9B,IAAI,CAACZ,QAAQ,CAACW,eAAe,CAACC,CAAC,CAAC;IAChC,OAAO,IAAI;EACb;EAEOC,eAAeA,CAAA;IACpB,OAAO,IAAI,CAACb,QAAQ,CAACa,eAAe,EAAE;EACxC;EAEA;EACOC,SAASA,CAACZ,KAAsB;IACrC,OAAO,IAAI,CAACF,QAAQ,CAACc,SAAS,CAACZ,KAAK,CAAC;EACvC;EAEA;EACOa,YAAYA,CAACb,KAAsB;IACxC,OAAO,IAAI,CAACF,QAAQ,CAACe,YAAY,CAACb,KAAK,CAAC;EAC1C;EAEOc,IAAIA,CAACd,KAAsB,EAAE,GAAGe,IAAW;IAChD,OAAO,IAAI,CAACjB,QAAQ,CAACgB,IAAI,CAACd,KAAK,EAAE,GAAGe,IAAI,CAAC;EAC3C;EAEOC,UAAUA,CAAA;IACf,OAAO,IAAI,CAAClB,QAAQ,CAACkB,UAAU,EAAE;EACnC;EAEOC,aAAaA,CAACC,IAAqB;IACxC,OAAO,IAAI,CAACpB,QAAQ,CAACmB,aAAa,CAACC,IAAI,CAAC;EAC1C;;AAvFFC,OAAA,CAAAvB,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}