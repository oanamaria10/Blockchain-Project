{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst config_1 = require(\"hardhat/config\");\nconst plugins_1 = require(\"hardhat/plugins\");\nconst helpers_1 = require(\"./helpers\");\nrequire(\"./type-extensions\");\nconst registerCustomInspection = BigNumber => {\n  const inspectCustomSymbol = Symbol.for(\"nodejs.util.inspect.custom\");\n  BigNumber.prototype[inspectCustomSymbol] = function () {\n    return `BigNumber { value: \"${this.toString()}\" }`;\n  };\n};\n(0, config_1.extendEnvironment)(hre => {\n  hre.ethers = (0, plugins_1.lazyObject)(() => {\n    const {\n      createProviderProxy\n    } = require(\"./provider-proxy\");\n    const {\n      ethers\n    } = require(\"ethers\");\n    registerCustomInspection(ethers.BigNumber);\n    const providerProxy = createProviderProxy(hre.network.provider);\n    return {\n      ...ethers,\n      provider: providerProxy,\n      getSigner: address => (0, helpers_1.getSigner)(hre, address),\n      getSigners: () => (0, helpers_1.getSigners)(hre),\n      getImpersonatedSigner: address => (0, helpers_1.getImpersonatedSigner)(hre, address),\n      // We cast to any here as we hit a limitation of Function#bind and\n      // overloads. See: https://github.com/microsoft/TypeScript/issues/28582\n      getContractFactory: helpers_1.getContractFactory.bind(null, hre),\n      getContractFactoryFromArtifact: helpers_1.getContractFactoryFromArtifact.bind(null, hre),\n      getContractAt: helpers_1.getContractAt.bind(null, hre),\n      getContractAtFromArtifact: helpers_1.getContractAtFromArtifact.bind(null, hre),\n      deployContract: helpers_1.deployContract.bind(null, hre)\n    };\n  });\n});","map":{"version":3,"names":["config_1","require","plugins_1","helpers_1","registerCustomInspection","BigNumber","inspectCustomSymbol","Symbol","for","prototype","toString","extendEnvironment","hre","ethers","lazyObject","createProviderProxy","providerProxy","network","provider","getSigner","address","getSigners","getImpersonatedSigner","getContractFactory","bind","getContractFactoryFromArtifact","getContractAt","getContractAtFromArtifact","deployContract"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@nomiclabs\\hardhat-ethers\\src\\internal\\index.ts"],"sourcesContent":["import type EthersT from \"ethers\";\nimport type * as ProviderProxyT from \"./provider-proxy\";\n\nimport { extendEnvironment } from \"hardhat/config\";\nimport { lazyObject } from \"hardhat/plugins\";\n\nimport {\n  getContractAt,\n  getContractAtFromArtifact,\n  getContractFactory,\n  getContractFactoryFromArtifact,\n  getImpersonatedSigner,\n  getSigner,\n  getSigners,\n  deployContract,\n} from \"./helpers\";\nimport \"./type-extensions\";\n\nconst registerCustomInspection = (BigNumber: any) => {\n  const inspectCustomSymbol = Symbol.for(\"nodejs.util.inspect.custom\");\n\n  BigNumber.prototype[inspectCustomSymbol] = function () {\n    return `BigNumber { value: \"${this.toString()}\" }`;\n  };\n};\n\nextendEnvironment((hre) => {\n  hre.ethers = lazyObject(() => {\n    const { createProviderProxy } =\n      require(\"./provider-proxy\") as typeof ProviderProxyT;\n\n    const { ethers } = require(\"ethers\") as typeof EthersT;\n\n    registerCustomInspection(ethers.BigNumber);\n\n    const providerProxy = createProviderProxy(hre.network.provider);\n\n    return {\n      ...ethers,\n\n      provider: providerProxy,\n\n      getSigner: (address: string) => getSigner(hre, address),\n      getSigners: () => getSigners(hre),\n      getImpersonatedSigner: (address: string) =>\n        getImpersonatedSigner(hre, address),\n      // We cast to any here as we hit a limitation of Function#bind and\n      // overloads. See: https://github.com/microsoft/TypeScript/issues/28582\n      getContractFactory: getContractFactory.bind(null, hre) as any,\n      getContractFactoryFromArtifact: getContractFactoryFromArtifact.bind(\n        null,\n        hre\n      ),\n      getContractAt: getContractAt.bind(null, hre),\n      getContractAtFromArtifact: getContractAtFromArtifact.bind(null, hre),\n      deployContract: deployContract.bind(null, hre) as any,\n    };\n  });\n});\n"],"mappings":";;;;;AAGA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AAEA,MAAAE,SAAA,GAAAF,OAAA;AAUAA,OAAA;AAEA,MAAMG,wBAAwB,GAAIC,SAAc,IAAI;EAClD,MAAMC,mBAAmB,GAAGC,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC;EAEpEH,SAAS,CAACI,SAAS,CAACH,mBAAmB,CAAC,GAAG;IACzC,OAAO,uBAAuB,IAAI,CAACI,QAAQ,EAAE,KAAK;EACpD,CAAC;AACH,CAAC;AAED,IAAAV,QAAA,CAAAW,iBAAiB,EAAEC,GAAG,IAAI;EACxBA,GAAG,CAACC,MAAM,GAAG,IAAAX,SAAA,CAAAY,UAAU,EAAC,MAAK;IAC3B,MAAM;MAAEC;IAAmB,CAAE,GAC3Bd,OAAO,CAAC,kBAAkB,CAA0B;IAEtD,MAAM;MAAEY;IAAM,CAAE,GAAGZ,OAAO,CAAC,QAAQ,CAAmB;IAEtDG,wBAAwB,CAACS,MAAM,CAACR,SAAS,CAAC;IAE1C,MAAMW,aAAa,GAAGD,mBAAmB,CAACH,GAAG,CAACK,OAAO,CAACC,QAAQ,CAAC;IAE/D,OAAO;MACL,GAAGL,MAAM;MAETK,QAAQ,EAAEF,aAAa;MAEvBG,SAAS,EAAGC,OAAe,IAAK,IAAAjB,SAAA,CAAAgB,SAAS,EAACP,GAAG,EAAEQ,OAAO,CAAC;MACvDC,UAAU,EAAEA,CAAA,KAAM,IAAAlB,SAAA,CAAAkB,UAAU,EAACT,GAAG,CAAC;MACjCU,qBAAqB,EAAGF,OAAe,IACrC,IAAAjB,SAAA,CAAAmB,qBAAqB,EAACV,GAAG,EAAEQ,OAAO,CAAC;MACrC;MACA;MACAG,kBAAkB,EAAEpB,SAAA,CAAAoB,kBAAkB,CAACC,IAAI,CAAC,IAAI,EAAEZ,GAAG,CAAQ;MAC7Da,8BAA8B,EAAEtB,SAAA,CAAAsB,8BAA8B,CAACD,IAAI,CACjE,IAAI,EACJZ,GAAG,CACJ;MACDc,aAAa,EAAEvB,SAAA,CAAAuB,aAAa,CAACF,IAAI,CAAC,IAAI,EAAEZ,GAAG,CAAC;MAC5Ce,yBAAyB,EAAExB,SAAA,CAAAwB,yBAAyB,CAACH,IAAI,CAAC,IAAI,EAAEZ,GAAG,CAAC;MACpEgB,cAAc,EAAEzB,SAAA,CAAAyB,cAAc,CAACJ,IAAI,CAAC,IAAI,EAAEZ,GAAG;KAC9C;EACH,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}