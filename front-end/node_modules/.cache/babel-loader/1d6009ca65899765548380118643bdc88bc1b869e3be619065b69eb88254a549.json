{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar cid = require('multiformats/cid');\nvar encoder = require('./encoder.js');\nvar iteratorChannel = require('./iterator-channel.js');\nvar decoder = require('./decoder.js');\nclass CarWriter {\n  constructor(roots, encoder) {\n    this._encoder = encoder;\n    this._mutex = encoder.setRoots(roots);\n    this._ended = false;\n  }\n  async put(block) {\n    if (!(block.bytes instanceof Uint8Array) || !block.cid) {\n      throw new TypeError('Can only write {cid, bytes} objects');\n    }\n    if (this._ended) {\n      throw new Error('Already closed');\n    }\n    const cid$1 = cid.CID.asCID(block.cid);\n    if (!cid$1) {\n      throw new TypeError('Can only write {cid, bytes} objects');\n    }\n    this._mutex = this._mutex.then(() => this._encoder.writeBlock({\n      cid: cid$1,\n      bytes: block.bytes\n    }));\n    return this._mutex;\n  }\n  async close() {\n    if (this._ended) {\n      throw new Error('Already closed');\n    }\n    await this._mutex;\n    this._ended = true;\n    return this._encoder.close();\n  }\n  static create(roots) {\n    roots = toRoots(roots);\n    const {\n      encoder,\n      iterator\n    } = encodeWriter();\n    const writer = new CarWriter(roots, encoder);\n    const out = new CarWriterOut(iterator);\n    return {\n      writer,\n      out\n    };\n  }\n  static createAppender() {\n    const {\n      encoder,\n      iterator\n    } = encodeWriter();\n    encoder.setRoots = () => Promise.resolve();\n    const writer = new CarWriter([], encoder);\n    const out = new CarWriterOut(iterator);\n    return {\n      writer,\n      out\n    };\n  }\n  static async updateRootsInBytes(bytes, roots) {\n    const reader = decoder.bytesReader(bytes);\n    await decoder.readHeader(reader);\n    const newHeader = encoder.createHeader(roots);\n    if (reader.pos !== newHeader.length) {\n      throw new Error(`updateRoots() can only overwrite a header of the same length (old header is ${reader.pos} bytes, new header is ${newHeader.length} bytes)`);\n    }\n    bytes.set(newHeader, 0);\n    return bytes;\n  }\n}\nclass CarWriterOut {\n  constructor(iterator) {\n    this._iterator = iterator;\n  }\n  [Symbol.asyncIterator]() {\n    if (this._iterating) {\n      throw new Error('Multiple iterator not supported');\n    }\n    this._iterating = true;\n    return this._iterator;\n  }\n}\nfunction encodeWriter() {\n  const iw = iteratorChannel.create();\n  const {\n    writer,\n    iterator\n  } = iw;\n  const encoder$1 = encoder.createEncoder(writer);\n  return {\n    encoder: encoder$1,\n    iterator\n  };\n}\nfunction toRoots(roots) {\n  if (roots === undefined) {\n    return [];\n  }\n  if (!Array.isArray(roots)) {\n    const cid$1 = cid.CID.asCID(roots);\n    if (!cid$1) {\n      throw new TypeError('roots must be a single CID or an array of CIDs');\n    }\n    return [cid$1];\n  }\n  const _roots = [];\n  for (const root of roots) {\n    const _root = cid.CID.asCID(root);\n    if (!_root) {\n      throw new TypeError('roots must be a single CID or an array of CIDs');\n    }\n    _roots.push(_root);\n  }\n  return _roots;\n}\nconst __browser = true;\nexports.CarWriter = CarWriter;\nexports.CarWriterOut = CarWriterOut;\nexports.__browser = __browser;","map":{"version":3,"names":["Object","defineProperty","exports","value","cid","require","encoder","iteratorChannel","decoder","CarWriter","constructor","roots","_encoder","_mutex","setRoots","_ended","put","block","bytes","Uint8Array","TypeError","Error","cid$1","CID","asCID","then","writeBlock","close","create","toRoots","iterator","encodeWriter","writer","out","CarWriterOut","createAppender","Promise","resolve","updateRootsInBytes","reader","bytesReader","readHeader","newHeader","createHeader","pos","length","set","_iterator","Symbol","asyncIterator","_iterating","iw","encoder$1","createEncoder","undefined","Array","isArray","_roots","root","_root","push","__browser"],"sources":["C:/FACULTATE/Proiect/node_modules/@ipld/car/cjs/lib/writer-browser.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar encoder = require('./encoder.js');\nvar iteratorChannel = require('./iterator-channel.js');\nvar decoder = require('./decoder.js');\n\nclass CarWriter {\n  constructor(roots, encoder) {\n    this._encoder = encoder;\n    this._mutex = encoder.setRoots(roots);\n    this._ended = false;\n  }\n  async put(block) {\n    if (!(block.bytes instanceof Uint8Array) || !block.cid) {\n      throw new TypeError('Can only write {cid, bytes} objects');\n    }\n    if (this._ended) {\n      throw new Error('Already closed');\n    }\n    const cid$1 = cid.CID.asCID(block.cid);\n    if (!cid$1) {\n      throw new TypeError('Can only write {cid, bytes} objects');\n    }\n    this._mutex = this._mutex.then(() => this._encoder.writeBlock({\n      cid: cid$1,\n      bytes: block.bytes\n    }));\n    return this._mutex;\n  }\n  async close() {\n    if (this._ended) {\n      throw new Error('Already closed');\n    }\n    await this._mutex;\n    this._ended = true;\n    return this._encoder.close();\n  }\n  static create(roots) {\n    roots = toRoots(roots);\n    const {encoder, iterator} = encodeWriter();\n    const writer = new CarWriter(roots, encoder);\n    const out = new CarWriterOut(iterator);\n    return {\n      writer,\n      out\n    };\n  }\n  static createAppender() {\n    const {encoder, iterator} = encodeWriter();\n    encoder.setRoots = () => Promise.resolve();\n    const writer = new CarWriter([], encoder);\n    const out = new CarWriterOut(iterator);\n    return {\n      writer,\n      out\n    };\n  }\n  static async updateRootsInBytes(bytes, roots) {\n    const reader = decoder.bytesReader(bytes);\n    await decoder.readHeader(reader);\n    const newHeader = encoder.createHeader(roots);\n    if (reader.pos !== newHeader.length) {\n      throw new Error(`updateRoots() can only overwrite a header of the same length (old header is ${ reader.pos } bytes, new header is ${ newHeader.length } bytes)`);\n    }\n    bytes.set(newHeader, 0);\n    return bytes;\n  }\n}\nclass CarWriterOut {\n  constructor(iterator) {\n    this._iterator = iterator;\n  }\n  [Symbol.asyncIterator]() {\n    if (this._iterating) {\n      throw new Error('Multiple iterator not supported');\n    }\n    this._iterating = true;\n    return this._iterator;\n  }\n}\nfunction encodeWriter() {\n  const iw = iteratorChannel.create();\n  const {writer, iterator} = iw;\n  const encoder$1 = encoder.createEncoder(writer);\n  return {\n    encoder: encoder$1,\n    iterator\n  };\n}\nfunction toRoots(roots) {\n  if (roots === undefined) {\n    return [];\n  }\n  if (!Array.isArray(roots)) {\n    const cid$1 = cid.CID.asCID(roots);\n    if (!cid$1) {\n      throw new TypeError('roots must be a single CID or an array of CIDs');\n    }\n    return [cid$1];\n  }\n  const _roots = [];\n  for (const root of roots) {\n    const _root = cid.CID.asCID(root);\n    if (!_root) {\n      throw new TypeError('roots must be a single CID or an array of CIDs');\n    }\n    _roots.push(_root);\n  }\n  return _roots;\n}\nconst __browser = true;\n\nexports.CarWriter = CarWriter;\nexports.CarWriterOut = CarWriterOut;\nexports.__browser = __browser;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}