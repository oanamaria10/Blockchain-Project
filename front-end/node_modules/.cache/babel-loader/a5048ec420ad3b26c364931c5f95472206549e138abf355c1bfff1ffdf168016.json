{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEnvHardhatArguments = exports.getEnvVariablesMap = exports.paramNameToEnvVariable = void 0;\nconst ArgumentsParser_1 = require(\"../../cli/ArgumentsParser\");\nconst unsafe_1 = require(\"../../util/unsafe\");\nconst errors_1 = require(\"../errors\");\nconst errors_list_1 = require(\"../errors-list\");\nconst HARDHAT_ENV_ARGUMENT_PREFIX = \"HARDHAT_\";\nfunction paramNameToEnvVariable(paramName) {\n  // We create it starting from the result of ArgumentsParser.paramNameToCLA\n  // so it's easier to explain and understand their equivalences.\n  return ArgumentsParser_1.ArgumentsParser.paramNameToCLA(paramName).replace(ArgumentsParser_1.ArgumentsParser.PARAM_PREFIX, HARDHAT_ENV_ARGUMENT_PREFIX).replace(/-/g, \"_\").toUpperCase();\n}\nexports.paramNameToEnvVariable = paramNameToEnvVariable;\nfunction getEnvVariablesMap(hardhatArguments) {\n  const values = {};\n  for (const [name, value] of Object.entries(hardhatArguments)) {\n    if (value === undefined) {\n      continue;\n    }\n    values[paramNameToEnvVariable(name)] = value.toString();\n  }\n  return values;\n}\nexports.getEnvVariablesMap = getEnvVariablesMap;\nfunction getEnvHardhatArguments(paramDefinitions, envVariables) {\n  const envArgs = {};\n  for (const paramName of (0, unsafe_1.unsafeObjectKeys)(paramDefinitions)) {\n    const definition = paramDefinitions[paramName];\n    const envVarName = paramNameToEnvVariable(paramName);\n    const rawValue = envVariables[envVarName];\n    if (rawValue !== undefined) {\n      try {\n        envArgs[paramName] = definition.type.parse(paramName, rawValue);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_ENV_VAR_VALUE, {\n            varName: envVarName,\n            value: rawValue\n          }, error);\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw error;\n      }\n    } else {\n      envArgs[paramName] = definition.defaultValue;\n    }\n  }\n  // TODO: This is a little type-unsafe, but we know we have all the needed arguments\n  return envArgs;\n}\nexports.getEnvHardhatArguments = getEnvHardhatArguments;","map":{"version":3,"names":["ArgumentsParser_1","require","unsafe_1","errors_1","errors_list_1","HARDHAT_ENV_ARGUMENT_PREFIX","paramNameToEnvVariable","paramName","ArgumentsParser","paramNameToCLA","replace","PARAM_PREFIX","toUpperCase","exports","getEnvVariablesMap","hardhatArguments","values","name","value","Object","entries","undefined","toString","getEnvHardhatArguments","paramDefinitions","envVariables","envArgs","unsafeObjectKeys","definition","envVarName","rawValue","type","parse","error","Error","HardhatError","ERRORS","ARGUMENTS","INVALID_ENV_VAR_VALUE","varName","defaultValue"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\core\\params\\env-variables.ts"],"sourcesContent":["import ProcessEnv = NodeJS.ProcessEnv;\n\nimport { HardhatArguments, HardhatParamDefinitions } from \"../../../types\";\nimport { ArgumentsParser } from \"../../cli/ArgumentsParser\";\nimport { unsafeObjectKeys } from \"../../util/unsafe\";\nimport { HardhatError } from \"../errors\";\nimport { ERRORS } from \"../errors-list\";\n\nconst HARDHAT_ENV_ARGUMENT_PREFIX = \"HARDHAT_\";\n\nexport function paramNameToEnvVariable(paramName: string): string {\n  // We create it starting from the result of ArgumentsParser.paramNameToCLA\n  // so it's easier to explain and understand their equivalences.\n  return ArgumentsParser.paramNameToCLA(paramName)\n    .replace(ArgumentsParser.PARAM_PREFIX, HARDHAT_ENV_ARGUMENT_PREFIX)\n    .replace(/-/g, \"_\")\n    .toUpperCase();\n}\n\nexport function getEnvVariablesMap(hardhatArguments: HardhatArguments): {\n  [envVar: string]: string;\n} {\n  const values: { [envVar: string]: string } = {};\n\n  for (const [name, value] of Object.entries(hardhatArguments)) {\n    if (value === undefined) {\n      continue;\n    }\n\n    values[paramNameToEnvVariable(name)] = value.toString();\n  }\n\n  return values;\n}\n\nexport function getEnvHardhatArguments(\n  paramDefinitions: HardhatParamDefinitions,\n  envVariables: ProcessEnv\n): HardhatArguments {\n  const envArgs: any = {};\n\n  for (const paramName of unsafeObjectKeys(paramDefinitions)) {\n    const definition = paramDefinitions[paramName];\n    const envVarName = paramNameToEnvVariable(paramName);\n    const rawValue = envVariables[envVarName];\n\n    if (rawValue !== undefined) {\n      try {\n        envArgs[paramName] = definition.type.parse(paramName, rawValue);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new HardhatError(\n            ERRORS.ARGUMENTS.INVALID_ENV_VAR_VALUE,\n            {\n              varName: envVarName,\n              value: rawValue,\n            },\n            error\n          );\n        }\n\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw error;\n      }\n    } else {\n      envArgs[paramName] = definition.defaultValue;\n    }\n  }\n\n  // TODO: This is a little type-unsafe, but we know we have all the needed arguments\n  return envArgs as HardhatArguments;\n}\n"],"mappings":";;;;;;AAGA,MAAAA,iBAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AACA,MAAAE,QAAA,GAAAF,OAAA;AACA,MAAAG,aAAA,GAAAH,OAAA;AAEA,MAAMI,2BAA2B,GAAG,UAAU;AAE9C,SAAgBC,sBAAsBA,CAACC,SAAiB;EACtD;EACA;EACA,OAAOP,iBAAA,CAAAQ,eAAe,CAACC,cAAc,CAACF,SAAS,CAAC,CAC7CG,OAAO,CAACV,iBAAA,CAAAQ,eAAe,CAACG,YAAY,EAAEN,2BAA2B,CAAC,CAClEK,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAClBE,WAAW,EAAE;AAClB;AAPAC,OAAA,CAAAP,sBAAA,GAAAA,sBAAA;AASA,SAAgBQ,kBAAkBA,CAACC,gBAAkC;EAGnE,MAAMC,MAAM,GAAiC,EAAE;EAE/C,KAAK,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,gBAAgB,CAAC,EAAE;IAC5D,IAAIG,KAAK,KAAKG,SAAS,EAAE;MACvB;;IAGFL,MAAM,CAACV,sBAAsB,CAACW,IAAI,CAAC,CAAC,GAAGC,KAAK,CAACI,QAAQ,EAAE;;EAGzD,OAAON,MAAM;AACf;AAdAH,OAAA,CAAAC,kBAAA,GAAAA,kBAAA;AAgBA,SAAgBS,sBAAsBA,CACpCC,gBAAyC,EACzCC,YAAwB;EAExB,MAAMC,OAAO,GAAQ,EAAE;EAEvB,KAAK,MAAMnB,SAAS,IAAI,IAAAL,QAAA,CAAAyB,gBAAgB,EAACH,gBAAgB,CAAC,EAAE;IAC1D,MAAMI,UAAU,GAAGJ,gBAAgB,CAACjB,SAAS,CAAC;IAC9C,MAAMsB,UAAU,GAAGvB,sBAAsB,CAACC,SAAS,CAAC;IACpD,MAAMuB,QAAQ,GAAGL,YAAY,CAACI,UAAU,CAAC;IAEzC,IAAIC,QAAQ,KAAKT,SAAS,EAAE;MAC1B,IAAI;QACFK,OAAO,CAACnB,SAAS,CAAC,GAAGqB,UAAU,CAACG,IAAI,CAACC,KAAK,CAACzB,SAAS,EAAEuB,QAAQ,CAAC;OAChE,CAAC,OAAOG,KAAK,EAAE;QACd,IAAIA,KAAK,YAAYC,KAAK,EAAE;UAC1B,MAAM,IAAI/B,QAAA,CAAAgC,YAAY,CACpB/B,aAAA,CAAAgC,MAAM,CAACC,SAAS,CAACC,qBAAqB,EACtC;YACEC,OAAO,EAAEV,UAAU;YACnBX,KAAK,EAAEY;WACR,EACDG,KAAK,CACN;;QAGH;QACA,MAAMA,KAAK;;KAEd,MAAM;MACLP,OAAO,CAACnB,SAAS,CAAC,GAAGqB,UAAU,CAACY,YAAY;;;EAIhD;EACA,OAAOd,OAA2B;AACpC;AApCAb,OAAA,CAAAU,sBAAA,GAAAA,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}