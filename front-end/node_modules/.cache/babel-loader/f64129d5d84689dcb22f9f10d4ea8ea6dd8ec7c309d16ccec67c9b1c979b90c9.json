{"ast":null,"code":"import * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [getProtocol('dns').code, getProtocol('dns4').code, getProtocol('dns6').code, getProtocol('dnsaddr').code];\nconst P2P_CODES = [getProtocol('p2p').code, getProtocol('ipfs').code];\nconst resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\nexport class Multiaddr {\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor(addr) {\n    // default\n    if (addr == null) {\n      addr = '';\n    }\n    // Define symbol\n    Object.defineProperty(this, symbol, {\n      value: true\n    });\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n      }\n      this.bytes = codec.fromString(addr);\n    } else if (Multiaddr.isMultiaddr(addr)) {\n      // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n  }\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString() {\n    return codec.bytesToString(this.bytes);\n  }\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions() {\n    const codes = this.protoCodes();\n    const parts = this.toString().split('/').slice(1);\n    let transport;\n    let port;\n    if (parts.length > 2) {\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(codes[0]) && P2P_CODES.includes(codes[1])) {\n        transport = getProtocol('tcp').name;\n        port = 443;\n      } else {\n        transport = getProtocol(parts[2]).name;\n        port = parseInt(parts[3]);\n      }\n    } else if (DNS_CODES.includes(codes[0])) {\n      transport = getProtocol('tcp').name;\n      port = 443;\n    } else {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n    }\n    const opts = {\n      family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,\n      host: parts[1],\n      transport,\n      port\n    };\n    return opts;\n  }\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n  protos() {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n  }\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n  protoCodes() {\n    const codes = [];\n    const buf = this.bytes;\n    let i = 0;\n    while (i < buf.length) {\n      const code = varint.decode(buf, i);\n      const n = varint.decode.bytes;\n      const p = getProtocol(code);\n      const size = codec.sizeForAddr(p, buf.slice(i + n));\n      i += size + n;\n      codes.push(code);\n    }\n    return codes;\n  }\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n  protoNames() {\n    return this.protos().map(proto => proto.name);\n  }\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples() {\n    return codec.bytesToTuples(this.bytes);\n  }\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples() {\n    const t = codec.bytesToTuples(this.bytes);\n    return codec.tuplesToStringTuples(t);\n  }\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate(addr) {\n    addr = new Multiaddr(addr);\n    return new Multiaddr(this.toString() + addr.toString());\n  }\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n  decapsulate(addr) {\n    const addrString = addr.toString();\n    const s = this.toString();\n    const i = s.lastIndexOf(addrString);\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n    }\n    return new Multiaddr(s.slice(0, i));\n  }\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n  decapsulateCode(code) {\n    const tuples = this.tuples();\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n      }\n    }\n    return this;\n  }\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   */\n  getPeerId() {\n    try {\n      const tuples = this.stringTuples().filter(tuple => {\n        if (tuple[0] === names.ipfs.code) {\n          return true;\n        }\n        return false;\n      });\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop();\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1];\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n        }\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   */\n  getPath() {\n    let path = null;\n    try {\n      path = this.stringTuples().filter(tuple => {\n        const proto = getProtocol(tuple[0]);\n        if (proto.path === true) {\n          return true;\n        }\n        return false;\n      })[0][1];\n      if (path == null) {\n        path = null;\n      }\n    } catch {\n      path = null;\n    }\n    return path;\n  }\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n  equals(addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes);\n  }\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\n   * // ]\n   * ```\n   */\n  async resolve(options) {\n    const resolvableProto = this.protos().find(p => p.resolvable);\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this];\n    }\n    const resolver = resolvers.get(resolvableProto.name);\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n    }\n    const addresses = await resolver(this, options);\n    return addresses.map(a => new Multiaddr(a));\n  }\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n  nodeAddress() {\n    const options = this.toOptions();\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n    }\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    };\n  }\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n  isThinWaistAddress(addr) {\n    const protos = (addr ?? this).protos();\n    if (protos.length !== 2) {\n      return false;\n    }\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false;\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Creates a Multiaddr from a node-friendly address object\n   *\n   * @example\n   * ```js\n   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   */\n  static fromNodeAddress(addr, transport) {\n    if (addr == null) {\n      throw new Error('requires node address object');\n    }\n    if (transport == null) {\n      throw new Error('requires transport protocol');\n    }\n    let ip;\n    switch (addr.family) {\n      case 4:\n        ip = 'ip4';\n        break;\n      case 6:\n        ip = 'ip6';\n        break;\n      default:\n        throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'));\n  }\n  /**\n   * Returns if something is a Multiaddr that is a name\n   */\n  static isName(addr) {\n    if (!Multiaddr.isMultiaddr(addr)) {\n      return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some(proto => proto.resolvable);\n  }\n  /**\n   * Check if object is a CID instance\n   */\n  static isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n  }\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n  [inspect]() {\n    return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n  }\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * Fallback for pre Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n  inspect() {\n    return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n  }\n}\nMultiaddr.resolvers = resolvers;\n/**\n * Static factory\n */\nexport function multiaddr(addr) {\n  return new Multiaddr(addr);\n}\nexport { getProtocol as protocols };\nexport { resolvers };","map":{"version":3,"names":["codec","getProtocol","names","varint","CID","base58btc","errCode","toString","uint8ArrayToString","equals","uint8ArrayEquals","inspect","Symbol","for","DNS_CODES","code","P2P_CODES","resolvers","Map","symbol","Multiaddr","constructor","addr","Object","defineProperty","value","Uint8Array","bytes","fromBytes","length","charAt","Error","fromString","isMultiaddr","bytesToString","toJSON","toOptions","codes","protoCodes","parts","split","slice","transport","port","includes","name","parseInt","opts","family","host","protos","map","assign","buf","i","decode","n","p","size","sizeForAddr","push","protoNames","proto","tuples","bytesToTuples","stringTuples","t","tuplesToStringTuples","encapsulate","decapsulate","addrString","s","lastIndexOf","decapsulateCode","tuplesToBytes","getPeerId","filter","tuple","ipfs","pop","peerIdStr","parse","multihash","e","getPath","path","resolve","options","resolvableProto","find","resolvable","resolver","get","addresses","a","nodeAddress","address","isThinWaistAddress","fromNodeAddress","ip","join","isName","some","Boolean","multiaddr","protocols"],"sources":["C:\\FACULTATE\\Proiect\\node_modules\\@multiformats\\multiaddr\\src\\index.ts"],"sourcesContent":["import * as codec from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport varint from 'varint'\nimport { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport errCode from 'err-code'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\nconst P2P_CODES = [\n  getProtocol('p2p').code,\n  getProtocol('ipfs').code\n]\n\nexport interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable?: boolean | undefined\n  path?: boolean | undefined\n}\n\nexport interface MultiaddrObject {\n  family: 4 | 6\n  host: string\n  transport: string\n  port: number\n}\n\nexport interface NodeAddress {\n  family: 4 | 6\n  address: string\n  port: number\n}\n\nexport type MultiaddrInput = string | Multiaddr | Uint8Array | null\n\nexport interface Resolver { (addr: Multiaddr, options?: AbortOptions): Promise<string[]> }\n\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\nconst resolvers = new Map<string, Resolver>()\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\nexport class Multiaddr {\n  static resolvers = resolvers\n\n  public bytes: Uint8Array\n\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    // Define symbol\n    Object.defineProperty(this, symbol, { value: true })\n\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      this.bytes = codec.fromString(addr)\n    } else if (Multiaddr.isMultiaddr(addr)) { // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString () {\n    return codec.bytesToString(this.bytes)\n  }\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions (): MultiaddrObject {\n    const codes = this.protoCodes()\n    const parts = this.toString().split('/').slice(1)\n    let transport: string\n    let port: number\n\n    if (parts.length > 2) {\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(codes[0]) && P2P_CODES.includes(codes[1])) {\n        transport = getProtocol('tcp').name\n        port = 443\n      } else {\n        transport = getProtocol(parts[2]).name\n        port = parseInt(parts[3])\n      }\n    } else if (DNS_CODES.includes(codes[0])) {\n      transport = getProtocol('tcp').name\n      port = 443\n    } else {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,\n      host: parts[1],\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n  protos () {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)))\n  }\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n  protoCodes () {\n    const codes: number[] = []\n    const buf = this.bytes\n    let i = 0\n    while (i < buf.length) {\n      const code = varint.decode(buf, i)\n      const n = varint.decode.bytes\n\n      const p = getProtocol(code)\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n      i += (size + n)\n      codes.push(code)\n    }\n\n    return codes\n  }\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n  protoNames () {\n    return this.protos().map(proto => proto.name)\n  }\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples () {\n    return codec.bytesToTuples(this.bytes)\n  }\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples () {\n    const t = codec.bytesToTuples(this.bytes)\n    return codec.tuplesToStringTuples(t)\n  }\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate (addr: MultiaddrInput) {\n    addr = new Multiaddr(addr)\n    return new Multiaddr(this.toString() + addr.toString())\n  }\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n  decapsulate (addr: Multiaddr | string) {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n    return new Multiaddr(s.slice(0, i))\n  }\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n  decapsulateCode (code: number) {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   */\n  getPeerId (): string | null {\n    try {\n      const tuples = this.stringTuples().filter((tuple) => {\n        if (tuple[0] === names.ipfs.code) {\n          return true\n        }\n        return false\n      })\n\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   */\n  getPath (): string | null {\n    let path = null\n    try {\n      path = this.stringTuples().filter((tuple) => {\n        const proto = getProtocol(tuple[0])\n        if (proto.path === true) {\n          return true\n        }\n        return false\n      })[0][1]\n\n      if (path == null) {\n        path = null\n      }\n    } catch {\n      path = null\n    }\n    return path\n  }\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n  equals (addr: { bytes: Uint8Array }) {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\n   * // ]\n   * ```\n   */\n  async resolve (options?: AbortOptions) {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this, options)\n    return addresses.map((a) => new Multiaddr(a))\n  }\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n  nodeAddress (): NodeAddress {\n    const options = this.toOptions()\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`)\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    }\n  }\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n  isThinWaistAddress (addr?: Multiaddr) {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Creates a Multiaddr from a node-friendly address object\n   *\n   * @example\n   * ```js\n   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   */\n  static fromNodeAddress (addr: NodeAddress, transport: string) {\n    if (addr == null) {\n      throw new Error('requires node address object')\n    }\n    if (transport == null) {\n      throw new Error('requires transport protocol')\n    }\n    let ip\n    switch (addr.family) {\n      case 4:\n        ip = 'ip4'\n        break\n      case 6:\n        ip = 'ip6'\n        break\n      default:\n        throw Error('Invalid addr family, should be 4 or 6.')\n    }\n    return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'))\n  }\n\n  /**\n   * Returns if something is a Multiaddr that is a name\n   */\n  static isName (addr: Multiaddr) {\n    if (!Multiaddr.isMultiaddr(addr)) {\n      return false\n    }\n\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable)\n  }\n\n  /**\n   * Check if object is a CID instance\n   */\n  static isMultiaddr (value: any): value is Multiaddr {\n    return Boolean(value?.[symbol])\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n  [inspect] () {\n    return '<Multiaddr ' +\n    uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n    codec.bytesToString(this.bytes) + '>'\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * Fallback for pre Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n  inspect () {\n    return '<Multiaddr ' +\n      uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n      codec.bytesToString(this.bytes) + '>'\n  }\n}\n\n/**\n * Static factory\n */\nexport function multiaddr (addr: MultiaddrInput) {\n  return new Multiaddr(addr)\n}\n\nexport { getProtocol as protocols }\nexport { resolvers }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}