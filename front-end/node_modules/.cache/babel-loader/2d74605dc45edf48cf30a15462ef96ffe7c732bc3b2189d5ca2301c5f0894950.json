{"ast":null,"code":"import { connect } from '@ucanto/client';\nimport { CAR, HTTP } from '@ucanto/transport';\nimport * as Storefront from '@web3-storage/capabilities/filecoin/storefront';\nimport { services } from './service.js';\n/**\n * @typedef {import('./types.js').StorefrontService} StorefrontService\n * @typedef {import('@ucanto/interface').ConnectionView<StorefrontService>} ConnectionView\n */\n/** @type {ConnectionView} */\nexport const connection = connect({\n  id: services.STOREFRONT.principal,\n  codec: CAR.outbound,\n  channel: HTTP.open({\n    url: services.STOREFRONT.url,\n    method: 'POST'\n  })\n});\n/**\n * The `filecoin/offer` task can be executed to request storing a content piece\n * in Filecoin. It issues a signed receipt of the execution result.\n *\n * A receipt for successful execution will contain an effect, linking to a\n * `filecoin/submit` task that will complete asynchronously.\n *\n * Otherwise the task is failed and the receipt will contain details of the\n * reason behind the failure.\n *\n * @see https://github.com/storacha/specs/blob/main/w3-filecoin.md#filecoinoffer\n *\n * @param {import('./types.js').InvocationConfig} conf - Configuration\n * @param {import('multiformats').UnknownLink} content\n * @param {import('@web3-storage/data-segment').PieceLink} piece\n * @param {import('./types.js').RequestOptions<StorefrontService>} [options]\n */\nexport async function filecoinOffer({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, content, piece, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const invocation = Storefront.filecoinOffer.invoke({\n    issuer,\n    /* c8 ignore next */\n    audience: audience ?? services.STOREFRONT.principal,\n    with: resource,\n    nb: {\n      content,\n      piece\n    },\n    proofs,\n    expiration: Infinity\n  });\n  return await invocation.execute(conn);\n}\n/**\n * The `filecoin/submit` task is an _effect_ linked from successful execution\n * of a `filecoin/offer` task, it is executed to issue a receipt for the\n * success or failure of the task.\n *\n * A receipt for successful execution indicates that the offered piece has been\n * submitted to the pipeline. In this case the receipt will contain an effect,\n * linking to a `piece/offer` task that will complete asynchronously.\n *\n * Otherwise the task is failed and the receipt will contain details of the\n * reason behind the failure.\n *\n * @see https://github.com/storacha/specs/blob/main/w3-filecoin.md#filecoinsubmit\n *\n * @param {import('./types.js').InvocationConfig} conf - Configuration\n * @param {import('multiformats').UnknownLink} content\n * @param {import('@web3-storage/data-segment').PieceLink} piece\n * @param {import('./types.js').RequestOptions<StorefrontService>} [options]\n */\nexport async function filecoinSubmit({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, content, piece, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const invocation = Storefront.filecoinSubmit.invoke({\n    issuer,\n    /* c8 ignore next */\n    audience: audience ?? services.STOREFRONT.principal,\n    with: resource,\n    nb: {\n      content,\n      piece\n    },\n    proofs,\n    expiration: Infinity\n  });\n  return await invocation.execute(conn);\n}\n/**\n * The `filecoin/accept` task is an _effect_ linked from successful execution\n * of a `filecoin/offer` task, it is executed to issue a receipt for the\n * success or failure of the task.\n *\n * A receipt for successful execution indicates that the offered piece has been\n * accepted in a Filecoin deal. In this case the receipt will contain proofs\n * that the piece was included in an aggregate and deal.\n *\n * Otherwise the task is failed and the receipt will contain details of the\n * reason behind the failure.\n *\n * @see https://github.com/storacha/specs/blob/main/w3-filecoin.md#filecoinaccept\n *\n * @param {import('./types.js').InvocationConfig} conf - Configuration\n * @param {import('multiformats').UnknownLink} content\n * @param {import('@web3-storage/data-segment').PieceLink} piece\n * @param {import('./types.js').RequestOptions<StorefrontService>} [options]\n */\nexport async function filecoinAccept({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, content, piece, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const invocation = Storefront.filecoinAccept.invoke({\n    issuer,\n    /* c8 ignore next */\n    audience: audience ?? services.STOREFRONT.principal,\n    with: resource,\n    nb: {\n      content,\n      piece\n    },\n    proofs,\n    expiration: Infinity\n  });\n  return await invocation.execute(conn);\n}\n/**\n * The `filecoin/info` task can be executed to request info about a content piece\n * in Filecoin. It issues a signed receipt of the execution result.\n *\n * @param {import('./types.js').InvocationConfig} conf - Configuration\n * @param {import('@web3-storage/data-segment').PieceLink} piece\n * @param {import('./types.js').RequestOptions<StorefrontService>} [options]\n */\nexport async function filecoinInfo({\n  issuer,\n  with: resource,\n  proofs,\n  audience\n}, piece, options = {}) {\n  /* c8 ignore next */\n  const conn = options.connection ?? connection;\n  const invocation = Storefront.filecoinInfo.invoke({\n    issuer,\n    /* c8 ignore next */\n    audience: audience ?? services.STOREFRONT.principal,\n    with: resource,\n    nb: {\n      piece\n    },\n    proofs\n  });\n  return await invocation.execute(conn);\n}","map":{"version":3,"names":["connect","CAR","HTTP","Storefront","services","connection","id","STOREFRONT","principal","codec","outbound","channel","open","url","method","filecoinOffer","issuer","with","resource","proofs","audience","content","piece","options","conn","invocation","invoke","nb","expiration","Infinity","execute","filecoinSubmit","filecoinAccept","filecoinInfo"],"sources":["../../src/storefront.js"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}