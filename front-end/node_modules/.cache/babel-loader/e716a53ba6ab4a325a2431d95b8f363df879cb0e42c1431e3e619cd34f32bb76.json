{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter';\nimport { getFirstHidden } from './lib/getFirstHidden';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { whenInput } from './lib/whenInput';\nexport var getLCP = function (onReport, reportAllChanges) {\n  if (reportAllChanges === void 0) {\n    reportAllChanges = false;\n  }\n  var metric = initMetric('LCP');\n  var firstHidden = getFirstHidden();\n  var report;\n  var entryHandler = function (entry) {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    var value = entry.startTime;\n    // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n    if (value < firstHidden.timeStamp) {\n      metric.value = value;\n      metric.entries.push(entry);\n    } else {\n      metric.isFinal = true;\n    }\n    report();\n  };\n  var po = observe('largest-contentful-paint', entryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, po, reportAllChanges);\n    var onFinal = function () {\n      if (!metric.isFinal) {\n        po.takeRecords().map(entryHandler);\n        metric.isFinal = true;\n        report();\n      }\n    };\n    void whenInput().then(onFinal);\n    onHidden(onFinal, true);\n  }\n};","map":{"version":3,"names":["bindReporter","getFirstHidden","initMetric","observe","onHidden","whenInput","getLCP","onReport","reportAllChanges","metric","firstHidden","report","entryHandler","entry","value","startTime","timeStamp","entries","push","isFinal","po","onFinal","takeRecords","map","then"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\tracing\\src\\browser\\web-vitals\\getLCP.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getFirstHidden } from './lib/getFirstHidden';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { whenInput } from './lib/whenInput';\nimport { ReportHandler } from './types';\n\nexport const getLCP = (onReport: ReportHandler, reportAllChanges = false): void => {\n  const metric = initMetric('LCP');\n  const firstHidden = getFirstHidden();\n\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEntry): void => {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    const value = entry.startTime;\n\n    // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n    if (value < firstHidden.timeStamp) {\n      metric.value = value;\n      metric.entries.push(entry);\n    } else {\n      metric.isFinal = true;\n    }\n\n    report();\n  };\n\n  const po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, po, reportAllChanges);\n\n    const onFinal = (): void => {\n      if (!metric.isFinal) {\n        po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n        metric.isFinal = true;\n        report();\n      }\n    };\n\n    void whenInput().then(onFinal);\n    onHidden(onFinal, true);\n  }\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,YAAY,QAAQ,oBAAoB;AACjD,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,OAAO,QAAiC,eAAe;AAChE,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,SAAS,QAAQ,iBAAiB;AAG3C,OAAO,IAAMC,MAAM,GAAG,SAAAA,CAACC,QAAuB,EAAEC,gBAAwB;EAAxB,IAAAA,gBAAA;IAAAA,gBAAA,QAAwB;EAAA;EACtE,IAAMC,MAAM,GAAGP,UAAU,CAAC,KAAK,CAAC;EAChC,IAAMQ,WAAW,GAAGT,cAAc,EAAE;EAEpC,IAAIU,MAAuC;EAE3C,IAAMC,YAAY,GAAG,SAAAA,CAACC,KAAuB;IAC3C;IACA;IACA,IAAMC,KAAK,GAAGD,KAAK,CAACE,SAAS;IAE7B;IACA;IACA,IAAID,KAAK,GAAGJ,WAAW,CAACM,SAAS,EAAE;MACjCP,MAAM,CAACK,KAAK,GAAGA,KAAK;MACpBL,MAAM,CAACQ,OAAO,CAACC,IAAI,CAACL,KAAK,CAAC;KAC3B,MAAM;MACLJ,MAAM,CAACU,OAAO,GAAG,IAAI;;IAGvBR,MAAM,EAAE;EACV,CAAC;EAED,IAAMS,EAAE,GAAGjB,OAAO,CAAC,0BAA0B,EAAES,YAAY,CAAC;EAE5D,IAAIQ,EAAE,EAAE;IACNT,MAAM,GAAGX,YAAY,CAACO,QAAQ,EAAEE,MAAM,EAAEW,EAAE,EAAEZ,gBAAgB,CAAC;IAE7D,IAAMa,OAAO,GAAG,SAAAA,CAAA;MACd,IAAI,CAACZ,MAAM,CAACU,OAAO,EAAE;QACnBC,EAAE,CAACE,WAAW,EAAE,CAACC,GAAG,CAACX,YAAuC,CAAC;QAC7DH,MAAM,CAACU,OAAO,GAAG,IAAI;QACrBR,MAAM,EAAE;;IAEZ,CAAC;IAED,KAAKN,SAAS,EAAE,CAACmB,IAAI,CAACH,OAAO,CAAC;IAC9BjB,QAAQ,CAACiB,OAAO,EAAE,IAAI,CAAC;;AAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}