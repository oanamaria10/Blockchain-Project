{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport var observe = function (type, callback) {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      var po = new PerformanceObserver(function (l) {\n        return l.getEntries().map(callback);\n      });\n      po.observe({\n        type: type,\n        buffered: true\n      });\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};","map":{"version":3,"names":["observe","type","callback","PerformanceObserver","supportedEntryTypes","includes","po","l","getEntries","map","buffered","e"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\tracing\\src\\browser\\web-vitals\\lib\\observe.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface PerformanceEntryHandler {\n  (entry: PerformanceEntry): void;\n}\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = (type: string, callback: PerformanceEntryHandler): PerformanceObserver | undefined => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      const po: PerformanceObserver = new PerformanceObserver(l => l.getEntries().map(callback));\n\n      po.observe({ type, buffered: true });\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAoBA;;;;;;;;AAQA,OAAO,IAAMA,OAAO,GAAG,SAAAA,CAACC,IAAY,EAAEC,QAAiC;EACrE,IAAI;IACF,IAAIC,mBAAmB,CAACC,mBAAmB,CAACC,QAAQ,CAACJ,IAAI,CAAC,EAAE;MAC1D,IAAMK,EAAE,GAAwB,IAAIH,mBAAmB,CAAC,UAAAI,CAAC;QAAI,OAAAA,CAAC,CAACC,UAAU,EAAE,CAACC,GAAG,CAACP,QAAQ,CAAC;MAA5B,CAA4B,CAAC;MAE1FI,EAAE,CAACN,OAAO,CAAC;QAAEC,IAAI,EAAAA,IAAA;QAAES,QAAQ,EAAE;MAAI,CAAE,CAAC;MACpC,OAAOJ,EAAE;;GAEZ,CAAC,OAAOK,CAAC,EAAE;IACV;EAAA;EAEF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}