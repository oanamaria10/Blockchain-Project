{"ast":null,"code":"import { hexToBytes } from './bytes.js';\n/**\n * 2^64-1\n */\nexport const MAX_UINT64 = BigInt('0xffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nexport const MAX_INTEGER = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */\nexport const MAX_INTEGER_BIGINT = BigInt('115792089237316195423570985008687907853269984665640564039457584007913129639935');\nexport const SECP256K1_ORDER = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nexport const SECP256K1_ORDER_DIV_2 = SECP256K1_ORDER / BigInt(2);\n/**\n * 2^256\n */\nexport const TWO_POW256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL = hexToBytes(KECCAK256_NULL_S);\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY_S = '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY = hexToBytes(KECCAK256_RLP_ARRAY_S);\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP_S = '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP = hexToBytes(KECCAK256_RLP_S);\n/**\n *  RLP encoded empty string\n */\nexport const RLP_EMPTY_STRING = Uint8Array.from([0x80]);\nexport const MAX_WITHDRAWALS_PER_PAYLOAD = 16;\nexport const RIPEMD160_ADDRESS_STRING = '0000000000000000000000000000000000000003';\n/**\n * BigInt constants\n */\nexport const BIGINT_NEG1 = BigInt(-1);\nexport const BIGINT_0 = BigInt(0);\nexport const BIGINT_1 = BigInt(1);\nexport const BIGINT_2 = BigInt(2);\nexport const BIGINT_3 = BigInt(3);\nexport const BIGINT_7 = BigInt(7);\nexport const BIGINT_8 = BigInt(8);\nexport const BIGINT_27 = BigInt(27);\nexport const BIGINT_28 = BigInt(28);\nexport const BIGINT_31 = BigInt(31);\nexport const BIGINT_32 = BigInt(32);\nexport const BIGINT_64 = BigInt(64);\nexport const BIGINT_128 = BigInt(128);\nexport const BIGINT_255 = BigInt(255);\nexport const BIGINT_256 = BigInt(256);\nexport const BIGINT_96 = BigInt(96);\nexport const BIGINT_100 = BigInt(100);\nexport const BIGINT_160 = BigInt(160);\nexport const BIGINT_224 = BigInt(224);\nexport const BIGINT_2EXP96 = BigInt(79228162514264337593543950336);\nexport const BIGINT_2EXP160 = BigInt(1461501637330902918203684832716283019655932542976);\nexport const BIGINT_2EXP224 = BigInt(26959946667150639794667015087019630673637144422540572481103610249216);\nexport const BIGINT_2EXP256 = BIGINT_2 ** BIGINT_256;","map":{"version":3,"names":["hexToBytes","MAX_UINT64","BigInt","MAX_INTEGER","MAX_INTEGER_BIGINT","SECP256K1_ORDER","SECP256K1_ORDER_DIV_2","TWO_POW256","KECCAK256_NULL_S","KECCAK256_NULL","KECCAK256_RLP_ARRAY_S","KECCAK256_RLP_ARRAY","KECCAK256_RLP_S","KECCAK256_RLP","RLP_EMPTY_STRING","Uint8Array","from","MAX_WITHDRAWALS_PER_PAYLOAD","RIPEMD160_ADDRESS_STRING","BIGINT_NEG1","BIGINT_0","BIGINT_1","BIGINT_2","BIGINT_3","BIGINT_7","BIGINT_8","BIGINT_27","BIGINT_28","BIGINT_31","BIGINT_32","BIGINT_64","BIGINT_128","BIGINT_255","BIGINT_256","BIGINT_96","BIGINT_100","BIGINT_160","BIGINT_224","BIGINT_2EXP96","BIGINT_2EXP160","BIGINT_2EXP224","BIGINT_2EXP256"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@nomicfoundation\\ethereumjs-util\\src\\constants.ts"],"sourcesContent":["import { hexToBytes } from './bytes.js'\n\n/**\n * 2^64-1\n */\nexport const MAX_UINT64 = BigInt('0xffffffffffffffff')\n\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nexport const MAX_INTEGER = BigInt(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n)\n\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */\nexport const MAX_INTEGER_BIGINT = BigInt(\n  '115792089237316195423570985008687907853269984665640564039457584007913129639935'\n)\n\nexport const SECP256K1_ORDER = BigInt(\n  '0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'\n)\nexport const SECP256K1_ORDER_DIV_2 = SECP256K1_ORDER / BigInt(2)\n\n/**\n * 2^256\n */\nexport const TWO_POW256 = BigInt(\n  '0x10000000000000000000000000000000000000000000000000000000000000000'\n)\n\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL = hexToBytes(KECCAK256_NULL_S)\n\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY_S =\n  '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'\n\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY = hexToBytes(KECCAK256_RLP_ARRAY_S)\n\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP_S = '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'\n\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP = hexToBytes(KECCAK256_RLP_S)\n\n/**\n *  RLP encoded empty string\n */\nexport const RLP_EMPTY_STRING = Uint8Array.from([0x80])\n\nexport const MAX_WITHDRAWALS_PER_PAYLOAD = 16\n\nexport const RIPEMD160_ADDRESS_STRING = '0000000000000000000000000000000000000003'\n\n/**\n * BigInt constants\n */\n\nexport const BIGINT_NEG1 = BigInt(-1)\n\nexport const BIGINT_0 = BigInt(0)\nexport const BIGINT_1 = BigInt(1)\nexport const BIGINT_2 = BigInt(2)\nexport const BIGINT_3 = BigInt(3)\nexport const BIGINT_7 = BigInt(7)\nexport const BIGINT_8 = BigInt(8)\n\nexport const BIGINT_27 = BigInt(27)\nexport const BIGINT_28 = BigInt(28)\nexport const BIGINT_31 = BigInt(31)\nexport const BIGINT_32 = BigInt(32)\nexport const BIGINT_64 = BigInt(64)\n\nexport const BIGINT_128 = BigInt(128)\nexport const BIGINT_255 = BigInt(255)\nexport const BIGINT_256 = BigInt(256)\n\nexport const BIGINT_96 = BigInt(96)\nexport const BIGINT_100 = BigInt(100)\nexport const BIGINT_160 = BigInt(160)\nexport const BIGINT_224 = BigInt(224)\nexport const BIGINT_2EXP96 = BigInt(79228162514264337593543950336)\nexport const BIGINT_2EXP160 = BigInt(1461501637330902918203684832716283019655932542976)\nexport const BIGINT_2EXP224 =\n  BigInt(26959946667150639794667015087019630673637144422540572481103610249216)\nexport const BIGINT_2EXP256 = BIGINT_2 ** BIGINT_256\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,YAAY;AAEvC;;;AAGA,OAAO,MAAMC,UAAU,GAAGC,MAAM,CAAC,oBAAoB,CAAC;AAEtD;;;AAGA,OAAO,MAAMC,WAAW,GAAGD,MAAM,CAC/B,oEAAoE,CACrE;AAED;;;;;AAKA,OAAO,MAAME,kBAAkB,GAAGF,MAAM,CACtC,gFAAgF,CACjF;AAED,OAAO,MAAMG,eAAe,GAAGH,MAAM,CACnC,oEAAoE,CACrE;AACD,OAAO,MAAMI,qBAAqB,GAAGD,eAAe,GAAGH,MAAM,CAAC,CAAC,CAAC;AAEhE;;;AAGA,OAAO,MAAMK,UAAU,GAAGL,MAAM,CAC9B,qEAAqE,CACtE;AAED;;;AAGA,OAAO,MAAMM,gBAAgB,GAAG,oEAAoE;AAEpG;;;AAGA,OAAO,MAAMC,cAAc,GAAGT,UAAU,CAACQ,gBAAgB,CAAC;AAE1D;;;AAGA,OAAO,MAAME,qBAAqB,GAChC,oEAAoE;AAEtE;;;AAGA,OAAO,MAAMC,mBAAmB,GAAGX,UAAU,CAACU,qBAAqB,CAAC;AAEpE;;;AAGA,OAAO,MAAME,eAAe,GAAG,oEAAoE;AAEnG;;;AAGA,OAAO,MAAMC,aAAa,GAAGb,UAAU,CAACY,eAAe,CAAC;AAExD;;;AAGA,OAAO,MAAME,gBAAgB,GAAGC,UAAU,CAACC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;AAEvD,OAAO,MAAMC,2BAA2B,GAAG,EAAE;AAE7C,OAAO,MAAMC,wBAAwB,GAAG,0CAA0C;AAElF;;;AAIA,OAAO,MAAMC,WAAW,GAAGjB,MAAM,CAAC,CAAC,CAAC,CAAC;AAErC,OAAO,MAAMkB,QAAQ,GAAGlB,MAAM,CAAC,CAAC,CAAC;AACjC,OAAO,MAAMmB,QAAQ,GAAGnB,MAAM,CAAC,CAAC,CAAC;AACjC,OAAO,MAAMoB,QAAQ,GAAGpB,MAAM,CAAC,CAAC,CAAC;AACjC,OAAO,MAAMqB,QAAQ,GAAGrB,MAAM,CAAC,CAAC,CAAC;AACjC,OAAO,MAAMsB,QAAQ,GAAGtB,MAAM,CAAC,CAAC,CAAC;AACjC,OAAO,MAAMuB,QAAQ,GAAGvB,MAAM,CAAC,CAAC,CAAC;AAEjC,OAAO,MAAMwB,SAAS,GAAGxB,MAAM,CAAC,EAAE,CAAC;AACnC,OAAO,MAAMyB,SAAS,GAAGzB,MAAM,CAAC,EAAE,CAAC;AACnC,OAAO,MAAM0B,SAAS,GAAG1B,MAAM,CAAC,EAAE,CAAC;AACnC,OAAO,MAAM2B,SAAS,GAAG3B,MAAM,CAAC,EAAE,CAAC;AACnC,OAAO,MAAM4B,SAAS,GAAG5B,MAAM,CAAC,EAAE,CAAC;AAEnC,OAAO,MAAM6B,UAAU,GAAG7B,MAAM,CAAC,GAAG,CAAC;AACrC,OAAO,MAAM8B,UAAU,GAAG9B,MAAM,CAAC,GAAG,CAAC;AACrC,OAAO,MAAM+B,UAAU,GAAG/B,MAAM,CAAC,GAAG,CAAC;AAErC,OAAO,MAAMgC,SAAS,GAAGhC,MAAM,CAAC,EAAE,CAAC;AACnC,OAAO,MAAMiC,UAAU,GAAGjC,MAAM,CAAC,GAAG,CAAC;AACrC,OAAO,MAAMkC,UAAU,GAAGlC,MAAM,CAAC,GAAG,CAAC;AACrC,OAAO,MAAMmC,UAAU,GAAGnC,MAAM,CAAC,GAAG,CAAC;AACrC,OAAO,MAAMoC,aAAa,GAAGpC,MAAM,CAAC,6BAA6B,CAAC;AAClE,OAAO,MAAMqC,cAAc,GAAGrC,MAAM,CAAC,iDAAiD,CAAC;AACvF,OAAO,MAAMsC,cAAc,GACzBtC,MAAM,CAAC,oEAAoE,CAAC;AAC9E,OAAO,MAAMuC,cAAc,GAAGnB,QAAQ,IAAIW,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}