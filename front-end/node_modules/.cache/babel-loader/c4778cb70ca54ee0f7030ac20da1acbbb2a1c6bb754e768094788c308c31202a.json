{"ast":null,"code":"import * as API from \"./api.js\";\nexport const name = \"fixed\";\n/**\n * @typedef {Object} FixedSize\n * @property {number} maxChunkSize\n */\n\n/** @type {FixedSize} */\nexport const context = {\n  maxChunkSize: 262144\n};\nexport const type = \"Stateless\";\n\n/**\n * @param {number} maxChunkSize\n * @returns {API.StatelessChunker<FixedSize>}\n */\nexport const withMaxChunkSize = maxChunkSize => ({\n  type: \"Stateless\",\n  context: {\n    maxChunkSize\n  },\n  name,\n  cut\n});\n\n/**\n * @param {FixedSize} maxChunkSize\n * @param {API.Chunk} buffer\n * @param {boolean} end\n * @returns {number[]}\n */\nexport const cut = ({\n  maxChunkSize\n}, {\n  byteLength\n}, end) => {\n  // number of fixed size chunks that would fit\n  const n = byteLength / maxChunkSize | 0;\n  const chunks = new Array(n).fill(maxChunkSize);\n  const lastChunkSize = end ? byteLength - n * maxChunkSize : 0;\n  if (lastChunkSize > 0) {\n    chunks.push(lastChunkSize);\n  }\n  return chunks;\n};","map":{"version":3,"names":["API","name","context","maxChunkSize","type","withMaxChunkSize","cut","byteLength","end","n","chunks","Array","fill","lastChunkSize","push"],"sources":["C:/FACULTATE/Proiect/node_modules/@ipld/unixfs/src/file/chunker/fixed.js"],"sourcesContent":["import * as API from \"./api.js\"\n\nexport const name = \"fixed\"\n/**\n * @typedef {Object} FixedSize\n * @property {number} maxChunkSize\n */\n\n/** @type {FixedSize} */\nexport const context = {\n  maxChunkSize: 262144,\n}\n\nexport const type = \"Stateless\"\n\n/**\n * @param {number} maxChunkSize\n * @returns {API.StatelessChunker<FixedSize>}\n */\nexport const withMaxChunkSize = maxChunkSize => ({\n  type: \"Stateless\",\n  context: { maxChunkSize },\n  name,\n  cut,\n})\n\n/**\n * @param {FixedSize} maxChunkSize\n * @param {API.Chunk} buffer\n * @param {boolean} end\n * @returns {number[]}\n */\nexport const cut = ({ maxChunkSize }, { byteLength }, end) => {\n  // number of fixed size chunks that would fit\n  const n = (byteLength / maxChunkSize) | 0\n  const chunks = new Array(n).fill(maxChunkSize)\n  const lastChunkSize = end ? byteLength - n * maxChunkSize : 0\n  if (lastChunkSize > 0) {\n    chunks.push(lastChunkSize)\n  }\n  return chunks\n}\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,UAAU;AAE/B,OAAO,MAAMC,IAAI,GAAG,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMC,OAAO,GAAG;EACrBC,YAAY,EAAE;AAChB,CAAC;AAED,OAAO,MAAMC,IAAI,GAAG,WAAW;;AAE/B;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAGF,YAAY,KAAK;EAC/CC,IAAI,EAAE,WAAW;EACjBF,OAAO,EAAE;IAAEC;EAAa,CAAC;EACzBF,IAAI;EACJK;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,GAAG,GAAGA,CAAC;EAAEH;AAAa,CAAC,EAAE;EAAEI;AAAW,CAAC,EAAEC,GAAG,KAAK;EAC5D;EACA,MAAMC,CAAC,GAAIF,UAAU,GAAGJ,YAAY,GAAI,CAAC;EACzC,MAAMO,MAAM,GAAG,IAAIC,KAAK,CAACF,CAAC,CAAC,CAACG,IAAI,CAACT,YAAY,CAAC;EAC9C,MAAMU,aAAa,GAAGL,GAAG,GAAGD,UAAU,GAAGE,CAAC,GAAGN,YAAY,GAAG,CAAC;EAC7D,IAAIU,aAAa,GAAG,CAAC,EAAE;IACrBH,MAAM,CAACI,IAAI,CAACD,aAAa,CAAC;EAC5B;EACA,OAAOH,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}