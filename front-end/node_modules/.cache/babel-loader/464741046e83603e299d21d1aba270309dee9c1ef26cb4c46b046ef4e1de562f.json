{"ast":null,"code":"var _jsxFileName = \"C:\\\\FACULTATE\\\\Proiect\\\\front-end\\\\src\\\\uploadFile.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\n// Pinata API details (provided by you)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pinataApiKey = '5275d3cba1cc8b5fb3fc'; // Your API Key\nconst pinataApiSecret = '3bed044d9789917ea9c04271df631325a40f5d5b4bfc90afc2b5e2a3d4fe8d9c'; // Your API Secret\n\nconst UploadFile = ({\n  onFileUploaded\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [image, setImage] = useState(null);\n  const [link, setLink] = useState('');\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleImageChange = event => {\n    setImage(event.target.files[0]);\n  };\n  const handleLinkChange = event => {\n    setLink(event.target.value);\n  };\n  const uploadToPinata = async () => {\n    try {\n      // Check if all fields are filled\n      if (!file || !image || !link) {\n        alert('Please fill in all fields!');\n        return;\n      }\n\n      // Create a FormData object to handle file upload\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('image', image);\n\n      // Pinata API URL\n      const url = 'https://api.pinata.cloud/pinning/pinFileToIPFS';\n\n      // Set up headers with the Pinata API key\n      const headers = {\n        'Content-Type': 'multipart/form-data',\n        pinata_api_key: pinataApiKey,\n        pinata_secret_api_key: pinataApiSecret\n      };\n\n      // Upload the file to Pinata\n      const fileResponse = await axios.post(url, formData, {\n        headers\n      });\n      const fileCid = fileResponse.data.IpfsHash;\n      const imageResponse = await axios.post(url, formData, {\n        headers\n      });\n      const imageCid = imageResponse.data.IpfsHash;\n      console.log('File uploaded to Pinata with CID:', fileCid);\n      console.log('Image uploaded to Pinata with CID:', imageCid);\n\n      // Call the onFileUploaded function to pass the CID and link to the parent component\n      onFileUploaded(imageCid, fileCid, link);\n    } catch (err) {\n      console.error('Error uploading file to Pinata:', err);\n      alert('An error occurred during the upload. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Campaign Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleImageChange,\n      accept: \"image/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Campaign link\",\n      value: link,\n      onChange: handleLinkChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadToPinata,\n      children: \"Upload to Pinata\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadFile, \"+rFBF2o0Wu4woQ7PUOa74OOXkzo=\");\n_c = UploadFile;\nexport default UploadFile;\nvar _c;\n$RefreshReg$(_c, \"UploadFile\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","pinataApiKey","pinataApiSecret","UploadFile","onFileUploaded","_s","file","setFile","image","setImage","link","setLink","handleFileChange","event","target","files","handleImageChange","handleLinkChange","value","uploadToPinata","alert","formData","FormData","append","url","headers","pinata_api_key","pinata_secret_api_key","fileResponse","post","fileCid","data","IpfsHash","imageResponse","imageCid","console","log","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/FACULTATE/Proiect/front-end/src/uploadFile.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Pinata API details (provided by you)\r\nconst pinataApiKey = '5275d3cba1cc8b5fb3fc'; // Your API Key\r\nconst pinataApiSecret = '3bed044d9789917ea9c04271df631325a40f5d5b4bfc90afc2b5e2a3d4fe8d9c'; // Your API Secret\r\n\r\nconst UploadFile = ({ onFileUploaded }) => {\r\n  const [file, setFile] = useState(null);\r\n  const [image, setImage] = useState(null);\r\n  const [link, setLink] = useState('');\r\n\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleImageChange = (event) => {\r\n    setImage(event.target.files[0]);\r\n  };\r\n\r\n  const handleLinkChange = (event) => {\r\n    setLink(event.target.value);\r\n  };\r\n\r\n  const uploadToPinata = async () => {\r\n    try {\r\n      // Check if all fields are filled\r\n      if (!file || !image || !link) {\r\n        alert('Please fill in all fields!');\r\n        return;\r\n      }\r\n\r\n      // Create a FormData object to handle file upload\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      formData.append('image', image);\r\n\r\n      // Pinata API URL\r\n      const url = 'https://api.pinata.cloud/pinning/pinFileToIPFS';\r\n\r\n      // Set up headers with the Pinata API key\r\n      const headers = {\r\n        'Content-Type': 'multipart/form-data',\r\n        pinata_api_key: pinataApiKey,\r\n        pinata_secret_api_key: pinataApiSecret,\r\n      };\r\n\r\n      // Upload the file to Pinata\r\n      const fileResponse = await axios.post(url, formData, { headers });\r\n      const fileCid = fileResponse.data.IpfsHash;\r\n\r\n      const imageResponse = await axios.post(url, formData, { headers });\r\n      const imageCid = imageResponse.data.IpfsHash;\r\n\r\n      console.log('File uploaded to Pinata with CID:', fileCid);\r\n      console.log('Image uploaded to Pinata with CID:', imageCid);\r\n\r\n      // Call the onFileUploaded function to pass the CID and link to the parent component\r\n      onFileUploaded(imageCid, fileCid, link);\r\n    } catch (err) {\r\n      console.error('Error uploading file to Pinata:', err);\r\n      alert('An error occurred during the upload. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Upload Campaign Files</h2>\r\n      {/* Input for image */}\r\n      <input type=\"file\" onChange={handleImageChange} accept=\"image/*\" />\r\n      {/* Input for file */}\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      {/* Input for campaign link */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Campaign link\"\r\n        value={link}\r\n        onChange={handleLinkChange}\r\n      />\r\n      {/* Button to upload files to Pinata */}\r\n      <button onClick={uploadToPinata}>Upload to Pinata</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadFile;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}