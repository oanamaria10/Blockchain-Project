{"ast":null,"code":"import { defineProperties } from \"../../utils/properties.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\nimport { pack, unpack } from \"./array.js\";\n/**\n *  @_ignore\n */\nexport class TupleCoder extends Coder {\n  coders;\n  constructor(coders, localName) {\n    let dynamic = false;\n    const types = [];\n    coders.forEach(coder => {\n      if (coder.dynamic) {\n        dynamic = true;\n      }\n      types.push(coder.type);\n    });\n    const type = \"tuple(\" + types.join(\",\") + \")\";\n    super(\"tuple\", type, localName, dynamic);\n    defineProperties(this, {\n      coders: Object.freeze(coders.slice())\n    });\n  }\n  defaultValue() {\n    const values = [];\n    this.coders.forEach(coder => {\n      values.push(coder.defaultValue());\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = this.coders.reduce((accum, coder) => {\n      const name = coder.localName;\n      if (name) {\n        if (!accum[name]) {\n          accum[name] = 0;\n        }\n        accum[name]++;\n      }\n      return accum;\n    }, {});\n    // Add named values\n    this.coders.forEach((coder, index) => {\n      let name = coder.localName;\n      if (!name || uniqueNames[name] !== 1) {\n        return;\n      }\n      if (name === \"length\") {\n        name = \"_length\";\n      }\n      if (values[name] != null) {\n        return;\n      }\n      values[name] = values[index];\n    });\n    return Object.freeze(values);\n  }\n  encode(writer, _value) {\n    const value = Typed.dereference(_value, \"tuple\");\n    return pack(writer, this.coders, value);\n  }\n  decode(reader) {\n    return unpack(reader, this.coders);\n  }\n}","map":{"version":3,"names":["defineProperties","Typed","Coder","pack","unpack","TupleCoder","coders","constructor","localName","dynamic","types","forEach","coder","push","type","join","Object","freeze","slice","defaultValue","values","uniqueNames","reduce","accum","name","index","encode","writer","_value","value","dereference","decode","reader"],"sources":["C:/Users/Oana/Desktop/Blockchain/Blockchain-Project/node_modules/ethers/lib.esm/abi/coders/tuple.js"],"sourcesContent":["import { defineProperties } from \"../../utils/properties.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\nimport { pack, unpack } from \"./array.js\";\n/**\n *  @_ignore\n */\nexport class TupleCoder extends Coder {\n    coders;\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        defineProperties(this, { coders: Object.freeze(coders.slice()) });\n    }\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, _value) {\n        const value = Typed.dereference(_value, \"tuple\");\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return unpack(reader, this.coders);\n    }\n}\n//# sourceMappingURL=tuple.js.map"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,2BAA2B;AAC5D,SAASC,KAAK,QAAQ,aAAa;AACnC,SAASC,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,IAAI,EAAEC,MAAM,QAAQ,YAAY;AACzC;AACA;AACA;AACA,OAAO,MAAMC,UAAU,SAASH,KAAK,CAAC;EAClCI,MAAM;EACNC,WAAWA,CAACD,MAAM,EAAEE,SAAS,EAAE;IAC3B,IAAIC,OAAO,GAAG,KAAK;IACnB,MAAMC,KAAK,GAAG,EAAE;IAChBJ,MAAM,CAACK,OAAO,CAAEC,KAAK,IAAK;MACtB,IAAIA,KAAK,CAACH,OAAO,EAAE;QACfA,OAAO,GAAG,IAAI;MAClB;MACAC,KAAK,CAACG,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;IAC1B,CAAC,CAAC;IACF,MAAMA,IAAI,GAAI,QAAQ,GAAGJ,KAAK,CAACK,IAAI,CAAC,GAAG,CAAC,GAAG,GAAI;IAC/C,KAAK,CAAC,OAAO,EAAED,IAAI,EAAEN,SAAS,EAAEC,OAAO,CAAC;IACxCT,gBAAgB,CAAC,IAAI,EAAE;MAAEM,MAAM,EAAEU,MAAM,CAACC,MAAM,CAACX,MAAM,CAACY,KAAK,CAAC,CAAC;IAAE,CAAC,CAAC;EACrE;EACAC,YAAYA,CAAA,EAAG;IACX,MAAMC,MAAM,GAAG,EAAE;IACjB,IAAI,CAACd,MAAM,CAACK,OAAO,CAAEC,KAAK,IAAK;MAC3BQ,MAAM,CAACP,IAAI,CAACD,KAAK,CAACO,YAAY,CAAC,CAAC,CAAC;IACrC,CAAC,CAAC;IACF;IACA,MAAME,WAAW,GAAG,IAAI,CAACf,MAAM,CAACgB,MAAM,CAAC,CAACC,KAAK,EAAEX,KAAK,KAAK;MACrD,MAAMY,IAAI,GAAGZ,KAAK,CAACJ,SAAS;MAC5B,IAAIgB,IAAI,EAAE;QACN,IAAI,CAACD,KAAK,CAACC,IAAI,CAAC,EAAE;UACdD,KAAK,CAACC,IAAI,CAAC,GAAG,CAAC;QACnB;QACAD,KAAK,CAACC,IAAI,CAAC,EAAE;MACjB;MACA,OAAOD,KAAK;IAChB,CAAC,EAAE,CAAC,CAAC,CAAC;IACN;IACA,IAAI,CAACjB,MAAM,CAACK,OAAO,CAAC,CAACC,KAAK,EAAEa,KAAK,KAAK;MAClC,IAAID,IAAI,GAAGZ,KAAK,CAACJ,SAAS;MAC1B,IAAI,CAACgB,IAAI,IAAIH,WAAW,CAACG,IAAI,CAAC,KAAK,CAAC,EAAE;QAClC;MACJ;MACA,IAAIA,IAAI,KAAK,QAAQ,EAAE;QACnBA,IAAI,GAAG,SAAS;MACpB;MACA,IAAIJ,MAAM,CAACI,IAAI,CAAC,IAAI,IAAI,EAAE;QACtB;MACJ;MACAJ,MAAM,CAACI,IAAI,CAAC,GAAGJ,MAAM,CAACK,KAAK,CAAC;IAChC,CAAC,CAAC;IACF,OAAOT,MAAM,CAACC,MAAM,CAACG,MAAM,CAAC;EAChC;EACAM,MAAMA,CAACC,MAAM,EAAEC,MAAM,EAAE;IACnB,MAAMC,KAAK,GAAG5B,KAAK,CAAC6B,WAAW,CAACF,MAAM,EAAE,OAAO,CAAC;IAChD,OAAOzB,IAAI,CAACwB,MAAM,EAAE,IAAI,CAACrB,MAAM,EAAEuB,KAAK,CAAC;EAC3C;EACAE,MAAMA,CAACC,MAAM,EAAE;IACX,OAAO5B,MAAM,CAAC4B,MAAM,EAAE,IAAI,CAAC1B,MAAM,CAAC;EACtC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}