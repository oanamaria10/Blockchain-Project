{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Parser = void 0;\nconst solidity_files_cache_1 = require(\"../../builtin-tasks/utils/solidity-files-cache\");\nconst errors_1 = require(\"../core/errors\");\nconst errors_list_1 = require(\"../core/errors-list\");\nclass Parser {\n  constructor(_solidityFilesCache) {\n    this._cache = new Map();\n    this._solidityFilesCache = _solidityFilesCache ?? solidity_files_cache_1.SolidityFilesCache.createEmpty();\n  }\n  parse(fileContent, absolutePath, contentHash) {\n    const cacheResult = this._getFromCache(absolutePath, contentHash);\n    if (cacheResult !== null) {\n      return cacheResult;\n    }\n    try {\n      const {\n        analyze\n      } = require(\"@nomicfoundation/solidity-analyzer\");\n      const result = analyze(fileContent);\n      this._cache.set(contentHash, result);\n      return result;\n    } catch (e) {\n      if (e.code === \"MODULE_NOT_FOUND\") {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CORRUPTED_LOCKFILE);\n      }\n      // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n      throw e;\n    }\n  }\n  /**\n   * Get parsed data from the internal cache, or from the solidity files cache.\n   *\n   * Returns null if cannot find it in either one.\n   */\n  _getFromCache(absolutePath, contentHash) {\n    const internalCacheEntry = this._cache.get(contentHash);\n    if (internalCacheEntry !== undefined) {\n      return internalCacheEntry;\n    }\n    const solidityFilesCacheEntry = this._solidityFilesCache.getEntry(absolutePath);\n    if (solidityFilesCacheEntry === undefined) {\n      return null;\n    }\n    const {\n      imports,\n      versionPragmas\n    } = solidityFilesCacheEntry;\n    if (solidityFilesCacheEntry.contentHash !== contentHash) {\n      return null;\n    }\n    return {\n      imports,\n      versionPragmas\n    };\n  }\n}\nexports.Parser = Parser;","map":{"version":3,"names":["solidity_files_cache_1","require","errors_1","errors_list_1","Parser","constructor","_solidityFilesCache","_cache","Map","SolidityFilesCache","createEmpty","parse","fileContent","absolutePath","contentHash","cacheResult","_getFromCache","analyze","result","set","e","code","HardhatError","ERRORS","GENERAL","CORRUPTED_LOCKFILE","internalCacheEntry","get","undefined","solidityFilesCacheEntry","getEntry","imports","versionPragmas","exports"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\solidity\\parse.ts"],"sourcesContent":["import type SolidityAnalyzerT from \"@nomicfoundation/solidity-analyzer\";\n\nimport { SolidityFilesCache } from \"../../builtin-tasks/utils/solidity-files-cache\";\nimport { HardhatError } from \"../core/errors\";\nimport { ERRORS } from \"../core/errors-list\";\n\ninterface ParsedData {\n  imports: string[];\n  versionPragmas: string[];\n}\n\nexport class Parser {\n  private _cache = new Map<string, ParsedData>();\n  private _solidityFilesCache: SolidityFilesCache;\n\n  constructor(_solidityFilesCache?: SolidityFilesCache) {\n    this._solidityFilesCache =\n      _solidityFilesCache ?? SolidityFilesCache.createEmpty();\n  }\n\n  public parse(\n    fileContent: string,\n    absolutePath: string,\n    contentHash: string\n  ): ParsedData {\n    const cacheResult = this._getFromCache(absolutePath, contentHash);\n\n    if (cacheResult !== null) {\n      return cacheResult;\n    }\n\n    try {\n      const { analyze } =\n        require(\"@nomicfoundation/solidity-analyzer\") as typeof SolidityAnalyzerT;\n      const result = analyze(fileContent);\n\n      this._cache.set(contentHash, result);\n\n      return result;\n    } catch (e: any) {\n      if (e.code === \"MODULE_NOT_FOUND\") {\n        throw new HardhatError(ERRORS.GENERAL.CORRUPTED_LOCKFILE);\n      }\n\n      // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n      throw e;\n    }\n  }\n\n  /**\n   * Get parsed data from the internal cache, or from the solidity files cache.\n   *\n   * Returns null if cannot find it in either one.\n   */\n  private _getFromCache(\n    absolutePath: string,\n    contentHash: string\n  ): ParsedData | null {\n    const internalCacheEntry = this._cache.get(contentHash);\n\n    if (internalCacheEntry !== undefined) {\n      return internalCacheEntry;\n    }\n\n    const solidityFilesCacheEntry =\n      this._solidityFilesCache.getEntry(absolutePath);\n\n    if (solidityFilesCacheEntry === undefined) {\n      return null;\n    }\n\n    const { imports, versionPragmas } = solidityFilesCacheEntry;\n\n    if (solidityFilesCacheEntry.contentHash !== contentHash) {\n      return null;\n    }\n\n    return { imports, versionPragmas };\n  }\n}\n"],"mappings":";;;;;;AAEA,MAAAA,sBAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AACA,MAAAE,aAAA,GAAAF,OAAA;AAOA,MAAaG,MAAM;EAIjBC,YAAYC,mBAAwC;IAH5C,KAAAC,MAAM,GAAG,IAAIC,GAAG,EAAsB;IAI5C,IAAI,CAACF,mBAAmB,GACtBA,mBAAmB,IAAIN,sBAAA,CAAAS,kBAAkB,CAACC,WAAW,EAAE;EAC3D;EAEOC,KAAKA,CACVC,WAAmB,EACnBC,YAAoB,EACpBC,WAAmB;IAEnB,MAAMC,WAAW,GAAG,IAAI,CAACC,aAAa,CAACH,YAAY,EAAEC,WAAW,CAAC;IAEjE,IAAIC,WAAW,KAAK,IAAI,EAAE;MACxB,OAAOA,WAAW;;IAGpB,IAAI;MACF,MAAM;QAAEE;MAAO,CAAE,GACfhB,OAAO,CAAC,oCAAoC,CAA6B;MAC3E,MAAMiB,MAAM,GAAGD,OAAO,CAACL,WAAW,CAAC;MAEnC,IAAI,CAACL,MAAM,CAACY,GAAG,CAACL,WAAW,EAAEI,MAAM,CAAC;MAEpC,OAAOA,MAAM;KACd,CAAC,OAAOE,CAAM,EAAE;MACf,IAAIA,CAAC,CAACC,IAAI,KAAK,kBAAkB,EAAE;QACjC,MAAM,IAAInB,QAAA,CAAAoB,YAAY,CAACnB,aAAA,CAAAoB,MAAM,CAACC,OAAO,CAACC,kBAAkB,CAAC;;MAG3D;MACA,MAAML,CAAC;;EAEX;EAEA;;;;;EAKQJ,aAAaA,CACnBH,YAAoB,EACpBC,WAAmB;IAEnB,MAAMY,kBAAkB,GAAG,IAAI,CAACnB,MAAM,CAACoB,GAAG,CAACb,WAAW,CAAC;IAEvD,IAAIY,kBAAkB,KAAKE,SAAS,EAAE;MACpC,OAAOF,kBAAkB;;IAG3B,MAAMG,uBAAuB,GAC3B,IAAI,CAACvB,mBAAmB,CAACwB,QAAQ,CAACjB,YAAY,CAAC;IAEjD,IAAIgB,uBAAuB,KAAKD,SAAS,EAAE;MACzC,OAAO,IAAI;;IAGb,MAAM;MAAEG,OAAO;MAAEC;IAAc,CAAE,GAAGH,uBAAuB;IAE3D,IAAIA,uBAAuB,CAACf,WAAW,KAAKA,WAAW,EAAE;MACvD,OAAO,IAAI;;IAGb,OAAO;MAAEiB,OAAO;MAAEC;IAAc,CAAE;EACpC;;AAnEFC,OAAA,CAAA7B,MAAA,GAAAA,MAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}