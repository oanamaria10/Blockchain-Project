{"ast":null,"code":"import { CARReaderStream } from 'carstream';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport * as API from './api.js';\nimport { create } from './sharded-dag-index.js';\n/**\n * Create a sharded DAG index by indexing blocks in the passed CAR shards.\n *\n * @param {API.UnknownLink} content\n * @param {Uint8Array[]} shards\n * @returns {Promise<API.ShardedDAGIndexView>}\n */\nexport const fromShardArchives = async (content, shards) => {\n  const index = create(content);\n  for (const s of shards) {\n    const digest = await sha256.digest(s);\n    await new ReadableStream({\n      pull: c => {\n        c.enqueue(s);\n        c.close();\n      }\n    }).pipeThrough(new CARReaderStream()).pipeTo(new WritableStream({\n      write({\n        cid,\n        blockOffset,\n        blockLength\n      }) {\n        index.setSlice(digest, cid.multihash, [blockOffset, blockLength]);\n      }\n    }));\n  }\n  return index;\n};\n/**\n * Indexes a sharded DAG\n *\n * @param {import('multiformats').Link} root\n * @param {import('@web3-storage/capabilities/types').CARLink[]} shards\n * @param {Array<Map<API.SliceDigest, API.Position>>} shardIndexes\n */\nexport async function indexShardedDAG(root, shards, shardIndexes) {\n  const index = create(root);\n  for (const [i, shard] of shards.entries()) {\n    const slices = shardIndexes[i];\n    index.shards.set(shard.multihash, slices);\n  }\n  return await index.archive();\n}","map":{"version":3,"names":["CARReaderStream","sha256","API","create","fromShardArchives","content","shards","index","s","digest","ReadableStream","pull","c","enqueue","close","pipeThrough","pipeTo","WritableStream","write","cid","blockOffset","blockLength","setSlice","multihash","indexShardedDAG","root","shardIndexes","i","shard","entries","slices","set","archive"],"sources":["../../src/util.js"],"sourcesContent":[null],"mappings":"AAAA,SAASA,eAAe,QAAQ,WAAW;AAC3C,SAASC,MAAM,QAAQ,0BAA0B;AACjD,OAAO,KAAKC,GAAG,MAAM,UAAU;AAC/B,SAASC,MAAM,QAAQ,wBAAwB;AAE/C;;;;;;;AAOA,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,MAAM,KAAI;EACzD,MAAMC,KAAK,GAAGJ,MAAM,CAACE,OAAO,CAAC;EAC7B,KAAK,MAAMG,CAAC,IAAIF,MAAM,EAAE;IACtB,MAAMG,MAAM,GAAG,MAAMR,MAAM,CAACQ,MAAM,CAACD,CAAC,CAAC;IAErC,MAAM,IAAIE,cAAc,CAAC;MACvBC,IAAI,EAAGC,CAAC,IAAI;QACVA,CAAC,CAACC,OAAO,CAACL,CAAC,CAAC;QACZI,CAAC,CAACE,KAAK,EAAE;MACX;KACD,CAAC,CACCC,WAAW,CAAC,IAAIf,eAAe,EAAE,CAAC,CAClCgB,MAAM,CACL,IAAIC,cAAc,CAAC;MACjBC,KAAKA,CAAC;QAAEC,GAAG;QAAEC,WAAW;QAAEC;MAAW,CAAE;QACrCd,KAAK,CAACe,QAAQ,CAACb,MAAM,EAAEU,GAAG,CAACI,SAAS,EAAE,CAACH,WAAW,EAAEC,WAAW,CAAC,CAAC;MACnE;KACD,CAAC,CACH;;EAEL,OAAOd,KAAK;AACd,CAAC;AAED;;;;;;;AAOA,OAAO,eAAeiB,eAAeA,CAACC,IAAI,EAAEnB,MAAM,EAAEoB,YAAY;EAC9D,MAAMnB,KAAK,GAAGJ,MAAM,CAACsB,IAAI,CAAC;EAC1B,KAAK,MAAM,CAACE,CAAC,EAAEC,KAAK,CAAC,IAAItB,MAAM,CAACuB,OAAO,EAAE,EAAE;IACzC,MAAMC,MAAM,GAAGJ,YAAY,CAACC,CAAC,CAAC;IAC9BpB,KAAK,CAACD,MAAM,CAACyB,GAAG,CAACH,KAAK,CAACL,SAAS,EAAEO,MAAM,CAAC;;EAE3C,OAAO,MAAMvB,KAAK,CAACyB,OAAO,EAAE;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}