{"ast":null,"code":"import { __read, __spread, __values } from \"tslib\";\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { fill } from '@sentry/utils';\nimport * as util from 'util';\n/** Console module integration */\nvar Console = /** @class */function () {\n  function Console() {\n    /**\n     * @inheritDoc\n     */\n    this.name = Console.id;\n  }\n  /**\n   * @inheritDoc\n   */\n  Console.prototype.setupOnce = function () {\n    var e_1, _a;\n    var consoleModule = require('console');\n    try {\n      for (var _b = __values(['debug', 'info', 'warn', 'error', 'log']), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var level = _c.value;\n        fill(consoleModule, level, createConsoleWrapper(level));\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  Console.id = 'Console';\n  return Console;\n}();\nexport { Console };\n/**\n * Wrapper function that'll be used for every console level\n */\nfunction createConsoleWrapper(level) {\n  return function consoleWrapper(originalConsoleMethod) {\n    var sentryLevel;\n    switch (level) {\n      case 'debug':\n        sentryLevel = Severity.Debug;\n        break;\n      case 'error':\n        sentryLevel = Severity.Error;\n        break;\n      case 'info':\n        sentryLevel = Severity.Info;\n        break;\n      case 'warn':\n        sentryLevel = Severity.Warning;\n        break;\n      default:\n        sentryLevel = Severity.Log;\n    }\n    return function () {\n      if (getCurrentHub().getIntegration(Console)) {\n        getCurrentHub().addBreadcrumb({\n          category: 'console',\n          level: sentryLevel,\n          message: util.format.apply(undefined, arguments)\n        }, {\n          input: __spread(arguments),\n          level: level\n        });\n      }\n      originalConsoleMethod.apply(this, arguments);\n    };\n  };\n}","map":{"version":3,"names":["getCurrentHub","Severity","fill","util","Console","name","id","prototype","setupOnce","consoleModule","require","_b","__values","_c","next","done","level","value","createConsoleWrapper","consoleWrapper","originalConsoleMethod","sentryLevel","Debug","Error","Info","Warning","Log","getIntegration","addBreadcrumb","category","message","format","apply","undefined","arguments","input","__spread"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\node\\src\\integrations\\console.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { Integration, Severity } from '@sentry/types';\nimport { fill } from '@sentry/utils';\nimport * as util from 'util';\n\n/** Console module integration */\nexport class Console implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Console';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Console.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    const consoleModule = require('console');\n    for (const level of ['debug', 'info', 'warn', 'error', 'log']) {\n      fill(consoleModule, level, createConsoleWrapper(level));\n    }\n  }\n}\n\n/**\n * Wrapper function that'll be used for every console level\n */\nfunction createConsoleWrapper(level: string): (originalConsoleMethod: () => void) => void {\n  return function consoleWrapper(originalConsoleMethod: () => void): () => void {\n    let sentryLevel: Severity;\n\n    switch (level) {\n      case 'debug':\n        sentryLevel = Severity.Debug;\n        break;\n      case 'error':\n        sentryLevel = Severity.Error;\n        break;\n      case 'info':\n        sentryLevel = Severity.Info;\n        break;\n      case 'warn':\n        sentryLevel = Severity.Warning;\n        break;\n      default:\n        sentryLevel = Severity.Log;\n    }\n\n    return function(this: typeof console): void {\n      if (getCurrentHub().getIntegration(Console)) {\n        getCurrentHub().addBreadcrumb(\n          {\n            category: 'console',\n            level: sentryLevel,\n            message: util.format.apply(undefined, arguments),\n          },\n          {\n            input: [...arguments],\n            level,\n          },\n        );\n      }\n\n      originalConsoleMethod.apply(this, arguments);\n    };\n  };\n}\n"],"mappings":";AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAAsBC,QAAQ,QAAQ,eAAe;AACrD,SAASC,IAAI,QAAQ,eAAe;AACpC,OAAO,KAAKC,IAAI,MAAM,MAAM;AAE5B;AACA,IAAAC,OAAA;EAAA,SAAAA,QAAA;IAME;;;IAGO,KAAAC,IAAI,GAAWD,OAAO,CAACE,EAAE;EAWlC;EATE;;;EAGOF,OAAA,CAAAG,SAAA,CAAAC,SAAS,GAAhB;;IACE,IAAMC,aAAa,GAAGC,OAAO,CAAC,SAAS,CAAC;;MACxC,KAAoB,IAAAC,EAAA,GAAAC,QAAA,EAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC,GAAAC,EAAA,GAAAF,EAAA,CAAAG,IAAA,KAAAD,EAAA,CAAAE,IAAA,EAAAF,EAAA,GAAAF,EAAA,CAAAG,IAAA,IAAE;QAA1D,IAAME,KAAK,GAAAH,EAAA,CAAAI,KAAA;QACdf,IAAI,CAACO,aAAa,EAAEO,KAAK,EAAEE,oBAAoB,CAACF,KAAK,CAAC,CAAC;;;;;;;;;;;;;EAE3D,CAAC;EAlBD;;;EAGcZ,OAAA,CAAAE,EAAE,GAAW,SAAS;EAgBtC,OAAAF,OAAC;CAAA,CApBD;SAAaA,OAAO;AAsBpB;;;AAGA,SAASc,oBAAoBA,CAACF,KAAa;EACzC,OAAO,SAASG,cAAcA,CAACC,qBAAiC;IAC9D,IAAIC,WAAqB;IAEzB,QAAQL,KAAK;MACX,KAAK,OAAO;QACVK,WAAW,GAAGpB,QAAQ,CAACqB,KAAK;QAC5B;MACF,KAAK,OAAO;QACVD,WAAW,GAAGpB,QAAQ,CAACsB,KAAK;QAC5B;MACF,KAAK,MAAM;QACTF,WAAW,GAAGpB,QAAQ,CAACuB,IAAI;QAC3B;MACF,KAAK,MAAM;QACTH,WAAW,GAAGpB,QAAQ,CAACwB,OAAO;QAC9B;MACF;QACEJ,WAAW,GAAGpB,QAAQ,CAACyB,GAAG;;IAG9B,OAAO;MACL,IAAI1B,aAAa,EAAE,CAAC2B,cAAc,CAACvB,OAAO,CAAC,EAAE;QAC3CJ,aAAa,EAAE,CAAC4B,aAAa,CAC3B;UACEC,QAAQ,EAAE,SAAS;UACnBb,KAAK,EAAEK,WAAW;UAClBS,OAAO,EAAE3B,IAAI,CAAC4B,MAAM,CAACC,KAAK,CAACC,SAAS,EAAEC,SAAS;SAChD,EACD;UACEC,KAAK,EAAAC,QAAA,CAAMF,SAAS,CAAC;UACrBlB,KAAK,EAAAA;SACN,CACF;;MAGHI,qBAAqB,CAACY,KAAK,CAAC,IAAI,EAAEE,SAAS,CAAC;IAC9C,CAAC;EACH,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}