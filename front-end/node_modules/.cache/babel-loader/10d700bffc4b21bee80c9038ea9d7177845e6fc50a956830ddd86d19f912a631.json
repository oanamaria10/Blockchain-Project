{"ast":null,"code":"'use strict';\n\n/**\n * @module Base\n */\n/**\n * Module dependencies.\n */\nvar diff = require('diff');\nvar milliseconds = require('ms');\nvar utils = require('../utils');\nvar supportsColor = require('supports-color');\nvar symbols = require('log-symbols');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nconst isBrowser = utils.isBrowser();\nfunction getBrowserWindowSize() {\n  if ('innerHeight' in global) {\n    return [global.innerHeight, global.innerWidth];\n  }\n  // In a Web Worker, the DOM Window is not available.\n  return [640, 480];\n}\n\n/**\n * Expose `Base`.\n */\n\nexports = module.exports = Base;\n\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = isBrowser || process.stdout.isTTY && process.stderr.isTTY;\n\n/**\n * Save log references to avoid tests interfering (see GH-3604).\n */\nvar consoleLog = console.log;\n\n/**\n * Enable coloring by default, except in the browser interface.\n */\n\nexports.useColors = !isBrowser && (supportsColor.stdout || process.env.MOCHA_COLORS !== undefined);\n\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n\n/**\n * Truncate diffs longer than this value to avoid slow performance\n */\nexports.maxDiffSize = 8192;\n\n/**\n * Default color map.\n */\n\nexports.colors = {\n  pass: 90,\n  fail: 31,\n  'bright pass': 92,\n  'bright fail': 91,\n  'bright yellow': 93,\n  pending: 36,\n  suite: 0,\n  'error title': 0,\n  'error message': 31,\n  'error stack': 90,\n  checkmark: 32,\n  fast: 90,\n  medium: 33,\n  slow: 31,\n  green: 32,\n  light: 90,\n  'diff gutter': 90,\n  'diff added': 32,\n  'diff removed': 31,\n  'diff added inline': '30;42',\n  'diff removed inline': '30;41'\n};\n\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: symbols.success,\n  err: symbols.error,\n  dot: '.',\n  comma: ',',\n  bang: '!'\n};\n\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @private\n * @param {string} type\n * @param {string} str\n * @return {string}\n */\nvar color = exports.color = function (type, str) {\n  if (!exports.useColors) {\n    return String(str);\n  }\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n};\n\n/**\n * Expose term window size, with some defaults for when stderr is not a tty.\n */\n\nexports.window = {\n  width: 75\n};\nif (isatty) {\n  if (isBrowser) {\n    exports.window.width = getBrowserWindowSize()[1];\n  } else {\n    exports.window.width = process.stdout.getWindowSize(1)[0];\n  }\n}\n\n/**\n * Expose some basic cursor interactions that are common among reporters.\n */\n\nexports.cursor = {\n  hide: function () {\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n  show: function () {\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n  deleteLine: function () {\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n  beginningOfLine: function () {\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n  CR: function () {\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\nvar showDiff = exports.showDiff = function (err) {\n  return err && err.showDiff !== false && sameType(err.actual, err.expected) && err.expected !== undefined;\n};\nfunction stringifyDiffObjs(err) {\n  if (!utils.isString(err.actual) || !utils.isString(err.expected)) {\n    err.actual = utils.stringify(err.actual);\n    err.expected = utils.stringify(err.expected);\n  }\n}\n\n/**\n * Returns a diff between 2 strings with coloured ANSI output.\n *\n * @description\n * The diff will be either inline or unified dependent on the value\n * of `Base.inlineDiff`.\n *\n * @param {string} actual\n * @param {string} expected\n * @return {string} Diff\n */\n\nvar generateDiff = exports.generateDiff = function (actual, expected) {\n  try {\n    var maxLen = exports.maxDiffSize;\n    var skipped = 0;\n    if (maxLen > 0) {\n      skipped = Math.max(actual.length - maxLen, expected.length - maxLen);\n      actual = actual.slice(0, maxLen);\n      expected = expected.slice(0, maxLen);\n    }\n    let result = exports.inlineDiffs ? inlineDiff(actual, expected) : unifiedDiff(actual, expected);\n    if (skipped > 0) {\n      result = `${result}\\n      [mocha] output truncated to ${maxLen} characters, see \"maxDiffSize\" reporter-option\\n`;\n    }\n    return result;\n  } catch (err) {\n    var msg = '\\n      ' + color('diff added', '+ expected') + ' ' + color('diff removed', '- actual:  failed to generate Mocha diff') + '\\n';\n    return msg;\n  }\n};\n\n/**\n * Outputs the given `failures` as a list.\n *\n * @public\n * @memberof Mocha.reporters.Base\n * @variation 1\n * @param {Object[]} failures - Each is Test instance with corresponding\n *     Error property\n */\nexports.list = function (failures) {\n  var multipleErr, multipleTest;\n  Base.consoleLog();\n  failures.forEach(function (test, i) {\n    // format\n    var fmt = color('error title', '  %s) %s:\\n') + color('error message', '     %s') + color('error stack', '\\n%s\\n');\n\n    // msg\n    var msg;\n    var err;\n    if (test.err && test.err.multiple) {\n      if (multipleTest !== test) {\n        multipleTest = test;\n        multipleErr = [test.err].concat(test.err.multiple);\n      }\n      err = multipleErr.shift();\n    } else {\n      err = test.err;\n    }\n    var message;\n    if (typeof err.inspect === 'function') {\n      message = err.inspect() + '';\n    } else if (err.message && typeof err.message.toString === 'function') {\n      message = err.message + '';\n    } else {\n      message = '';\n    }\n    var stack = err.stack || message;\n    var index = message ? stack.indexOf(message) : -1;\n    if (index === -1) {\n      msg = message;\n    } else {\n      index += message.length;\n      msg = stack.slice(0, index);\n      // remove msg from stack\n      stack = stack.slice(index + 1);\n    }\n\n    // uncaught\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    }\n    // explicitly show diff\n    if (!exports.hideDiff && showDiff(err)) {\n      stringifyDiffObjs(err);\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n      msg += generateDiff(err.actual, err.expected);\n    }\n\n    // indent stack trace\n    stack = stack.replace(/^/gm, '  ');\n\n    // indented test title\n    var testTitle = '';\n    test.titlePath().forEach(function (str, index) {\n      if (index !== 0) {\n        testTitle += '\\n     ';\n      }\n      for (var i = 0; i < index; i++) {\n        testTitle += '  ';\n      }\n      testTitle += str;\n    });\n    Base.consoleLog(fmt, i + 1, testTitle, msg, stack);\n  });\n};\n\n/**\n * Constructs a new `Base` reporter instance.\n *\n * @description\n * All other reporters generally inherit from this reporter.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Base(runner, options) {\n  var failures = this.failures = [];\n  if (!runner) {\n    throw new TypeError('Missing runner argument');\n  }\n  this.options = options || {};\n  this.runner = runner;\n  this.stats = runner.stats; // assigned so Reporters keep a closer reference\n\n  var maxDiffSizeOpt = this.options.reporterOption && this.options.reporterOption.maxDiffSize;\n  if (maxDiffSizeOpt !== undefined && !isNaN(Number(maxDiffSizeOpt))) {\n    exports.maxDiffSize = Number(maxDiffSizeOpt);\n  }\n  runner.on(EVENT_TEST_PASS, function (test) {\n    if (test.duration > test.slow()) {\n      test.speed = 'slow';\n    } else if (test.duration > test.slow() / 2) {\n      test.speed = 'medium';\n    } else {\n      test.speed = 'fast';\n    }\n  });\n  runner.on(EVENT_TEST_FAIL, function (test, err) {\n    if (showDiff(err)) {\n      stringifyDiffObjs(err);\n    }\n    // more than one error per test\n    if (test.err && err instanceof Error) {\n      test.err.multiple = (test.err.multiple || []).concat(err);\n    } else {\n      test.err = err;\n    }\n    failures.push(test);\n  });\n}\n\n/**\n * Outputs common epilogue used by many of the bundled reporters.\n *\n * @public\n * @memberof Mocha.reporters\n */\nBase.prototype.epilogue = function () {\n  var stats = this.stats;\n  var fmt;\n  Base.consoleLog();\n\n  // passes\n  fmt = color('bright pass', ' ') + color('green', ' %d passing') + color('light', ' (%s)');\n  Base.consoleLog(fmt, stats.passes || 0, milliseconds(stats.duration));\n\n  // pending\n  if (stats.pending) {\n    fmt = color('pending', ' ') + color('pending', ' %d pending');\n    Base.consoleLog(fmt, stats.pending);\n  }\n\n  // failures\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n    Base.consoleLog(fmt, stats.failures);\n    Base.list(this.failures);\n    Base.consoleLog();\n  }\n  Base.consoleLog();\n};\n\n/**\n * Pads the given `str` to `len`.\n *\n * @private\n * @param {string} str\n * @param {string} len\n * @return {string}\n */\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n\n/**\n * Returns inline diff between 2 strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} Diff\n */\nfunction inlineDiff(actual, expected) {\n  var msg = errorDiff(actual, expected);\n\n  // linenos\n  var lines = msg.split('\\n');\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines.map(function (str, i) {\n      return pad(++i, width) + ' |' + ' ' + str;\n    }).join('\\n');\n  }\n\n  // legend\n  msg = '\\n' + color('diff removed inline', 'actual') + ' ' + color('diff added inline', 'expected') + '\\n\\n' + msg + '\\n';\n\n  // indent\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n\n/**\n * Returns unified diff between two strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} The diff.\n */\nfunction unifiedDiff(actual, expected) {\n  var indent = '      ';\n  function cleanUp(line) {\n    if (line[0] === '+') {\n      return indent + colorLines('diff added', line);\n    }\n    if (line[0] === '-') {\n      return indent + colorLines('diff removed', line);\n    }\n    if (line.match(/@@/)) {\n      return '--';\n    }\n    if (line.match(/\\\\ No newline/)) {\n      return null;\n    }\n    return indent + line;\n  }\n  function notBlank(line) {\n    return typeof line !== 'undefined' && line !== null;\n  }\n  var msg = diff.createPatch('string', actual, expected);\n  var lines = msg.split('\\n').splice(5);\n  return '\\n      ' + colorLines('diff added', '+ expected') + ' ' + colorLines('diff removed', '- actual') + '\\n\\n' + lines.map(cleanUp).filter(notBlank).join('\\n');\n}\n\n/**\n * Returns character diff for `err`.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} the diff\n */\nfunction errorDiff(actual, expected) {\n  return diff.diffWordsWithSpace(actual, expected).map(function (str) {\n    if (str.added) {\n      return colorLines('diff added inline', str.value);\n    }\n    if (str.removed) {\n      return colorLines('diff removed inline', str.value);\n    }\n    return str.value;\n  }).join('');\n}\n\n/**\n * Colors lines for `str`, using the color `name`.\n *\n * @private\n * @param {string} name\n * @param {string} str\n * @return {string}\n */\nfunction colorLines(name, str) {\n  return str.split('\\n').map(function (str) {\n    return color(name, str);\n  }).join('\\n');\n}\n\n/**\n * Object#toString reference.\n */\nvar objToString = Object.prototype.toString;\n\n/**\n * Checks that a / b have the same type.\n *\n * @private\n * @param {Object} a\n * @param {Object} b\n * @return {boolean}\n */\nfunction sameType(a, b) {\n  return objToString.call(a) === objToString.call(b);\n}\nBase.consoleLog = consoleLog;\nBase.abstract = true;","map":{"version":3,"names":["diff","require","milliseconds","utils","supportsColor","symbols","constants","EVENT_TEST_PASS","EVENT_TEST_FAIL","isBrowser","getBrowserWindowSize","global","innerHeight","innerWidth","exports","module","Base","isatty","process","stdout","isTTY","stderr","consoleLog","console","log","useColors","env","MOCHA_COLORS","undefined","inlineDiffs","maxDiffSize","colors","pass","fail","pending","suite","checkmark","fast","medium","slow","green","light","ok","success","err","error","dot","comma","bang","color","type","str","String","window","width","getWindowSize","cursor","hide","write","show","deleteLine","beginningOfLine","CR","showDiff","sameType","actual","expected","stringifyDiffObjs","isString","stringify","generateDiff","maxLen","skipped","Math","max","length","slice","result","inlineDiff","unifiedDiff","msg","list","failures","multipleErr","multipleTest","forEach","test","i","fmt","multiple","concat","shift","message","inspect","toString","stack","index","indexOf","uncaught","hideDiff","match","replace","testTitle","titlePath","runner","options","TypeError","stats","maxDiffSizeOpt","reporterOption","isNaN","Number","on","duration","speed","Error","push","prototype","epilogue","passes","pad","len","Array","join","errorDiff","lines","split","map","indent","cleanUp","line","colorLines","notBlank","createPatch","splice","filter","diffWordsWithSpace","added","value","removed","name","objToString","Object","a","b","call","abstract"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/mocha/lib/reporters/base.js"],"sourcesContent":["'use strict';\n/**\n * @module Base\n */\n/**\n * Module dependencies.\n */\n\nvar diff = require('diff');\nvar milliseconds = require('ms');\nvar utils = require('../utils');\nvar supportsColor = require('supports-color');\nvar symbols = require('log-symbols');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\n\nconst isBrowser = utils.isBrowser();\n\nfunction getBrowserWindowSize() {\n  if ('innerHeight' in global) {\n    return [global.innerHeight, global.innerWidth];\n  }\n  // In a Web Worker, the DOM Window is not available.\n  return [640, 480];\n}\n\n/**\n * Expose `Base`.\n */\n\nexports = module.exports = Base;\n\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = isBrowser || (process.stdout.isTTY && process.stderr.isTTY);\n\n/**\n * Save log references to avoid tests interfering (see GH-3604).\n */\nvar consoleLog = console.log;\n\n/**\n * Enable coloring by default, except in the browser interface.\n */\n\nexports.useColors =\n  !isBrowser &&\n  (supportsColor.stdout || process.env.MOCHA_COLORS !== undefined);\n\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n\n/**\n * Truncate diffs longer than this value to avoid slow performance\n */\nexports.maxDiffSize = 8192;\n\n/**\n * Default color map.\n */\n\nexports.colors = {\n  pass: 90,\n  fail: 31,\n  'bright pass': 92,\n  'bright fail': 91,\n  'bright yellow': 93,\n  pending: 36,\n  suite: 0,\n  'error title': 0,\n  'error message': 31,\n  'error stack': 90,\n  checkmark: 32,\n  fast: 90,\n  medium: 33,\n  slow: 31,\n  green: 32,\n  light: 90,\n  'diff gutter': 90,\n  'diff added': 32,\n  'diff removed': 31,\n  'diff added inline': '30;42',\n  'diff removed inline': '30;41'\n};\n\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: symbols.success,\n  err: symbols.error,\n  dot: '.',\n  comma: ',',\n  bang: '!'\n};\n\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @private\n * @param {string} type\n * @param {string} str\n * @return {string}\n */\nvar color = (exports.color = function (type, str) {\n  if (!exports.useColors) {\n    return String(str);\n  }\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n});\n\n/**\n * Expose term window size, with some defaults for when stderr is not a tty.\n */\n\nexports.window = {\n  width: 75\n};\n\nif (isatty) {\n  if (isBrowser) {\n    exports.window.width = getBrowserWindowSize()[1];\n  } else {\n    exports.window.width = process.stdout.getWindowSize(1)[0];\n  }\n}\n\n/**\n * Expose some basic cursor interactions that are common among reporters.\n */\n\nexports.cursor = {\n  hide: function () {\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n\n  show: function () {\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n\n  deleteLine: function () {\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n\n  beginningOfLine: function () {\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n\n  CR: function () {\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\n\nvar showDiff = (exports.showDiff = function (err) {\n  return (\n    err &&\n    err.showDiff !== false &&\n    sameType(err.actual, err.expected) &&\n    err.expected !== undefined\n  );\n});\n\nfunction stringifyDiffObjs(err) {\n  if (!utils.isString(err.actual) || !utils.isString(err.expected)) {\n    err.actual = utils.stringify(err.actual);\n    err.expected = utils.stringify(err.expected);\n  }\n}\n\n/**\n * Returns a diff between 2 strings with coloured ANSI output.\n *\n * @description\n * The diff will be either inline or unified dependent on the value\n * of `Base.inlineDiff`.\n *\n * @param {string} actual\n * @param {string} expected\n * @return {string} Diff\n */\n\nvar generateDiff = (exports.generateDiff = function (actual, expected) {\n  try {\n    var maxLen = exports.maxDiffSize;\n    var skipped = 0;\n    if (maxLen > 0) {\n      skipped = Math.max(actual.length - maxLen, expected.length - maxLen);\n      actual = actual.slice(0, maxLen);\n      expected = expected.slice(0, maxLen);\n    }\n    let result = exports.inlineDiffs\n      ? inlineDiff(actual, expected)\n      : unifiedDiff(actual, expected);\n    if (skipped > 0) {\n      result = `${result}\\n      [mocha] output truncated to ${maxLen} characters, see \"maxDiffSize\" reporter-option\\n`;\n    }\n    return result;\n  } catch (err) {\n    var msg =\n      '\\n      ' +\n      color('diff added', '+ expected') +\n      ' ' +\n      color('diff removed', '- actual:  failed to generate Mocha diff') +\n      '\\n';\n    return msg;\n  }\n});\n\n/**\n * Outputs the given `failures` as a list.\n *\n * @public\n * @memberof Mocha.reporters.Base\n * @variation 1\n * @param {Object[]} failures - Each is Test instance with corresponding\n *     Error property\n */\nexports.list = function (failures) {\n  var multipleErr, multipleTest;\n  Base.consoleLog();\n  failures.forEach(function (test, i) {\n    // format\n    var fmt =\n      color('error title', '  %s) %s:\\n') +\n      color('error message', '     %s') +\n      color('error stack', '\\n%s\\n');\n\n    // msg\n    var msg;\n    var err;\n    if (test.err && test.err.multiple) {\n      if (multipleTest !== test) {\n        multipleTest = test;\n        multipleErr = [test.err].concat(test.err.multiple);\n      }\n      err = multipleErr.shift();\n    } else {\n      err = test.err;\n    }\n    var message;\n    if (typeof err.inspect === 'function') {\n      message = err.inspect() + '';\n    } else if (err.message && typeof err.message.toString === 'function') {\n      message = err.message + '';\n    } else {\n      message = '';\n    }\n    var stack = err.stack || message;\n    var index = message ? stack.indexOf(message) : -1;\n\n    if (index === -1) {\n      msg = message;\n    } else {\n      index += message.length;\n      msg = stack.slice(0, index);\n      // remove msg from stack\n      stack = stack.slice(index + 1);\n    }\n\n    // uncaught\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    }\n    // explicitly show diff\n    if (!exports.hideDiff && showDiff(err)) {\n      stringifyDiffObjs(err);\n      fmt =\n        color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n\n      msg += generateDiff(err.actual, err.expected);\n    }\n\n    // indent stack trace\n    stack = stack.replace(/^/gm, '  ');\n\n    // indented test title\n    var testTitle = '';\n    test.titlePath().forEach(function (str, index) {\n      if (index !== 0) {\n        testTitle += '\\n     ';\n      }\n      for (var i = 0; i < index; i++) {\n        testTitle += '  ';\n      }\n      testTitle += str;\n    });\n\n    Base.consoleLog(fmt, i + 1, testTitle, msg, stack);\n  });\n};\n\n/**\n * Constructs a new `Base` reporter instance.\n *\n * @description\n * All other reporters generally inherit from this reporter.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Base(runner, options) {\n  var failures = (this.failures = []);\n\n  if (!runner) {\n    throw new TypeError('Missing runner argument');\n  }\n  this.options = options || {};\n  this.runner = runner;\n  this.stats = runner.stats; // assigned so Reporters keep a closer reference\n\n  var maxDiffSizeOpt =\n    this.options.reporterOption && this.options.reporterOption.maxDiffSize;\n  if (maxDiffSizeOpt !== undefined && !isNaN(Number(maxDiffSizeOpt))) {\n    exports.maxDiffSize = Number(maxDiffSizeOpt);\n  }\n\n  runner.on(EVENT_TEST_PASS, function (test) {\n    if (test.duration > test.slow()) {\n      test.speed = 'slow';\n    } else if (test.duration > test.slow() / 2) {\n      test.speed = 'medium';\n    } else {\n      test.speed = 'fast';\n    }\n  });\n\n  runner.on(EVENT_TEST_FAIL, function (test, err) {\n    if (showDiff(err)) {\n      stringifyDiffObjs(err);\n    }\n    // more than one error per test\n    if (test.err && err instanceof Error) {\n      test.err.multiple = (test.err.multiple || []).concat(err);\n    } else {\n      test.err = err;\n    }\n    failures.push(test);\n  });\n}\n\n/**\n * Outputs common epilogue used by many of the bundled reporters.\n *\n * @public\n * @memberof Mocha.reporters\n */\nBase.prototype.epilogue = function () {\n  var stats = this.stats;\n  var fmt;\n\n  Base.consoleLog();\n\n  // passes\n  fmt =\n    color('bright pass', ' ') +\n    color('green', ' %d passing') +\n    color('light', ' (%s)');\n\n  Base.consoleLog(fmt, stats.passes || 0, milliseconds(stats.duration));\n\n  // pending\n  if (stats.pending) {\n    fmt = color('pending', ' ') + color('pending', ' %d pending');\n\n    Base.consoleLog(fmt, stats.pending);\n  }\n\n  // failures\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n\n    Base.consoleLog(fmt, stats.failures);\n\n    Base.list(this.failures);\n    Base.consoleLog();\n  }\n\n  Base.consoleLog();\n};\n\n/**\n * Pads the given `str` to `len`.\n *\n * @private\n * @param {string} str\n * @param {string} len\n * @return {string}\n */\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n\n/**\n * Returns inline diff between 2 strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} Diff\n */\nfunction inlineDiff(actual, expected) {\n  var msg = errorDiff(actual, expected);\n\n  // linenos\n  var lines = msg.split('\\n');\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines\n      .map(function (str, i) {\n        return pad(++i, width) + ' |' + ' ' + str;\n      })\n      .join('\\n');\n  }\n\n  // legend\n  msg =\n    '\\n' +\n    color('diff removed inline', 'actual') +\n    ' ' +\n    color('diff added inline', 'expected') +\n    '\\n\\n' +\n    msg +\n    '\\n';\n\n  // indent\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n\n/**\n * Returns unified diff between two strings with coloured ANSI output.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} The diff.\n */\nfunction unifiedDiff(actual, expected) {\n  var indent = '      ';\n  function cleanUp(line) {\n    if (line[0] === '+') {\n      return indent + colorLines('diff added', line);\n    }\n    if (line[0] === '-') {\n      return indent + colorLines('diff removed', line);\n    }\n    if (line.match(/@@/)) {\n      return '--';\n    }\n    if (line.match(/\\\\ No newline/)) {\n      return null;\n    }\n    return indent + line;\n  }\n  function notBlank(line) {\n    return typeof line !== 'undefined' && line !== null;\n  }\n  var msg = diff.createPatch('string', actual, expected);\n  var lines = msg.split('\\n').splice(5);\n  return (\n    '\\n      ' +\n    colorLines('diff added', '+ expected') +\n    ' ' +\n    colorLines('diff removed', '- actual') +\n    '\\n\\n' +\n    lines.map(cleanUp).filter(notBlank).join('\\n')\n  );\n}\n\n/**\n * Returns character diff for `err`.\n *\n * @private\n * @param {String} actual\n * @param {String} expected\n * @return {string} the diff\n */\nfunction errorDiff(actual, expected) {\n  return diff\n    .diffWordsWithSpace(actual, expected)\n    .map(function (str) {\n      if (str.added) {\n        return colorLines('diff added inline', str.value);\n      }\n      if (str.removed) {\n        return colorLines('diff removed inline', str.value);\n      }\n      return str.value;\n    })\n    .join('');\n}\n\n/**\n * Colors lines for `str`, using the color `name`.\n *\n * @private\n * @param {string} name\n * @param {string} str\n * @return {string}\n */\nfunction colorLines(name, str) {\n  return str\n    .split('\\n')\n    .map(function (str) {\n      return color(name, str);\n    })\n    .join('\\n');\n}\n\n/**\n * Object#toString reference.\n */\nvar objToString = Object.prototype.toString;\n\n/**\n * Checks that a / b have the same type.\n *\n * @private\n * @param {Object} a\n * @param {Object} b\n * @return {boolean}\n */\nfunction sameType(a, b) {\n  return objToString.call(a) === objToString.call(b);\n}\n\nBase.consoleLog = consoleLog;\n\nBase.abstract = true;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}