{"ast":null,"code":"import { varint } from 'multiformats';\n\n/**\n *\n * @param {number} code\n * @param {Uint8Array} bytes\n */\nexport const tagWith = (code, bytes) => {\n  const offset = varint.encodingLength(code);\n  const multiformat = new Uint8Array(bytes.byteLength + offset);\n  varint.encodeTo(code, multiformat, 0);\n  multiformat.set(bytes, offset);\n  return multiformat;\n};\n\n/**\n * @param {number} code\n * @param {Uint8Array} source\n * @param {number} byteOffset\n * @returns\n */\nexport const untagWith = (code, source, byteOffset = 0) => {\n  const bytes = byteOffset !== 0 ? source.subarray(byteOffset) : source;\n  const [tag, size] = varint.decode(bytes);\n  if (tag !== code) {\n    throw new Error(`Expected multiformat with 0x${code.toString(16)} tag instead got 0x${tag.toString(16)}`);\n  } else {\n    return new Uint8Array(bytes.buffer, bytes.byteOffset + size);\n  }\n};\nexport const encodingLength = varint.encodingLength;\nexport const encodeTo = varint.encodeTo;\nexport const decode = varint.decode;","map":{"version":3,"names":["varint","tagWith","code","bytes","offset","encodingLength","multiformat","Uint8Array","byteLength","encodeTo","set","untagWith","source","byteOffset","subarray","tag","size","decode","Error","toString","buffer"],"sources":["C:/FACULTATE/Proiect/node_modules/@ucanto/principal/src/multiformat.js"],"sourcesContent":["import { varint } from 'multiformats'\n\n/**\n *\n * @param {number} code\n * @param {Uint8Array} bytes\n */\nexport const tagWith = (code, bytes) => {\n  const offset = varint.encodingLength(code)\n  const multiformat = new Uint8Array(bytes.byteLength + offset)\n  varint.encodeTo(code, multiformat, 0)\n  multiformat.set(bytes, offset)\n\n  return multiformat\n}\n\n/**\n * @param {number} code\n * @param {Uint8Array} source\n * @param {number} byteOffset\n * @returns\n */\nexport const untagWith = (code, source, byteOffset = 0) => {\n  const bytes = byteOffset !== 0 ? source.subarray(byteOffset) : source\n  const [tag, size] = varint.decode(bytes)\n  if (tag !== code) {\n    throw new Error(\n      `Expected multiformat with 0x${code.toString(\n        16\n      )} tag instead got 0x${tag.toString(16)}`\n    )\n  } else {\n    return new Uint8Array(bytes.buffer, bytes.byteOffset + size)\n  }\n}\n\nexport const encodingLength = varint.encodingLength\nexport const encodeTo = varint.encodeTo\nexport const decode = varint.decode\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;EACtC,MAAMC,MAAM,GAAGJ,MAAM,CAACK,cAAc,CAACH,IAAI,CAAC;EAC1C,MAAMI,WAAW,GAAG,IAAIC,UAAU,CAACJ,KAAK,CAACK,UAAU,GAAGJ,MAAM,CAAC;EAC7DJ,MAAM,CAACS,QAAQ,CAACP,IAAI,EAAEI,WAAW,EAAE,CAAC,CAAC;EACrCA,WAAW,CAACI,GAAG,CAACP,KAAK,EAAEC,MAAM,CAAC;EAE9B,OAAOE,WAAW;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,SAAS,GAAGA,CAACT,IAAI,EAAEU,MAAM,EAAEC,UAAU,GAAG,CAAC,KAAK;EACzD,MAAMV,KAAK,GAAGU,UAAU,KAAK,CAAC,GAAGD,MAAM,CAACE,QAAQ,CAACD,UAAU,CAAC,GAAGD,MAAM;EACrE,MAAM,CAACG,GAAG,EAAEC,IAAI,CAAC,GAAGhB,MAAM,CAACiB,MAAM,CAACd,KAAK,CAAC;EACxC,IAAIY,GAAG,KAAKb,IAAI,EAAE;IAChB,MAAM,IAAIgB,KAAK,CACZ,+BAA8BhB,IAAI,CAACiB,QAAQ,CAC1C,EACF,CAAE,sBAAqBJ,GAAG,CAACI,QAAQ,CAAC,EAAE,CAAE,EAC1C,CAAC;EACH,CAAC,MAAM;IACL,OAAO,IAAIZ,UAAU,CAACJ,KAAK,CAACiB,MAAM,EAAEjB,KAAK,CAACU,UAAU,GAAGG,IAAI,CAAC;EAC9D;AACF,CAAC;AAED,OAAO,MAAMX,cAAc,GAAGL,MAAM,CAACK,cAAc;AACnD,OAAO,MAAMI,QAAQ,GAAGT,MAAM,CAACS,QAAQ;AACvC,OAAO,MAAMQ,MAAM,GAAGjB,MAAM,CAACiB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}