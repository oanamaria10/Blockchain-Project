{"ast":null,"code":"import { __assign } from \"tslib\";\nexport { Severity, Status } from '@sentry/types';\nexport { addGlobalEventProcessor, addBreadcrumb, captureException, captureEvent, captureMessage, configureScope, getHubFromCarrier, getCurrentHub, Hub, makeMain, Scope, startTransaction, setContext, setExtra, setExtras, setTag, setTags, setUser, withScope } from '@sentry/core';\nexport { NodeBackend } from './backend';\nexport { NodeClient } from './client';\nexport { defaultIntegrations, init, lastEventId, flush, close } from './sdk';\nexport { SDK_NAME, SDK_VERSION } from './version';\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getMainCarrier } from '@sentry/hub';\nimport * as domain from 'domain';\nimport * as Handlers from './handlers';\nimport * as NodeIntegrations from './integrations';\nimport * as Transports from './transports';\nvar INTEGRATIONS = __assign(__assign({}, CoreIntegrations), NodeIntegrations);\nexport { INTEGRATIONS as Integrations, Transports, Handlers };\n// We need to patch domain on the global __SENTRY__ object to make it work for node in cross-platform packages like\n// @sentry/hub. If we don't do this, browser bundlers will have troubles resolving `require('domain')`.\nvar carrier = getMainCarrier();\nif (carrier.__SENTRY__) {\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  carrier.__SENTRY__.extensions.domain = carrier.__SENTRY__.extensions.domain || domain;\n}","map":{"version":3,"names":["Severity","Status","addGlobalEventProcessor","addBreadcrumb","captureException","captureEvent","captureMessage","configureScope","getHubFromCarrier","getCurrentHub","Hub","makeMain","Scope","startTransaction","setContext","setExtra","setExtras","setTag","setTags","setUser","withScope","NodeBackend","NodeClient","defaultIntegrations","init","lastEventId","flush","close","SDK_NAME","SDK_VERSION","Integrations","CoreIntegrations","getMainCarrier","domain","Handlers","NodeIntegrations","Transports","INTEGRATIONS","__assign","carrier","__SENTRY__","extensions"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@sentry\\node\\src\\index.ts"],"sourcesContent":["export {\n  Breadcrumb,\n  BreadcrumbHint,\n  Request,\n  SdkInfo,\n  Event,\n  EventHint,\n  Exception,\n  Response,\n  Severity,\n  StackFrame,\n  Stacktrace,\n  Status,\n  Thread,\n  User,\n} from '@sentry/types';\n\nexport {\n  addGlobalEventProcessor,\n  addBreadcrumb,\n  captureException,\n  captureEvent,\n  captureMessage,\n  configureScope,\n  getHubFromCarrier,\n  getCurrentHub,\n  Hub,\n  makeMain,\n  Scope,\n  startTransaction,\n  setContext,\n  setExtra,\n  setExtras,\n  setTag,\n  setTags,\n  setUser,\n  withScope,\n} from '@sentry/core';\n\nexport { NodeBackend, NodeOptions } from './backend';\nexport { NodeClient } from './client';\nexport { defaultIntegrations, init, lastEventId, flush, close } from './sdk';\nexport { SDK_NAME, SDK_VERSION } from './version';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getMainCarrier } from '@sentry/hub';\nimport * as domain from 'domain';\n\nimport * as Handlers from './handlers';\nimport * as NodeIntegrations from './integrations';\nimport * as Transports from './transports';\n\nconst INTEGRATIONS = {\n  ...CoreIntegrations,\n  ...NodeIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Transports, Handlers };\n\n// We need to patch domain on the global __SENTRY__ object to make it work for node in cross-platform packages like\n// @sentry/hub. If we don't do this, browser bundlers will have troubles resolving `require('domain')`.\nconst carrier = getMainCarrier();\nif (carrier.__SENTRY__) {\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  carrier.__SENTRY__.extensions.domain = carrier.__SENTRY__.extensions.domain || domain;\n}\n"],"mappings":";AAAA,SASEA,QAAQ,EAGRC,MAAM,QAGD,eAAe;AAEtB,SACEC,uBAAuB,EACvBC,aAAa,EACbC,gBAAgB,EAChBC,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,iBAAiB,EACjBC,aAAa,EACbC,GAAG,EACHC,QAAQ,EACRC,KAAK,EACLC,gBAAgB,EAChBC,UAAU,EACVC,QAAQ,EACRC,SAAS,EACTC,MAAM,EACNC,OAAO,EACPC,OAAO,EACPC,SAAS,QACJ,cAAc;AAErB,SAASC,WAAW,QAAqB,WAAW;AACpD,SAASC,UAAU,QAAQ,UAAU;AACrC,SAASC,mBAAmB,EAAEC,IAAI,EAAEC,WAAW,EAAEC,KAAK,EAAEC,KAAK,QAAQ,OAAO;AAC5E,SAASC,QAAQ,EAAEC,WAAW,QAAQ,WAAW;AAEjD,SAASC,YAAY,IAAIC,gBAAgB,QAAQ,cAAc;AAC/D,SAASC,cAAc,QAAQ,aAAa;AAC5C,OAAO,KAAKC,MAAM,MAAM,QAAQ;AAEhC,OAAO,KAAKC,QAAQ,MAAM,YAAY;AACtC,OAAO,KAAKC,gBAAgB,MAAM,gBAAgB;AAClD,OAAO,KAAKC,UAAU,MAAM,cAAc;AAE1C,IAAMC,YAAY,GAAAC,QAAA,CAAAA,QAAA,KACbP,gBAAgB,GAChBI,gBAAgB,CACpB;AAED,SAASE,YAAY,IAAIP,YAAY,EAAEM,UAAU,EAAEF,QAAQ;AAE3D;AACA;AACA,IAAMK,OAAO,GAAGP,cAAc,EAAE;AAChC,IAAIO,OAAO,CAACC,UAAU,EAAE;EACtBD,OAAO,CAACC,UAAU,CAACC,UAAU,GAAGF,OAAO,CAACC,UAAU,CAACC,UAAU,IAAI,EAAE;EACnEF,OAAO,CAACC,UAAU,CAACC,UAAU,CAACR,MAAM,GAAGM,OAAO,CAACC,UAAU,CAACC,UAAU,CAACR,MAAM,IAAIA,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}