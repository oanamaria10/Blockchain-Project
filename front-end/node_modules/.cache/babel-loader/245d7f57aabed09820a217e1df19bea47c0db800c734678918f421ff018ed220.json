{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\n\n/* auto-generated by NAPI-RS */\n\nconst {\n  existsSync,\n  readFileSync\n} = require('fs');\nconst {\n  join\n} = require('path');\nconst {\n  platform,\n  arch\n} = process;\nlet nativeBinding = null;\nlet localFileExisted = false;\nlet loadError = null;\nfunction isMusl() {\n  // For Node 10\n  if (!process.report || typeof process.report.getReport !== 'function') {\n    try {\n      const lddPath = require('child_process').execSync('which ldd').toString().trim();\n      return readFileSync(lddPath, 'utf8').includes('musl');\n    } catch (e) {\n      return true;\n    }\n  } else {\n    const {\n      glibcVersionRuntime\n    } = process.report.getReport().header;\n    return !glibcVersionRuntime;\n  }\n}\nswitch (platform) {\n  case 'android':\n    switch (arch) {\n      case 'arm64':\n        localFileExisted = existsSync(join(__dirname, 'edr.android-arm64.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.android-arm64.node');\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-android-arm64');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case 'arm':\n        localFileExisted = existsSync(join(__dirname, 'edr.android-arm-eabi.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.android-arm-eabi.node');\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-android-arm-eabi');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Android ${arch}`);\n    }\n    break;\n  case 'win32':\n    switch (arch) {\n      case 'x64':\n        localFileExisted = existsSync(join(__dirname, 'edr.win32-x64-msvc.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.win32-x64-msvc.node');\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-win32-x64-msvc');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case 'ia32':\n        localFileExisted = existsSync(join(__dirname, 'edr.win32-ia32-msvc.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.win32-ia32-msvc.node');\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-win32-ia32-msvc');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case 'arm64':\n        localFileExisted = existsSync(join(__dirname, 'edr.win32-arm64-msvc.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.win32-arm64-msvc.node');\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-win32-arm64-msvc');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Windows: ${arch}`);\n    }\n    break;\n  case 'darwin':\n    localFileExisted = existsSync(join(__dirname, 'edr.darwin-universal.node'));\n    try {\n      if (localFileExisted) {\n        nativeBinding = require('./edr.darwin-universal.node');\n      } else {\n        nativeBinding = require('@nomicfoundation/edr-darwin-universal');\n      }\n      break;\n    } catch {}\n    switch (arch) {\n      case 'x64':\n        localFileExisted = existsSync(join(__dirname, 'edr.darwin-x64.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.darwin-x64.node');\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-darwin-x64');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case 'arm64':\n        localFileExisted = existsSync(join(__dirname, 'edr.darwin-arm64.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.darwin-arm64.node');\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-darwin-arm64');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on macOS: ${arch}`);\n    }\n    break;\n  case 'freebsd':\n    if (arch !== 'x64') {\n      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`);\n    }\n    localFileExisted = existsSync(join(__dirname, 'edr.freebsd-x64.node'));\n    try {\n      if (localFileExisted) {\n        nativeBinding = require('./edr.freebsd-x64.node');\n      } else {\n        nativeBinding = require('@nomicfoundation/edr-freebsd-x64');\n      }\n    } catch (e) {\n      loadError = e;\n    }\n    break;\n  case 'linux':\n    switch (arch) {\n      case 'x64':\n        if (isMusl()) {\n          localFileExisted = existsSync(join(__dirname, 'edr.linux-x64-musl.node'));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./edr.linux-x64-musl.node');\n            } else {\n              nativeBinding = require('@nomicfoundation/edr-linux-x64-musl');\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        } else {\n          localFileExisted = existsSync(join(__dirname, 'edr.linux-x64-gnu.node'));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./edr.linux-x64-gnu.node');\n            } else {\n              nativeBinding = require('@nomicfoundation/edr-linux-x64-gnu');\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        }\n        break;\n      case 'arm64':\n        if (isMusl()) {\n          localFileExisted = existsSync(join(__dirname, 'edr.linux-arm64-musl.node'));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./edr.linux-arm64-musl.node');\n            } else {\n              nativeBinding = require('@nomicfoundation/edr-linux-arm64-musl');\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        } else {\n          localFileExisted = existsSync(join(__dirname, 'edr.linux-arm64-gnu.node'));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./edr.linux-arm64-gnu.node');\n            } else {\n              nativeBinding = require('@nomicfoundation/edr-linux-arm64-gnu');\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        }\n        break;\n      case 'arm':\n        localFileExisted = existsSync(join(__dirname, 'edr.linux-arm-gnueabihf.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.linux-arm-gnueabihf.node');\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-linux-arm-gnueabihf');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case 'riscv64':\n        if (isMusl()) {\n          localFileExisted = existsSync(join(__dirname, 'edr.linux-riscv64-musl.node'));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./edr.linux-riscv64-musl.node');\n            } else {\n              nativeBinding = require('@nomicfoundation/edr-linux-riscv64-musl');\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        } else {\n          localFileExisted = existsSync(join(__dirname, 'edr.linux-riscv64-gnu.node'));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./edr.linux-riscv64-gnu.node');\n            } else {\n              nativeBinding = require('@nomicfoundation/edr-linux-riscv64-gnu');\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        }\n        break;\n      case 's390x':\n        localFileExisted = existsSync(join(__dirname, 'edr.linux-s390x-gnu.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.linux-s390x-gnu.node');\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-linux-s390x-gnu');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Linux: ${arch}`);\n    }\n    break;\n  default:\n    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);\n}\nif (!nativeBinding) {\n  if (loadError) {\n    throw loadError;\n  }\n  throw new Error(`Failed to load native binding`);\n}\nconst {\n  SpecId,\n  EdrContext,\n  MineOrdering,\n  Provider,\n  Response,\n  SuccessReason,\n  ExceptionalHalt,\n  RawTrace\n} = nativeBinding;\nmodule.exports.SpecId = SpecId;\nmodule.exports.EdrContext = EdrContext;\nmodule.exports.MineOrdering = MineOrdering;\nmodule.exports.Provider = Provider;\nmodule.exports.Response = Response;\nmodule.exports.SuccessReason = SuccessReason;\nmodule.exports.ExceptionalHalt = ExceptionalHalt;\nmodule.exports.RawTrace = RawTrace;","map":{"version":3,"names":["existsSync","readFileSync","require","join","platform","arch","process","nativeBinding","localFileExisted","loadError","isMusl","report","getReport","lddPath","execSync","toString","trim","includes","e","glibcVersionRuntime","header","__dirname","Error","SpecId","EdrContext","MineOrdering","Provider","Response","SuccessReason","ExceptionalHalt","RawTrace","module","exports"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/@nomicfoundation/edr/index.js"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\n\n/* auto-generated by NAPI-RS */\n\nconst { existsSync, readFileSync } = require('fs')\nconst { join } = require('path')\n\nconst { platform, arch } = process\n\nlet nativeBinding = null\nlet localFileExisted = false\nlet loadError = null\n\nfunction isMusl() {\n  // For Node 10\n  if (!process.report || typeof process.report.getReport !== 'function') {\n    try {\n      const lddPath = require('child_process').execSync('which ldd').toString().trim()\n      return readFileSync(lddPath, 'utf8').includes('musl')\n    } catch (e) {\n      return true\n    }\n  } else {\n    const { glibcVersionRuntime } = process.report.getReport().header\n    return !glibcVersionRuntime\n  }\n}\n\nswitch (platform) {\n  case 'android':\n    switch (arch) {\n      case 'arm64':\n        localFileExisted = existsSync(join(__dirname, 'edr.android-arm64.node'))\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.android-arm64.node')\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-android-arm64')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      case 'arm':\n        localFileExisted = existsSync(join(__dirname, 'edr.android-arm-eabi.node'))\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.android-arm-eabi.node')\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-android-arm-eabi')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      default:\n        throw new Error(`Unsupported architecture on Android ${arch}`)\n    }\n    break\n  case 'win32':\n    switch (arch) {\n      case 'x64':\n        localFileExisted = existsSync(\n          join(__dirname, 'edr.win32-x64-msvc.node')\n        )\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.win32-x64-msvc.node')\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-win32-x64-msvc')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      case 'ia32':\n        localFileExisted = existsSync(\n          join(__dirname, 'edr.win32-ia32-msvc.node')\n        )\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.win32-ia32-msvc.node')\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-win32-ia32-msvc')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      case 'arm64':\n        localFileExisted = existsSync(\n          join(__dirname, 'edr.win32-arm64-msvc.node')\n        )\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.win32-arm64-msvc.node')\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-win32-arm64-msvc')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      default:\n        throw new Error(`Unsupported architecture on Windows: ${arch}`)\n    }\n    break\n  case 'darwin':\n    localFileExisted = existsSync(join(__dirname, 'edr.darwin-universal.node'))\n    try {\n      if (localFileExisted) {\n        nativeBinding = require('./edr.darwin-universal.node')\n      } else {\n        nativeBinding = require('@nomicfoundation/edr-darwin-universal')\n      }\n      break\n    } catch {}\n    switch (arch) {\n      case 'x64':\n        localFileExisted = existsSync(join(__dirname, 'edr.darwin-x64.node'))\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.darwin-x64.node')\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-darwin-x64')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      case 'arm64':\n        localFileExisted = existsSync(\n          join(__dirname, 'edr.darwin-arm64.node')\n        )\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.darwin-arm64.node')\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-darwin-arm64')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      default:\n        throw new Error(`Unsupported architecture on macOS: ${arch}`)\n    }\n    break\n  case 'freebsd':\n    if (arch !== 'x64') {\n      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`)\n    }\n    localFileExisted = existsSync(join(__dirname, 'edr.freebsd-x64.node'))\n    try {\n      if (localFileExisted) {\n        nativeBinding = require('./edr.freebsd-x64.node')\n      } else {\n        nativeBinding = require('@nomicfoundation/edr-freebsd-x64')\n      }\n    } catch (e) {\n      loadError = e\n    }\n    break\n  case 'linux':\n    switch (arch) {\n      case 'x64':\n        if (isMusl()) {\n          localFileExisted = existsSync(\n            join(__dirname, 'edr.linux-x64-musl.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./edr.linux-x64-musl.node')\n            } else {\n              nativeBinding = require('@nomicfoundation/edr-linux-x64-musl')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        } else {\n          localFileExisted = existsSync(\n            join(__dirname, 'edr.linux-x64-gnu.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./edr.linux-x64-gnu.node')\n            } else {\n              nativeBinding = require('@nomicfoundation/edr-linux-x64-gnu')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        }\n        break\n      case 'arm64':\n        if (isMusl()) {\n          localFileExisted = existsSync(\n            join(__dirname, 'edr.linux-arm64-musl.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./edr.linux-arm64-musl.node')\n            } else {\n              nativeBinding = require('@nomicfoundation/edr-linux-arm64-musl')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        } else {\n          localFileExisted = existsSync(\n            join(__dirname, 'edr.linux-arm64-gnu.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./edr.linux-arm64-gnu.node')\n            } else {\n              nativeBinding = require('@nomicfoundation/edr-linux-arm64-gnu')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        }\n        break\n      case 'arm':\n        localFileExisted = existsSync(\n          join(__dirname, 'edr.linux-arm-gnueabihf.node')\n        )\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.linux-arm-gnueabihf.node')\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-linux-arm-gnueabihf')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      case 'riscv64':\n        if (isMusl()) {\n          localFileExisted = existsSync(\n            join(__dirname, 'edr.linux-riscv64-musl.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./edr.linux-riscv64-musl.node')\n            } else {\n              nativeBinding = require('@nomicfoundation/edr-linux-riscv64-musl')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        } else {\n          localFileExisted = existsSync(\n            join(__dirname, 'edr.linux-riscv64-gnu.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./edr.linux-riscv64-gnu.node')\n            } else {\n              nativeBinding = require('@nomicfoundation/edr-linux-riscv64-gnu')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        }\n        break\n      case 's390x':\n        localFileExisted = existsSync(\n          join(__dirname, 'edr.linux-s390x-gnu.node')\n        )\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./edr.linux-s390x-gnu.node')\n          } else {\n            nativeBinding = require('@nomicfoundation/edr-linux-s390x-gnu')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      default:\n        throw new Error(`Unsupported architecture on Linux: ${arch}`)\n    }\n    break\n  default:\n    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)\n}\n\nif (!nativeBinding) {\n  if (loadError) {\n    throw loadError\n  }\n  throw new Error(`Failed to load native binding`)\n}\n\nconst { SpecId, EdrContext, MineOrdering, Provider, Response, SuccessReason, ExceptionalHalt, RawTrace } = nativeBinding\n\nmodule.exports.SpecId = SpecId\nmodule.exports.EdrContext = EdrContext\nmodule.exports.MineOrdering = MineOrdering\nmodule.exports.Provider = Provider\nmodule.exports.Response = Response\nmodule.exports.SuccessReason = SuccessReason\nmodule.exports.ExceptionalHalt = ExceptionalHalt\nmodule.exports.RawTrace = RawTrace\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}