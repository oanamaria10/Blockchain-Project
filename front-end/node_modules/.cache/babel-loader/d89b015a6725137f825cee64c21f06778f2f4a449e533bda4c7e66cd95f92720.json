{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deriveKeyFromMnemonicAndPath = void 0;\nfunction deriveKeyFromMnemonicAndPath(mnemonic, hdPath, passphrase) {\n  const {\n    mnemonicToSeedSync\n  } = require(\"ethereum-cryptography/bip39\");\n  // NOTE: If mnemonic has space or newline at the beginning or end, it will be trimmed.\n  // This is because mnemonic containing them may generate different private keys.\n  const trimmedMnemonic = mnemonic.trim();\n  const seed = mnemonicToSeedSync(trimmedMnemonic, passphrase);\n  const {\n    HDKey\n  } = require(\"ethereum-cryptography/hdkey\");\n  const masterKey = HDKey.fromMasterSeed(seed);\n  const derived = masterKey.derive(hdPath);\n  return derived.privateKey === null ? undefined : Buffer.from(derived.privateKey);\n}\nexports.deriveKeyFromMnemonicAndPath = deriveKeyFromMnemonicAndPath;","map":{"version":3,"names":["deriveKeyFromMnemonicAndPath","mnemonic","hdPath","passphrase","mnemonicToSeedSync","require","trimmedMnemonic","trim","seed","HDKey","masterKey","fromMasterSeed","derived","derive","privateKey","undefined","Buffer","from","exports"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\hardhat\\src\\internal\\util\\keys-derivation.ts"],"sourcesContent":["import type { mnemonicToSeedSync as mnemonicToSeedSyncT } from \"ethereum-cryptography/bip39\";\nimport type { HDKey as HDKeyT } from \"ethereum-cryptography/hdkey\";\n\nexport function deriveKeyFromMnemonicAndPath(\n  mnemonic: string,\n  hdPath: string,\n  passphrase: string\n): Buffer | undefined {\n  const {\n    mnemonicToSeedSync,\n  }: {\n    mnemonicToSeedSync: typeof mnemonicToSeedSyncT;\n  } = require(\"ethereum-cryptography/bip39\");\n  // NOTE: If mnemonic has space or newline at the beginning or end, it will be trimmed.\n  // This is because mnemonic containing them may generate different private keys.\n  const trimmedMnemonic = mnemonic.trim();\n  const seed = mnemonicToSeedSync(trimmedMnemonic, passphrase);\n\n  const {\n    HDKey,\n  }: {\n    HDKey: typeof HDKeyT;\n  } = require(\"ethereum-cryptography/hdkey\");\n\n  const masterKey = HDKey.fromMasterSeed(seed);\n  const derived = masterKey.derive(hdPath);\n\n  return derived.privateKey === null\n    ? undefined\n    : Buffer.from(derived.privateKey);\n}\n"],"mappings":";;;;;;AAGA,SAAgBA,4BAA4BA,CAC1CC,QAAgB,EAChBC,MAAc,EACdC,UAAkB;EAElB,MAAM;IACJC;EAAkB,CACnB,GAEGC,OAAO,CAAC,6BAA6B,CAAC;EAC1C;EACA;EACA,MAAMC,eAAe,GAAGL,QAAQ,CAACM,IAAI,EAAE;EACvC,MAAMC,IAAI,GAAGJ,kBAAkB,CAACE,eAAe,EAAEH,UAAU,CAAC;EAE5D,MAAM;IACJM;EAAK,CACN,GAEGJ,OAAO,CAAC,6BAA6B,CAAC;EAE1C,MAAMK,SAAS,GAAGD,KAAK,CAACE,cAAc,CAACH,IAAI,CAAC;EAC5C,MAAMI,OAAO,GAAGF,SAAS,CAACG,MAAM,CAACX,MAAM,CAAC;EAExC,OAAOU,OAAO,CAACE,UAAU,KAAK,IAAI,GAC9BC,SAAS,GACTC,MAAM,CAACC,IAAI,CAACL,OAAO,CAACE,UAAU,CAAC;AACrC;AA3BAI,OAAA,CAAAlB,4BAAA,GAAAA,4BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}