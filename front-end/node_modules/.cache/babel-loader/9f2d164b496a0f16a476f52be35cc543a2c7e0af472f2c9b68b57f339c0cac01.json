{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\nconst {\n  kHeadersList\n} = require('../core/symbols');\nfunction isCTLExcludingHtab(value) {\n  if (value.length === 0) {\n    return false;\n  }\n  for (const char of value) {\n    const code = char.charCodeAt(0);\n    if (code >= 0x00 || code <= 0x08 || code >= 0x0A || code <= 0x1F || code === 0x7F) {\n      return false;\n    }\n  }\n}\n\n/**\n CHAR           = <any US-ASCII character (octets 0 - 127)>\n token          = 1*<any CHAR except CTLs or separators>\n separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                | \",\" | \";\" | \":\" | \"\\\" | <\">\n                | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                | \"{\" | \"}\" | SP | HT\n * @param {string} name\n */\nfunction validateCookieName(name) {\n  for (const char of name) {\n    const code = char.charCodeAt(0);\n    if (code <= 0x20 || code > 0x7F || char === '(' || char === ')' || char === '>' || char === '<' || char === '@' || char === ',' || char === ';' || char === ':' || char === '\\\\' || char === '\"' || char === '/' || char === '[' || char === ']' || char === '?' || char === '=' || char === '{' || char === '}') {\n      throw new Error('Invalid cookie name');\n    }\n  }\n}\n\n/**\n cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n                       ; US-ASCII characters excluding CTLs,\n                       ; whitespace DQUOTE, comma, semicolon,\n                       ; and backslash\n * @param {string} value\n */\nfunction validateCookieValue(value) {\n  for (const char of value) {\n    const code = char.charCodeAt(0);\n    if (code < 0x21 ||\n    // exclude CTLs (0-31)\n    code === 0x22 || code === 0x2C || code === 0x3B || code === 0x5C || code > 0x7E // non-ascii\n    ) {\n      throw new Error('Invalid header value');\n    }\n  }\n}\n\n/**\n * path-value        = <any CHAR except CTLs or \";\">\n * @param {string} path\n */\nfunction validateCookiePath(path) {\n  for (const char of path) {\n    const code = char.charCodeAt(0);\n    if (code < 0x21 || char === ';') {\n      throw new Error('Invalid cookie path');\n    }\n  }\n}\n\n/**\n * I have no idea why these values aren't allowed to be honest,\n * but Deno tests these. - Khafra\n * @param {string} domain\n */\nfunction validateCookieDomain(domain) {\n  if (domain.startsWith('-') || domain.endsWith('.') || domain.endsWith('-')) {\n    throw new Error('Invalid cookie domain');\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1\n * @param {number|Date} date\n  IMF-fixdate  = day-name \",\" SP date1 SP time-of-day SP GMT\n  ; fixed length/zone/capitalization subset of the format\n  ; see Section 3.3 of [RFC5322]\n\n  day-name     = %x4D.6F.6E ; \"Mon\", case-sensitive\n              / %x54.75.65 ; \"Tue\", case-sensitive\n              / %x57.65.64 ; \"Wed\", case-sensitive\n              / %x54.68.75 ; \"Thu\", case-sensitive\n              / %x46.72.69 ; \"Fri\", case-sensitive\n              / %x53.61.74 ; \"Sat\", case-sensitive\n              / %x53.75.6E ; \"Sun\", case-sensitive\n  date1        = day SP month SP year\n                  ; e.g., 02 Jun 1982\n\n  day          = 2DIGIT\n  month        = %x4A.61.6E ; \"Jan\", case-sensitive\n              / %x46.65.62 ; \"Feb\", case-sensitive\n              / %x4D.61.72 ; \"Mar\", case-sensitive\n              / %x41.70.72 ; \"Apr\", case-sensitive\n              / %x4D.61.79 ; \"May\", case-sensitive\n              / %x4A.75.6E ; \"Jun\", case-sensitive\n              / %x4A.75.6C ; \"Jul\", case-sensitive\n              / %x41.75.67 ; \"Aug\", case-sensitive\n              / %x53.65.70 ; \"Sep\", case-sensitive\n              / %x4F.63.74 ; \"Oct\", case-sensitive\n              / %x4E.6F.76 ; \"Nov\", case-sensitive\n              / %x44.65.63 ; \"Dec\", case-sensitive\n  year         = 4DIGIT\n\n  GMT          = %x47.4D.54 ; \"GMT\", case-sensitive\n\n  time-of-day  = hour \":\" minute \":\" second\n              ; 00:00:00 - 23:59:60 (leap second)\n\n  hour         = 2DIGIT\n  minute       = 2DIGIT\n  second       = 2DIGIT\n */\nfunction toIMFDate(date) {\n  if (typeof date === 'number') {\n    date = new Date(date);\n  }\n  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  const dayName = days[date.getUTCDay()];\n  const day = date.getUTCDate().toString().padStart(2, '0');\n  const month = months[date.getUTCMonth()];\n  const year = date.getUTCFullYear();\n  const hour = date.getUTCHours().toString().padStart(2, '0');\n  const minute = date.getUTCMinutes().toString().padStart(2, '0');\n  const second = date.getUTCSeconds().toString().padStart(2, '0');\n  return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;\n}\n\n/**\n max-age-av        = \"Max-Age=\" non-zero-digit *DIGIT\n                       ; In practice, both expires-av and max-age-av\n                       ; are limited to dates representable by the\n                       ; user agent.\n * @param {number} maxAge\n */\nfunction validateCookieMaxAge(maxAge) {\n  if (maxAge < 0) {\n    throw new Error('Invalid cookie max-age');\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1\n * @param {import('./index').Cookie} cookie\n */\nfunction stringify(cookie) {\n  if (cookie.name.length === 0) {\n    return null;\n  }\n  validateCookieName(cookie.name);\n  validateCookieValue(cookie.value);\n  const out = [`${cookie.name}=${cookie.value}`];\n\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2\n  if (cookie.name.startsWith('__Secure-')) {\n    cookie.secure = true;\n  }\n  if (cookie.name.startsWith('__Host-')) {\n    cookie.secure = true;\n    cookie.domain = null;\n    cookie.path = '/';\n  }\n  if (cookie.secure) {\n    out.push('Secure');\n  }\n  if (cookie.httpOnly) {\n    out.push('HttpOnly');\n  }\n  if (typeof cookie.maxAge === 'number') {\n    validateCookieMaxAge(cookie.maxAge);\n    out.push(`Max-Age=${cookie.maxAge}`);\n  }\n  if (cookie.domain) {\n    validateCookieDomain(cookie.domain);\n    out.push(`Domain=${cookie.domain}`);\n  }\n  if (cookie.path) {\n    validateCookiePath(cookie.path);\n    out.push(`Path=${cookie.path}`);\n  }\n  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {\n    out.push(`Expires=${toIMFDate(cookie.expires)}`);\n  }\n  if (cookie.sameSite) {\n    out.push(`SameSite=${cookie.sameSite}`);\n  }\n  for (const part of cookie.unparsed) {\n    if (!part.includes('=')) {\n      throw new Error('Invalid unparsed');\n    }\n    const [key, ...value] = part.split('=');\n    out.push(`${key.trim()}=${value.join('=')}`);\n  }\n  return out.join('; ');\n}\nlet kHeadersListNode;\nfunction getHeadersList(headers) {\n  if (headers[kHeadersList]) {\n    return headers[kHeadersList];\n  }\n  if (!kHeadersListNode) {\n    kHeadersListNode = Object.getOwnPropertySymbols(headers).find(symbol => symbol.description === 'headers list');\n    assert(kHeadersListNode, 'Headers cannot be parsed');\n  }\n  const headersList = headers[kHeadersListNode];\n  assert(headersList);\n  return headersList;\n}\nmodule.exports = {\n  isCTLExcludingHtab,\n  stringify,\n  getHeadersList\n};","map":{"version":3,"names":["assert","require","kHeadersList","isCTLExcludingHtab","value","length","char","code","charCodeAt","validateCookieName","name","Error","validateCookieValue","validateCookiePath","path","validateCookieDomain","domain","startsWith","endsWith","toIMFDate","date","Date","days","months","dayName","getUTCDay","day","getUTCDate","toString","padStart","month","getUTCMonth","year","getUTCFullYear","hour","getUTCHours","minute","getUTCMinutes","second","getUTCSeconds","validateCookieMaxAge","maxAge","stringify","cookie","out","secure","push","httpOnly","expires","sameSite","part","unparsed","includes","key","split","trim","join","kHeadersListNode","getHeadersList","headers","Object","getOwnPropertySymbols","find","symbol","description","headersList","module","exports"],"sources":["C:/Users/rares/Desktop/Blockchain/Proiect/node_modules/undici/lib/cookies/util.js"],"sourcesContent":["'use strict'\n\nconst assert = require('assert')\nconst { kHeadersList } = require('../core/symbols')\n\nfunction isCTLExcludingHtab (value) {\n  if (value.length === 0) {\n    return false\n  }\n\n  for (const char of value) {\n    const code = char.charCodeAt(0)\n\n    if (\n      (code >= 0x00 || code <= 0x08) ||\n      (code >= 0x0A || code <= 0x1F) ||\n      code === 0x7F\n    ) {\n      return false\n    }\n  }\n}\n\n/**\n CHAR           = <any US-ASCII character (octets 0 - 127)>\n token          = 1*<any CHAR except CTLs or separators>\n separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                | \",\" | \";\" | \":\" | \"\\\" | <\">\n                | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                | \"{\" | \"}\" | SP | HT\n * @param {string} name\n */\nfunction validateCookieName (name) {\n  for (const char of name) {\n    const code = char.charCodeAt(0)\n\n    if (\n      (code <= 0x20 || code > 0x7F) ||\n      char === '(' ||\n      char === ')' ||\n      char === '>' ||\n      char === '<' ||\n      char === '@' ||\n      char === ',' ||\n      char === ';' ||\n      char === ':' ||\n      char === '\\\\' ||\n      char === '\"' ||\n      char === '/' ||\n      char === '[' ||\n      char === ']' ||\n      char === '?' ||\n      char === '=' ||\n      char === '{' ||\n      char === '}'\n    ) {\n      throw new Error('Invalid cookie name')\n    }\n  }\n}\n\n/**\n cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n                       ; US-ASCII characters excluding CTLs,\n                       ; whitespace DQUOTE, comma, semicolon,\n                       ; and backslash\n * @param {string} value\n */\nfunction validateCookieValue (value) {\n  for (const char of value) {\n    const code = char.charCodeAt(0)\n\n    if (\n      code < 0x21 || // exclude CTLs (0-31)\n      code === 0x22 ||\n      code === 0x2C ||\n      code === 0x3B ||\n      code === 0x5C ||\n      code > 0x7E // non-ascii\n    ) {\n      throw new Error('Invalid header value')\n    }\n  }\n}\n\n/**\n * path-value        = <any CHAR except CTLs or \";\">\n * @param {string} path\n */\nfunction validateCookiePath (path) {\n  for (const char of path) {\n    const code = char.charCodeAt(0)\n\n    if (code < 0x21 || char === ';') {\n      throw new Error('Invalid cookie path')\n    }\n  }\n}\n\n/**\n * I have no idea why these values aren't allowed to be honest,\n * but Deno tests these. - Khafra\n * @param {string} domain\n */\nfunction validateCookieDomain (domain) {\n  if (\n    domain.startsWith('-') ||\n    domain.endsWith('.') ||\n    domain.endsWith('-')\n  ) {\n    throw new Error('Invalid cookie domain')\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1\n * @param {number|Date} date\n  IMF-fixdate  = day-name \",\" SP date1 SP time-of-day SP GMT\n  ; fixed length/zone/capitalization subset of the format\n  ; see Section 3.3 of [RFC5322]\n\n  day-name     = %x4D.6F.6E ; \"Mon\", case-sensitive\n              / %x54.75.65 ; \"Tue\", case-sensitive\n              / %x57.65.64 ; \"Wed\", case-sensitive\n              / %x54.68.75 ; \"Thu\", case-sensitive\n              / %x46.72.69 ; \"Fri\", case-sensitive\n              / %x53.61.74 ; \"Sat\", case-sensitive\n              / %x53.75.6E ; \"Sun\", case-sensitive\n  date1        = day SP month SP year\n                  ; e.g., 02 Jun 1982\n\n  day          = 2DIGIT\n  month        = %x4A.61.6E ; \"Jan\", case-sensitive\n              / %x46.65.62 ; \"Feb\", case-sensitive\n              / %x4D.61.72 ; \"Mar\", case-sensitive\n              / %x41.70.72 ; \"Apr\", case-sensitive\n              / %x4D.61.79 ; \"May\", case-sensitive\n              / %x4A.75.6E ; \"Jun\", case-sensitive\n              / %x4A.75.6C ; \"Jul\", case-sensitive\n              / %x41.75.67 ; \"Aug\", case-sensitive\n              / %x53.65.70 ; \"Sep\", case-sensitive\n              / %x4F.63.74 ; \"Oct\", case-sensitive\n              / %x4E.6F.76 ; \"Nov\", case-sensitive\n              / %x44.65.63 ; \"Dec\", case-sensitive\n  year         = 4DIGIT\n\n  GMT          = %x47.4D.54 ; \"GMT\", case-sensitive\n\n  time-of-day  = hour \":\" minute \":\" second\n              ; 00:00:00 - 23:59:60 (leap second)\n\n  hour         = 2DIGIT\n  minute       = 2DIGIT\n  second       = 2DIGIT\n */\nfunction toIMFDate (date) {\n  if (typeof date === 'number') {\n    date = new Date(date)\n  }\n\n  const days = [\n    'Sun', 'Mon', 'Tue', 'Wed',\n    'Thu', 'Fri', 'Sat'\n  ]\n\n  const months = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n  ]\n\n  const dayName = days[date.getUTCDay()]\n  const day = date.getUTCDate().toString().padStart(2, '0')\n  const month = months[date.getUTCMonth()]\n  const year = date.getUTCFullYear()\n  const hour = date.getUTCHours().toString().padStart(2, '0')\n  const minute = date.getUTCMinutes().toString().padStart(2, '0')\n  const second = date.getUTCSeconds().toString().padStart(2, '0')\n\n  return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`\n}\n\n/**\n max-age-av        = \"Max-Age=\" non-zero-digit *DIGIT\n                       ; In practice, both expires-av and max-age-av\n                       ; are limited to dates representable by the\n                       ; user agent.\n * @param {number} maxAge\n */\nfunction validateCookieMaxAge (maxAge) {\n  if (maxAge < 0) {\n    throw new Error('Invalid cookie max-age')\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1\n * @param {import('./index').Cookie} cookie\n */\nfunction stringify (cookie) {\n  if (cookie.name.length === 0) {\n    return null\n  }\n\n  validateCookieName(cookie.name)\n  validateCookieValue(cookie.value)\n\n  const out = [`${cookie.name}=${cookie.value}`]\n\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2\n  if (cookie.name.startsWith('__Secure-')) {\n    cookie.secure = true\n  }\n\n  if (cookie.name.startsWith('__Host-')) {\n    cookie.secure = true\n    cookie.domain = null\n    cookie.path = '/'\n  }\n\n  if (cookie.secure) {\n    out.push('Secure')\n  }\n\n  if (cookie.httpOnly) {\n    out.push('HttpOnly')\n  }\n\n  if (typeof cookie.maxAge === 'number') {\n    validateCookieMaxAge(cookie.maxAge)\n    out.push(`Max-Age=${cookie.maxAge}`)\n  }\n\n  if (cookie.domain) {\n    validateCookieDomain(cookie.domain)\n    out.push(`Domain=${cookie.domain}`)\n  }\n\n  if (cookie.path) {\n    validateCookiePath(cookie.path)\n    out.push(`Path=${cookie.path}`)\n  }\n\n  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {\n    out.push(`Expires=${toIMFDate(cookie.expires)}`)\n  }\n\n  if (cookie.sameSite) {\n    out.push(`SameSite=${cookie.sameSite}`)\n  }\n\n  for (const part of cookie.unparsed) {\n    if (!part.includes('=')) {\n      throw new Error('Invalid unparsed')\n    }\n\n    const [key, ...value] = part.split('=')\n\n    out.push(`${key.trim()}=${value.join('=')}`)\n  }\n\n  return out.join('; ')\n}\n\nlet kHeadersListNode\n\nfunction getHeadersList (headers) {\n  if (headers[kHeadersList]) {\n    return headers[kHeadersList]\n  }\n\n  if (!kHeadersListNode) {\n    kHeadersListNode = Object.getOwnPropertySymbols(headers).find(\n      (symbol) => symbol.description === 'headers list'\n    )\n\n    assert(kHeadersListNode, 'Headers cannot be parsed')\n  }\n\n  const headersList = headers[kHeadersListNode]\n  assert(headersList)\n\n  return headersList\n}\n\nmodule.exports = {\n  isCTLExcludingHtab,\n  stringify,\n  getHeadersList\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}