{"ast":null,"code":"import { addHexPrefix, bigIntToHex } from './bytes.js';\nimport { isHexPrefixed } from './internal.js';\n/**\n * Parses the geth genesis state into Blockchain {@link GenesisState}\n * @param json representing the `alloc` key in a Geth genesis file\n */\nexport function parseGethGenesisState(json) {\n  const state = {};\n  for (let address of Object.keys(json.alloc)) {\n    let {\n      balance,\n      code,\n      storage,\n      nonce\n    } = json.alloc[address];\n    // create a map with lowercase for easy lookups\n    address = addHexPrefix(address.toLowerCase());\n    balance = isHexPrefixed(balance) ? balance : bigIntToHex(BigInt(balance));\n    code = code !== undefined ? addHexPrefix(code) : undefined;\n    storage = storage !== undefined ? Object.entries(storage) : undefined;\n    nonce = nonce !== undefined ? addHexPrefix(nonce) : undefined;\n    state[address] = [balance, code, storage, nonce];\n  }\n  return state;\n}","map":{"version":3,"names":["addHexPrefix","bigIntToHex","isHexPrefixed","parseGethGenesisState","json","state","address","Object","keys","alloc","balance","code","storage","nonce","toLowerCase","BigInt","undefined","entries"],"sources":["C:\\Users\\rares\\Desktop\\Blockchain\\Proiect\\node_modules\\@nomicfoundation\\ethereumjs-util\\src\\genesis.ts"],"sourcesContent":["import { addHexPrefix, bigIntToHex } from './bytes.js'\nimport { isHexPrefixed } from './internal.js'\n\nimport type { PrefixedHexString } from './types.js'\n\nexport type StoragePair = [key: PrefixedHexString, value: PrefixedHexString]\n\nexport type AccountState = [\n  balance: PrefixedHexString,\n  code: PrefixedHexString,\n  storage: Array<StoragePair>,\n  nonce: PrefixedHexString\n]\n\n/**\n * If you are using a custom chain {@link Common}, pass the genesis state.\n *\n * Pattern 1 (with genesis state see {@link GenesisState} for format):\n *\n * ```javascript\n * {\n *   '0x0...01': '0x100', // For EoA\n * }\n * ```\n *\n * Pattern 2 (with complex genesis state, containing contract accounts and storage).\n * Note that in {@link AccountState} there are two\n * accepted types. This allows to easily insert accounts in the genesis state:\n *\n * A complex genesis state with Contract and EoA states would have the following format:\n *\n * ```javascript\n * {\n *   '0x0...01': '0x100', // For EoA\n *   '0x0...02': ['0x1', '0xRUNTIME_BYTECODE', [[storageKey1, storageValue1], [storageKey2, storageValue2]]] // For contracts\n * }\n * ```\n */\nexport interface GenesisState {\n  [key: PrefixedHexString]: PrefixedHexString | AccountState\n}\n\n/**\n * Parses the geth genesis state into Blockchain {@link GenesisState}\n * @param json representing the `alloc` key in a Geth genesis file\n */\nexport function parseGethGenesisState(json: any) {\n  const state: GenesisState = {}\n  for (let address of Object.keys(json.alloc)) {\n    let { balance, code, storage, nonce } = json.alloc[address]\n    // create a map with lowercase for easy lookups\n    address = addHexPrefix(address.toLowerCase())\n    balance = isHexPrefixed(balance) ? balance : bigIntToHex(BigInt(balance))\n    code = code !== undefined ? addHexPrefix(code) : undefined\n    storage = storage !== undefined ? Object.entries(storage) : undefined\n    nonce = nonce !== undefined ? addHexPrefix(nonce) : undefined\n    state[address] = [balance, code, storage, nonce]\n  }\n  return state\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,WAAW,QAAQ,YAAY;AACtD,SAASC,aAAa,QAAQ,eAAe;AAyC7C;;;;AAIA,OAAM,SAAUC,qBAAqBA,CAACC,IAAS;EAC7C,MAAMC,KAAK,GAAiB,EAAE;EAC9B,KAAK,IAAIC,OAAO,IAAIC,MAAM,CAACC,IAAI,CAACJ,IAAI,CAACK,KAAK,CAAC,EAAE;IAC3C,IAAI;MAAEC,OAAO;MAAEC,IAAI;MAAEC,OAAO;MAAEC;IAAK,CAAE,GAAGT,IAAI,CAACK,KAAK,CAACH,OAAO,CAAC;IAC3D;IACAA,OAAO,GAAGN,YAAY,CAACM,OAAO,CAACQ,WAAW,EAAE,CAAC;IAC7CJ,OAAO,GAAGR,aAAa,CAACQ,OAAO,CAAC,GAAGA,OAAO,GAAGT,WAAW,CAACc,MAAM,CAACL,OAAO,CAAC,CAAC;IACzEC,IAAI,GAAGA,IAAI,KAAKK,SAAS,GAAGhB,YAAY,CAACW,IAAI,CAAC,GAAGK,SAAS;IAC1DJ,OAAO,GAAGA,OAAO,KAAKI,SAAS,GAAGT,MAAM,CAACU,OAAO,CAACL,OAAO,CAAC,GAAGI,SAAS;IACrEH,KAAK,GAAGA,KAAK,KAAKG,SAAS,GAAGhB,YAAY,CAACa,KAAK,CAAC,GAAGG,SAAS;IAC7DX,KAAK,CAACC,OAAO,CAAC,GAAG,CAACI,OAAO,EAAEC,IAAI,EAAEC,OAAO,EAAEC,KAAK,CAAC;;EAElD,OAAOR,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}