{"ast":null,"code":"/**\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\n *  are sufficent for most developers, but this is provided to\n *  fascilitate more complex Signers.\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */\nimport { resolveAddress } from \"../address/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport { defineProperties, getBigInt, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\nimport { copyRequest } from \"./provider.js\";\nfunction checkProvider(signer, operation) {\n  if (signer.provider) {\n    return signer.provider;\n  }\n  assert(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", {\n    operation\n  });\n}\nasync function populate(signer, tx) {\n  let pop = copyRequest(tx);\n  if (pop.to != null) {\n    pop.to = resolveAddress(pop.to, signer);\n  }\n  if (pop.from != null) {\n    const from = pop.from;\n    pop.from = Promise.all([signer.getAddress(), resolveAddress(from, signer)]).then(([address, from]) => {\n      assertArgument(address.toLowerCase() === from.toLowerCase(), \"transaction from mismatch\", \"tx.from\", from);\n      return address;\n    });\n  } else {\n    pop.from = signer.getAddress();\n  }\n  return await resolveProperties(pop);\n}\n/**\n *  An **AbstractSigner** includes most of teh functionality required\n *  to get a [[Signer]] working as expected, but requires a few\n *  Signer-specific methods be overridden.\n *\n */\nexport class AbstractSigner {\n  /**\n   *  The provider this signer is connected to.\n   */\n  provider;\n  /**\n   *  Creates a new Signer connected to %%provider%%.\n   */\n  constructor(provider) {\n    defineProperties(this, {\n      provider: provider || null\n    });\n  }\n  async getNonce(blockTag) {\n    return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n  }\n  async populateCall(tx) {\n    const pop = await populate(this, tx);\n    return pop;\n  }\n  async populateTransaction(tx) {\n    const provider = checkProvider(this, \"populateTransaction\");\n    const pop = await populate(this, tx);\n    if (pop.nonce == null) {\n      pop.nonce = await this.getNonce(\"pending\");\n    }\n    if (pop.gasLimit == null) {\n      pop.gasLimit = await this.estimateGas(pop);\n    }\n    // Populate the chain ID\n    const network = await this.provider.getNetwork();\n    if (pop.chainId != null) {\n      const chainId = getBigInt(pop.chainId);\n      assertArgument(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n    } else {\n      pop.chainId = network.chainId;\n    }\n    // Do not allow mixing pre-eip-1559 and eip-1559 properties\n    const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;\n    if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n      assertArgument(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n    } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n      assertArgument(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n    }\n    if ((pop.type === 2 || pop.type == null) && pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null) {\n      // Fully-formed EIP-1559 transaction (skip getFeeData)\n      pop.type = 2;\n    } else if (pop.type === 0 || pop.type === 1) {\n      // Explicit Legacy or EIP-2930 transaction\n      // We need to get fee data to determine things\n      const feeData = await provider.getFeeData();\n      assert(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getGasPrice\"\n      });\n      // Populate missing gasPrice\n      if (pop.gasPrice == null) {\n        pop.gasPrice = feeData.gasPrice;\n      }\n    } else {\n      // We need to get fee data to determine things\n      const feeData = await provider.getFeeData();\n      if (pop.type == null) {\n        // We need to auto-detect the intended type of this transaction...\n        if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n          // The network supports EIP-1559!\n          // Upgrade transaction from null to eip-1559\n          pop.type = 2;\n          if (pop.gasPrice != null) {\n            // Using legacy gasPrice property on an eip-1559 network,\n            // so use gasPrice as both fee properties\n            const gasPrice = pop.gasPrice;\n            delete pop.gasPrice;\n            pop.maxFeePerGas = gasPrice;\n            pop.maxPriorityFeePerGas = gasPrice;\n          } else {\n            // Populate missing fee data\n            if (pop.maxFeePerGas == null) {\n              pop.maxFeePerGas = feeData.maxFeePerGas;\n            }\n            if (pop.maxPriorityFeePerGas == null) {\n              pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n            }\n          }\n        } else if (feeData.gasPrice != null) {\n          // Network doesn't support EIP-1559...\n          // ...but they are trying to use EIP-1559 properties\n          assert(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"populateTransaction\"\n          });\n          // Populate missing fee data\n          if (pop.gasPrice == null) {\n            pop.gasPrice = feeData.gasPrice;\n          }\n          // Explicitly set untyped transaction to legacy\n          // @TODO: Maybe this shold allow type 1?\n          pop.type = 0;\n        } else {\n          // getFeeData has failed us.\n          assert(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"signer.getFeeData\"\n          });\n        }\n      } else if (pop.type === 2 || pop.type === 3) {\n        // Explicitly using EIP-1559 or EIP-4844\n        // Populate missing fee data\n        if (pop.maxFeePerGas == null) {\n          pop.maxFeePerGas = feeData.maxFeePerGas;\n        }\n        if (pop.maxPriorityFeePerGas == null) {\n          pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n        }\n      }\n    }\n    //@TOOD: Don't await all over the place; save them up for\n    // the end for better batching\n    return await resolveProperties(pop);\n  }\n  async estimateGas(tx) {\n    return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n  }\n  async call(tx) {\n    return checkProvider(this, \"call\").call(await this.populateCall(tx));\n  }\n  async resolveName(name) {\n    const provider = checkProvider(this, \"resolveName\");\n    return await provider.resolveName(name);\n  }\n  async sendTransaction(tx) {\n    const provider = checkProvider(this, \"sendTransaction\");\n    const pop = await this.populateTransaction(tx);\n    delete pop.from;\n    const txObj = Transaction.from(pop);\n    return await provider.broadcastTransaction(await this.signTransaction(txObj));\n  }\n}\n/**\n *  A **VoidSigner** is a class deisgned to allow an address to be used\n *  in any API which accepts a Signer, but for which there are no\n *  credentials available to perform any actual signing.\n *\n *  This for example allow impersonating an account for the purpose of\n *  static calls or estimating gas, but does not allow sending transactions.\n */\nexport class VoidSigner extends AbstractSigner {\n  /**\n   *  The signer address.\n   */\n  address;\n  /**\n   *  Creates a new **VoidSigner** with %%address%% attached to\n   *  %%provider%%.\n   */\n  constructor(address, provider) {\n    super(provider);\n    defineProperties(this, {\n      address\n    });\n  }\n  async getAddress() {\n    return this.address;\n  }\n  connect(provider) {\n    return new VoidSigner(this.address, provider);\n  }\n  #throwUnsupported(suffix, operation) {\n    assert(false, `VoidSigner cannot sign ${suffix}`, \"UNSUPPORTED_OPERATION\", {\n      operation\n    });\n  }\n  async signTransaction(tx) {\n    this.#throwUnsupported(\"transactions\", \"signTransaction\");\n  }\n  async signMessage(message) {\n    this.#throwUnsupported(\"messages\", \"signMessage\");\n  }\n  async signTypedData(domain, types, value) {\n    this.#throwUnsupported(\"typed-data\", \"signTypedData\");\n  }\n}","map":{"version":3,"names":["resolveAddress","Transaction","defineProperties","getBigInt","resolveProperties","assert","assertArgument","copyRequest","checkProvider","signer","operation","provider","populate","tx","pop","to","from","Promise","all","getAddress","then","address","toLowerCase","AbstractSigner","constructor","getNonce","blockTag","getTransactionCount","populateCall","populateTransaction","nonce","gasLimit","estimateGas","network","getNetwork","chainId","hasEip1559","maxFeePerGas","maxPriorityFeePerGas","gasPrice","type","feeData","getFeeData","call","resolveName","name","sendTransaction","txObj","broadcastTransaction","signTransaction","VoidSigner","connect","throwUnsupported","#throwUnsupported","suffix","signMessage","message","signTypedData","domain","types","value"],"sources":["C:/Users/Oana/Desktop/Blockchain/Blockchain-Project/node_modules/ethers/lib.esm/providers/abstract-signer.js"],"sourcesContent":["/**\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\n *  are sufficent for most developers, but this is provided to\n *  fascilitate more complex Signers.\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */\nimport { resolveAddress } from \"../address/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport { defineProperties, getBigInt, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\nimport { copyRequest } from \"./provider.js\";\nfunction checkProvider(signer, operation) {\n    if (signer.provider) {\n        return signer.provider;\n    }\n    assert(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", { operation });\n}\nasync function populate(signer, tx) {\n    let pop = copyRequest(tx);\n    if (pop.to != null) {\n        pop.to = resolveAddress(pop.to, signer);\n    }\n    if (pop.from != null) {\n        const from = pop.from;\n        pop.from = Promise.all([\n            signer.getAddress(),\n            resolveAddress(from, signer)\n        ]).then(([address, from]) => {\n            assertArgument(address.toLowerCase() === from.toLowerCase(), \"transaction from mismatch\", \"tx.from\", from);\n            return address;\n        });\n    }\n    else {\n        pop.from = signer.getAddress();\n    }\n    return await resolveProperties(pop);\n}\n/**\n *  An **AbstractSigner** includes most of teh functionality required\n *  to get a [[Signer]] working as expected, but requires a few\n *  Signer-specific methods be overridden.\n *\n */\nexport class AbstractSigner {\n    /**\n     *  The provider this signer is connected to.\n     */\n    provider;\n    /**\n     *  Creates a new Signer connected to %%provider%%.\n     */\n    constructor(provider) {\n        defineProperties(this, { provider: (provider || null) });\n    }\n    async getNonce(blockTag) {\n        return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n    }\n    async populateCall(tx) {\n        const pop = await populate(this, tx);\n        return pop;\n    }\n    async populateTransaction(tx) {\n        const provider = checkProvider(this, \"populateTransaction\");\n        const pop = await populate(this, tx);\n        if (pop.nonce == null) {\n            pop.nonce = await this.getNonce(\"pending\");\n        }\n        if (pop.gasLimit == null) {\n            pop.gasLimit = await this.estimateGas(pop);\n        }\n        // Populate the chain ID\n        const network = await (this.provider).getNetwork();\n        if (pop.chainId != null) {\n            const chainId = getBigInt(pop.chainId);\n            assertArgument(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n        }\n        else {\n            pop.chainId = network.chainId;\n        }\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = (pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null);\n        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n            assertArgument(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n        }\n        else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n            assertArgument(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n        }\n        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            pop.type = 2;\n        }\n        else if (pop.type === 0 || pop.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n            assert(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getGasPrice\"\n            });\n            // Populate missing gasPrice\n            if (pop.gasPrice == null) {\n                pop.gasPrice = feeData.gasPrice;\n            }\n        }\n        else {\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n            if (pop.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n                    // Upgrade transaction from null to eip-1559\n                    pop.type = 2;\n                    if (pop.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = pop.gasPrice;\n                        delete pop.gasPrice;\n                        pop.maxFeePerGas = gasPrice;\n                        pop.maxPriorityFeePerGas = gasPrice;\n                    }\n                    else {\n                        // Populate missing fee data\n                        if (pop.maxFeePerGas == null) {\n                            pop.maxFeePerGas = feeData.maxFeePerGas;\n                        }\n                        if (pop.maxPriorityFeePerGas == null) {\n                            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                        }\n                    }\n                }\n                else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n                    // ...but they are trying to use EIP-1559 properties\n                    assert(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"populateTransaction\"\n                    });\n                    // Populate missing fee data\n                    if (pop.gasPrice == null) {\n                        pop.gasPrice = feeData.gasPrice;\n                    }\n                    // Explicitly set untyped transaction to legacy\n                    // @TODO: Maybe this shold allow type 1?\n                    pop.type = 0;\n                }\n                else {\n                    // getFeeData has failed us.\n                    assert(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"signer.getFeeData\"\n                    });\n                }\n            }\n            else if (pop.type === 2 || pop.type === 3) {\n                // Explicitly using EIP-1559 or EIP-4844\n                // Populate missing fee data\n                if (pop.maxFeePerGas == null) {\n                    pop.maxFeePerGas = feeData.maxFeePerGas;\n                }\n                if (pop.maxPriorityFeePerGas == null) {\n                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                }\n            }\n        }\n        //@TOOD: Don't await all over the place; save them up for\n        // the end for better batching\n        return await resolveProperties(pop);\n    }\n    async estimateGas(tx) {\n        return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n    }\n    async call(tx) {\n        return checkProvider(this, \"call\").call(await this.populateCall(tx));\n    }\n    async resolveName(name) {\n        const provider = checkProvider(this, \"resolveName\");\n        return await provider.resolveName(name);\n    }\n    async sendTransaction(tx) {\n        const provider = checkProvider(this, \"sendTransaction\");\n        const pop = await this.populateTransaction(tx);\n        delete pop.from;\n        const txObj = Transaction.from(pop);\n        return await provider.broadcastTransaction(await this.signTransaction(txObj));\n    }\n}\n/**\n *  A **VoidSigner** is a class deisgned to allow an address to be used\n *  in any API which accepts a Signer, but for which there are no\n *  credentials available to perform any actual signing.\n *\n *  This for example allow impersonating an account for the purpose of\n *  static calls or estimating gas, but does not allow sending transactions.\n */\nexport class VoidSigner extends AbstractSigner {\n    /**\n     *  The signer address.\n     */\n    address;\n    /**\n     *  Creates a new **VoidSigner** with %%address%% attached to\n     *  %%provider%%.\n     */\n    constructor(address, provider) {\n        super(provider);\n        defineProperties(this, { address });\n    }\n    async getAddress() { return this.address; }\n    connect(provider) {\n        return new VoidSigner(this.address, provider);\n    }\n    #throwUnsupported(suffix, operation) {\n        assert(false, `VoidSigner cannot sign ${suffix}`, \"UNSUPPORTED_OPERATION\", { operation });\n    }\n    async signTransaction(tx) {\n        this.#throwUnsupported(\"transactions\", \"signTransaction\");\n    }\n    async signMessage(message) {\n        this.#throwUnsupported(\"messages\", \"signMessage\");\n    }\n    async signTypedData(domain, types, value) {\n        this.#throwUnsupported(\"typed-data\", \"signTypedData\");\n    }\n}\n//# sourceMappingURL=abstract-signer.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}